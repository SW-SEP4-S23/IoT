
Firmware0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000054e  00800200  000069b2  00006a46  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000069b2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001047  0080074e  0080074e  00006f94  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00006f94  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007020  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000ab8  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000e87e  00000000  00000000  00007b18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003c61  00000000  00000000  00016396  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000070b2  00000000  00000000  00019ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002528  00000000  00000000  000210ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00004440  00000000  00000000  000235d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000c841  00000000  00000000  00027a14  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000b88  00000000  00000000  00034255  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	32 c5       	rjmp	.+2660   	; 0xa96 <__vector_12>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <__vector_21>
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 99 2a 	jmp	0x5532	; 0x5532 <__vector_24>
      64:	0c 94 4c 27 	jmp	0x4e98	; 0x4e98 <__vector_25>
      68:	0c 94 9e 27 	jmp	0x4f3c	; 0x4f3c <__vector_26>
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 e2 27 	jmp	0x4fc4	; 0x4fc4 <__vector_36>
      94:	0c 94 34 28 	jmp	0x5068	; 0x5068 <__vector_37>
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 c8 2d 	jmp	0x5b90	; 0x5b90 <__vector_39>
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 78 28 	jmp	0x50f0	; 0x50f0 <__vector_51>
      d0:	0c 94 ca 28 	jmp	0x5194	; 0x5194 <__vector_52>
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 0e 29 	jmp	0x521c	; 0x521c <__vector_54>
      dc:	0c 94 60 29 	jmp	0x52c0	; 0x52c0 <__vector_55>
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	be 01       	movw	r22, r28
      e6:	be 01       	movw	r22, r28
      e8:	be 01       	movw	r22, r28
      ea:	f8 01       	movw	r30, r16
      ec:	00 02       	muls	r16, r16
      ee:	16 02       	muls	r17, r22
      f0:	be 01       	movw	r22, r28
      f2:	be 01       	movw	r22, r28
      f4:	f8 01       	movw	r30, r16
      f6:	00 02       	muls	r16, r16
      f8:	ea 2d       	mov	r30, r10
      fa:	5a 2e       	mov	r5, r26
      fc:	5a 2e       	mov	r5, r26
      fe:	5a 2e       	mov	r5, r26
     100:	5a 2e       	mov	r5, r26
     102:	5a 2e       	mov	r5, r26
     104:	5a 2e       	mov	r5, r26
     106:	5a 2e       	mov	r5, r26
     108:	ea 2d       	mov	r30, r10
     10a:	5a 2e       	mov	r5, r26
     10c:	5a 2e       	mov	r5, r26
     10e:	5a 2e       	mov	r5, r26
     110:	5a 2e       	mov	r5, r26
     112:	5a 2e       	mov	r5, r26
     114:	5a 2e       	mov	r5, r26
     116:	5a 2e       	mov	r5, r26
     118:	ec 2d       	mov	r30, r12
     11a:	5a 2e       	mov	r5, r26
     11c:	5a 2e       	mov	r5, r26
     11e:	5a 2e       	mov	r5, r26
     120:	5a 2e       	mov	r5, r26
     122:	5a 2e       	mov	r5, r26
     124:	5a 2e       	mov	r5, r26
     126:	5a 2e       	mov	r5, r26
     128:	5a 2e       	mov	r5, r26
     12a:	5a 2e       	mov	r5, r26
     12c:	5a 2e       	mov	r5, r26
     12e:	5a 2e       	mov	r5, r26
     130:	5a 2e       	mov	r5, r26
     132:	5a 2e       	mov	r5, r26
     134:	5a 2e       	mov	r5, r26
     136:	5a 2e       	mov	r5, r26
     138:	ec 2d       	mov	r30, r12
     13a:	5a 2e       	mov	r5, r26
     13c:	5a 2e       	mov	r5, r26
     13e:	5a 2e       	mov	r5, r26
     140:	5a 2e       	mov	r5, r26
     142:	5a 2e       	mov	r5, r26
     144:	5a 2e       	mov	r5, r26
     146:	5a 2e       	mov	r5, r26
     148:	5a 2e       	mov	r5, r26
     14a:	5a 2e       	mov	r5, r26
     14c:	5a 2e       	mov	r5, r26
     14e:	5a 2e       	mov	r5, r26
     150:	5a 2e       	mov	r5, r26
     152:	5a 2e       	mov	r5, r26
     154:	5a 2e       	mov	r5, r26
     156:	5a 2e       	mov	r5, r26
     158:	56 2e       	mov	r5, r22
     15a:	5a 2e       	mov	r5, r26
     15c:	5a 2e       	mov	r5, r26
     15e:	5a 2e       	mov	r5, r26
     160:	5a 2e       	mov	r5, r26
     162:	5a 2e       	mov	r5, r26
     164:	5a 2e       	mov	r5, r26
     166:	5a 2e       	mov	r5, r26
     168:	21 2e       	mov	r2, r17
     16a:	5a 2e       	mov	r5, r26
     16c:	5a 2e       	mov	r5, r26
     16e:	5a 2e       	mov	r5, r26
     170:	5a 2e       	mov	r5, r26
     172:	5a 2e       	mov	r5, r26
     174:	5a 2e       	mov	r5, r26
     176:	5a 2e       	mov	r5, r26
     178:	5a 2e       	mov	r5, r26
     17a:	5a 2e       	mov	r5, r26
     17c:	5a 2e       	mov	r5, r26
     17e:	5a 2e       	mov	r5, r26
     180:	5a 2e       	mov	r5, r26
     182:	5a 2e       	mov	r5, r26
     184:	5a 2e       	mov	r5, r26
     186:	5a 2e       	mov	r5, r26
     188:	15 2e       	mov	r1, r21
     18a:	5a 2e       	mov	r5, r26
     18c:	5a 2e       	mov	r5, r26
     18e:	5a 2e       	mov	r5, r26
     190:	5a 2e       	mov	r5, r26
     192:	5a 2e       	mov	r5, r26
     194:	5a 2e       	mov	r5, r26
     196:	5a 2e       	mov	r5, r26
     198:	39 2e       	mov	r3, r25

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0b e2       	ldi	r16, 0x2B	; 43
     19c:	15 e1       	ldi	r17, 0x15	; 21
     19e:	0f 2e       	mov	r0, r31
     1a0:	fb e5       	ldi	r31, 0x5B	; 91
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f5 e1       	ldi	r31, 0x15	; 21
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 2a 15 	lds	r24, 0x152A	; 0x80152a <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	25 d3       	rcall	.+1610   	; 0x816 <uxListRemove>
     1cc:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 1e 15 	sts	0x151E, r24	; 0x80151e <uxCurrentNumberOfTasks>
     1d6:	80 91 2a 15 	lds	r24, 0x152A	; 0x80152a <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 2a 15 	sts	0x152A, r24	; 0x80152a <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	8a d2       	rcall	.+1300   	; 0x6fe <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	88 d2       	rcall	.+1296   	; 0x6fe <vPortFree>
     1ee:	80 91 2a 15 	lds	r24, 0x152A	; 0x80152a <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	85 d3       	rcall	.+1802   	; 0x90a <vPortYield>
     200:	0e 94 c7 18 	call	0x318e	; 0x318e <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 d5 15 	lds	r30, 0x15D5	; 0x8015d5 <pxCurrentTimerList>
     232:	f0 91 d6 15 	lds	r31, 0x15D6	; 0x8015d6 <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	0e c1       	rjmp	.+540    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 30 18 	call	0x3060	; 0x3060 <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	64 c0       	rjmp	.+200    	; 0x32e <prvTimerTask+0x128>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     27e:	e0 91 d5 15 	lds	r30, 0x15D5	; 0x8015d5 <pxCurrentTimerList>
     282:	f0 91 d6 15 	lds	r31, 0x15D6	; 0x8015d6 <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	be d2       	rcall	.+1404   	; 0x816 <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	86 89       	ldd	r24, Z+22	; 0x16
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	56 96       	adiw	r26, 0x16	; 22
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9e c0       	rjmp	.+316    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
     31c:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
     320:	51 d7       	rcall	.+3746   	; 0x11c4 <vQueueWaitForMessageRestricted>
     322:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     326:	81 11       	cpse	r24, r1
     328:	8a c0       	rjmp	.+276    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     32a:	ef d2       	rcall	.+1502   	; 0x90a <vPortYield>
     32c:	88 c0       	rjmp	.+272    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     32e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     332:	85 c0       	rjmp	.+266    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	88 23       	and	r24, r24
     338:	0c f4       	brge	.+2      	; 0x33c <prvTimerTask+0x136>
     33a:	81 c0       	rjmp	.+258    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     33c:	4e 80       	ldd	r4, Y+6	; 0x06
     33e:	5f 80       	ldd	r5, Y+7	; 0x07
     340:	d2 01       	movw	r26, r4
     342:	1c 96       	adiw	r26, 0x0c	; 12
     344:	8d 91       	ld	r24, X+
     346:	9c 91       	ld	r25, X
     348:	1d 97       	sbiw	r26, 0x0d	; 13
     34a:	89 2b       	or	r24, r25
     34c:	19 f0       	breq	.+6      	; 0x354 <prvTimerTask+0x14e>
     34e:	c2 01       	movw	r24, r4
     350:	02 96       	adiw	r24, 0x02	; 2
     352:	61 d2       	rcall	.+1218   	; 0x816 <uxListRemove>
     354:	ce 01       	movw	r24, r28
     356:	08 96       	adiw	r24, 0x08	; 8
     358:	0e 94 30 18 	call	0x3060	; 0x3060 <prvSampleTimeNow>
     35c:	8b 01       	movw	r16, r22
     35e:	9c 01       	movw	r18, r24
     360:	e9 81       	ldd	r30, Y+1	; 0x01
     362:	0e 2e       	mov	r0, r30
     364:	00 0c       	add	r0, r0
     366:	ff 0b       	sbc	r31, r31
     368:	ea 30       	cpi	r30, 0x0A	; 10
     36a:	f1 05       	cpc	r31, r1
     36c:	08 f0       	brcs	.+2      	; 0x370 <prvTimerTask+0x16a>
     36e:	67 c0       	rjmp	.+206    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     370:	88 27       	eor	r24, r24
     372:	ee 58       	subi	r30, 0x8E	; 142
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	8f 4f       	sbci	r24, 0xFF	; 255
     378:	0c 94 23 30 	jmp	0x6046	; 0x6046 <__tablejump2__>
     37c:	f2 01       	movw	r30, r4
     37e:	86 89       	ldd	r24, Z+22	; 0x16
     380:	81 60       	ori	r24, 0x01	; 1
     382:	86 8b       	std	Z+22, r24	; 0x16
     384:	ca 80       	ldd	r12, Y+2	; 0x02
     386:	db 80       	ldd	r13, Y+3	; 0x03
     388:	ec 80       	ldd	r14, Y+4	; 0x04
     38a:	fd 80       	ldd	r15, Y+5	; 0x05
     38c:	46 85       	ldd	r20, Z+14	; 0x0e
     38e:	57 85       	ldd	r21, Z+15	; 0x0f
     390:	60 89       	ldd	r22, Z+16	; 0x10
     392:	71 89       	ldd	r23, Z+17	; 0x11
     394:	4c 0d       	add	r20, r12
     396:	5d 1d       	adc	r21, r13
     398:	6e 1d       	adc	r22, r14
     39a:	7f 1d       	adc	r23, r15
     39c:	c2 01       	movw	r24, r4
     39e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <prvInsertTimerInActiveList>
     3a2:	88 23       	and	r24, r24
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <prvTimerTask+0x1a2>
     3a6:	4b c0       	rjmp	.+150    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3a8:	d2 01       	movw	r26, r4
     3aa:	54 96       	adiw	r26, 0x14	; 20
     3ac:	ed 91       	ld	r30, X+
     3ae:	fc 91       	ld	r31, X
     3b0:	55 97       	sbiw	r26, 0x15	; 21
     3b2:	c2 01       	movw	r24, r4
     3b4:	19 95       	eicall
     3b6:	f2 01       	movw	r30, r4
     3b8:	86 89       	ldd	r24, Z+22	; 0x16
     3ba:	82 ff       	sbrs	r24, 2
     3bc:	40 c0       	rjmp	.+128    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3be:	4a 81       	ldd	r20, Y+2	; 0x02
     3c0:	5b 81       	ldd	r21, Y+3	; 0x03
     3c2:	6c 81       	ldd	r22, Y+4	; 0x04
     3c4:	7d 81       	ldd	r23, Y+5	; 0x05
     3c6:	86 85       	ldd	r24, Z+14	; 0x0e
     3c8:	97 85       	ldd	r25, Z+15	; 0x0f
     3ca:	a0 89       	ldd	r26, Z+16	; 0x10
     3cc:	b1 89       	ldd	r27, Z+17	; 0x11
     3ce:	9a 01       	movw	r18, r20
     3d0:	ab 01       	movw	r20, r22
     3d2:	28 0f       	add	r18, r24
     3d4:	39 1f       	adc	r19, r25
     3d6:	4a 1f       	adc	r20, r26
     3d8:	5b 1f       	adc	r21, r27
     3da:	c8 2c       	mov	r12, r8
     3dc:	d9 2c       	mov	r13, r9
     3de:	ea 2c       	mov	r14, r10
     3e0:	fb 2c       	mov	r15, r11
     3e2:	00 e0       	ldi	r16, 0x00	; 0
     3e4:	10 e0       	ldi	r17, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	c2 01       	movw	r24, r4
     3ea:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <xTimerGenericCommand>
     3ee:	27 c0       	rjmp	.+78     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3f0:	d2 01       	movw	r26, r4
     3f2:	56 96       	adiw	r26, 0x16	; 22
     3f4:	8c 91       	ld	r24, X
     3f6:	56 97       	sbiw	r26, 0x16	; 22
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	56 96       	adiw	r26, 0x16	; 22
     3fc:	8c 93       	st	X, r24
     3fe:	1f c0       	rjmp	.+62     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     400:	f2 01       	movw	r30, r4
     402:	86 89       	ldd	r24, Z+22	; 0x16
     404:	81 60       	ori	r24, 0x01	; 1
     406:	86 8b       	std	Z+22, r24	; 0x16
     408:	4a 81       	ldd	r20, Y+2	; 0x02
     40a:	5b 81       	ldd	r21, Y+3	; 0x03
     40c:	6c 81       	ldd	r22, Y+4	; 0x04
     40e:	7d 81       	ldd	r23, Y+5	; 0x05
     410:	46 87       	std	Z+14, r20	; 0x0e
     412:	57 87       	std	Z+15, r21	; 0x0f
     414:	60 8b       	std	Z+16, r22	; 0x10
     416:	71 8b       	std	Z+17, r23	; 0x11
     418:	40 0f       	add	r20, r16
     41a:	51 1f       	adc	r21, r17
     41c:	62 1f       	adc	r22, r18
     41e:	73 1f       	adc	r23, r19
     420:	68 01       	movw	r12, r16
     422:	79 01       	movw	r14, r18
     424:	c2 01       	movw	r24, r4
     426:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <prvInsertTimerInActiveList>
     42a:	09 c0       	rjmp	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42c:	f2 01       	movw	r30, r4
     42e:	86 89       	ldd	r24, Z+22	; 0x16
     430:	81 fd       	sbrc	r24, 1
     432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     434:	c2 01       	movw	r24, r4
     436:	63 d1       	rcall	.+710    	; 0x6fe <vPortFree>
     438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43a:	8e 7f       	andi	r24, 0xFE	; 254
     43c:	86 8b       	std	Z+22, r24	; 0x16
     43e:	28 2d       	mov	r18, r8
     440:	39 2d       	mov	r19, r9
     442:	4a 2d       	mov	r20, r10
     444:	5b 2d       	mov	r21, r11
     446:	66 2d       	mov	r22, r6
     448:	77 2d       	mov	r23, r7
     44a:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
     44e:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
     452:	51 d5       	rcall	.+2722   	; 0xef6 <xQueueReceive>
     454:	81 11       	cpse	r24, r1
     456:	6e cf       	rjmp	.-292    	; 0x334 <prvTimerTask+0x12e>
     458:	ea ce       	rjmp	.-556    	; 0x22e <prvTimerTask+0x28>
     45a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskSuspendAll>
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	0e 94 30 18 	call	0x3060	; 0x3060 <prvSampleTimeNow>
     466:	6b 87       	std	Y+11, r22	; 0x0b
     468:	7c 87       	std	Y+12, r23	; 0x0c
     46a:	8d 87       	std	Y+13, r24	; 0x0d
     46c:	9e 87       	std	Y+14, r25	; 0x0e
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	81 11       	cpse	r24, r1
     472:	5d cf       	rjmp	.-326    	; 0x32e <prvTimerTask+0x128>
     474:	e0 91 d3 15 	lds	r30, 0x15D3	; 0x8015d3 <pxOverflowTimerList>
     478:	f0 91 d4 15 	lds	r31, 0x15D4	; 0x8015d4 <pxOverflowTimerList+0x1>
     47c:	80 81       	ld	r24, Z
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	81 11       	cpse	r24, r1
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	28 2c       	mov	r2, r8
     486:	39 2c       	mov	r3, r9
     488:	4a 2c       	mov	r4, r10
     48a:	5b 2c       	mov	r5, r11
     48c:	3b cf       	rjmp	.-394    	; 0x304 <prvTimerTask+0xfe>

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	d1 e2       	ldi	r29, 0x21	; 33
     496:	de bf       	out	0x3e, r29	; 62
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	17 e0       	ldi	r17, 0x07	; 7
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b2 e0       	ldi	r27, 0x02	; 2
     4a4:	e2 eb       	ldi	r30, 0xB2	; 178
     4a6:	f9 e6       	ldi	r31, 0x69	; 105
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	ae 34       	cpi	r26, 0x4E	; 78
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	27 e1       	ldi	r18, 0x17	; 23
     4ba:	ae e4       	ldi	r26, 0x4E	; 78
     4bc:	b7 e0       	ldi	r27, 0x07	; 7
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a5 39       	cpi	r26, 0x95	; 149
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <main>
     4cc:	0c 94 d7 34 	jmp	0x69ae	; 0x69ae <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <trace_init>:
 #include <avr/io.h>
 #include <FreeRTOSConfig.h>
 #include "FreeRTOSTraceDriver.h"

 void trace_init(void)
 {
     4d2:	08 95       	ret

000004d4 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     4da:	ea e5       	ldi	r30, 0x5A	; 90
     4dc:	f7 e0       	ldi	r31, 0x07	; 7
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <prvInsertBlockIntoFreeList+0xe>
     4e0:	f9 01       	movw	r30, r18
     4e2:	20 81       	ld	r18, Z
     4e4:	31 81       	ldd	r19, Z+1	; 0x01
     4e6:	2a 17       	cp	r18, r26
     4e8:	3b 07       	cpc	r19, r27
     4ea:	d0 f3       	brcs	.-12     	; 0x4e0 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	af 01       	movw	r20, r30
     4f2:	48 0f       	add	r20, r24
     4f4:	59 1f       	adc	r21, r25
     4f6:	a4 17       	cp	r26, r20
     4f8:	b5 07       	cpc	r27, r21
     4fa:	49 f4       	brne	.+18     	; 0x50e <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     4fc:	12 96       	adiw	r26, 0x02	; 2
     4fe:	4d 91       	ld	r20, X+
     500:	5c 91       	ld	r21, X
     502:	13 97       	sbiw	r26, 0x03	; 3
     504:	84 0f       	add	r24, r20
     506:	95 1f       	adc	r25, r21
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	82 83       	std	Z+2, r24	; 0x02
     50c:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     50e:	12 96       	adiw	r26, 0x02	; 2
     510:	8d 91       	ld	r24, X+
     512:	9c 91       	ld	r25, X
     514:	13 97       	sbiw	r26, 0x03	; 3
     516:	ed 01       	movw	r28, r26
     518:	c8 0f       	add	r28, r24
     51a:	d9 1f       	adc	r29, r25
     51c:	2c 17       	cp	r18, r28
     51e:	3d 07       	cpc	r19, r29
     520:	d9 f4       	brne	.+54     	; 0x558 <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     522:	20 91 58 07 	lds	r18, 0x0758	; 0x800758 <pxEnd>
     526:	30 91 59 07 	lds	r19, 0x0759	; 0x800759 <pxEnd+0x1>
     52a:	c2 17       	cp	r28, r18
     52c:	d3 07       	cpc	r29, r19
     52e:	81 f0       	breq	.+32     	; 0x550 <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     530:	2a 81       	ldd	r18, Y+2	; 0x02
     532:	3b 81       	ldd	r19, Y+3	; 0x03
     534:	82 0f       	add	r24, r18
     536:	93 1f       	adc	r25, r19
     538:	13 96       	adiw	r26, 0x03	; 3
     53a:	9c 93       	st	X, r25
     53c:	8e 93       	st	-X, r24
     53e:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     540:	c0 81       	ld	r28, Z
     542:	d1 81       	ldd	r29, Z+1	; 0x01
     544:	88 81       	ld	r24, Y
     546:	99 81       	ldd	r25, Y+1	; 0x01
     548:	11 96       	adiw	r26, 0x01	; 1
     54a:	9c 93       	st	X, r25
     54c:	8e 93       	st	-X, r24
     54e:	07 c0       	rjmp	.+14     	; 0x55e <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     550:	11 96       	adiw	r26, 0x01	; 1
     552:	dc 93       	st	X, r29
     554:	ce 93       	st	-X, r28
     556:	03 c0       	rjmp	.+6      	; 0x55e <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     558:	11 96       	adiw	r26, 0x01	; 1
     55a:	3c 93       	st	X, r19
     55c:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     55e:	ae 17       	cp	r26, r30
     560:	bf 07       	cpc	r27, r31
     562:	11 f0       	breq	.+4      	; 0x568 <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     564:	b1 83       	std	Z+1, r27	; 0x01
     566:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     580:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     584:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <pxEnd>
     588:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <pxEnd+0x1>
     58c:	89 2b       	or	r24, r25
     58e:	41 f5       	brne	.+80     	; 0x5e0 <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     590:	ea e5       	ldi	r30, 0x5A	; 90
     592:	f7 e0       	ldi	r31, 0x07	; 7
     594:	ae e5       	ldi	r26, 0x5E	; 94
     596:	b7 e0       	ldi	r27, 0x07	; 7
     598:	b1 83       	std	Z+1, r27	; 0x01
     59a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     59c:	13 82       	std	Z+3, r1	; 0x03
     59e:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     5a0:	e6 e0       	ldi	r30, 0x06	; 6
     5a2:	f5 e1       	ldi	r31, 0x15	; 21
     5a4:	f0 93 59 07 	sts	0x0759, r31	; 0x800759 <pxEnd+0x1>
     5a8:	e0 93 58 07 	sts	0x0758, r30	; 0x800758 <pxEnd>
    pxEnd->xBlockSize = 0;
     5ac:	13 82       	std	Z+3, r1	; 0x03
     5ae:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     5b0:	11 82       	std	Z+1, r1	; 0x01
     5b2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     5b4:	88 ea       	ldi	r24, 0xA8	; 168
     5b6:	9d e0       	ldi	r25, 0x0D	; 13
     5b8:	13 96       	adiw	r26, 0x03	; 3
     5ba:	9c 93       	st	X, r25
     5bc:	8e 93       	st	-X, r24
     5be:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     5c0:	ed 93       	st	X+, r30
     5c2:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5c4:	90 93 55 07 	sts	0x0755, r25	; 0x800755 <xMinimumEverFreeBytesRemaining+0x1>
     5c8:	80 93 54 07 	sts	0x0754, r24	; 0x800754 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5cc:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <xFreeBytesRemaining+0x1>
     5d0:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e8       	ldi	r25, 0x80	; 128
     5d8:	90 93 4f 07 	sts	0x074F, r25	; 0x80074f <__data_end+0x1>
     5dc:	80 93 4e 07 	sts	0x074E, r24	; 0x80074e <__data_end>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     5e0:	e0 90 4e 07 	lds	r14, 0x074E	; 0x80074e <__data_end>
     5e4:	f0 90 4f 07 	lds	r15, 0x074F	; 0x80074f <__data_end+0x1>
     5e8:	c7 01       	movw	r24, r14
     5ea:	8c 23       	and	r24, r28
     5ec:	9d 23       	and	r25, r29
     5ee:	89 2b       	or	r24, r25
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <pvPortMalloc+0x86>
     5f2:	75 c0       	rjmp	.+234    	; 0x6de <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5f4:	20 97       	sbiw	r28, 0x00	; 0
     5f6:	09 f4       	brne	.+2      	; 0x5fa <pvPortMalloc+0x8c>
     5f8:	75 c0       	rjmp	.+234    	; 0x6e4 <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     5fa:	9e 01       	movw	r18, r28
     5fc:	2c 5f       	subi	r18, 0xFC	; 252
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     600:	c2 17       	cp	r28, r18
     602:	d3 07       	cpc	r29, r19
     604:	08 f0       	brcs	.+2      	; 0x608 <pvPortMalloc+0x9a>
     606:	6e c0       	rjmp	.+220    	; 0x6e4 <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     608:	21 15       	cp	r18, r1
     60a:	31 05       	cpc	r19, r1
     60c:	09 f4       	brne	.+2      	; 0x610 <pvPortMalloc+0xa2>
     60e:	67 c0       	rjmp	.+206    	; 0x6de <pvPortMalloc+0x170>
     610:	00 91 56 07 	lds	r16, 0x0756	; 0x800756 <xFreeBytesRemaining>
     614:	10 91 57 07 	lds	r17, 0x0757	; 0x800757 <xFreeBytesRemaining+0x1>
     618:	02 17       	cp	r16, r18
     61a:	13 07       	cpc	r17, r19
     61c:	08 f4       	brcc	.+2      	; 0x620 <pvPortMalloc+0xb2>
     61e:	5f c0       	rjmp	.+190    	; 0x6de <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     620:	c0 91 5a 07 	lds	r28, 0x075A	; 0x80075a <xStart>
     624:	d0 91 5b 07 	lds	r29, 0x075B	; 0x80075b <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     628:	ea e5       	ldi	r30, 0x5A	; 90
     62a:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     62c:	02 c0       	rjmp	.+4      	; 0x632 <pvPortMalloc+0xc4>
     62e:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
     630:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	9b 81       	ldd	r25, Y+3	; 0x03
     636:	82 17       	cp	r24, r18
     638:	93 07       	cpc	r25, r19
     63a:	20 f4       	brcc	.+8      	; 0x644 <pvPortMalloc+0xd6>
     63c:	88 81       	ld	r24, Y
     63e:	99 81       	ldd	r25, Y+1	; 0x01
     640:	00 97       	sbiw	r24, 0x00	; 0
     642:	a9 f7       	brne	.-22     	; 0x62e <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     644:	80 91 58 07 	lds	r24, 0x0758	; 0x800758 <pxEnd>
     648:	90 91 59 07 	lds	r25, 0x0759	; 0x800759 <pxEnd+0x1>
     64c:	c8 17       	cp	r28, r24
     64e:	d9 07       	cpc	r29, r25
     650:	09 f4       	brne	.+2      	; 0x654 <pvPortMalloc+0xe6>
     652:	45 c0       	rjmp	.+138    	; 0x6de <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     654:	c0 80       	ld	r12, Z
     656:	d1 80       	ldd	r13, Z+1	; 0x01
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	c8 0e       	add	r12, r24
     65c:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     65e:	88 81       	ld	r24, Y
     660:	99 81       	ldd	r25, Y+1	; 0x01
     662:	91 83       	std	Z+1, r25	; 0x01
     664:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     666:	4a 81       	ldd	r20, Y+2	; 0x02
     668:	5b 81       	ldd	r21, Y+3	; 0x03
     66a:	42 1b       	sub	r20, r18
     66c:	53 0b       	sbc	r21, r19
     66e:	49 30       	cpi	r20, 0x09	; 9
     670:	51 05       	cpc	r21, r1
     672:	48 f0       	brcs	.+18     	; 0x686 <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     674:	ce 01       	movw	r24, r28
     676:	82 0f       	add	r24, r18
     678:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     67a:	fc 01       	movw	r30, r24
     67c:	53 83       	std	Z+3, r21	; 0x03
     67e:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     680:	3b 83       	std	Y+3, r19	; 0x03
     682:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     684:	27 df       	rcall	.-434    	; 0x4d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	9b 81       	ldd	r25, Y+3	; 0x03
     68a:	08 1b       	sub	r16, r24
     68c:	19 0b       	sbc	r17, r25
     68e:	10 93 57 07 	sts	0x0757, r17	; 0x800757 <xFreeBytesRemaining+0x1>
     692:	00 93 56 07 	sts	0x0756, r16	; 0x800756 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     696:	20 91 54 07 	lds	r18, 0x0754	; 0x800754 <xMinimumEverFreeBytesRemaining>
     69a:	30 91 55 07 	lds	r19, 0x0755	; 0x800755 <xMinimumEverFreeBytesRemaining+0x1>
     69e:	02 17       	cp	r16, r18
     6a0:	13 07       	cpc	r17, r19
     6a2:	20 f4       	brcc	.+8      	; 0x6ac <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6a4:	10 93 55 07 	sts	0x0755, r17	; 0x800755 <xMinimumEverFreeBytesRemaining+0x1>
     6a8:	00 93 54 07 	sts	0x0754, r16	; 0x800754 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     6ac:	e8 2a       	or	r14, r24
     6ae:	f9 2a       	or	r15, r25
     6b0:	fb 82       	std	Y+3, r15	; 0x03
     6b2:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     6b4:	19 82       	std	Y+1, r1	; 0x01
     6b6:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     6b8:	80 91 52 07 	lds	r24, 0x0752	; 0x800752 <xNumberOfSuccessfulAllocations>
     6bc:	90 91 53 07 	lds	r25, 0x0753	; 0x800753 <xNumberOfSuccessfulAllocations+0x1>
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	90 93 53 07 	sts	0x0753, r25	; 0x800753 <xNumberOfSuccessfulAllocations+0x1>
     6c6:	80 93 52 07 	sts	0x0752, r24	; 0x800752 <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6ca:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     6ce:	c1 14       	cp	r12, r1
     6d0:	d1 04       	cpc	r13, r1
     6d2:	59 f4       	brne	.+22     	; 0x6ea <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     6d4:	0e 94 cd 18 	call	0x319a	; 0x319a <vApplicationMallocFailedHook>
     6d8:	c1 2c       	mov	r12, r1
     6da:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
     6dc:	06 c0       	rjmp	.+12     	; 0x6ea <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6de:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     6e2:	f8 cf       	rjmp	.-16     	; 0x6d4 <pvPortMalloc+0x166>
     6e4:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     6e8:	f5 cf       	rjmp	.-22     	; 0x6d4 <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     6ea:	c6 01       	movw	r24, r12
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	08 95       	ret

000006fe <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	99 f1       	breq	.+102    	; 0x76c <vPortFree+0x6e>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     706:	fc 01       	movw	r30, r24
     708:	34 97       	sbiw	r30, 0x04	; 4
     70a:	22 81       	ldd	r18, Z+2	; 0x02
     70c:	33 81       	ldd	r19, Z+3	; 0x03
     70e:	40 91 4e 07 	lds	r20, 0x074E	; 0x80074e <__data_end>
     712:	50 91 4f 07 	lds	r21, 0x074F	; 0x80074f <__data_end+0x1>
     716:	b9 01       	movw	r22, r18
     718:	64 23       	and	r22, r20
     71a:	75 23       	and	r23, r21
     71c:	67 2b       	or	r22, r23
     71e:	31 f1       	breq	.+76     	; 0x76c <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     720:	60 81       	ld	r22, Z
     722:	71 81       	ldd	r23, Z+1	; 0x01
     724:	67 2b       	or	r22, r23
     726:	11 f5       	brne	.+68     	; 0x76c <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     728:	ef 01       	movw	r28, r30
     72a:	40 95       	com	r20
     72c:	50 95       	com	r21
     72e:	24 23       	and	r18, r20
     730:	35 23       	and	r19, r21
     732:	33 83       	std	Z+3, r19	; 0x03
     734:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
     736:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     73a:	20 91 56 07 	lds	r18, 0x0756	; 0x800756 <xFreeBytesRemaining>
     73e:	30 91 57 07 	lds	r19, 0x0757	; 0x800757 <xFreeBytesRemaining+0x1>
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	9b 81       	ldd	r25, Y+3	; 0x03
     746:	82 0f       	add	r24, r18
     748:	93 1f       	adc	r25, r19
     74a:	90 93 57 07 	sts	0x0757, r25	; 0x800757 <xFreeBytesRemaining+0x1>
     74e:	80 93 56 07 	sts	0x0756, r24	; 0x800756 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     752:	ce 01       	movw	r24, r28
     754:	bf de       	rcall	.-642    	; 0x4d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     756:	80 91 50 07 	lds	r24, 0x0750	; 0x800750 <xNumberOfSuccessfulFrees>
     75a:	90 91 51 07 	lds	r25, 0x0751	; 0x800751 <xNumberOfSuccessfulFrees+0x1>
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	90 93 51 07 	sts	0x0751, r25	; 0x800751 <xNumberOfSuccessfulFrees+0x1>
     764:	80 93 50 07 	sts	0x0750, r24	; 0x800750 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     768:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     772:	fc 01       	movw	r30, r24
     774:	03 96       	adiw	r24, 0x03	; 3
     776:	92 83       	std	Z+2, r25	; 0x02
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	4f ef       	ldi	r20, 0xFF	; 255
     77c:	5f ef       	ldi	r21, 0xFF	; 255
     77e:	ba 01       	movw	r22, r20
     780:	43 83       	std	Z+3, r20	; 0x03
     782:	54 83       	std	Z+4, r21	; 0x04
     784:	65 83       	std	Z+5, r22	; 0x05
     786:	76 83       	std	Z+6, r23	; 0x06
     788:	90 87       	std	Z+8, r25	; 0x08
     78a:	87 83       	std	Z+7, r24	; 0x07
     78c:	92 87       	std	Z+10, r25	; 0x0a
     78e:	81 87       	std	Z+9, r24	; 0x09
     790:	10 82       	st	Z, r1
     792:	08 95       	ret

00000794 <vListInitialiseItem>:
     794:	fc 01       	movw	r30, r24
     796:	13 86       	std	Z+11, r1	; 0x0b
     798:	12 86       	std	Z+10, r1	; 0x0a
     79a:	08 95       	ret

0000079c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7a6:	08 81       	ld	r16, Y
     7a8:	19 81       	ldd	r17, Y+1	; 0x01
     7aa:	2a 81       	ldd	r18, Y+2	; 0x02
     7ac:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7ae:	0f 3f       	cpi	r16, 0xFF	; 255
     7b0:	4f ef       	ldi	r20, 0xFF	; 255
     7b2:	14 07       	cpc	r17, r20
     7b4:	24 07       	cpc	r18, r20
     7b6:	34 07       	cpc	r19, r20
     7b8:	21 f4       	brne	.+8      	; 0x7c2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7ba:	fc 01       	movw	r30, r24
     7bc:	a1 85       	ldd	r26, Z+9	; 0x09
     7be:	b2 85       	ldd	r27, Z+10	; 0x0a
     7c0:	11 c0       	rjmp	.+34     	; 0x7e4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7c2:	dc 01       	movw	r26, r24
     7c4:	13 96       	adiw	r26, 0x03	; 3
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <vListInsert+0x2e>
     7c8:	df 01       	movw	r26, r30
     7ca:	14 96       	adiw	r26, 0x04	; 4
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	15 97       	sbiw	r26, 0x05	; 5
     7d2:	40 81       	ld	r20, Z
     7d4:	51 81       	ldd	r21, Z+1	; 0x01
     7d6:	62 81       	ldd	r22, Z+2	; 0x02
     7d8:	73 81       	ldd	r23, Z+3	; 0x03
     7da:	04 17       	cp	r16, r20
     7dc:	15 07       	cpc	r17, r21
     7de:	26 07       	cpc	r18, r22
     7e0:	37 07       	cpc	r19, r23
     7e2:	90 f7       	brcc	.-28     	; 0x7c8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7e4:	14 96       	adiw	r26, 0x04	; 4
     7e6:	ed 91       	ld	r30, X+
     7e8:	fc 91       	ld	r31, X
     7ea:	15 97       	sbiw	r26, 0x05	; 5
     7ec:	fd 83       	std	Y+5, r31	; 0x05
     7ee:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7f0:	d7 83       	std	Z+7, r29	; 0x07
     7f2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     7f4:	bf 83       	std	Y+7, r27	; 0x07
     7f6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     7f8:	15 96       	adiw	r26, 0x05	; 5
     7fa:	dc 93       	st	X, r29
     7fc:	ce 93       	st	-X, r28
     7fe:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     800:	9b 87       	std	Y+11, r25	; 0x0b
     802:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     804:	fc 01       	movw	r30, r24
     806:	20 81       	ld	r18, Z
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	20 83       	st	Z, r18
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     81c:	a2 85       	ldd	r26, Z+10	; 0x0a
     81e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     820:	c4 81       	ldd	r28, Z+4	; 0x04
     822:	d5 81       	ldd	r29, Z+5	; 0x05
     824:	86 81       	ldd	r24, Z+6	; 0x06
     826:	97 81       	ldd	r25, Z+7	; 0x07
     828:	9f 83       	std	Y+7, r25	; 0x07
     82a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     82c:	c6 81       	ldd	r28, Z+6	; 0x06
     82e:	d7 81       	ldd	r29, Z+7	; 0x07
     830:	84 81       	ldd	r24, Z+4	; 0x04
     832:	95 81       	ldd	r25, Z+5	; 0x05
     834:	9d 83       	std	Y+5, r25	; 0x05
     836:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     838:	11 96       	adiw	r26, 0x01	; 1
     83a:	8d 91       	ld	r24, X+
     83c:	9c 91       	ld	r25, X
     83e:	12 97       	sbiw	r26, 0x02	; 2
     840:	e8 17       	cp	r30, r24
     842:	f9 07       	cpc	r31, r25
     844:	31 f4       	brne	.+12     	; 0x852 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     846:	86 81       	ldd	r24, Z+6	; 0x06
     848:	97 81       	ldd	r25, Z+7	; 0x07
     84a:	12 96       	adiw	r26, 0x02	; 2
     84c:	9c 93       	st	X, r25
     84e:	8e 93       	st	-X, r24
     850:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     852:	13 86       	std	Z+11, r1	; 0x0b
     854:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     856:	8c 91       	ld	r24, X
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     85c:	8c 91       	ld	r24, X
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     864:	fc 01       	movw	r30, r24
     866:	60 83       	st	Z, r22
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	70 83       	st	Z, r23
     86c:	31 97       	sbiw	r30, 0x01	; 1
     86e:	10 82       	st	Z, r1
     870:	31 97       	sbiw	r30, 0x01	; 1
     872:	10 82       	st	Z, r1
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	20 e8       	ldi	r18, 0x80	; 128
     878:	20 83       	st	Z, r18
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	10 82       	st	Z, r1
     87e:	31 97       	sbiw	r30, 0x01	; 1
     880:	10 82       	st	Z, r1
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	10 82       	st	Z, r1
     886:	77 97       	sbiw	r30, 0x17	; 23
     888:	40 83       	st	Z, r20
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	50 83       	st	Z, r21
     88e:	86 97       	sbiw	r24, 0x26	; 38
     890:	08 95       	ret

00000892 <xPortStartScheduler>:
     892:	a8 95       	wdr
     894:	90 ec       	ldi	r25, 0xC0	; 192
     896:	88 e1       	ldi	r24, 0x18	; 24
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	a8 95       	wdr
     89e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     8a8:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
     8ac:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
     8b0:	cd 91       	ld	r28, X+
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	dd 91       	ld	r29, X+
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	ff 91       	pop	r31
     8ba:	ef 91       	pop	r30
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	bf 91       	pop	r27
     8c2:	af 91       	pop	r26
     8c4:	9f 91       	pop	r25
     8c6:	8f 91       	pop	r24
     8c8:	7f 91       	pop	r23
     8ca:	6f 91       	pop	r22
     8cc:	5f 91       	pop	r21
     8ce:	4f 91       	pop	r20
     8d0:	3f 91       	pop	r19
     8d2:	2f 91       	pop	r18
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	8f 90       	pop	r8
     8e8:	7f 90       	pop	r7
     8ea:	6f 90       	pop	r6
     8ec:	5f 90       	pop	r5
     8ee:	4f 90       	pop	r4
     8f0:	3f 90       	pop	r3
     8f2:	2f 90       	pop	r2
     8f4:	1f 90       	pop	r1
     8f6:	0f 90       	pop	r0
     8f8:	0c be       	out	0x3c, r0	; 60
     8fa:	0f 90       	pop	r0
     8fc:	0b be       	out	0x3b, r0	; 59
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	08 95       	ret
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	08 95       	ret

0000090a <vPortYield>:
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	0f 92       	push	r0
     912:	0b b6       	in	r0, 0x3b	; 59
     914:	0f 92       	push	r0
     916:	0c b6       	in	r0, 0x3c	; 60
     918:	0f 92       	push	r0
     91a:	1f 92       	push	r1
     91c:	11 24       	eor	r1, r1
     91e:	2f 92       	push	r2
     920:	3f 92       	push	r3
     922:	4f 92       	push	r4
     924:	5f 92       	push	r5
     926:	6f 92       	push	r6
     928:	7f 92       	push	r7
     92a:	8f 92       	push	r8
     92c:	9f 92       	push	r9
     92e:	af 92       	push	r10
     930:	bf 92       	push	r11
     932:	cf 92       	push	r12
     934:	df 92       	push	r13
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	4f 93       	push	r20
     944:	5f 93       	push	r21
     946:	6f 93       	push	r22
     948:	7f 93       	push	r23
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	ef 93       	push	r30
     958:	ff 93       	push	r31
     95a:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
     95e:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
     962:	0d b6       	in	r0, 0x3d	; 61
     964:	0d 92       	st	X+, r0
     966:	0e b6       	in	r0, 0x3e	; 62
     968:	0d 92       	st	X+, r0
     96a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <vTaskSwitchContext>
     96e:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
     972:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
     976:	cd 91       	ld	r28, X+
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	dd 91       	ld	r29, X+
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	bf 90       	pop	r11
     9a8:	af 90       	pop	r10
     9aa:	9f 90       	pop	r9
     9ac:	8f 90       	pop	r8
     9ae:	7f 90       	pop	r7
     9b0:	6f 90       	pop	r6
     9b2:	5f 90       	pop	r5
     9b4:	4f 90       	pop	r4
     9b6:	3f 90       	pop	r3
     9b8:	2f 90       	pop	r2
     9ba:	1f 90       	pop	r1
     9bc:	0f 90       	pop	r0
     9be:	0c be       	out	0x3c, r0	; 60
     9c0:	0f 90       	pop	r0
     9c2:	0b be       	out	0x3b, r0	; 59
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0
     9ca:	08 95       	ret

000009cc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	0f 92       	push	r0
     9d4:	0b b6       	in	r0, 0x3b	; 59
     9d6:	0f 92       	push	r0
     9d8:	0c b6       	in	r0, 0x3c	; 60
     9da:	0f 92       	push	r0
     9dc:	1f 92       	push	r1
     9de:	11 24       	eor	r1, r1
     9e0:	2f 92       	push	r2
     9e2:	3f 92       	push	r3
     9e4:	4f 92       	push	r4
     9e6:	5f 92       	push	r5
     9e8:	6f 92       	push	r6
     9ea:	7f 92       	push	r7
     9ec:	8f 92       	push	r8
     9ee:	9f 92       	push	r9
     9f0:	af 92       	push	r10
     9f2:	bf 92       	push	r11
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	2f 93       	push	r18
     a02:	3f 93       	push	r19
     a04:	4f 93       	push	r20
     a06:	5f 93       	push	r21
     a08:	6f 93       	push	r22
     a0a:	7f 93       	push	r23
     a0c:	8f 93       	push	r24
     a0e:	9f 93       	push	r25
     a10:	af 93       	push	r26
     a12:	bf 93       	push	r27
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ef 93       	push	r30
     a1a:	ff 93       	push	r31
     a1c:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
     a20:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
     a24:	0d b6       	in	r0, 0x3d	; 61
     a26:	0d 92       	st	X+, r0
     a28:	0e b6       	in	r0, 0x3e	; 62
     a2a:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a2c:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a2e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <xTaskIncrementTick>
     a32:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a34:	0e 94 ff 10 	call	0x21fe	; 0x21fe <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     a38:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
     a3c:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
     a40:	cd 91       	ld	r28, X+
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	dd 91       	ld	r29, X+
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	ff 91       	pop	r31
     a4a:	ef 91       	pop	r30
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	7f 90       	pop	r7
     a7a:	6f 90       	pop	r6
     a7c:	5f 90       	pop	r5
     a7e:	4f 90       	pop	r4
     a80:	3f 90       	pop	r3
     a82:	2f 90       	pop	r2
     a84:	1f 90       	pop	r1
     a86:	0f 90       	pop	r0
     a88:	0c be       	out	0x3c, r0	; 60
     a8a:	0f 90       	pop	r0
     a8c:	0b be       	out	0x3b, r0	; 59
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     a94:	08 95       	ret

00000a96 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     a96:	9a df       	rcall	.-204    	; 0x9cc <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     a98:	18 95       	reti

00000a9a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	0f 92       	push	r0
     aa0:	fc 01       	movw	r30, r24
     aa2:	96 8d       	ldd	r25, Z+30	; 0x1e
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	91 11       	cpse	r25, r1
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret

00000ab0 <prvCopyDataToQueue>:
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	ec 01       	movw	r28, r24
     aba:	04 2f       	mov	r16, r20
     abc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     abe:	48 a1       	ldd	r20, Y+32	; 0x20
     ac0:	41 11       	cpse	r20, r1
     ac2:	0c c0       	rjmp	.+24     	; 0xadc <prvCopyDataToQueue+0x2c>
     ac4:	88 81       	ld	r24, Y
     ac6:	99 81       	ldd	r25, Y+1	; 0x01
     ac8:	89 2b       	or	r24, r25
     aca:	09 f0       	breq	.+2      	; 0xace <prvCopyDataToQueue+0x1e>
     acc:	42 c0       	rjmp	.+132    	; 0xb52 <prvCopyDataToQueue+0xa2>
     ace:	8c 81       	ldd	r24, Y+4	; 0x04
     ad0:	9d 81       	ldd	r25, Y+5	; 0x05
     ad2:	0e 94 97 13 	call	0x272e	; 0x272e <xTaskPriorityDisinherit>
     ad6:	1d 82       	std	Y+5, r1	; 0x05
     ad8:	1c 82       	std	Y+4, r1	; 0x04
     ada:	42 c0       	rjmp	.+132    	; 0xb60 <prvCopyDataToQueue+0xb0>
     adc:	01 11       	cpse	r16, r1
     ade:	17 c0       	rjmp	.+46     	; 0xb0e <prvCopyDataToQueue+0x5e>
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	8a 81       	ldd	r24, Y+2	; 0x02
     ae4:	9b 81       	ldd	r25, Y+3	; 0x03
     ae6:	0e 94 50 31 	call	0x62a0	; 0x62a0 <memcpy>
     aea:	28 a1       	ldd	r18, Y+32	; 0x20
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	9b 81       	ldd	r25, Y+3	; 0x03
     af0:	82 0f       	add	r24, r18
     af2:	91 1d       	adc	r25, r1
     af4:	9b 83       	std	Y+3, r25	; 0x03
     af6:	8a 83       	std	Y+2, r24	; 0x02
     af8:	2c 81       	ldd	r18, Y+4	; 0x04
     afa:	3d 81       	ldd	r19, Y+5	; 0x05
     afc:	82 17       	cp	r24, r18
     afe:	93 07       	cpc	r25, r19
     b00:	50 f1       	brcs	.+84     	; 0xb56 <prvCopyDataToQueue+0xa6>
     b02:	88 81       	ld	r24, Y
     b04:	99 81       	ldd	r25, Y+1	; 0x01
     b06:	9b 83       	std	Y+3, r25	; 0x03
     b08:	8a 83       	std	Y+2, r24	; 0x02
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	29 c0       	rjmp	.+82     	; 0xb60 <prvCopyDataToQueue+0xb0>
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	8e 81       	ldd	r24, Y+6	; 0x06
     b12:	9f 81       	ldd	r25, Y+7	; 0x07
     b14:	0e 94 50 31 	call	0x62a0	; 0x62a0 <memcpy>
     b18:	88 a1       	ldd	r24, Y+32	; 0x20
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	91 95       	neg	r25
     b1e:	81 95       	neg	r24
     b20:	91 09       	sbc	r25, r1
     b22:	2e 81       	ldd	r18, Y+6	; 0x06
     b24:	3f 81       	ldd	r19, Y+7	; 0x07
     b26:	28 0f       	add	r18, r24
     b28:	39 1f       	adc	r19, r25
     b2a:	3f 83       	std	Y+7, r19	; 0x07
     b2c:	2e 83       	std	Y+6, r18	; 0x06
     b2e:	48 81       	ld	r20, Y
     b30:	59 81       	ldd	r21, Y+1	; 0x01
     b32:	24 17       	cp	r18, r20
     b34:	35 07       	cpc	r19, r21
     b36:	30 f4       	brcc	.+12     	; 0xb44 <prvCopyDataToQueue+0x94>
     b38:	2c 81       	ldd	r18, Y+4	; 0x04
     b3a:	3d 81       	ldd	r19, Y+5	; 0x05
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	9f 83       	std	Y+7, r25	; 0x07
     b42:	8e 83       	std	Y+6, r24	; 0x06
     b44:	02 30       	cpi	r16, 0x02	; 2
     b46:	49 f4       	brne	.+18     	; 0xb5a <prvCopyDataToQueue+0xaa>
     b48:	11 23       	and	r17, r17
     b4a:	49 f0       	breq	.+18     	; 0xb5e <prvCopyDataToQueue+0xae>
     b4c:	11 50       	subi	r17, 0x01	; 1
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	07 c0       	rjmp	.+14     	; 0xb60 <prvCopyDataToQueue+0xb0>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <prvCopyDataToQueue+0xb0>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <prvCopyDataToQueue+0xb0>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <prvCopyDataToQueue+0xb0>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	1f 5f       	subi	r17, 0xFF	; 255
     b62:	1e 8f       	std	Y+30, r17	; 0x1e
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	08 95       	ret

00000b6e <prvCopyDataFromQueue>:
     b6e:	fc 01       	movw	r30, r24
     b70:	40 a1       	ldd	r20, Z+32	; 0x20
     b72:	44 23       	and	r20, r20
     b74:	a9 f0       	breq	.+42     	; 0xba0 <prvCopyDataFromQueue+0x32>
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	26 81       	ldd	r18, Z+6	; 0x06
     b7a:	37 81       	ldd	r19, Z+7	; 0x07
     b7c:	24 0f       	add	r18, r20
     b7e:	35 1f       	adc	r19, r21
     b80:	37 83       	std	Z+7, r19	; 0x07
     b82:	26 83       	std	Z+6, r18	; 0x06
     b84:	84 81       	ldd	r24, Z+4	; 0x04
     b86:	95 81       	ldd	r25, Z+5	; 0x05
     b88:	28 17       	cp	r18, r24
     b8a:	39 07       	cpc	r19, r25
     b8c:	20 f0       	brcs	.+8      	; 0xb96 <prvCopyDataFromQueue+0x28>
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
     b92:	97 83       	std	Z+7, r25	; 0x07
     b94:	86 83       	std	Z+6, r24	; 0x06
     b96:	cb 01       	movw	r24, r22
     b98:	66 81       	ldd	r22, Z+6	; 0x06
     b9a:	77 81       	ldd	r23, Z+7	; 0x07
     b9c:	0c 94 50 31 	jmp	0x62a0	; 0x62a0 <memcpy>
     ba0:	08 95       	ret

00000ba2 <prvUnlockQueue>:
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	8c 01       	movw	r16, r24
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	0f 92       	push	r0
     bb4:	fc 01       	movw	r30, r24
     bb6:	c2 a1       	ldd	r28, Z+34	; 0x22
     bb8:	1c 16       	cp	r1, r28
     bba:	ac f4       	brge	.+42     	; 0xbe6 <prvUnlockQueue+0x44>
     bbc:	83 89       	ldd	r24, Z+19	; 0x13
     bbe:	81 11       	cpse	r24, r1
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <prvUnlockQueue+0x2c>
     bc2:	11 c0       	rjmp	.+34     	; 0xbe6 <prvUnlockQueue+0x44>
     bc4:	f8 01       	movw	r30, r16
     bc6:	83 89       	ldd	r24, Z+19	; 0x13
     bc8:	81 11       	cpse	r24, r1
     bca:	05 c0       	rjmp	.+10     	; 0xbd6 <prvUnlockQueue+0x34>
     bcc:	0c c0       	rjmp	.+24     	; 0xbe6 <prvUnlockQueue+0x44>
     bce:	78 01       	movw	r14, r16
     bd0:	f3 e1       	ldi	r31, 0x13	; 19
     bd2:	ef 0e       	add	r14, r31
     bd4:	f1 1c       	adc	r15, r1
     bd6:	c7 01       	movw	r24, r14
     bd8:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     bdc:	81 11       	cpse	r24, r1
     bde:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <vTaskMissedYield>
     be2:	c1 50       	subi	r28, 0x01	; 1
     be4:	79 f7       	brne	.-34     	; 0xbc4 <prvUnlockQueue+0x22>
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	f8 01       	movw	r30, r16
     bea:	82 a3       	std	Z+34, r24	; 0x22
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	0f 92       	push	r0
     bf6:	c1 a1       	ldd	r28, Z+33	; 0x21
     bf8:	1c 16       	cp	r1, r28
     bfa:	ac f4       	brge	.+42     	; 0xc26 <prvUnlockQueue+0x84>
     bfc:	80 85       	ldd	r24, Z+8	; 0x08
     bfe:	81 11       	cpse	r24, r1
     c00:	06 c0       	rjmp	.+12     	; 0xc0e <prvUnlockQueue+0x6c>
     c02:	11 c0       	rjmp	.+34     	; 0xc26 <prvUnlockQueue+0x84>
     c04:	f8 01       	movw	r30, r16
     c06:	80 85       	ldd	r24, Z+8	; 0x08
     c08:	81 11       	cpse	r24, r1
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <prvUnlockQueue+0x74>
     c0c:	0c c0       	rjmp	.+24     	; 0xc26 <prvUnlockQueue+0x84>
     c0e:	78 01       	movw	r14, r16
     c10:	f8 e0       	ldi	r31, 0x08	; 8
     c12:	ef 0e       	add	r14, r31
     c14:	f1 1c       	adc	r15, r1
     c16:	c7 01       	movw	r24, r14
     c18:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     c1c:	81 11       	cpse	r24, r1
     c1e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <vTaskMissedYield>
     c22:	c1 50       	subi	r28, 0x01	; 1
     c24:	79 f7       	brne	.-34     	; 0xc04 <prvUnlockQueue+0x62>
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	f8 01       	movw	r30, r16
     c2a:	81 a3       	std	Z+33, r24	; 0x21
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	08 95       	ret

00000c3c <xQueueGenericReset>:
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	0f 92       	push	r0
     c48:	e8 81       	ld	r30, Y
     c4a:	f9 81       	ldd	r31, Y+1	; 0x01
     c4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c4e:	28 a1       	ldd	r18, Y+32	; 0x20
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	82 9f       	mul	r24, r18
     c56:	a0 01       	movw	r20, r0
     c58:	83 9f       	mul	r24, r19
     c5a:	50 0d       	add	r21, r0
     c5c:	92 9f       	mul	r25, r18
     c5e:	50 0d       	add	r21, r0
     c60:	11 24       	eor	r1, r1
     c62:	4e 0f       	add	r20, r30
     c64:	5f 1f       	adc	r21, r31
     c66:	5d 83       	std	Y+5, r21	; 0x05
     c68:	4c 83       	std	Y+4, r20	; 0x04
     c6a:	1e 8e       	std	Y+30, r1	; 0x1e
     c6c:	fb 83       	std	Y+3, r31	; 0x03
     c6e:	ea 83       	std	Y+2, r30	; 0x02
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	82 9f       	mul	r24, r18
     c74:	a0 01       	movw	r20, r0
     c76:	83 9f       	mul	r24, r19
     c78:	50 0d       	add	r21, r0
     c7a:	92 9f       	mul	r25, r18
     c7c:	50 0d       	add	r21, r0
     c7e:	11 24       	eor	r1, r1
     c80:	cf 01       	movw	r24, r30
     c82:	84 0f       	add	r24, r20
     c84:	95 1f       	adc	r25, r21
     c86:	9f 83       	std	Y+7, r25	; 0x07
     c88:	8e 83       	std	Y+6, r24	; 0x06
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	89 a3       	std	Y+33, r24	; 0x21
     c8e:	8a a3       	std	Y+34, r24	; 0x22
     c90:	61 11       	cpse	r22, r1
     c92:	0b c0       	rjmp	.+22     	; 0xcaa <xQueueGenericReset+0x6e>
     c94:	88 85       	ldd	r24, Y+8	; 0x08
     c96:	88 23       	and	r24, r24
     c98:	71 f0       	breq	.+28     	; 0xcb6 <xQueueGenericReset+0x7a>
     c9a:	ce 01       	movw	r24, r28
     c9c:	08 96       	adiw	r24, 0x08	; 8
     c9e:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     ca2:	88 23       	and	r24, r24
     ca4:	41 f0       	breq	.+16     	; 0xcb6 <xQueueGenericReset+0x7a>
     ca6:	31 de       	rcall	.-926    	; 0x90a <vPortYield>
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <xQueueGenericReset+0x7a>
     caa:	ce 01       	movw	r24, r28
     cac:	08 96       	adiw	r24, 0x08	; 8
     cae:	61 dd       	rcall	.-1342   	; 0x772 <vListInitialise>
     cb0:	ce 01       	movw	r24, r28
     cb2:	43 96       	adiw	r24, 0x13	; 19
     cb4:	5e dd       	rcall	.-1348   	; 0x772 <vListInitialise>
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <xQueueGenericCreate>:
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	08 2f       	mov	r16, r24
     ccc:	16 2f       	mov	r17, r22
     cce:	86 9f       	mul	r24, r22
     cd0:	c0 01       	movw	r24, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	83 96       	adiw	r24, 0x23	; 35
     cd6:	4b dc       	rcall	.-1898   	; 0x56e <pvPortMalloc>
     cd8:	ec 01       	movw	r28, r24
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	69 f0       	breq	.+26     	; 0xcf8 <xQueueGenericCreate+0x36>
     cde:	11 11       	cpse	r17, r1
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <xQueueGenericCreate+0x26>
     ce2:	99 83       	std	Y+1, r25	; 0x01
     ce4:	88 83       	st	Y, r24
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <xQueueGenericCreate+0x2c>
     ce8:	83 96       	adiw	r24, 0x23	; 35
     cea:	99 83       	std	Y+1, r25	; 0x01
     cec:	88 83       	st	Y, r24
     cee:	0f 8f       	std	Y+31, r16	; 0x1f
     cf0:	18 a3       	std	Y+32, r17	; 0x20
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	ce 01       	movw	r24, r28
     cf6:	a2 df       	rcall	.-188    	; 0xc3c <xQueueGenericReset>
     cf8:	ce 01       	movw	r24, r28
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <xQueueGenericSend>:
     d04:	9f 92       	push	r9
     d06:	af 92       	push	r10
     d08:	bf 92       	push	r11
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	29 97       	sbiw	r28, 0x09	; 9
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	7c 01       	movw	r14, r24
     d2c:	5b 01       	movw	r10, r22
     d2e:	2e 83       	std	Y+6, r18	; 0x06
     d30:	3f 83       	std	Y+7, r19	; 0x07
     d32:	48 87       	std	Y+8, r20	; 0x08
     d34:	59 87       	std	Y+9, r21	; 0x09
     d36:	10 e0       	ldi	r17, 0x00	; 0
     d38:	99 24       	eor	r9, r9
     d3a:	93 94       	inc	r9
     d3c:	6c 01       	movw	r12, r24
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	c8 0e       	add	r12, r24
     d42:	d1 1c       	adc	r13, r1
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	0f 92       	push	r0
     d4a:	f7 01       	movw	r30, r14
     d4c:	96 8d       	ldd	r25, Z+30	; 0x1e
     d4e:	87 8d       	ldd	r24, Z+31	; 0x1f
     d50:	98 17       	cp	r25, r24
     d52:	10 f0       	brcs	.+4      	; 0xd58 <xQueueGenericSend+0x54>
     d54:	02 30       	cpi	r16, 0x02	; 2
     d56:	b1 f4       	brne	.+44     	; 0xd84 <xQueueGenericSend+0x80>
     d58:	40 2f       	mov	r20, r16
     d5a:	b5 01       	movw	r22, r10
     d5c:	c7 01       	movw	r24, r14
     d5e:	a8 de       	rcall	.-688    	; 0xab0 <prvCopyDataToQueue>
     d60:	f7 01       	movw	r30, r14
     d62:	93 89       	ldd	r25, Z+19	; 0x13
     d64:	99 23       	and	r25, r25
     d66:	41 f0       	breq	.+16     	; 0xd78 <xQueueGenericSend+0x74>
     d68:	c7 01       	movw	r24, r14
     d6a:	43 96       	adiw	r24, 0x13	; 19
     d6c:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     d70:	88 23       	and	r24, r24
     d72:	21 f0       	breq	.+8      	; 0xd7c <xQueueGenericSend+0x78>
     d74:	ca dd       	rcall	.-1132   	; 0x90a <vPortYield>
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <xQueueGenericSend+0x78>
     d78:	81 11       	cpse	r24, r1
     d7a:	c7 dd       	rcall	.-1138   	; 0x90a <vPortYield>
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	51 c0       	rjmp	.+162    	; 0xe26 <xQueueGenericSend+0x122>
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	9f 81       	ldd	r25, Y+7	; 0x07
     d88:	a8 85       	ldd	r26, Y+8	; 0x08
     d8a:	b9 85       	ldd	r27, Y+9	; 0x09
     d8c:	89 2b       	or	r24, r25
     d8e:	8a 2b       	or	r24, r26
     d90:	8b 2b       	or	r24, r27
     d92:	21 f4       	brne	.+8      	; 0xd9c <xQueueGenericSend+0x98>
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	45 c0       	rjmp	.+138    	; 0xe26 <xQueueGenericSend+0x122>
     d9c:	11 11       	cpse	r17, r1
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <xQueueGenericSend+0xa6>
     da0:	ce 01       	movw	r24, r28
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	0e 94 8f 12 	call	0x251e	; 0x251e <vTaskInternalSetTimeOutState>
     da8:	19 2d       	mov	r17, r9
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	7a d7       	rcall	.+3828   	; 0x1ca4 <vTaskSuspendAll>
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	0f 92       	push	r0
     db6:	f7 01       	movw	r30, r14
     db8:	81 a1       	ldd	r24, Z+33	; 0x21
     dba:	8f 3f       	cpi	r24, 0xFF	; 255
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <xQueueGenericSend+0xbc>
     dbe:	11 a2       	std	Z+33, r1	; 0x21
     dc0:	f7 01       	movw	r30, r14
     dc2:	82 a1       	ldd	r24, Z+34	; 0x22
     dc4:	8f 3f       	cpi	r24, 0xFF	; 255
     dc6:	09 f4       	brne	.+2      	; 0xdca <xQueueGenericSend+0xc6>
     dc8:	12 a2       	std	Z+34, r1	; 0x22
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	be 01       	movw	r22, r28
     dd0:	6a 5f       	subi	r22, 0xFA	; 250
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	ce 01       	movw	r24, r28
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	0e 94 a0 12 	call	0x2540	; 0x2540 <xTaskCheckForTimeOut>
     ddc:	81 11       	cpse	r24, r1
     dde:	1e c0       	rjmp	.+60     	; 0xe1c <xQueueGenericSend+0x118>
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	0f 92       	push	r0
     de6:	f7 01       	movw	r30, r14
     de8:	96 8d       	ldd	r25, Z+30	; 0x1e
     dea:	87 8d       	ldd	r24, Z+31	; 0x1f
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	98 13       	cpse	r25, r24
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <xQueueGenericSend+0x10e>
     df4:	4e 81       	ldd	r20, Y+6	; 0x06
     df6:	5f 81       	ldd	r21, Y+7	; 0x07
     df8:	68 85       	ldd	r22, Y+8	; 0x08
     dfa:	79 85       	ldd	r23, Y+9	; 0x09
     dfc:	c6 01       	movw	r24, r12
     dfe:	0e 94 70 11 	call	0x22e0	; 0x22e0 <vTaskPlaceOnEventList>
     e02:	c7 01       	movw	r24, r14
     e04:	ce de       	rcall	.-612    	; 0xba2 <prvUnlockQueue>
     e06:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     e0a:	81 11       	cpse	r24, r1
     e0c:	9b cf       	rjmp	.-202    	; 0xd44 <xQueueGenericSend+0x40>
     e0e:	7d dd       	rcall	.-1286   	; 0x90a <vPortYield>
     e10:	99 cf       	rjmp	.-206    	; 0xd44 <xQueueGenericSend+0x40>
     e12:	c7 01       	movw	r24, r14
     e14:	c6 de       	rcall	.-628    	; 0xba2 <prvUnlockQueue>
     e16:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     e1a:	94 cf       	rjmp	.-216    	; 0xd44 <xQueueGenericSend+0x40>
     e1c:	c7 01       	movw	r24, r14
     e1e:	c1 de       	rcall	.-638    	; 0xba2 <prvUnlockQueue>
     e20:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	29 96       	adiw	r28, 0x09	; 9
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	bf 90       	pop	r11
     e44:	af 90       	pop	r10
     e46:	9f 90       	pop	r9
     e48:	08 95       	ret

00000e4a <xQueueCreateMutex>:
     e4a:	0f 93       	push	r16
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	48 2f       	mov	r20, r24
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	35 df       	rcall	.-406    	; 0xcc2 <xQueueGenericCreate>
     e58:	ec 01       	movw	r28, r24
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	61 f0       	breq	.+24     	; 0xe76 <xQueueCreateMutex+0x2c>
     e5e:	1d 82       	std	Y+5, r1	; 0x05
     e60:	1c 82       	std	Y+4, r1	; 0x04
     e62:	19 82       	std	Y+1, r1	; 0x01
     e64:	18 82       	st	Y, r1
     e66:	1e 82       	std	Y+6, r1	; 0x06
     e68:	00 e0       	ldi	r16, 0x00	; 0
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	a9 01       	movw	r20, r18
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	47 df       	rcall	.-370    	; 0xd04 <xQueueGenericSend>
     e76:	ce 01       	movw	r24, r28
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	0f 91       	pop	r16
     e7e:	08 95       	ret

00000e80 <xQueueGenericSendFromISR>:
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	8a 01       	movw	r16, r20
     e8e:	fc 01       	movw	r30, r24
     e90:	56 8d       	ldd	r21, Z+30	; 0x1e
     e92:	37 8d       	ldd	r19, Z+31	; 0x1f
     e94:	53 17       	cp	r21, r19
     e96:	10 f0       	brcs	.+4      	; 0xe9c <xQueueGenericSendFromISR+0x1c>
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	f9 f4       	brne	.+62     	; 0xeda <xQueueGenericSendFromISR+0x5a>
     e9c:	42 2f       	mov	r20, r18
     e9e:	78 01       	movw	r14, r16
     ea0:	ec 01       	movw	r28, r24
     ea2:	1a a1       	ldd	r17, Y+34	; 0x22
     ea4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea6:	ce 01       	movw	r24, r28
     ea8:	03 de       	rcall	.-1018   	; 0xab0 <prvCopyDataToQueue>
     eaa:	1f 3f       	cpi	r17, 0xFF	; 255
     eac:	81 f4       	brne	.+32     	; 0xece <xQueueGenericSendFromISR+0x4e>
     eae:	8b 89       	ldd	r24, Y+19	; 0x13
     eb0:	88 23       	and	r24, r24
     eb2:	a9 f0       	breq	.+42     	; 0xede <xQueueGenericSendFromISR+0x5e>
     eb4:	ce 01       	movw	r24, r28
     eb6:	43 96       	adiw	r24, 0x13	; 19
     eb8:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     ebc:	88 23       	and	r24, r24
     ebe:	89 f0       	breq	.+34     	; 0xee2 <xQueueGenericSendFromISR+0x62>
     ec0:	e1 14       	cp	r14, r1
     ec2:	f1 04       	cpc	r15, r1
     ec4:	81 f0       	breq	.+32     	; 0xee6 <xQueueGenericSendFromISR+0x66>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	f7 01       	movw	r30, r14
     eca:	80 83       	st	Z, r24
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <xQueueGenericSendFromISR+0x68>
     ece:	ff 24       	eor	r15, r15
     ed0:	f3 94       	inc	r15
     ed2:	f1 0e       	add	r15, r17
     ed4:	fa a2       	std	Y+34, r15	; 0x22
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <xQueueGenericSendFromISR+0x68>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <xQueueGenericSendFromISR+0x68>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <xQueueGenericSendFromISR+0x68>
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <xQueueGenericSendFromISR+0x68>
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	08 95       	ret

00000ef6 <xQueueReceive>:
     ef6:	9f 92       	push	r9
     ef8:	af 92       	push	r10
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	29 97       	sbiw	r28, 0x09	; 9
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	8c 01       	movw	r16, r24
     f1e:	5b 01       	movw	r10, r22
     f20:	2e 83       	std	Y+6, r18	; 0x06
     f22:	3f 83       	std	Y+7, r19	; 0x07
     f24:	48 87       	std	Y+8, r20	; 0x08
     f26:	59 87       	std	Y+9, r21	; 0x09
     f28:	e1 2c       	mov	r14, r1
     f2a:	99 24       	eor	r9, r9
     f2c:	93 94       	inc	r9
     f2e:	6c 01       	movw	r12, r24
     f30:	83 e1       	ldi	r24, 0x13	; 19
     f32:	c8 0e       	add	r12, r24
     f34:	d1 1c       	adc	r13, r1
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	0f 92       	push	r0
     f3c:	f8 01       	movw	r30, r16
     f3e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f40:	ff 20       	and	r15, r15
     f42:	99 f0       	breq	.+38     	; 0xf6a <xQueueReceive+0x74>
     f44:	b5 01       	movw	r22, r10
     f46:	c8 01       	movw	r24, r16
     f48:	12 de       	rcall	.-988    	; 0xb6e <prvCopyDataFromQueue>
     f4a:	fa 94       	dec	r15
     f4c:	f8 01       	movw	r30, r16
     f4e:	f6 8e       	std	Z+30, r15	; 0x1e
     f50:	80 85       	ldd	r24, Z+8	; 0x08
     f52:	88 23       	and	r24, r24
     f54:	31 f0       	breq	.+12     	; 0xf62 <xQueueReceive+0x6c>
     f56:	c8 01       	movw	r24, r16
     f58:	08 96       	adiw	r24, 0x08	; 8
     f5a:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     f5e:	81 11       	cpse	r24, r1
     f60:	d4 dc       	rcall	.-1624   	; 0x90a <vPortYield>
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	4d c0       	rjmp	.+154    	; 0x1004 <xQueueReceive+0x10e>
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	9f 81       	ldd	r25, Y+7	; 0x07
     f6e:	a8 85       	ldd	r26, Y+8	; 0x08
     f70:	b9 85       	ldd	r27, Y+9	; 0x09
     f72:	89 2b       	or	r24, r25
     f74:	8a 2b       	or	r24, r26
     f76:	8b 2b       	or	r24, r27
     f78:	21 f4       	brne	.+8      	; 0xf82 <xQueueReceive+0x8c>
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	41 c0       	rjmp	.+130    	; 0x1004 <xQueueReceive+0x10e>
     f82:	e1 10       	cpse	r14, r1
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <xQueueReceive+0x9a>
     f86:	ce 01       	movw	r24, r28
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	0e 94 8f 12 	call	0x251e	; 0x251e <vTaskInternalSetTimeOutState>
     f8e:	e9 2c       	mov	r14, r9
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	87 d6       	rcall	.+3342   	; 0x1ca4 <vTaskSuspendAll>
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	0f 92       	push	r0
     f9c:	f8 01       	movw	r30, r16
     f9e:	81 a1       	ldd	r24, Z+33	; 0x21
     fa0:	8f 3f       	cpi	r24, 0xFF	; 255
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <xQueueReceive+0xb0>
     fa4:	11 a2       	std	Z+33, r1	; 0x21
     fa6:	f8 01       	movw	r30, r16
     fa8:	82 a1       	ldd	r24, Z+34	; 0x22
     faa:	8f 3f       	cpi	r24, 0xFF	; 255
     fac:	09 f4       	brne	.+2      	; 0xfb0 <xQueueReceive+0xba>
     fae:	12 a2       	std	Z+34, r1	; 0x22
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	be 01       	movw	r22, r28
     fb6:	6a 5f       	subi	r22, 0xFA	; 250
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	ce 01       	movw	r24, r28
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	0e 94 a0 12 	call	0x2540	; 0x2540 <xTaskCheckForTimeOut>
     fc2:	81 11       	cpse	r24, r1
     fc4:	16 c0       	rjmp	.+44     	; 0xff2 <xQueueReceive+0xfc>
     fc6:	c8 01       	movw	r24, r16
     fc8:	68 dd       	rcall	.-1328   	; 0xa9a <prvIsQueueEmpty>
     fca:	88 23       	and	r24, r24
     fcc:	71 f0       	breq	.+28     	; 0xfea <xQueueReceive+0xf4>
     fce:	4e 81       	ldd	r20, Y+6	; 0x06
     fd0:	5f 81       	ldd	r21, Y+7	; 0x07
     fd2:	68 85       	ldd	r22, Y+8	; 0x08
     fd4:	79 85       	ldd	r23, Y+9	; 0x09
     fd6:	c6 01       	movw	r24, r12
     fd8:	0e 94 70 11 	call	0x22e0	; 0x22e0 <vTaskPlaceOnEventList>
     fdc:	c8 01       	movw	r24, r16
     fde:	e1 dd       	rcall	.-1086   	; 0xba2 <prvUnlockQueue>
     fe0:	a5 d7       	rcall	.+3914   	; 0x1f2c <xTaskResumeAll>
     fe2:	81 11       	cpse	r24, r1
     fe4:	a8 cf       	rjmp	.-176    	; 0xf36 <xQueueReceive+0x40>
     fe6:	91 dc       	rcall	.-1758   	; 0x90a <vPortYield>
     fe8:	a6 cf       	rjmp	.-180    	; 0xf36 <xQueueReceive+0x40>
     fea:	c8 01       	movw	r24, r16
     fec:	da dd       	rcall	.-1100   	; 0xba2 <prvUnlockQueue>
     fee:	9e d7       	rcall	.+3900   	; 0x1f2c <xTaskResumeAll>
     ff0:	a2 cf       	rjmp	.-188    	; 0xf36 <xQueueReceive+0x40>
     ff2:	c8 01       	movw	r24, r16
     ff4:	d6 dd       	rcall	.-1108   	; 0xba2 <prvUnlockQueue>
     ff6:	9a d7       	rcall	.+3892   	; 0x1f2c <xTaskResumeAll>
     ff8:	c8 01       	movw	r24, r16
     ffa:	4f dd       	rcall	.-1378   	; 0xa9a <prvIsQueueEmpty>
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <xQueueReceive+0x10c>
    1000:	9a cf       	rjmp	.-204    	; 0xf36 <xQueueReceive+0x40>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	29 96       	adiw	r28, 0x09	; 9
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	bf 90       	pop	r11
    1022:	af 90       	pop	r10
    1024:	9f 90       	pop	r9
    1026:	08 95       	ret

00001028 <xQueueSemaphoreTake>:
    1028:	bf 92       	push	r11
    102a:	cf 92       	push	r12
    102c:	df 92       	push	r13
    102e:	ef 92       	push	r14
    1030:	ff 92       	push	r15
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	29 97       	sbiw	r28, 0x09	; 9
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	8c 01       	movw	r16, r24
    104c:	4e 83       	std	Y+6, r20	; 0x06
    104e:	5f 83       	std	Y+7, r21	; 0x07
    1050:	68 87       	std	Y+8, r22	; 0x08
    1052:	79 87       	std	Y+9, r23	; 0x09
    1054:	b1 2c       	mov	r11, r1
    1056:	d1 2c       	mov	r13, r1
    1058:	cc 24       	eor	r12, r12
    105a:	c3 94       	inc	r12
    105c:	7c 01       	movw	r14, r24
    105e:	83 e1       	ldi	r24, 0x13	; 19
    1060:	e8 0e       	add	r14, r24
    1062:	f1 1c       	adc	r15, r1
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	0f 92       	push	r0
    106a:	d8 01       	movw	r26, r16
    106c:	5e 96       	adiw	r26, 0x1e	; 30
    106e:	8c 91       	ld	r24, X
    1070:	5e 97       	sbiw	r26, 0x1e	; 30
    1072:	88 23       	and	r24, r24
    1074:	e1 f0       	breq	.+56     	; 0x10ae <xQueueSemaphoreTake+0x86>
    1076:	81 50       	subi	r24, 0x01	; 1
    1078:	5e 96       	adiw	r26, 0x1e	; 30
    107a:	8c 93       	st	X, r24
    107c:	5e 97       	sbiw	r26, 0x1e	; 30
    107e:	8d 91       	ld	r24, X+
    1080:	9c 91       	ld	r25, X
    1082:	89 2b       	or	r24, r25
    1084:	29 f4       	brne	.+10     	; 0x1090 <xQueueSemaphoreTake+0x68>
    1086:	0e 94 59 14 	call	0x28b2	; 0x28b2 <pvTaskIncrementMutexHeldCount>
    108a:	f8 01       	movw	r30, r16
    108c:	95 83       	std	Z+5, r25	; 0x05
    108e:	84 83       	std	Z+4, r24	; 0x04
    1090:	d8 01       	movw	r26, r16
    1092:	18 96       	adiw	r26, 0x08	; 8
    1094:	8c 91       	ld	r24, X
    1096:	88 23       	and	r24, r24
    1098:	31 f0       	breq	.+12     	; 0x10a6 <xQueueSemaphoreTake+0x7e>
    109a:	c8 01       	movw	r24, r16
    109c:	08 96       	adiw	r24, 0x08	; 8
    109e:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
    10a2:	81 11       	cpse	r24, r1
    10a4:	32 dc       	rcall	.-1948   	; 0x90a <vPortYield>
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	7b c0       	rjmp	.+246    	; 0x11a4 <xQueueSemaphoreTake+0x17c>
    10ae:	8e 81       	ldd	r24, Y+6	; 0x06
    10b0:	9f 81       	ldd	r25, Y+7	; 0x07
    10b2:	a8 85       	ldd	r26, Y+8	; 0x08
    10b4:	b9 85       	ldd	r27, Y+9	; 0x09
    10b6:	89 2b       	or	r24, r25
    10b8:	8a 2b       	or	r24, r26
    10ba:	8b 2b       	or	r24, r27
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <xQueueSemaphoreTake+0x9e>
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	6f c0       	rjmp	.+222    	; 0x11a4 <xQueueSemaphoreTake+0x17c>
    10c6:	d1 10       	cpse	r13, r1
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <xQueueSemaphoreTake+0xac>
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	0e 94 8f 12 	call	0x251e	; 0x251e <vTaskInternalSetTimeOutState>
    10d2:	dc 2c       	mov	r13, r12
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	e5 d5       	rcall	.+3018   	; 0x1ca4 <vTaskSuspendAll>
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	0f 92       	push	r0
    10e0:	f8 01       	movw	r30, r16
    10e2:	81 a1       	ldd	r24, Z+33	; 0x21
    10e4:	8f 3f       	cpi	r24, 0xFF	; 255
    10e6:	09 f4       	brne	.+2      	; 0x10ea <xQueueSemaphoreTake+0xc2>
    10e8:	11 a2       	std	Z+33, r1	; 0x21
    10ea:	d8 01       	movw	r26, r16
    10ec:	92 96       	adiw	r26, 0x22	; 34
    10ee:	8c 91       	ld	r24, X
    10f0:	92 97       	sbiw	r26, 0x22	; 34
    10f2:	8f 3f       	cpi	r24, 0xFF	; 255
    10f4:	11 f4       	brne	.+4      	; 0x10fa <xQueueSemaphoreTake+0xd2>
    10f6:	92 96       	adiw	r26, 0x22	; 34
    10f8:	1c 92       	st	X, r1
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	be 01       	movw	r22, r28
    1100:	6a 5f       	subi	r22, 0xFA	; 250
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	ce 01       	movw	r24, r28
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	0e 94 a0 12 	call	0x2540	; 0x2540 <xTaskCheckForTimeOut>
    110c:	81 11       	cpse	r24, r1
    110e:	25 c0       	rjmp	.+74     	; 0x115a <xQueueSemaphoreTake+0x132>
    1110:	c8 01       	movw	r24, r16
    1112:	c3 dc       	rcall	.-1658   	; 0xa9a <prvIsQueueEmpty>
    1114:	88 23       	and	r24, r24
    1116:	e9 f0       	breq	.+58     	; 0x1152 <xQueueSemaphoreTake+0x12a>
    1118:	f8 01       	movw	r30, r16
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	89 2b       	or	r24, r25
    1120:	51 f4       	brne	.+20     	; 0x1136 <xQueueSemaphoreTake+0x10e>
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	0f 92       	push	r0
    1128:	84 81       	ldd	r24, Z+4	; 0x04
    112a:	95 81       	ldd	r25, Z+5	; 0x05
    112c:	0e 94 10 13 	call	0x2620	; 0x2620 <xTaskPriorityInherit>
    1130:	b8 2e       	mov	r11, r24
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	4e 81       	ldd	r20, Y+6	; 0x06
    1138:	5f 81       	ldd	r21, Y+7	; 0x07
    113a:	68 85       	ldd	r22, Y+8	; 0x08
    113c:	79 85       	ldd	r23, Y+9	; 0x09
    113e:	c7 01       	movw	r24, r14
    1140:	0e 94 70 11 	call	0x22e0	; 0x22e0 <vTaskPlaceOnEventList>
    1144:	c8 01       	movw	r24, r16
    1146:	2d dd       	rcall	.-1446   	; 0xba2 <prvUnlockQueue>
    1148:	f1 d6       	rcall	.+3554   	; 0x1f2c <xTaskResumeAll>
    114a:	81 11       	cpse	r24, r1
    114c:	8b cf       	rjmp	.-234    	; 0x1064 <xQueueSemaphoreTake+0x3c>
    114e:	dd db       	rcall	.-2118   	; 0x90a <vPortYield>
    1150:	89 cf       	rjmp	.-238    	; 0x1064 <xQueueSemaphoreTake+0x3c>
    1152:	c8 01       	movw	r24, r16
    1154:	26 dd       	rcall	.-1460   	; 0xba2 <prvUnlockQueue>
    1156:	ea d6       	rcall	.+3540   	; 0x1f2c <xTaskResumeAll>
    1158:	85 cf       	rjmp	.-246    	; 0x1064 <xQueueSemaphoreTake+0x3c>
    115a:	c8 01       	movw	r24, r16
    115c:	22 dd       	rcall	.-1468   	; 0xba2 <prvUnlockQueue>
    115e:	e6 d6       	rcall	.+3532   	; 0x1f2c <xTaskResumeAll>
    1160:	c8 01       	movw	r24, r16
    1162:	9b dc       	rcall	.-1738   	; 0xa9a <prvIsQueueEmpty>
    1164:	88 23       	and	r24, r24
    1166:	09 f4       	brne	.+2      	; 0x116a <xQueueSemaphoreTake+0x142>
    1168:	7d cf       	rjmp	.-262    	; 0x1064 <xQueueSemaphoreTake+0x3c>
    116a:	bb 20       	and	r11, r11
    116c:	d1 f0       	breq	.+52     	; 0x11a2 <xQueueSemaphoreTake+0x17a>
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	0f 92       	push	r0
    1174:	f8 01       	movw	r30, r16
    1176:	83 89       	ldd	r24, Z+19	; 0x13
    1178:	88 23       	and	r24, r24
    117a:	39 f0       	breq	.+14     	; 0x118a <xQueueSemaphoreTake+0x162>
    117c:	02 8c       	ldd	r0, Z+26	; 0x1a
    117e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1180:	e0 2d       	mov	r30, r0
    1182:	80 81       	ld	r24, Z
    1184:	6a e0       	ldi	r22, 0x0A	; 10
    1186:	68 1b       	sub	r22, r24
    1188:	01 c0       	rjmp	.+2      	; 0x118c <xQueueSemaphoreTake+0x164>
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	d8 01       	movw	r26, r16
    118e:	14 96       	adiw	r26, 0x04	; 4
    1190:	8d 91       	ld	r24, X+
    1192:	9c 91       	ld	r25, X
    1194:	15 97       	sbiw	r26, 0x05	; 5
    1196:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <vTaskPriorityDisinheritAfterTimeout>
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <xQueueSemaphoreTake+0x17c>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	29 96       	adiw	r28, 0x09	; 9
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	ef 90       	pop	r14
    11bc:	df 90       	pop	r13
    11be:	cf 90       	pop	r12
    11c0:	bf 90       	pop	r11
    11c2:	08 95       	ret

000011c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	0f 92       	push	r0
    11d0:	89 a1       	ldd	r24, Y+33	; 0x21
    11d2:	8f 3f       	cpi	r24, 0xFF	; 255
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <vQueueWaitForMessageRestricted+0x14>
    11d6:	19 a2       	std	Y+33, r1	; 0x21
    11d8:	8a a1       	ldd	r24, Y+34	; 0x22
    11da:	8f 3f       	cpi	r24, 0xFF	; 255
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <vQueueWaitForMessageRestricted+0x1c>
    11de:	1a a2       	std	Y+34, r1	; 0x22
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    11e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11e6:	81 11       	cpse	r24, r1
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    11ea:	ce 01       	movw	r24, r28
    11ec:	43 96       	adiw	r24, 0x13	; 19
    11ee:	0e 94 87 11 	call	0x230e	; 0x230e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    11f2:	ce 01       	movw	r24, r28
    11f4:	d6 dc       	rcall	.-1620   	; 0xba2 <prvUnlockQueue>
    }
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    11fc:	fc 01       	movw	r30, r24
    11fe:	44 81       	ldd	r20, Z+4	; 0x04
    1200:	55 81       	ldd	r21, Z+5	; 0x05
    1202:	22 81       	ldd	r18, Z+2	; 0x02
    1204:	33 81       	ldd	r19, Z+3	; 0x03
    1206:	24 0f       	add	r18, r20
    1208:	35 1f       	adc	r19, r21
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	b9 01       	movw	r22, r18
    1210:	68 1b       	sub	r22, r24
    1212:	79 0b       	sbc	r23, r25
    1214:	cb 01       	movw	r24, r22
    1216:	64 17       	cp	r22, r20
    1218:	75 07       	cpc	r23, r21
    121a:	10 f0       	brcs	.+4      	; 0x1220 <prvBytesInBuffer+0x24>
    121c:	84 1b       	sub	r24, r20
    121e:	95 0b       	sbc	r25, r21
    1220:	08 95       	ret

00001222 <prvWriteBytesToBuffer>:
    1222:	af 92       	push	r10
    1224:	bf 92       	push	r11
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	6c 01       	movw	r12, r24
    1238:	5b 01       	movw	r10, r22
    123a:	7a 01       	movw	r14, r20
    123c:	fc 01       	movw	r30, r24
    123e:	c2 81       	ldd	r28, Z+2	; 0x02
    1240:	d3 81       	ldd	r29, Z+3	; 0x03
    1242:	04 81       	ldd	r16, Z+4	; 0x04
    1244:	15 81       	ldd	r17, Z+5	; 0x05
    1246:	0c 1b       	sub	r16, r28
    1248:	1d 0b       	sbc	r17, r29
    124a:	40 17       	cp	r20, r16
    124c:	51 07       	cpc	r21, r17
    124e:	08 f4       	brcc	.+2      	; 0x1252 <prvWriteBytesToBuffer+0x30>
    1250:	8a 01       	movw	r16, r20
    1252:	f6 01       	movw	r30, r12
    1254:	84 85       	ldd	r24, Z+12	; 0x0c
    1256:	95 85       	ldd	r25, Z+13	; 0x0d
    1258:	a8 01       	movw	r20, r16
    125a:	b5 01       	movw	r22, r10
    125c:	8c 0f       	add	r24, r28
    125e:	9d 1f       	adc	r25, r29
    1260:	0e 94 50 31 	call	0x62a0	; 0x62a0 <memcpy>
    1264:	0e 15       	cp	r16, r14
    1266:	1f 05       	cpc	r17, r15
    1268:	58 f4       	brcc	.+22     	; 0x1280 <prvWriteBytesToBuffer+0x5e>
    126a:	a7 01       	movw	r20, r14
    126c:	40 1b       	sub	r20, r16
    126e:	51 0b       	sbc	r21, r17
    1270:	b5 01       	movw	r22, r10
    1272:	60 0f       	add	r22, r16
    1274:	71 1f       	adc	r23, r17
    1276:	f6 01       	movw	r30, r12
    1278:	84 85       	ldd	r24, Z+12	; 0x0c
    127a:	95 85       	ldd	r25, Z+13	; 0x0d
    127c:	0e 94 50 31 	call	0x62a0	; 0x62a0 <memcpy>
    1280:	ce 01       	movw	r24, r28
    1282:	8e 0d       	add	r24, r14
    1284:	9f 1d       	adc	r25, r15
    1286:	f6 01       	movw	r30, r12
    1288:	24 81       	ldd	r18, Z+4	; 0x04
    128a:	35 81       	ldd	r19, Z+5	; 0x05
    128c:	82 17       	cp	r24, r18
    128e:	93 07       	cpc	r25, r19
    1290:	10 f0       	brcs	.+4      	; 0x1296 <prvWriteBytesToBuffer+0x74>
    1292:	82 1b       	sub	r24, r18
    1294:	93 0b       	sbc	r25, r19
    1296:	f6 01       	movw	r30, r12
    1298:	93 83       	std	Z+3, r25	; 0x03
    129a:	82 83       	std	Z+2, r24	; 0x02
    129c:	c7 01       	movw	r24, r14
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	bf 90       	pop	r11
    12b0:	af 90       	pop	r10
    12b2:	08 95       	ret

000012b4 <prvWriteMessageToBuffer>:
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	1f 92       	push	r1
    12c6:	1f 92       	push	r1
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	5a 83       	std	Y+2, r21	; 0x02
    12ce:	49 83       	std	Y+1, r20	; 0x01
    12d0:	21 15       	cp	r18, r1
    12d2:	31 05       	cpc	r19, r1
    12d4:	c9 f0       	breq	.+50     	; 0x1308 <prvWriteMessageToBuffer+0x54>
    12d6:	6b 01       	movw	r12, r22
    12d8:	7c 01       	movw	r14, r24
    12da:	fc 01       	movw	r30, r24
    12dc:	86 85       	ldd	r24, Z+14	; 0x0e
    12de:	80 fd       	sbrc	r24, 0
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <prvWriteMessageToBuffer+0x3e>
    12e2:	ca 01       	movw	r24, r20
    12e4:	24 17       	cp	r18, r20
    12e6:	35 07       	cpc	r19, r21
    12e8:	08 f4       	brcc	.+2      	; 0x12ec <prvWriteMessageToBuffer+0x38>
    12ea:	c9 01       	movw	r24, r18
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	11 c0       	rjmp	.+34     	; 0x1314 <prvWriteMessageToBuffer+0x60>
    12f2:	20 17       	cp	r18, r16
    12f4:	31 07       	cpc	r19, r17
    12f6:	58 f0       	brcs	.+22     	; 0x130e <prvWriteMessageToBuffer+0x5a>
    12f8:	42 e0       	ldi	r20, 0x02	; 2
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	be 01       	movw	r22, r28
    12fe:	6f 5f       	subi	r22, 0xFF	; 255
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	c7 01       	movw	r24, r14
    1304:	8e df       	rcall	.-228    	; 0x1222 <prvWriteBytesToBuffer>
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <prvWriteMessageToBuffer+0x60>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	08 c0       	rjmp	.+16     	; 0x131e <prvWriteMessageToBuffer+0x6a>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	05 c0       	rjmp	.+10     	; 0x131e <prvWriteMessageToBuffer+0x6a>
    1314:	49 81       	ldd	r20, Y+1	; 0x01
    1316:	5a 81       	ldd	r21, Y+2	; 0x02
    1318:	b6 01       	movw	r22, r12
    131a:	c7 01       	movw	r24, r14
    131c:	82 df       	rcall	.-252    	; 0x1222 <prvWriteBytesToBuffer>
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	08 95       	ret

00001334 <prvReadBytesFromBuffer>:
    1334:	af 92       	push	r10
    1336:	bf 92       	push	r11
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	7c 01       	movw	r14, r24
    134a:	5b 01       	movw	r10, r22
    134c:	e9 01       	movw	r28, r18
    134e:	42 17       	cp	r20, r18
    1350:	53 07       	cpc	r21, r19
    1352:	08 f4       	brcc	.+2      	; 0x1356 <prvReadBytesFromBuffer+0x22>
    1354:	ea 01       	movw	r28, r20
    1356:	20 97       	sbiw	r28, 0x00	; 0
    1358:	79 f1       	breq	.+94     	; 0x13b8 <prvReadBytesFromBuffer+0x84>
    135a:	f7 01       	movw	r30, r14
    135c:	00 81       	ld	r16, Z
    135e:	11 81       	ldd	r17, Z+1	; 0x01
    1360:	c4 80       	ldd	r12, Z+4	; 0x04
    1362:	d5 80       	ldd	r13, Z+5	; 0x05
    1364:	c0 1a       	sub	r12, r16
    1366:	d1 0a       	sbc	r13, r17
    1368:	cc 15       	cp	r28, r12
    136a:	dd 05       	cpc	r29, r13
    136c:	08 f4       	brcc	.+2      	; 0x1370 <prvReadBytesFromBuffer+0x3c>
    136e:	6e 01       	movw	r12, r28
    1370:	f7 01       	movw	r30, r14
    1372:	64 85       	ldd	r22, Z+12	; 0x0c
    1374:	75 85       	ldd	r23, Z+13	; 0x0d
    1376:	60 0f       	add	r22, r16
    1378:	71 1f       	adc	r23, r17
    137a:	a6 01       	movw	r20, r12
    137c:	c5 01       	movw	r24, r10
    137e:	0e 94 50 31 	call	0x62a0	; 0x62a0 <memcpy>
    1382:	cc 16       	cp	r12, r28
    1384:	dd 06       	cpc	r13, r29
    1386:	58 f4       	brcc	.+22     	; 0x139e <prvReadBytesFromBuffer+0x6a>
    1388:	ae 01       	movw	r20, r28
    138a:	4c 19       	sub	r20, r12
    138c:	5d 09       	sbc	r21, r13
    138e:	f7 01       	movw	r30, r14
    1390:	64 85       	ldd	r22, Z+12	; 0x0c
    1392:	75 85       	ldd	r23, Z+13	; 0x0d
    1394:	c5 01       	movw	r24, r10
    1396:	8c 0d       	add	r24, r12
    1398:	9d 1d       	adc	r25, r13
    139a:	0e 94 50 31 	call	0x62a0	; 0x62a0 <memcpy>
    139e:	0c 0f       	add	r16, r28
    13a0:	1d 1f       	adc	r17, r29
    13a2:	f7 01       	movw	r30, r14
    13a4:	84 81       	ldd	r24, Z+4	; 0x04
    13a6:	95 81       	ldd	r25, Z+5	; 0x05
    13a8:	08 17       	cp	r16, r24
    13aa:	19 07       	cpc	r17, r25
    13ac:	10 f0       	brcs	.+4      	; 0x13b2 <prvReadBytesFromBuffer+0x7e>
    13ae:	08 1b       	sub	r16, r24
    13b0:	19 0b       	sbc	r17, r25
    13b2:	f7 01       	movw	r30, r14
    13b4:	11 83       	std	Z+1, r17	; 0x01
    13b6:	00 83       	st	Z, r16
    13b8:	ce 01       	movw	r24, r28
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	08 95       	ret

000013d0 <xStreamBufferGenericCreate>:
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	8b 01       	movw	r16, r22
    13dc:	ff 24       	eor	r15, r15
    13de:	f3 94       	inc	r15
    13e0:	41 30       	cpi	r20, 0x01	; 1
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <xStreamBufferGenericCreate+0x16>
    13e4:	f1 2c       	mov	r15, r1
    13e6:	01 15       	cp	r16, r1
    13e8:	11 05       	cpc	r17, r1
    13ea:	11 f4       	brne	.+4      	; 0x13f0 <xStreamBufferGenericCreate+0x20>
    13ec:	01 e0       	ldi	r16, 0x01	; 1
    13ee:	10 e0       	ldi	r17, 0x00	; 0
    13f0:	9c 01       	movw	r18, r24
    13f2:	20 5f       	subi	r18, 0xF0	; 240
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	82 17       	cp	r24, r18
    13f8:	93 07       	cpc	r25, r19
    13fa:	b0 f4       	brcc	.+44     	; 0x1428 <xStreamBufferGenericCreate+0x58>
    13fc:	ec 01       	movw	r28, r24
    13fe:	21 96       	adiw	r28, 0x01	; 1
    1400:	c9 01       	movw	r24, r18
    1402:	b5 d8       	rcall	.-3734   	; 0x56e <pvPortMalloc>
    1404:	fc 01       	movw	r30, r24
    1406:	89 2b       	or	r24, r25
    1408:	89 f0       	breq	.+34     	; 0x142c <xStreamBufferGenericCreate+0x5c>
    140a:	8f e0       	ldi	r24, 0x0F	; 15
    140c:	df 01       	movw	r26, r30
    140e:	1d 92       	st	X+, r1
    1410:	8a 95       	dec	r24
    1412:	e9 f7       	brne	.-6      	; 0x140e <xStreamBufferGenericCreate+0x3e>
    1414:	cf 01       	movw	r24, r30
    1416:	0f 96       	adiw	r24, 0x0f	; 15
    1418:	95 87       	std	Z+13, r25	; 0x0d
    141a:	84 87       	std	Z+12, r24	; 0x0c
    141c:	d5 83       	std	Z+5, r29	; 0x05
    141e:	c4 83       	std	Z+4, r28	; 0x04
    1420:	17 83       	std	Z+7, r17	; 0x07
    1422:	06 83       	std	Z+6, r16	; 0x06
    1424:	f6 86       	std	Z+14, r15	; 0x0e
    1426:	02 c0       	rjmp	.+4      	; 0x142c <xStreamBufferGenericCreate+0x5c>
    1428:	e0 e0       	ldi	r30, 0x00	; 0
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	cf 01       	movw	r24, r30
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	08 95       	ret

0000143a <xStreamBufferReset>:
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	0f 92       	push	r0
    1440:	dc 01       	movw	r26, r24
    1442:	18 96       	adiw	r26, 0x08	; 8
    1444:	2d 91       	ld	r18, X+
    1446:	3c 91       	ld	r19, X
    1448:	19 97       	sbiw	r26, 0x09	; 9
    144a:	23 2b       	or	r18, r19
    144c:	51 f5       	brne	.+84     	; 0x14a2 <xStreamBufferReset+0x68>
    144e:	1a 96       	adiw	r26, 0x0a	; 10
    1450:	2d 91       	ld	r18, X+
    1452:	3c 91       	ld	r19, X
    1454:	1b 97       	sbiw	r26, 0x0b	; 11
    1456:	23 2b       	or	r18, r19
    1458:	31 f5       	brne	.+76     	; 0x14a6 <xStreamBufferReset+0x6c>
    145a:	1e 96       	adiw	r26, 0x0e	; 14
    145c:	2c 91       	ld	r18, X
    145e:	1e 97       	sbiw	r26, 0x0e	; 14
    1460:	16 96       	adiw	r26, 0x06	; 6
    1462:	4d 91       	ld	r20, X+
    1464:	5c 91       	ld	r21, X
    1466:	17 97       	sbiw	r26, 0x07	; 7
    1468:	14 96       	adiw	r26, 0x04	; 4
    146a:	6d 91       	ld	r22, X+
    146c:	7c 91       	ld	r23, X
    146e:	15 97       	sbiw	r26, 0x05	; 5
    1470:	1c 96       	adiw	r26, 0x0c	; 12
    1472:	ed 91       	ld	r30, X+
    1474:	fc 91       	ld	r31, X
    1476:	1d 97       	sbiw	r26, 0x0d	; 13
    1478:	3f e0       	ldi	r19, 0x0F	; 15
    147a:	1d 92       	st	X+, r1
    147c:	3a 95       	dec	r19
    147e:	e9 f7       	brne	.-6      	; 0x147a <xStreamBufferReset+0x40>
    1480:	dc 01       	movw	r26, r24
    1482:	1d 96       	adiw	r26, 0x0d	; 13
    1484:	fc 93       	st	X, r31
    1486:	ee 93       	st	-X, r30
    1488:	1c 97       	sbiw	r26, 0x0c	; 12
    148a:	15 96       	adiw	r26, 0x05	; 5
    148c:	7c 93       	st	X, r23
    148e:	6e 93       	st	-X, r22
    1490:	14 97       	sbiw	r26, 0x04	; 4
    1492:	17 96       	adiw	r26, 0x07	; 7
    1494:	5c 93       	st	X, r21
    1496:	4e 93       	st	-X, r20
    1498:	16 97       	sbiw	r26, 0x06	; 6
    149a:	1e 96       	adiw	r26, 0x0e	; 14
    149c:	2c 93       	st	X, r18
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <xStreamBufferReset+0x6e>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <xStreamBufferReset+0x6e>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	08 95       	ret

000014ae <xStreamBufferSpacesAvailable>:
    14ae:	fc 01       	movw	r30, r24
    14b0:	24 81       	ldd	r18, Z+4	; 0x04
    14b2:	35 81       	ldd	r19, Z+5	; 0x05
    14b4:	80 81       	ld	r24, Z
    14b6:	91 81       	ldd	r25, Z+1	; 0x01
    14b8:	42 81       	ldd	r20, Z+2	; 0x02
    14ba:	53 81       	ldd	r21, Z+3	; 0x03
    14bc:	82 0f       	add	r24, r18
    14be:	93 1f       	adc	r25, r19
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	84 1b       	sub	r24, r20
    14c4:	95 0b       	sbc	r25, r21
    14c6:	82 17       	cp	r24, r18
    14c8:	93 07       	cpc	r25, r19
    14ca:	10 f0       	brcs	.+4      	; 0x14d0 <xStreamBufferSpacesAvailable+0x22>
    14cc:	82 1b       	sub	r24, r18
    14ce:	93 0b       	sbc	r25, r19
    14d0:	08 95       	ret

000014d2 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    14d2:	2f 92       	push	r2
    14d4:	3f 92       	push	r3
    14d6:	4f 92       	push	r4
    14d8:	5f 92       	push	r5
    14da:	6f 92       	push	r6
    14dc:	7f 92       	push	r7
    14de:	8f 92       	push	r8
    14e0:	9f 92       	push	r9
    14e2:	af 92       	push	r10
    14e4:	bf 92       	push	r11
    14e6:	cf 92       	push	r12
    14e8:	df 92       	push	r13
    14ea:	ef 92       	push	r14
    14ec:	ff 92       	push	r15
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	2b 97       	sbiw	r28, 0x0b	; 11
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	4c 01       	movw	r8, r24
    1508:	7b 87       	std	Y+11, r23	; 0x0b
    150a:	6a 87       	std	Y+10, r22	; 0x0a
    150c:	1a 01       	movw	r2, r20
    150e:	0e 83       	std	Y+6, r16	; 0x06
    1510:	1f 83       	std	Y+7, r17	; 0x07
    1512:	28 87       	std	Y+8, r18	; 0x08
    1514:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1516:	fc 01       	movw	r30, r24
    1518:	84 81       	ldd	r24, Z+4	; 0x04
    151a:	95 81       	ldd	r25, Z+5	; 0x05
    151c:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    151e:	26 85       	ldd	r18, Z+14	; 0x0e
    1520:	20 ff       	sbrs	r18, 0
    1522:	0c c0       	rjmp	.+24     	; 0x153c <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1524:	2a 01       	movw	r4, r20
    1526:	f2 e0       	ldi	r31, 0x02	; 2
    1528:	4f 0e       	add	r4, r31
    152a:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    152c:	84 15       	cp	r24, r4
    152e:	95 05       	cpc	r25, r5
    1530:	50 f4       	brcc	.+20     	; 0x1546 <xStreamBufferSend+0x74>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1532:	1e 82       	std	Y+6, r1	; 0x06
    1534:	1f 82       	std	Y+7, r1	; 0x07
    1536:	18 86       	std	Y+8, r1	; 0x08
    1538:	19 86       	std	Y+9, r1	; 0x09
    153a:	46 c0       	rjmp	.+140    	; 0x15c8 <xStreamBufferSend+0xf6>
    153c:	2a 01       	movw	r4, r20
    153e:	84 17       	cp	r24, r20
    1540:	95 07       	cpc	r25, r21
    1542:	08 f4       	brcc	.+2      	; 0x1546 <xStreamBufferSend+0x74>
    1544:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1546:	8e 81       	ldd	r24, Y+6	; 0x06
    1548:	9f 81       	ldd	r25, Y+7	; 0x07
    154a:	a8 85       	ldd	r26, Y+8	; 0x08
    154c:	b9 85       	ldd	r27, Y+9	; 0x09
    154e:	89 2b       	or	r24, r25
    1550:	8a 2b       	or	r24, r26
    1552:	8b 2b       	or	r24, r27
    1554:	09 f4       	brne	.+2      	; 0x1558 <xStreamBufferSend+0x86>
    1556:	38 c0       	rjmp	.+112    	; 0x15c8 <xStreamBufferSend+0xf6>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1558:	ce 01       	movw	r24, r28
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	ca d7       	rcall	.+3988   	; 0x24f2 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1564:	c4 01       	movw	r24, r8
    1566:	a3 df       	rcall	.-186    	; 0x14ae <xStreamBufferSpacesAvailable>
    1568:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    156a:	84 15       	cp	r24, r4
    156c:	95 05       	cpc	r25, r5
    156e:	38 f5       	brcc	.+78     	; 0x15be <xStreamBufferSend+0xec>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    157a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <xTaskGetCurrentTaskHandle>
    157e:	f4 01       	movw	r30, r8
    1580:	93 87       	std	Z+11, r25	; 0x0b
    1582:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1588:	ae 80       	ldd	r10, Y+6	; 0x06
    158a:	bf 80       	ldd	r11, Y+7	; 0x07
    158c:	c8 84       	ldd	r12, Y+8	; 0x08
    158e:	d9 84       	ldd	r13, Y+9	; 0x09
    1590:	e1 2c       	mov	r14, r1
    1592:	f1 2c       	mov	r15, r1
    1594:	00 e0       	ldi	r16, 0x00	; 0
    1596:	10 e0       	ldi	r17, 0x00	; 0
    1598:	98 01       	movw	r18, r16
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	ba 01       	movw	r22, r20
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    15a6:	f4 01       	movw	r30, r8
    15a8:	13 86       	std	Z+11, r1	; 0x0b
    15aa:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    15ac:	be 01       	movw	r22, r28
    15ae:	6a 5f       	subi	r22, 0xFA	; 250
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	c4 d7       	rcall	.+3976   	; 0x2540 <xTaskCheckForTimeOut>
    15b8:	88 23       	and	r24, r24
    15ba:	89 f2       	breq	.-94     	; 0x155e <xStreamBufferSend+0x8c>
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <xStreamBufferSend+0xf0>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    15be:	0f 90       	pop	r0
    15c0:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    15c2:	61 14       	cp	r6, r1
    15c4:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    15c6:	19 f4       	brne	.+6      	; 0x15ce <xStreamBufferSend+0xfc>
    15c8:	c4 01       	movw	r24, r8
    15ca:	71 df       	rcall	.-286    	; 0x14ae <xStreamBufferSpacesAvailable>
    15cc:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    15ce:	82 01       	movw	r16, r4
    15d0:	93 01       	movw	r18, r6
    15d2:	a1 01       	movw	r20, r2
    15d4:	6a 85       	ldd	r22, Y+10	; 0x0a
    15d6:	7b 85       	ldd	r23, Y+11	; 0x0b
    15d8:	c4 01       	movw	r24, r8
    15da:	6c de       	rcall	.-808    	; 0x12b4 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    15dc:	6c 01       	movw	r12, r24
    15de:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    15e0:	e9 f0       	breq	.+58     	; 0x161c <xStreamBufferSend+0x14a>
    15e2:	c4 01       	movw	r24, r8
    15e4:	0b de       	rcall	.-1002   	; 0x11fc <prvBytesInBuffer>
    15e6:	f4 01       	movw	r30, r8
    15e8:	26 81       	ldd	r18, Z+6	; 0x06
    15ea:	37 81       	ldd	r19, Z+7	; 0x07
    15ec:	82 17       	cp	r24, r18
    15ee:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    15f0:	a8 f0       	brcs	.+42     	; 0x161c <xStreamBufferSend+0x14a>
    15f2:	58 d3       	rcall	.+1712   	; 0x1ca4 <vTaskSuspendAll>
    15f4:	f4 01       	movw	r30, r8
    15f6:	80 85       	ldd	r24, Z+8	; 0x08
    15f8:	91 85       	ldd	r25, Z+9	; 0x09
    15fa:	89 2b       	or	r24, r25
    15fc:	71 f0       	breq	.+28     	; 0x161a <xStreamBufferSend+0x148>
    15fe:	80 85       	ldd	r24, Z+8	; 0x08
    1600:	91 85       	ldd	r25, Z+9	; 0x09
    1602:	e1 2c       	mov	r14, r1
    1604:	f1 2c       	mov	r15, r1
    1606:	00 e0       	ldi	r16, 0x00	; 0
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	0e 94 13 15 	call	0x2a26	; 0x2a26 <xTaskGenericNotify>
    1614:	f4 01       	movw	r30, r8
    1616:	11 86       	std	Z+9, r1	; 0x09
    1618:	10 86       	std	Z+8, r1	; 0x08
    161a:	88 d4       	rcall	.+2320   	; 0x1f2c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    161c:	c6 01       	movw	r24, r12
    161e:	2b 96       	adiw	r28, 0x0b	; 11
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	9f 90       	pop	r9
    1640:	8f 90       	pop	r8
    1642:	7f 90       	pop	r7
    1644:	6f 90       	pop	r6
    1646:	5f 90       	pop	r5
    1648:	4f 90       	pop	r4
    164a:	3f 90       	pop	r3
    164c:	2f 90       	pop	r2
    164e:	08 95       	ret

00001650 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1650:	af 92       	push	r10
    1652:	bf 92       	push	r11
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	ec 01       	movw	r28, r24
    1666:	7b 01       	movw	r14, r22
    1668:	5a 01       	movw	r10, r20
    166a:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    166c:	8e 85       	ldd	r24, Y+14	; 0x0e
    166e:	80 ff       	sbrs	r24, 0
    1670:	04 c0       	rjmp	.+8      	; 0x167a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1672:	8a 01       	movw	r16, r20
    1674:	0e 5f       	subi	r16, 0xFE	; 254
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	01 c0       	rjmp	.+2      	; 0x167c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    167a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    167c:	ce 01       	movw	r24, r28
    167e:	17 df       	rcall	.-466    	; 0x14ae <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1680:	9c 01       	movw	r18, r24
    1682:	a5 01       	movw	r20, r10
    1684:	b7 01       	movw	r22, r14
    1686:	ce 01       	movw	r24, r28
    1688:	15 de       	rcall	.-982    	; 0x12b4 <prvWriteMessageToBuffer>
    168a:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    168c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    168e:	c1 f0       	breq	.+48     	; 0x16c0 <xStreamBufferSendFromISR+0x70>
    1690:	ce 01       	movw	r24, r28
    1692:	b4 dd       	rcall	.-1176   	; 0x11fc <prvBytesInBuffer>
    1694:	2e 81       	ldd	r18, Y+6	; 0x06
    1696:	3f 81       	ldd	r19, Y+7	; 0x07
    1698:	82 17       	cp	r24, r18
    169a:	93 07       	cpc	r25, r19
    169c:	88 f0       	brcs	.+34     	; 0x16c0 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    169e:	88 85       	ldd	r24, Y+8	; 0x08
    16a0:	99 85       	ldd	r25, Y+9	; 0x09
    16a2:	89 2b       	or	r24, r25
    16a4:	69 f0       	breq	.+26     	; 0x16c0 <xStreamBufferSendFromISR+0x70>
    16a6:	88 85       	ldd	r24, Y+8	; 0x08
    16a8:	99 85       	ldd	r25, Y+9	; 0x09
    16aa:	e1 2c       	mov	r14, r1
    16ac:	f1 2c       	mov	r15, r1
    16ae:	00 e0       	ldi	r16, 0x00	; 0
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	a9 01       	movw	r20, r18
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <xTaskGenericNotifyFromISR>
    16bc:	19 86       	std	Y+9, r1	; 0x09
    16be:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    16c0:	c5 01       	movw	r24, r10
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	cf 90       	pop	r12
    16d2:	bf 90       	pop	r11
    16d4:	af 90       	pop	r10
    16d6:	08 95       	ret

000016d8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    16d8:	2f 92       	push	r2
    16da:	3f 92       	push	r3
    16dc:	4f 92       	push	r4
    16de:	5f 92       	push	r5
    16e0:	6f 92       	push	r6
    16e2:	7f 92       	push	r7
    16e4:	8f 92       	push	r8
    16e6:	9f 92       	push	r9
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	1f 92       	push	r1
    16fe:	1f 92       	push	r1
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	4c 01       	movw	r8, r24
    1706:	1b 01       	movw	r2, r22
    1708:	2a 01       	movw	r4, r20
    170a:	58 01       	movw	r10, r16
    170c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    170e:	fc 01       	movw	r30, r24
    1710:	86 85       	ldd	r24, Z+14	; 0x0e
    1712:	80 fd       	sbrc	r24, 0
    1714:	03 c0       	rjmp	.+6      	; 0x171c <xStreamBufferReceive+0x44>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1716:	61 2c       	mov	r6, r1
    1718:	71 2c       	mov	r7, r1
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <xStreamBufferReceive+0x4c>
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    171c:	68 94       	set
    171e:	66 24       	eor	r6, r6
    1720:	61 f8       	bld	r6, 1
    1722:	71 2c       	mov	r7, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1724:	a1 14       	cp	r10, r1
    1726:	b1 04       	cpc	r11, r1
    1728:	c1 04       	cpc	r12, r1
    172a:	d1 04       	cpc	r13, r1
    172c:	49 f1       	breq	.+82     	; 0x1780 <xStreamBufferReceive+0xa8>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1734:	c4 01       	movw	r24, r8
    1736:	62 dd       	rcall	.-1340   	; 0x11fc <prvBytesInBuffer>
    1738:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    173a:	68 16       	cp	r6, r24
    173c:	79 06       	cpc	r7, r25
    173e:	48 f0       	brcs	.+18     	; 0x1752 <xStreamBufferReceive+0x7a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    174a:	57 d7       	rcall	.+3758   	; 0x25fa <xTaskGetCurrentTaskHandle>
    174c:	f4 01       	movw	r30, r8
    174e:	91 87       	std	Z+9, r25	; 0x09
    1750:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1756:	60 16       	cp	r6, r16
    1758:	71 06       	cpc	r7, r17
    175a:	c0 f0       	brcs	.+48     	; 0x178c <xStreamBufferReceive+0xb4>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    175c:	e1 2c       	mov	r14, r1
    175e:	f1 2c       	mov	r15, r1
    1760:	00 e0       	ldi	r16, 0x00	; 0
    1762:	10 e0       	ldi	r17, 0x00	; 0
    1764:	98 01       	movw	r18, r16
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	ba 01       	movw	r22, r20
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1772:	f4 01       	movw	r30, r8
    1774:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1776:	10 86       	std	Z+8, r1	; 0x08
    1778:	c4 01       	movw	r24, r8
    177a:	40 dd       	rcall	.-1408   	; 0x11fc <prvBytesInBuffer>
    177c:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <xStreamBufferReceive+0xae>
    1780:	c4 01       	movw	r24, r8
    1782:	3c dd       	rcall	.-1416   	; 0x11fc <prvBytesInBuffer>
    1784:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1786:	60 16       	cp	r6, r16
    1788:	71 06       	cpc	r7, r17
    178a:	c8 f5       	brcc	.+114    	; 0x17fe <xStreamBufferReceive+0x126>
                                        size_t xBytesToStoreMessageLength )
{
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    178c:	61 14       	cp	r6, r1
    178e:	71 04       	cpc	r7, r1
    1790:	c1 f0       	breq	.+48     	; 0x17c2 <xStreamBufferReceive+0xea>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1792:	f4 01       	movw	r30, r8
    1794:	c0 80       	ld	r12, Z
    1796:	d1 80       	ldd	r13, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1798:	98 01       	movw	r18, r16
    179a:	a3 01       	movw	r20, r6
    179c:	be 01       	movw	r22, r28
    179e:	6f 5f       	subi	r22, 0xFF	; 255
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	c4 01       	movw	r24, r8
    17a4:	c7 dd       	rcall	.-1138   	; 0x1334 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    17aa:	06 19       	sub	r16, r6
    17ac:	17 09       	sbc	r17, r7

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    17ae:	48 16       	cp	r4, r24
    17b0:	59 06       	cpc	r5, r25
    17b2:	30 f4       	brcc	.+12     	; 0x17c0 <xStreamBufferReceive+0xe8>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    17b4:	f4 01       	movw	r30, r8
    17b6:	d1 82       	std	Z+1, r13	; 0x01
    17b8:	c0 82       	st	Z, r12
            xNextMessageLength = 0;
    17ba:	41 2c       	mov	r4, r1
    17bc:	51 2c       	mov	r5, r1
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <xStreamBufferReceive+0xea>
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    17c0:	2c 01       	movw	r4, r24
    17c2:	98 01       	movw	r18, r16
    17c4:	a2 01       	movw	r20, r4
    17c6:	b1 01       	movw	r22, r2
    17c8:	c4 01       	movw	r24, r8
    17ca:	b4 dd       	rcall	.-1176   	; 0x1334 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    17cc:	6c 01       	movw	r12, r24
    17ce:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    17d0:	c1 f0       	breq	.+48     	; 0x1802 <xStreamBufferReceive+0x12a>
    17d2:	68 d2       	rcall	.+1232   	; 0x1ca4 <vTaskSuspendAll>
    17d4:	f4 01       	movw	r30, r8
    17d6:	82 85       	ldd	r24, Z+10	; 0x0a
    17d8:	93 85       	ldd	r25, Z+11	; 0x0b
    17da:	89 2b       	or	r24, r25
    17dc:	71 f0       	breq	.+28     	; 0x17fa <xStreamBufferReceive+0x122>
    17de:	82 85       	ldd	r24, Z+10	; 0x0a
    17e0:	93 85       	ldd	r25, Z+11	; 0x0b
    17e2:	e1 2c       	mov	r14, r1
    17e4:	f1 2c       	mov	r15, r1
    17e6:	00 e0       	ldi	r16, 0x00	; 0
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	a9 01       	movw	r20, r18
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	0e 94 13 15 	call	0x2a26	; 0x2a26 <xTaskGenericNotify>
    17f4:	f4 01       	movw	r30, r8
    17f6:	13 86       	std	Z+11, r1	; 0x0b
    17f8:	12 86       	std	Z+10, r1	; 0x0a
    17fa:	98 d3       	rcall	.+1840   	; 0x1f2c <xTaskResumeAll>
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <xStreamBufferReceive+0x12a>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    17fe:	c1 2c       	mov	r12, r1
    1800:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1802:	c6 01       	movw	r24, r12
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	af 90       	pop	r10
    181c:	9f 90       	pop	r9
    181e:	8f 90       	pop	r8
    1820:	7f 90       	pop	r7
    1822:	6f 90       	pop	r6
    1824:	5f 90       	pop	r5
    1826:	4f 90       	pop	r4
    1828:	3f 90       	pop	r3
    182a:	2f 90       	pop	r2
    182c:	08 95       	ret

0000182e <prvResetNextTaskUnblockTime>:
    182e:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <pxDelayedTaskList>
    1832:	f0 91 44 15 	lds	r31, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    1836:	80 81       	ld	r24, Z
    1838:	81 11       	cpse	r24, r1
    183a:	0c c0       	rjmp	.+24     	; 0x1854 <prvResetNextTaskUnblockTime+0x26>
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	9f ef       	ldi	r25, 0xFF	; 255
    1840:	dc 01       	movw	r26, r24
    1842:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xNextTaskUnblockTime>
    1846:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <xNextTaskUnblockTime+0x1>
    184a:	a0 93 0f 15 	sts	0x150F, r26	; 0x80150f <xNextTaskUnblockTime+0x2>
    184e:	b0 93 10 15 	sts	0x1510, r27	; 0x801510 <xNextTaskUnblockTime+0x3>
    1852:	08 95       	ret
    1854:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <pxDelayedTaskList>
    1858:	f0 91 44 15 	lds	r31, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    185c:	07 80       	ldd	r0, Z+7	; 0x07
    185e:	f0 85       	ldd	r31, Z+8	; 0x08
    1860:	e0 2d       	mov	r30, r0
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	a2 81       	ldd	r26, Z+2	; 0x02
    1868:	b3 81       	ldd	r27, Z+3	; 0x03
    186a:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xNextTaskUnblockTime>
    186e:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <xNextTaskUnblockTime+0x1>
    1872:	a0 93 0f 15 	sts	0x150F, r26	; 0x80150f <xNextTaskUnblockTime+0x2>
    1876:	b0 93 10 15 	sts	0x1510, r27	; 0x801510 <xNextTaskUnblockTime+0x3>
    187a:	08 95       	ret

0000187c <prvAddCurrentTaskToDelayedList>:
    187c:	8f 92       	push	r8
    187e:	9f 92       	push	r9
    1880:	af 92       	push	r10
    1882:	bf 92       	push	r11
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	6b 01       	movw	r12, r22
    1892:	7c 01       	movw	r14, r24
    1894:	c4 2f       	mov	r28, r20
    1896:	80 90 1a 15 	lds	r8, 0x151A	; 0x80151a <xTickCount>
    189a:	90 90 1b 15 	lds	r9, 0x151B	; 0x80151b <xTickCount+0x1>
    189e:	a0 90 1c 15 	lds	r10, 0x151C	; 0x80151c <xTickCount+0x2>
    18a2:	b0 90 1d 15 	lds	r11, 0x151D	; 0x80151d <xTickCount+0x3>
    18a6:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    18aa:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    18ae:	02 96       	adiw	r24, 0x02	; 2
    18b0:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
    18b4:	8f ef       	ldi	r24, 0xFF	; 255
    18b6:	c8 16       	cp	r12, r24
    18b8:	d8 06       	cpc	r13, r24
    18ba:	e8 06       	cpc	r14, r24
    18bc:	f8 06       	cpc	r15, r24
    18be:	b1 f5       	brne	.+108    	; 0x192c <prvAddCurrentTaskToDelayedList+0xb0>
    18c0:	cc 23       	and	r28, r28
    18c2:	a1 f1       	breq	.+104    	; 0x192c <prvAddCurrentTaskToDelayedList+0xb0>
    18c4:	ef e1       	ldi	r30, 0x1F	; 31
    18c6:	f5 e1       	ldi	r31, 0x15	; 21
    18c8:	a1 81       	ldd	r26, Z+1	; 0x01
    18ca:	b2 81       	ldd	r27, Z+2	; 0x02
    18cc:	c0 91 c9 15 	lds	r28, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    18d0:	d0 91 ca 15 	lds	r29, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    18d4:	bf 83       	std	Y+7, r27	; 0x07
    18d6:	ae 83       	std	Y+6, r26	; 0x06
    18d8:	c0 91 c9 15 	lds	r28, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    18dc:	d0 91 ca 15 	lds	r29, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    18e0:	16 96       	adiw	r26, 0x06	; 6
    18e2:	8d 91       	ld	r24, X+
    18e4:	9c 91       	ld	r25, X
    18e6:	17 97       	sbiw	r26, 0x07	; 7
    18e8:	99 87       	std	Y+9, r25	; 0x09
    18ea:	88 87       	std	Y+8, r24	; 0x08
    18ec:	16 96       	adiw	r26, 0x06	; 6
    18ee:	cd 91       	ld	r28, X+
    18f0:	dc 91       	ld	r29, X
    18f2:	17 97       	sbiw	r26, 0x07	; 7
    18f4:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    18f8:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    18fc:	02 96       	adiw	r24, 0x02	; 2
    18fe:	9d 83       	std	Y+5, r25	; 0x05
    1900:	8c 83       	std	Y+4, r24	; 0x04
    1902:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1906:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    190a:	02 96       	adiw	r24, 0x02	; 2
    190c:	17 96       	adiw	r26, 0x07	; 7
    190e:	9c 93       	st	X, r25
    1910:	8e 93       	st	-X, r24
    1912:	16 97       	sbiw	r26, 0x06	; 6
    1914:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1918:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    191c:	1d 96       	adiw	r26, 0x0d	; 13
    191e:	fc 93       	st	X, r31
    1920:	ee 93       	st	-X, r30
    1922:	1c 97       	sbiw	r26, 0x0c	; 12
    1924:	80 81       	ld	r24, Z
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	80 83       	st	Z, r24
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <prvAddCurrentTaskToDelayedList+0x12e>
    192c:	c8 0c       	add	r12, r8
    192e:	d9 1c       	adc	r13, r9
    1930:	ea 1c       	adc	r14, r10
    1932:	fb 1c       	adc	r15, r11
    1934:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1938:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    193c:	c2 82       	std	Z+2, r12	; 0x02
    193e:	d3 82       	std	Z+3, r13	; 0x03
    1940:	e4 82       	std	Z+4, r14	; 0x04
    1942:	f5 82       	std	Z+5, r15	; 0x05
    1944:	c8 14       	cp	r12, r8
    1946:	d9 04       	cpc	r13, r9
    1948:	ea 04       	cpc	r14, r10
    194a:	fb 04       	cpc	r15, r11
    194c:	68 f4       	brcc	.+26     	; 0x1968 <prvAddCurrentTaskToDelayedList+0xec>
    194e:	60 91 c9 15 	lds	r22, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1952:	70 91 ca 15 	lds	r23, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1956:	80 91 41 15 	lds	r24, 0x1541	; 0x801541 <pxOverflowDelayedTaskList>
    195a:	90 91 42 15 	lds	r25, 0x1542	; 0x801542 <pxOverflowDelayedTaskList+0x1>
    195e:	6e 5f       	subi	r22, 0xFE	; 254
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    1966:	21 c0       	rjmp	.+66     	; 0x19aa <prvAddCurrentTaskToDelayedList+0x12e>
    1968:	60 91 c9 15 	lds	r22, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    196c:	70 91 ca 15 	lds	r23, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1970:	80 91 43 15 	lds	r24, 0x1543	; 0x801543 <pxDelayedTaskList>
    1974:	90 91 44 15 	lds	r25, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    1978:	6e 5f       	subi	r22, 0xFE	; 254
    197a:	7f 4f       	sbci	r23, 0xFF	; 255
    197c:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    1980:	80 91 0d 15 	lds	r24, 0x150D	; 0x80150d <xNextTaskUnblockTime>
    1984:	90 91 0e 15 	lds	r25, 0x150E	; 0x80150e <xNextTaskUnblockTime+0x1>
    1988:	a0 91 0f 15 	lds	r26, 0x150F	; 0x80150f <xNextTaskUnblockTime+0x2>
    198c:	b0 91 10 15 	lds	r27, 0x1510	; 0x801510 <xNextTaskUnblockTime+0x3>
    1990:	c8 16       	cp	r12, r24
    1992:	d9 06       	cpc	r13, r25
    1994:	ea 06       	cpc	r14, r26
    1996:	fb 06       	cpc	r15, r27
    1998:	40 f4       	brcc	.+16     	; 0x19aa <prvAddCurrentTaskToDelayedList+0x12e>
    199a:	c0 92 0d 15 	sts	0x150D, r12	; 0x80150d <xNextTaskUnblockTime>
    199e:	d0 92 0e 15 	sts	0x150E, r13	; 0x80150e <xNextTaskUnblockTime+0x1>
    19a2:	e0 92 0f 15 	sts	0x150F, r14	; 0x80150f <xNextTaskUnblockTime+0x2>
    19a6:	f0 92 10 15 	sts	0x1510, r15	; 0x801510 <xNextTaskUnblockTime+0x3>
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	9f 90       	pop	r9
    19bc:	8f 90       	pop	r8
    19be:	08 95       	ret

000019c0 <xTaskCreate>:
    19c0:	4f 92       	push	r4
    19c2:	5f 92       	push	r5
    19c4:	6f 92       	push	r6
    19c6:	7f 92       	push	r7
    19c8:	8f 92       	push	r8
    19ca:	9f 92       	push	r9
    19cc:	af 92       	push	r10
    19ce:	bf 92       	push	r11
    19d0:	cf 92       	push	r12
    19d2:	df 92       	push	r13
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	4c 01       	movw	r8, r24
    19e2:	6b 01       	movw	r12, r22
    19e4:	5a 01       	movw	r10, r20
    19e6:	29 01       	movw	r4, r18
    19e8:	ca 01       	movw	r24, r20
    19ea:	0e 94 b7 02 	call	0x56e	; 0x56e <pvPortMalloc>
    19ee:	3c 01       	movw	r6, r24
    19f0:	89 2b       	or	r24, r25
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <xTaskCreate+0x36>
    19f4:	0d c1       	rjmp	.+538    	; 0x1c10 <xTaskCreate+0x250>
    19f6:	84 e3       	ldi	r24, 0x34	; 52
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 b7 02 	call	0x56e	; 0x56e <pvPortMalloc>
    19fe:	ec 01       	movw	r28, r24
    1a00:	89 2b       	or	r24, r25
    1a02:	99 f0       	breq	.+38     	; 0x1a2a <xTaskCreate+0x6a>
    1a04:	7c 8e       	std	Y+28, r7	; 0x1c
    1a06:	6b 8e       	std	Y+27, r6	; 0x1b
    1a08:	a5 01       	movw	r20, r10
    1a0a:	65 ea       	ldi	r22, 0xA5	; 165
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	c3 01       	movw	r24, r6
    1a10:	0e 94 59 31 	call	0x62b2	; 0x62b2 <memset>
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	a8 1a       	sub	r10, r24
    1a18:	b1 08       	sbc	r11, r1
    1a1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a1e:	a8 0e       	add	r10, r24
    1a20:	b9 1e       	adc	r11, r25
    1a22:	c1 14       	cp	r12, r1
    1a24:	d1 04       	cpc	r13, r1
    1a26:	29 f4       	brne	.+10     	; 0x1a32 <xTaskCreate+0x72>
    1a28:	20 c0       	rjmp	.+64     	; 0x1a6a <xTaskCreate+0xaa>
    1a2a:	c3 01       	movw	r24, r6
    1a2c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vPortFree>
    1a30:	ef c0       	rjmp	.+478    	; 0x1c10 <xTaskCreate+0x250>
    1a32:	d6 01       	movw	r26, r12
    1a34:	8c 91       	ld	r24, X
    1a36:	8d 8f       	std	Y+29, r24	; 0x1d
    1a38:	8c 91       	ld	r24, X
    1a3a:	88 23       	and	r24, r24
    1a3c:	a1 f0       	breq	.+40     	; 0x1a66 <xTaskCreate+0xa6>
    1a3e:	ae 01       	movw	r20, r28
    1a40:	42 5e       	subi	r20, 0xE2	; 226
    1a42:	5f 4f       	sbci	r21, 0xFF	; 255
    1a44:	f6 01       	movw	r30, r12
    1a46:	31 96       	adiw	r30, 0x01	; 1
    1a48:	b0 e1       	ldi	r27, 0x10	; 16
    1a4a:	cb 0e       	add	r12, r27
    1a4c:	d1 1c       	adc	r13, r1
    1a4e:	cf 01       	movw	r24, r30
    1a50:	21 91       	ld	r18, Z+
    1a52:	da 01       	movw	r26, r20
    1a54:	2d 93       	st	X+, r18
    1a56:	ad 01       	movw	r20, r26
    1a58:	dc 01       	movw	r26, r24
    1a5a:	8c 91       	ld	r24, X
    1a5c:	88 23       	and	r24, r24
    1a5e:	19 f0       	breq	.+6      	; 0x1a66 <xTaskCreate+0xa6>
    1a60:	ce 16       	cp	r12, r30
    1a62:	df 06       	cpc	r13, r31
    1a64:	a1 f7       	brne	.-24     	; 0x1a4e <xTaskCreate+0x8e>
    1a66:	1c a6       	std	Y+44, r1	; 0x2c
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <xTaskCreate+0xac>
    1a6a:	1d 8e       	std	Y+29, r1	; 0x1d
    1a6c:	0a 30       	cpi	r16, 0x0A	; 10
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <xTaskCreate+0xb2>
    1a70:	09 e0       	ldi	r16, 0x09	; 9
    1a72:	0a 8f       	std	Y+26, r16	; 0x1a
    1a74:	0d a7       	std	Y+45, r16	; 0x2d
    1a76:	1e a6       	std	Y+46, r1	; 0x2e
    1a78:	6e 01       	movw	r12, r28
    1a7a:	b2 e0       	ldi	r27, 0x02	; 2
    1a7c:	cb 0e       	add	r12, r27
    1a7e:	d1 1c       	adc	r13, r1
    1a80:	c6 01       	movw	r24, r12
    1a82:	0e 94 ca 03 	call	0x794	; 0x794 <vListInitialiseItem>
    1a86:	ce 01       	movw	r24, r28
    1a88:	0e 96       	adiw	r24, 0x0e	; 14
    1a8a:	0e 94 ca 03 	call	0x794	; 0x794 <vListInitialiseItem>
    1a8e:	db 87       	std	Y+11, r29	; 0x0b
    1a90:	ca 87       	std	Y+10, r28	; 0x0a
    1a92:	8a e0       	ldi	r24, 0x0A	; 10
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 e0       	ldi	r26, 0x00	; 0
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	80 1b       	sub	r24, r16
    1a9c:	91 09       	sbc	r25, r1
    1a9e:	a1 09       	sbc	r26, r1
    1aa0:	b1 09       	sbc	r27, r1
    1aa2:	8e 87       	std	Y+14, r24	; 0x0e
    1aa4:	9f 87       	std	Y+15, r25	; 0x0f
    1aa6:	a8 8b       	std	Y+16, r26	; 0x10
    1aa8:	b9 8b       	std	Y+17, r27	; 0x11
    1aaa:	df 8b       	std	Y+23, r29	; 0x17
    1aac:	ce 8b       	std	Y+22, r28	; 0x16
    1aae:	84 e0       	ldi	r24, 0x04	; 4
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	bf 96       	adiw	r30, 0x2f	; 47
    1ab4:	df 01       	movw	r26, r30
    1ab6:	1d 92       	st	X+, r1
    1ab8:	8a 95       	dec	r24
    1aba:	e9 f7       	brne	.-6      	; 0x1ab6 <xTaskCreate+0xf6>
    1abc:	1b aa       	std	Y+51, r1	; 0x33
    1abe:	a2 01       	movw	r20, r4
    1ac0:	b4 01       	movw	r22, r8
    1ac2:	c5 01       	movw	r24, r10
    1ac4:	0e 94 32 04 	call	0x864	; 0x864 <pxPortInitialiseStack>
    1ac8:	99 83       	std	Y+1, r25	; 0x01
    1aca:	88 83       	st	Y, r24
    1acc:	e1 14       	cp	r14, r1
    1ace:	f1 04       	cpc	r15, r1
    1ad0:	19 f0       	breq	.+6      	; 0x1ad8 <xTaskCreate+0x118>
    1ad2:	f7 01       	movw	r30, r14
    1ad4:	d1 83       	std	Z+1, r29	; 0x01
    1ad6:	c0 83       	st	Z, r28
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	0f 92       	push	r0
    1ade:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <uxCurrentNumberOfTasks>
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	80 93 1e 15 	sts	0x151E, r24	; 0x80151e <uxCurrentNumberOfTasks>
    1ae8:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1aec:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1af0:	89 2b       	or	r24, r25
    1af2:	d1 f5       	brne	.+116    	; 0x1b68 <xTaskCreate+0x1a8>
    1af4:	d0 93 ca 15 	sts	0x15CA, r29	; 0x8015ca <pxCurrentTCB+0x1>
    1af8:	c0 93 c9 15 	sts	0x15C9, r28	; 0x8015c9 <pxCurrentTCB>
    1afc:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <uxCurrentNumberOfTasks>
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <xTaskCreate+0x146>
    1b04:	41 c0       	rjmp	.+130    	; 0x1b88 <xTaskCreate+0x1c8>
    1b06:	0b e5       	ldi	r16, 0x5B	; 91
    1b08:	15 e1       	ldi	r17, 0x15	; 21
    1b0a:	0f 2e       	mov	r0, r31
    1b0c:	f9 ec       	ldi	r31, 0xC9	; 201
    1b0e:	ef 2e       	mov	r14, r31
    1b10:	f5 e1       	ldi	r31, 0x15	; 21
    1b12:	ff 2e       	mov	r15, r31
    1b14:	f0 2d       	mov	r31, r0
    1b16:	c8 01       	movw	r24, r16
    1b18:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b1c:	05 5f       	subi	r16, 0xF5	; 245
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	0e 15       	cp	r16, r14
    1b22:	1f 05       	cpc	r17, r15
    1b24:	c1 f7       	brne	.-16     	; 0x1b16 <xTaskCreate+0x156>
    1b26:	80 e5       	ldi	r24, 0x50	; 80
    1b28:	95 e1       	ldi	r25, 0x15	; 21
    1b2a:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b2e:	85 e4       	ldi	r24, 0x45	; 69
    1b30:	95 e1       	ldi	r25, 0x15	; 21
    1b32:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b36:	86 e3       	ldi	r24, 0x36	; 54
    1b38:	95 e1       	ldi	r25, 0x15	; 21
    1b3a:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b3e:	8b e2       	ldi	r24, 0x2B	; 43
    1b40:	95 e1       	ldi	r25, 0x15	; 21
    1b42:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b46:	8f e1       	ldi	r24, 0x1F	; 31
    1b48:	95 e1       	ldi	r25, 0x15	; 21
    1b4a:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b4e:	80 e5       	ldi	r24, 0x50	; 80
    1b50:	95 e1       	ldi	r25, 0x15	; 21
    1b52:	90 93 44 15 	sts	0x1544, r25	; 0x801544 <pxDelayedTaskList+0x1>
    1b56:	80 93 43 15 	sts	0x1543, r24	; 0x801543 <pxDelayedTaskList>
    1b5a:	85 e4       	ldi	r24, 0x45	; 69
    1b5c:	95 e1       	ldi	r25, 0x15	; 21
    1b5e:	90 93 42 15 	sts	0x1542, r25	; 0x801542 <pxOverflowDelayedTaskList+0x1>
    1b62:	80 93 41 15 	sts	0x1541, r24	; 0x801541 <pxOverflowDelayedTaskList>
    1b66:	10 c0       	rjmp	.+32     	; 0x1b88 <xTaskCreate+0x1c8>
    1b68:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <xSchedulerRunning>
    1b6c:	81 11       	cpse	r24, r1
    1b6e:	0c c0       	rjmp	.+24     	; 0x1b88 <xTaskCreate+0x1c8>
    1b70:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1b74:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1b78:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b7c:	89 17       	cp	r24, r25
    1b7e:	20 f0       	brcs	.+8      	; 0x1b88 <xTaskCreate+0x1c8>
    1b80:	d0 93 ca 15 	sts	0x15CA, r29	; 0x8015ca <pxCurrentTCB+0x1>
    1b84:	c0 93 c9 15 	sts	0x15C9, r28	; 0x8015c9 <pxCurrentTCB>
    1b88:	80 91 11 15 	lds	r24, 0x1511	; 0x801511 <uxTaskNumber>
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	80 93 11 15 	sts	0x1511, r24	; 0x801511 <uxTaskNumber>
    1b92:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b94:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    1b98:	8e 17       	cp	r24, r30
    1b9a:	10 f4       	brcc	.+4      	; 0x1ba0 <xTaskCreate+0x1e0>
    1b9c:	e0 93 19 15 	sts	0x1519, r30	; 0x801519 <uxTopReadyPriority>
    1ba0:	8b e0       	ldi	r24, 0x0B	; 11
    1ba2:	8e 9f       	mul	r24, r30
    1ba4:	f0 01       	movw	r30, r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	e5 5a       	subi	r30, 0xA5	; 165
    1baa:	fa 4e       	sbci	r31, 0xEA	; 234
    1bac:	01 80       	ldd	r0, Z+1	; 0x01
    1bae:	f2 81       	ldd	r31, Z+2	; 0x02
    1bb0:	e0 2d       	mov	r30, r0
    1bb2:	ff 83       	std	Y+7, r31	; 0x07
    1bb4:	ee 83       	std	Y+6, r30	; 0x06
    1bb6:	26 81       	ldd	r18, Z+6	; 0x06
    1bb8:	37 81       	ldd	r19, Z+7	; 0x07
    1bba:	39 87       	std	Y+9, r19	; 0x09
    1bbc:	28 87       	std	Y+8, r18	; 0x08
    1bbe:	a6 81       	ldd	r26, Z+6	; 0x06
    1bc0:	b7 81       	ldd	r27, Z+7	; 0x07
    1bc2:	15 96       	adiw	r26, 0x05	; 5
    1bc4:	dc 92       	st	X, r13
    1bc6:	ce 92       	st	-X, r12
    1bc8:	14 97       	sbiw	r26, 0x04	; 4
    1bca:	d7 82       	std	Z+7, r13	; 0x07
    1bcc:	c6 82       	std	Z+6, r12	; 0x06
    1bce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bd0:	8e 9f       	mul	r24, r30
    1bd2:	f0 01       	movw	r30, r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	e5 5a       	subi	r30, 0xA5	; 165
    1bd8:	fa 4e       	sbci	r31, 0xEA	; 234
    1bda:	fd 87       	std	Y+13, r31	; 0x0d
    1bdc:	ec 87       	std	Y+12, r30	; 0x0c
    1bde:	80 81       	ld	r24, Z
    1be0:	8f 5f       	subi	r24, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
    1be4:	0f 90       	pop	r0
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <xSchedulerRunning>
    1bec:	88 23       	and	r24, r24
    1bee:	61 f0       	breq	.+24     	; 0x1c08 <xTaskCreate+0x248>
    1bf0:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1bf4:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1bf8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bfa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bfc:	98 17       	cp	r25, r24
    1bfe:	30 f4       	brcc	.+12     	; 0x1c0c <xTaskCreate+0x24c>
    1c00:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	05 c0       	rjmp	.+10     	; 0x1c12 <xTaskCreate+0x252>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	03 c0       	rjmp	.+6      	; 0x1c12 <xTaskCreate+0x252>
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <xTaskCreate+0x252>
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14
    1c1e:	df 90       	pop	r13
    1c20:	cf 90       	pop	r12
    1c22:	bf 90       	pop	r11
    1c24:	af 90       	pop	r10
    1c26:	9f 90       	pop	r9
    1c28:	8f 90       	pop	r8
    1c2a:	7f 90       	pop	r7
    1c2c:	6f 90       	pop	r6
    1c2e:	5f 90       	pop	r5
    1c30:	4f 90       	pop	r4
    1c32:	08 95       	ret

00001c34 <vTaskStartScheduler>:
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	0f 2e       	mov	r0, r31
    1c3c:	fb e0       	ldi	r31, 0x0B	; 11
    1c3e:	ef 2e       	mov	r14, r31
    1c40:	f5 e1       	ldi	r31, 0x15	; 21
    1c42:	ff 2e       	mov	r15, r31
    1c44:	f0 2d       	mov	r31, r0
    1c46:	00 e0       	ldi	r16, 0x00	; 0
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 ec       	ldi	r20, 0xC0	; 192
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	6f e6       	ldi	r22, 0x6F	; 111
    1c52:	72 e0       	ldi	r23, 0x02	; 2
    1c54:	8d ec       	ldi	r24, 0xCD	; 205
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	b3 de       	rcall	.-666    	; 0x19c0 <xTaskCreate>
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	e9 f4       	brne	.+58     	; 0x1c98 <vTaskStartScheduler+0x64>
    1c5e:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <xTimerCreateTimerTask>
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	c9 f4       	brne	.+50     	; 0x1c98 <vTaskStartScheduler+0x64>
    1c66:	f8 94       	cli
    1c68:	8f ef       	ldi	r24, 0xFF	; 255
    1c6a:	9f ef       	ldi	r25, 0xFF	; 255
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <xNextTaskUnblockTime>
    1c72:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <xNextTaskUnblockTime+0x1>
    1c76:	a0 93 0f 15 	sts	0x150F, r26	; 0x80150f <xNextTaskUnblockTime+0x2>
    1c7a:	b0 93 10 15 	sts	0x1510, r27	; 0x801510 <xNextTaskUnblockTime+0x3>
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <xSchedulerRunning>
    1c84:	10 92 1a 15 	sts	0x151A, r1	; 0x80151a <xTickCount>
    1c88:	10 92 1b 15 	sts	0x151B, r1	; 0x80151b <xTickCount+0x1>
    1c8c:	10 92 1c 15 	sts	0x151C, r1	; 0x80151c <xTickCount+0x2>
    1c90:	10 92 1d 15 	sts	0x151D, r1	; 0x80151d <xTickCount+0x3>
    1c94:	0e 94 49 04 	call	0x892	; 0x892 <xPortStartScheduler>
    1c98:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	08 95       	ret

00001ca4 <vTaskSuspendAll>:
    1ca4:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    1ca8:	8f 5f       	subi	r24, 0xFF	; 255
    1caa:	80 93 0a 15 	sts	0x150A, r24	; 0x80150a <uxSchedulerSuspended>
    1cae:	08 95       	ret

00001cb0 <xTaskGetTickCount>:
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	0f 92       	push	r0
    1cb6:	60 91 1a 15 	lds	r22, 0x151A	; 0x80151a <xTickCount>
    1cba:	70 91 1b 15 	lds	r23, 0x151B	; 0x80151b <xTickCount+0x1>
    1cbe:	80 91 1c 15 	lds	r24, 0x151C	; 0x80151c <xTickCount+0x2>
    1cc2:	90 91 1d 15 	lds	r25, 0x151D	; 0x80151d <xTickCount+0x3>
    1cc6:	0f 90       	pop	r0
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	08 95       	ret

00001ccc <xTaskIncrementTick>:
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    1ce0:	81 11       	cpse	r24, r1
    1ce2:	07 c1       	rjmp	.+526    	; 0x1ef2 <xTaskIncrementTick+0x226>
    1ce4:	c0 90 1a 15 	lds	r12, 0x151A	; 0x80151a <xTickCount>
    1ce8:	d0 90 1b 15 	lds	r13, 0x151B	; 0x80151b <xTickCount+0x1>
    1cec:	e0 90 1c 15 	lds	r14, 0x151C	; 0x80151c <xTickCount+0x2>
    1cf0:	f0 90 1d 15 	lds	r15, 0x151D	; 0x80151d <xTickCount+0x3>
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	c8 1a       	sub	r12, r24
    1cf8:	d8 0a       	sbc	r13, r24
    1cfa:	e8 0a       	sbc	r14, r24
    1cfc:	f8 0a       	sbc	r15, r24
    1cfe:	c0 92 1a 15 	sts	0x151A, r12	; 0x80151a <xTickCount>
    1d02:	d0 92 1b 15 	sts	0x151B, r13	; 0x80151b <xTickCount+0x1>
    1d06:	e0 92 1c 15 	sts	0x151C, r14	; 0x80151c <xTickCount+0x2>
    1d0a:	f0 92 1d 15 	sts	0x151D, r15	; 0x80151d <xTickCount+0x3>
    1d0e:	c1 14       	cp	r12, r1
    1d10:	d1 04       	cpc	r13, r1
    1d12:	e1 04       	cpc	r14, r1
    1d14:	f1 04       	cpc	r15, r1
    1d16:	b1 f4       	brne	.+44     	; 0x1d44 <xTaskIncrementTick+0x78>
    1d18:	80 91 43 15 	lds	r24, 0x1543	; 0x801543 <pxDelayedTaskList>
    1d1c:	90 91 44 15 	lds	r25, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    1d20:	20 91 41 15 	lds	r18, 0x1541	; 0x801541 <pxOverflowDelayedTaskList>
    1d24:	30 91 42 15 	lds	r19, 0x1542	; 0x801542 <pxOverflowDelayedTaskList+0x1>
    1d28:	30 93 44 15 	sts	0x1544, r19	; 0x801544 <pxDelayedTaskList+0x1>
    1d2c:	20 93 43 15 	sts	0x1543, r18	; 0x801543 <pxDelayedTaskList>
    1d30:	90 93 42 15 	sts	0x1542, r25	; 0x801542 <pxOverflowDelayedTaskList+0x1>
    1d34:	80 93 41 15 	sts	0x1541, r24	; 0x801541 <pxOverflowDelayedTaskList>
    1d38:	80 91 12 15 	lds	r24, 0x1512	; 0x801512 <xNumOfOverflows>
    1d3c:	8f 5f       	subi	r24, 0xFF	; 255
    1d3e:	80 93 12 15 	sts	0x1512, r24	; 0x801512 <xNumOfOverflows>
    1d42:	75 dd       	rcall	.-1302   	; 0x182e <prvResetNextTaskUnblockTime>
    1d44:	80 91 0d 15 	lds	r24, 0x150D	; 0x80150d <xNextTaskUnblockTime>
    1d48:	90 91 0e 15 	lds	r25, 0x150E	; 0x80150e <xNextTaskUnblockTime+0x1>
    1d4c:	a0 91 0f 15 	lds	r26, 0x150F	; 0x80150f <xNextTaskUnblockTime+0x2>
    1d50:	b0 91 10 15 	lds	r27, 0x1510	; 0x801510 <xNextTaskUnblockTime+0x3>
    1d54:	c8 16       	cp	r12, r24
    1d56:	d9 06       	cpc	r13, r25
    1d58:	ea 06       	cpc	r14, r26
    1d5a:	fb 06       	cpc	r15, r27
    1d5c:	10 f4       	brcc	.+4      	; 0x1d62 <xTaskIncrementTick+0x96>
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	b3 c0       	rjmp	.+358    	; 0x1ec8 <xTaskIncrementTick+0x1fc>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	4b e0       	ldi	r20, 0x0B	; 11
    1d66:	51 e0       	ldi	r21, 0x01	; 1
    1d68:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <pxDelayedTaskList>
    1d6c:	f0 91 44 15 	lds	r31, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    1d70:	90 81       	ld	r25, Z
    1d72:	91 11       	cpse	r25, r1
    1d74:	0c c0       	rjmp	.+24     	; 0x1d8e <xTaskIncrementTick+0xc2>
    1d76:	4f ef       	ldi	r20, 0xFF	; 255
    1d78:	5f ef       	ldi	r21, 0xFF	; 255
    1d7a:	ba 01       	movw	r22, r20
    1d7c:	40 93 0d 15 	sts	0x150D, r20	; 0x80150d <xNextTaskUnblockTime>
    1d80:	50 93 0e 15 	sts	0x150E, r21	; 0x80150e <xNextTaskUnblockTime+0x1>
    1d84:	60 93 0f 15 	sts	0x150F, r22	; 0x80150f <xNextTaskUnblockTime+0x2>
    1d88:	70 93 10 15 	sts	0x1510, r23	; 0x801510 <xNextTaskUnblockTime+0x3>
    1d8c:	9d c0       	rjmp	.+314    	; 0x1ec8 <xTaskIncrementTick+0x1fc>
    1d8e:	e0 91 43 15 	lds	r30, 0x1543	; 0x801543 <pxDelayedTaskList>
    1d92:	f0 91 44 15 	lds	r31, 0x1544	; 0x801544 <pxDelayedTaskList+0x1>
    1d96:	07 80       	ldd	r0, Z+7	; 0x07
    1d98:	f0 85       	ldd	r31, Z+8	; 0x08
    1d9a:	e0 2d       	mov	r30, r0
    1d9c:	00 84       	ldd	r0, Z+8	; 0x08
    1d9e:	f1 85       	ldd	r31, Z+9	; 0x09
    1da0:	e0 2d       	mov	r30, r0
    1da2:	02 81       	ldd	r16, Z+2	; 0x02
    1da4:	13 81       	ldd	r17, Z+3	; 0x03
    1da6:	24 81       	ldd	r18, Z+4	; 0x04
    1da8:	35 81       	ldd	r19, Z+5	; 0x05
    1daa:	c0 16       	cp	r12, r16
    1dac:	d1 06       	cpc	r13, r17
    1dae:	e2 06       	cpc	r14, r18
    1db0:	f3 06       	cpc	r15, r19
    1db2:	48 f4       	brcc	.+18     	; 0x1dc6 <xTaskIncrementTick+0xfa>
    1db4:	00 93 0d 15 	sts	0x150D, r16	; 0x80150d <xNextTaskUnblockTime>
    1db8:	10 93 0e 15 	sts	0x150E, r17	; 0x80150e <xNextTaskUnblockTime+0x1>
    1dbc:	20 93 0f 15 	sts	0x150F, r18	; 0x80150f <xNextTaskUnblockTime+0x2>
    1dc0:	30 93 10 15 	sts	0x1510, r19	; 0x801510 <xNextTaskUnblockTime+0x3>
    1dc4:	81 c0       	rjmp	.+258    	; 0x1ec8 <xTaskIncrementTick+0x1fc>
    1dc6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1dc8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1dca:	c6 81       	ldd	r28, Z+6	; 0x06
    1dcc:	d7 81       	ldd	r29, Z+7	; 0x07
    1dce:	20 85       	ldd	r18, Z+8	; 0x08
    1dd0:	31 85       	ldd	r19, Z+9	; 0x09
    1dd2:	3f 83       	std	Y+7, r19	; 0x07
    1dd4:	2e 83       	std	Y+6, r18	; 0x06
    1dd6:	c0 85       	ldd	r28, Z+8	; 0x08
    1dd8:	d1 85       	ldd	r29, Z+9	; 0x09
    1dda:	26 81       	ldd	r18, Z+6	; 0x06
    1ddc:	37 81       	ldd	r19, Z+7	; 0x07
    1dde:	3d 83       	std	Y+5, r19	; 0x05
    1de0:	2c 83       	std	Y+4, r18	; 0x04
    1de2:	9f 01       	movw	r18, r30
    1de4:	2e 5f       	subi	r18, 0xFE	; 254
    1de6:	3f 4f       	sbci	r19, 0xFF	; 255
    1de8:	11 96       	adiw	r26, 0x01	; 1
    1dea:	6d 91       	ld	r22, X+
    1dec:	7c 91       	ld	r23, X
    1dee:	12 97       	sbiw	r26, 0x02	; 2
    1df0:	62 17       	cp	r22, r18
    1df2:	73 07       	cpc	r23, r19
    1df4:	31 f4       	brne	.+12     	; 0x1e02 <xTaskIncrementTick+0x136>
    1df6:	60 85       	ldd	r22, Z+8	; 0x08
    1df8:	71 85       	ldd	r23, Z+9	; 0x09
    1dfa:	12 96       	adiw	r26, 0x02	; 2
    1dfc:	7c 93       	st	X, r23
    1dfe:	6e 93       	st	-X, r22
    1e00:	11 97       	sbiw	r26, 0x01	; 1
    1e02:	15 86       	std	Z+13, r1	; 0x0d
    1e04:	14 86       	std	Z+12, r1	; 0x0c
    1e06:	9c 91       	ld	r25, X
    1e08:	91 50       	subi	r25, 0x01	; 1
    1e0a:	9c 93       	st	X, r25
    1e0c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e0e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e10:	10 97       	sbiw	r26, 0x00	; 0
    1e12:	09 f1       	breq	.+66     	; 0x1e56 <xTaskIncrementTick+0x18a>
    1e14:	c2 89       	ldd	r28, Z+18	; 0x12
    1e16:	d3 89       	ldd	r29, Z+19	; 0x13
    1e18:	64 89       	ldd	r22, Z+20	; 0x14
    1e1a:	75 89       	ldd	r23, Z+21	; 0x15
    1e1c:	7f 83       	std	Y+7, r23	; 0x07
    1e1e:	6e 83       	std	Y+6, r22	; 0x06
    1e20:	c4 89       	ldd	r28, Z+20	; 0x14
    1e22:	d5 89       	ldd	r29, Z+21	; 0x15
    1e24:	62 89       	ldd	r22, Z+18	; 0x12
    1e26:	73 89       	ldd	r23, Z+19	; 0x13
    1e28:	7d 83       	std	Y+5, r23	; 0x05
    1e2a:	6c 83       	std	Y+4, r22	; 0x04
    1e2c:	11 96       	adiw	r26, 0x01	; 1
    1e2e:	cd 91       	ld	r28, X+
    1e30:	dc 91       	ld	r29, X
    1e32:	12 97       	sbiw	r26, 0x02	; 2
    1e34:	bf 01       	movw	r22, r30
    1e36:	62 5f       	subi	r22, 0xF2	; 242
    1e38:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3a:	c6 17       	cp	r28, r22
    1e3c:	d7 07       	cpc	r29, r23
    1e3e:	31 f4       	brne	.+12     	; 0x1e4c <xTaskIncrementTick+0x180>
    1e40:	64 89       	ldd	r22, Z+20	; 0x14
    1e42:	75 89       	ldd	r23, Z+21	; 0x15
    1e44:	12 96       	adiw	r26, 0x02	; 2
    1e46:	7c 93       	st	X, r23
    1e48:	6e 93       	st	-X, r22
    1e4a:	11 97       	sbiw	r26, 0x01	; 1
    1e4c:	11 8e       	std	Z+25, r1	; 0x19
    1e4e:	10 8e       	std	Z+24, r1	; 0x18
    1e50:	9c 91       	ld	r25, X
    1e52:	91 50       	subi	r25, 0x01	; 1
    1e54:	9c 93       	st	X, r25
    1e56:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e58:	90 91 19 15 	lds	r25, 0x1519	; 0x801519 <uxTopReadyPriority>
    1e5c:	9a 17       	cp	r25, r26
    1e5e:	10 f4       	brcc	.+4      	; 0x1e64 <xTaskIncrementTick+0x198>
    1e60:	a0 93 19 15 	sts	0x1519, r26	; 0x801519 <uxTopReadyPriority>
    1e64:	4a 9f       	mul	r20, r26
    1e66:	d0 01       	movw	r26, r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	a5 5a       	subi	r26, 0xA5	; 165
    1e6c:	ba 4e       	sbci	r27, 0xEA	; 234
    1e6e:	11 96       	adiw	r26, 0x01	; 1
    1e70:	0d 90       	ld	r0, X+
    1e72:	bc 91       	ld	r27, X
    1e74:	a0 2d       	mov	r26, r0
    1e76:	b7 83       	std	Z+7, r27	; 0x07
    1e78:	a6 83       	std	Z+6, r26	; 0x06
    1e7a:	16 96       	adiw	r26, 0x06	; 6
    1e7c:	6d 91       	ld	r22, X+
    1e7e:	7c 91       	ld	r23, X
    1e80:	17 97       	sbiw	r26, 0x07	; 7
    1e82:	71 87       	std	Z+9, r23	; 0x09
    1e84:	60 87       	std	Z+8, r22	; 0x08
    1e86:	16 96       	adiw	r26, 0x06	; 6
    1e88:	cd 91       	ld	r28, X+
    1e8a:	dc 91       	ld	r29, X
    1e8c:	17 97       	sbiw	r26, 0x07	; 7
    1e8e:	3d 83       	std	Y+5, r19	; 0x05
    1e90:	2c 83       	std	Y+4, r18	; 0x04
    1e92:	17 96       	adiw	r26, 0x07	; 7
    1e94:	3c 93       	st	X, r19
    1e96:	2e 93       	st	-X, r18
    1e98:	16 97       	sbiw	r26, 0x06	; 6
    1e9a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e9c:	4a 9f       	mul	r20, r26
    1e9e:	d0 01       	movw	r26, r0
    1ea0:	11 24       	eor	r1, r1
    1ea2:	a5 5a       	subi	r26, 0xA5	; 165
    1ea4:	ba 4e       	sbci	r27, 0xEA	; 234
    1ea6:	b5 87       	std	Z+13, r27	; 0x0d
    1ea8:	a4 87       	std	Z+12, r26	; 0x0c
    1eaa:	9c 91       	ld	r25, X
    1eac:	9f 5f       	subi	r25, 0xFF	; 255
    1eae:	9c 93       	st	X, r25
    1eb0:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1eb4:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1eb8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1eba:	5a 96       	adiw	r26, 0x1a	; 26
    1ebc:	9c 91       	ld	r25, X
    1ebe:	29 17       	cp	r18, r25
    1ec0:	08 f4       	brcc	.+2      	; 0x1ec4 <xTaskIncrementTick+0x1f8>
    1ec2:	52 cf       	rjmp	.-348    	; 0x1d68 <xTaskIncrementTick+0x9c>
    1ec4:	85 2f       	mov	r24, r21
    1ec6:	50 cf       	rjmp	.-352    	; 0x1d68 <xTaskIncrementTick+0x9c>
    1ec8:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    1ecc:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    1ed0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1ed2:	9b e0       	ldi	r25, 0x0B	; 11
    1ed4:	e9 9f       	mul	r30, r25
    1ed6:	f0 01       	movw	r30, r0
    1ed8:	11 24       	eor	r1, r1
    1eda:	e5 5a       	subi	r30, 0xA5	; 165
    1edc:	fa 4e       	sbci	r31, 0xEA	; 234
    1ede:	90 81       	ld	r25, Z
    1ee0:	92 30       	cpi	r25, 0x02	; 2
    1ee2:	08 f0       	brcs	.+2      	; 0x1ee6 <xTaskIncrementTick+0x21a>
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 91 13 15 	lds	r25, 0x1513	; 0x801513 <xYieldPending>
    1eea:	99 23       	and	r25, r25
    1eec:	b1 f0       	breq	.+44     	; 0x1f1a <xTaskIncrementTick+0x24e>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <xTaskIncrementTick+0x24e>
    1ef2:	80 91 14 15 	lds	r24, 0x1514	; 0x801514 <xPendedTicks>
    1ef6:	90 91 15 15 	lds	r25, 0x1515	; 0x801515 <xPendedTicks+0x1>
    1efa:	a0 91 16 15 	lds	r26, 0x1516	; 0x801516 <xPendedTicks+0x2>
    1efe:	b0 91 17 15 	lds	r27, 0x1517	; 0x801517 <xPendedTicks+0x3>
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	a1 1d       	adc	r26, r1
    1f06:	b1 1d       	adc	r27, r1
    1f08:	80 93 14 15 	sts	0x1514, r24	; 0x801514 <xPendedTicks>
    1f0c:	90 93 15 15 	sts	0x1515, r25	; 0x801515 <xPendedTicks+0x1>
    1f10:	a0 93 16 15 	sts	0x1516, r26	; 0x801516 <xPendedTicks+0x2>
    1f14:	b0 93 17 15 	sts	0x1517, r27	; 0x801517 <xPendedTicks+0x3>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	ff 90       	pop	r15
    1f24:	ef 90       	pop	r14
    1f26:	df 90       	pop	r13
    1f28:	cf 90       	pop	r12
    1f2a:	08 95       	ret

00001f2c <xTaskResumeAll>:
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	0f 92       	push	r0
    1f42:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    1f46:	81 50       	subi	r24, 0x01	; 1
    1f48:	80 93 0a 15 	sts	0x150A, r24	; 0x80150a <uxSchedulerSuspended>
    1f4c:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    1f50:	81 11       	cpse	r24, r1
    1f52:	c4 c0       	rjmp	.+392    	; 0x20dc <xTaskResumeAll+0x1b0>
    1f54:	80 91 1e 15 	lds	r24, 0x151E	; 0x80151e <uxCurrentNumberOfTasks>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	8b c0       	rjmp	.+278    	; 0x2072 <xTaskResumeAll+0x146>
    1f5c:	c2 c0       	rjmp	.+388    	; 0x20e2 <xTaskResumeAll+0x1b6>
    1f5e:	d8 01       	movw	r26, r16
    1f60:	17 96       	adiw	r26, 0x07	; 7
    1f62:	ed 91       	ld	r30, X+
    1f64:	fc 91       	ld	r31, X
    1f66:	18 97       	sbiw	r26, 0x08	; 8
    1f68:	00 84       	ldd	r0, Z+8	; 0x08
    1f6a:	f1 85       	ldd	r31, Z+9	; 0x09
    1f6c:	e0 2d       	mov	r30, r0
    1f6e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f70:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f72:	82 89       	ldd	r24, Z+18	; 0x12
    1f74:	93 89       	ldd	r25, Z+19	; 0x13
    1f76:	64 89       	ldd	r22, Z+20	; 0x14
    1f78:	75 89       	ldd	r23, Z+21	; 0x15
    1f7a:	ec 01       	movw	r28, r24
    1f7c:	7f 83       	std	Y+7, r23	; 0x07
    1f7e:	6e 83       	std	Y+6, r22	; 0x06
    1f80:	84 89       	ldd	r24, Z+20	; 0x14
    1f82:	95 89       	ldd	r25, Z+21	; 0x15
    1f84:	62 89       	ldd	r22, Z+18	; 0x12
    1f86:	73 89       	ldd	r23, Z+19	; 0x13
    1f88:	ec 01       	movw	r28, r24
    1f8a:	7d 83       	std	Y+5, r23	; 0x05
    1f8c:	6c 83       	std	Y+4, r22	; 0x04
    1f8e:	cf 01       	movw	r24, r30
    1f90:	0e 96       	adiw	r24, 0x0e	; 14
    1f92:	11 96       	adiw	r26, 0x01	; 1
    1f94:	6d 91       	ld	r22, X+
    1f96:	7c 91       	ld	r23, X
    1f98:	12 97       	sbiw	r26, 0x02	; 2
    1f9a:	68 17       	cp	r22, r24
    1f9c:	79 07       	cpc	r23, r25
    1f9e:	31 f4       	brne	.+12     	; 0x1fac <xTaskResumeAll+0x80>
    1fa0:	84 89       	ldd	r24, Z+20	; 0x14
    1fa2:	95 89       	ldd	r25, Z+21	; 0x15
    1fa4:	12 96       	adiw	r26, 0x02	; 2
    1fa6:	9c 93       	st	X, r25
    1fa8:	8e 93       	st	-X, r24
    1faa:	11 97       	sbiw	r26, 0x01	; 1
    1fac:	11 8e       	std	Z+25, r1	; 0x19
    1fae:	10 8e       	std	Z+24, r1	; 0x18
    1fb0:	8c 91       	ld	r24, X
    1fb2:	81 50       	subi	r24, 0x01	; 1
    1fb4:	8c 93       	st	X, r24
    1fb6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1fb8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1fba:	86 81       	ldd	r24, Z+6	; 0x06
    1fbc:	97 81       	ldd	r25, Z+7	; 0x07
    1fbe:	60 85       	ldd	r22, Z+8	; 0x08
    1fc0:	71 85       	ldd	r23, Z+9	; 0x09
    1fc2:	ec 01       	movw	r28, r24
    1fc4:	7f 83       	std	Y+7, r23	; 0x07
    1fc6:	6e 83       	std	Y+6, r22	; 0x06
    1fc8:	80 85       	ldd	r24, Z+8	; 0x08
    1fca:	91 85       	ldd	r25, Z+9	; 0x09
    1fcc:	66 81       	ldd	r22, Z+6	; 0x06
    1fce:	77 81       	ldd	r23, Z+7	; 0x07
    1fd0:	ec 01       	movw	r28, r24
    1fd2:	7d 83       	std	Y+5, r23	; 0x05
    1fd4:	6c 83       	std	Y+4, r22	; 0x04
    1fd6:	cf 01       	movw	r24, r30
    1fd8:	02 96       	adiw	r24, 0x02	; 2
    1fda:	11 96       	adiw	r26, 0x01	; 1
    1fdc:	6d 91       	ld	r22, X+
    1fde:	7c 91       	ld	r23, X
    1fe0:	12 97       	sbiw	r26, 0x02	; 2
    1fe2:	68 17       	cp	r22, r24
    1fe4:	79 07       	cpc	r23, r25
    1fe6:	31 f4       	brne	.+12     	; 0x1ff4 <xTaskResumeAll+0xc8>
    1fe8:	60 85       	ldd	r22, Z+8	; 0x08
    1fea:	71 85       	ldd	r23, Z+9	; 0x09
    1fec:	12 96       	adiw	r26, 0x02	; 2
    1fee:	7c 93       	st	X, r23
    1ff0:	6e 93       	st	-X, r22
    1ff2:	11 97       	sbiw	r26, 0x01	; 1
    1ff4:	15 86       	std	Z+13, r1	; 0x0d
    1ff6:	14 86       	std	Z+12, r1	; 0x0c
    1ff8:	2c 91       	ld	r18, X
    1ffa:	21 50       	subi	r18, 0x01	; 1
    1ffc:	2c 93       	st	X, r18
    1ffe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2000:	20 91 19 15 	lds	r18, 0x1519	; 0x801519 <uxTopReadyPriority>
    2004:	2a 17       	cp	r18, r26
    2006:	10 f4       	brcc	.+4      	; 0x200c <xTaskResumeAll+0xe0>
    2008:	a0 93 19 15 	sts	0x1519, r26	; 0x801519 <uxTopReadyPriority>
    200c:	3a 9f       	mul	r19, r26
    200e:	d0 01       	movw	r26, r0
    2010:	11 24       	eor	r1, r1
    2012:	a5 5a       	subi	r26, 0xA5	; 165
    2014:	ba 4e       	sbci	r27, 0xEA	; 234
    2016:	11 96       	adiw	r26, 0x01	; 1
    2018:	0d 90       	ld	r0, X+
    201a:	bc 91       	ld	r27, X
    201c:	a0 2d       	mov	r26, r0
    201e:	b7 83       	std	Z+7, r27	; 0x07
    2020:	a6 83       	std	Z+6, r26	; 0x06
    2022:	16 96       	adiw	r26, 0x06	; 6
    2024:	6d 91       	ld	r22, X+
    2026:	7c 91       	ld	r23, X
    2028:	17 97       	sbiw	r26, 0x07	; 7
    202a:	71 87       	std	Z+9, r23	; 0x09
    202c:	60 87       	std	Z+8, r22	; 0x08
    202e:	16 96       	adiw	r26, 0x06	; 6
    2030:	6d 91       	ld	r22, X+
    2032:	7c 91       	ld	r23, X
    2034:	17 97       	sbiw	r26, 0x07	; 7
    2036:	eb 01       	movw	r28, r22
    2038:	9d 83       	std	Y+5, r25	; 0x05
    203a:	8c 83       	std	Y+4, r24	; 0x04
    203c:	17 96       	adiw	r26, 0x07	; 7
    203e:	9c 93       	st	X, r25
    2040:	8e 93       	st	-X, r24
    2042:	16 97       	sbiw	r26, 0x06	; 6
    2044:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2046:	3a 9f       	mul	r19, r26
    2048:	d0 01       	movw	r26, r0
    204a:	11 24       	eor	r1, r1
    204c:	a5 5a       	subi	r26, 0xA5	; 165
    204e:	ba 4e       	sbci	r27, 0xEA	; 234
    2050:	b5 87       	std	Z+13, r27	; 0x0d
    2052:	a4 87       	std	Z+12, r26	; 0x0c
    2054:	8c 91       	ld	r24, X
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	8c 93       	st	X, r24
    205a:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    205e:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2062:	92 8d       	ldd	r25, Z+26	; 0x1a
    2064:	5a 96       	adiw	r26, 0x1a	; 26
    2066:	8c 91       	ld	r24, X
    2068:	98 17       	cp	r25, r24
    206a:	48 f0       	brcs	.+18     	; 0x207e <xTaskResumeAll+0x152>
    206c:	40 93 13 15 	sts	0x1513, r20	; 0x801513 <xYieldPending>
    2070:	06 c0       	rjmp	.+12     	; 0x207e <xTaskResumeAll+0x152>
    2072:	e0 e0       	ldi	r30, 0x00	; 0
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	06 e3       	ldi	r16, 0x36	; 54
    2078:	15 e1       	ldi	r17, 0x15	; 21
    207a:	3b e0       	ldi	r19, 0x0B	; 11
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	d8 01       	movw	r26, r16
    2080:	8c 91       	ld	r24, X
    2082:	81 11       	cpse	r24, r1
    2084:	6c cf       	rjmp	.-296    	; 0x1f5e <xTaskResumeAll+0x32>
    2086:	ef 2b       	or	r30, r31
    2088:	09 f0       	breq	.+2      	; 0x208c <xTaskResumeAll+0x160>
    208a:	d1 db       	rcall	.-2142   	; 0x182e <prvResetNextTaskUnblockTime>
    208c:	c0 90 14 15 	lds	r12, 0x1514	; 0x801514 <xPendedTicks>
    2090:	d0 90 15 15 	lds	r13, 0x1515	; 0x801515 <xPendedTicks+0x1>
    2094:	e0 90 16 15 	lds	r14, 0x1516	; 0x801516 <xPendedTicks+0x2>
    2098:	f0 90 17 15 	lds	r15, 0x1517	; 0x801517 <xPendedTicks+0x3>
    209c:	c1 14       	cp	r12, r1
    209e:	d1 04       	cpc	r13, r1
    20a0:	e1 04       	cpc	r14, r1
    20a2:	f1 04       	cpc	r15, r1
    20a4:	99 f0       	breq	.+38     	; 0x20cc <xTaskResumeAll+0x1a0>
    20a6:	c1 e0       	ldi	r28, 0x01	; 1
    20a8:	11 de       	rcall	.-990    	; 0x1ccc <xTaskIncrementTick>
    20aa:	81 11       	cpse	r24, r1
    20ac:	c0 93 13 15 	sts	0x1513, r28	; 0x801513 <xYieldPending>
    20b0:	b1 e0       	ldi	r27, 0x01	; 1
    20b2:	cb 1a       	sub	r12, r27
    20b4:	d1 08       	sbc	r13, r1
    20b6:	e1 08       	sbc	r14, r1
    20b8:	f1 08       	sbc	r15, r1
    20ba:	b1 f7       	brne	.-20     	; 0x20a8 <xTaskResumeAll+0x17c>
    20bc:	10 92 14 15 	sts	0x1514, r1	; 0x801514 <xPendedTicks>
    20c0:	10 92 15 15 	sts	0x1515, r1	; 0x801515 <xPendedTicks+0x1>
    20c4:	10 92 16 15 	sts	0x1516, r1	; 0x801516 <xPendedTicks+0x2>
    20c8:	10 92 17 15 	sts	0x1517, r1	; 0x801517 <xPendedTicks+0x3>
    20cc:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <xYieldPending>
    20d0:	88 23       	and	r24, r24
    20d2:	31 f0       	breq	.+12     	; 0x20e0 <xTaskResumeAll+0x1b4>
    20d4:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	03 c0       	rjmp	.+6      	; 0x20e2 <xTaskResumeAll+0x1b6>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <xTaskResumeAll+0x1b6>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	ff 90       	pop	r15
    20f0:	ef 90       	pop	r14
    20f2:	df 90       	pop	r13
    20f4:	cf 90       	pop	r12
    20f6:	08 95       	ret

000020f8 <xTaskDelayUntil>:
    20f8:	cf 92       	push	r12
    20fa:	df 92       	push	r13
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	ec 01       	movw	r28, r24
    210a:	6a 01       	movw	r12, r20
    210c:	7b 01       	movw	r14, r22
    210e:	ca dd       	rcall	.-1132   	; 0x1ca4 <vTaskSuspendAll>
    2110:	00 91 1a 15 	lds	r16, 0x151A	; 0x80151a <xTickCount>
    2114:	10 91 1b 15 	lds	r17, 0x151B	; 0x80151b <xTickCount+0x1>
    2118:	20 91 1c 15 	lds	r18, 0x151C	; 0x80151c <xTickCount+0x2>
    211c:	30 91 1d 15 	lds	r19, 0x151D	; 0x80151d <xTickCount+0x3>
    2120:	88 81       	ld	r24, Y
    2122:	99 81       	ldd	r25, Y+1	; 0x01
    2124:	aa 81       	ldd	r26, Y+2	; 0x02
    2126:	bb 81       	ldd	r27, Y+3	; 0x03
    2128:	ac 01       	movw	r20, r24
    212a:	bd 01       	movw	r22, r26
    212c:	4c 0d       	add	r20, r12
    212e:	5d 1d       	adc	r21, r13
    2130:	6e 1d       	adc	r22, r14
    2132:	7f 1d       	adc	r23, r15
    2134:	08 17       	cp	r16, r24
    2136:	19 07       	cpc	r17, r25
    2138:	2a 07       	cpc	r18, r26
    213a:	3b 07       	cpc	r19, r27
    213c:	b8 f4       	brcc	.+46     	; 0x216c <xTaskDelayUntil+0x74>
    213e:	48 17       	cp	r20, r24
    2140:	59 07       	cpc	r21, r25
    2142:	6a 07       	cpc	r22, r26
    2144:	7b 07       	cpc	r23, r27
    2146:	90 f5       	brcc	.+100    	; 0x21ac <xTaskDelayUntil+0xb4>
    2148:	ff 24       	eor	r15, r15
    214a:	f3 94       	inc	r15
    214c:	04 17       	cp	r16, r20
    214e:	15 07       	cpc	r17, r21
    2150:	26 07       	cpc	r18, r22
    2152:	37 07       	cpc	r19, r23
    2154:	08 f0       	brcs	.+2      	; 0x2158 <xTaskDelayUntil+0x60>
    2156:	f1 2c       	mov	r15, r1
    2158:	48 83       	st	Y, r20
    215a:	59 83       	std	Y+1, r21	; 0x01
    215c:	6a 83       	std	Y+2, r22	; 0x02
    215e:	7b 83       	std	Y+3, r23	; 0x03
    2160:	04 17       	cp	r16, r20
    2162:	15 07       	cpc	r17, r21
    2164:	26 07       	cpc	r18, r22
    2166:	37 07       	cpc	r19, r23
    2168:	a0 f4       	brcc	.+40     	; 0x2192 <xTaskDelayUntil+0x9a>
    216a:	0b c0       	rjmp	.+22     	; 0x2182 <xTaskDelayUntil+0x8a>
    216c:	48 17       	cp	r20, r24
    216e:	59 07       	cpc	r21, r25
    2170:	6a 07       	cpc	r22, r26
    2172:	7b 07       	cpc	r23, r27
    2174:	a0 f0       	brcs	.+40     	; 0x219e <xTaskDelayUntil+0xa6>
    2176:	04 17       	cp	r16, r20
    2178:	15 07       	cpc	r17, r21
    217a:	26 07       	cpc	r18, r22
    217c:	37 07       	cpc	r19, r23
    217e:	78 f0       	brcs	.+30     	; 0x219e <xTaskDelayUntil+0xa6>
    2180:	15 c0       	rjmp	.+42     	; 0x21ac <xTaskDelayUntil+0xb4>
    2182:	cb 01       	movw	r24, r22
    2184:	ba 01       	movw	r22, r20
    2186:	60 1b       	sub	r22, r16
    2188:	71 0b       	sbc	r23, r17
    218a:	82 0b       	sbc	r24, r18
    218c:	93 0b       	sbc	r25, r19
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	75 db       	rcall	.-2326   	; 0x187c <prvAddCurrentTaskToDelayedList>
    2192:	cc de       	rcall	.-616    	; 0x1f2c <xTaskResumeAll>
    2194:	81 11       	cpse	r24, r1
    2196:	10 c0       	rjmp	.+32     	; 0x21b8 <xTaskDelayUntil+0xc0>
    2198:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    219c:	0d c0       	rjmp	.+26     	; 0x21b8 <xTaskDelayUntil+0xc0>
    219e:	48 83       	st	Y, r20
    21a0:	59 83       	std	Y+1, r21	; 0x01
    21a2:	6a 83       	std	Y+2, r22	; 0x02
    21a4:	7b 83       	std	Y+3, r23	; 0x03
    21a6:	ff 24       	eor	r15, r15
    21a8:	f3 94       	inc	r15
    21aa:	eb cf       	rjmp	.-42     	; 0x2182 <xTaskDelayUntil+0x8a>
    21ac:	48 83       	st	Y, r20
    21ae:	59 83       	std	Y+1, r21	; 0x01
    21b0:	6a 83       	std	Y+2, r22	; 0x02
    21b2:	7b 83       	std	Y+3, r23	; 0x03
    21b4:	f1 2c       	mov	r15, r1
    21b6:	ed cf       	rjmp	.-38     	; 0x2192 <xTaskDelayUntil+0x9a>
    21b8:	8f 2d       	mov	r24, r15
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	08 95       	ret

000021cc <vTaskDelay>:
    21cc:	cf 92       	push	r12
    21ce:	df 92       	push	r13
    21d0:	ef 92       	push	r14
    21d2:	ff 92       	push	r15
    21d4:	6b 01       	movw	r12, r22
    21d6:	7c 01       	movw	r14, r24
    21d8:	67 2b       	or	r22, r23
    21da:	68 2b       	or	r22, r24
    21dc:	69 2b       	or	r22, r25
    21de:	41 f0       	breq	.+16     	; 0x21f0 <vTaskDelay+0x24>
    21e0:	61 dd       	rcall	.-1342   	; 0x1ca4 <vTaskSuspendAll>
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	c7 01       	movw	r24, r14
    21e6:	b6 01       	movw	r22, r12
    21e8:	49 db       	rcall	.-2414   	; 0x187c <prvAddCurrentTaskToDelayedList>
    21ea:	a0 de       	rcall	.-704    	; 0x1f2c <xTaskResumeAll>
    21ec:	81 11       	cpse	r24, r1
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <vTaskDelay+0x28>
    21f0:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    21f4:	ff 90       	pop	r15
    21f6:	ef 90       	pop	r14
    21f8:	df 90       	pop	r13
    21fa:	cf 90       	pop	r12
    21fc:	08 95       	ret

000021fe <vTaskSwitchContext>:
    21fe:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    2202:	88 23       	and	r24, r24
    2204:	21 f0       	breq	.+8      	; 0x220e <__stack+0xf>
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <xYieldPending>
    220c:	08 95       	ret
    220e:	10 92 13 15 	sts	0x1513, r1	; 0x801513 <xYieldPending>
    2212:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2216:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    221a:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    221e:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2222:	2d 91       	ld	r18, X+
    2224:	3c 91       	ld	r19, X
    2226:	83 8d       	ldd	r24, Z+27	; 0x1b
    2228:	94 8d       	ldd	r25, Z+28	; 0x1c
    222a:	82 17       	cp	r24, r18
    222c:	93 07       	cpc	r25, r19
    222e:	58 f0       	brcs	.+22     	; 0x2246 <__stack+0x47>
    2230:	60 91 c9 15 	lds	r22, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2234:	70 91 ca 15 	lds	r23, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2238:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    223c:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2240:	63 5e       	subi	r22, 0xE3	; 227
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	b6 d7       	rcall	.+3948   	; 0x31b2 <vApplicationStackOverflowHook>
    2246:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	9b e0       	ldi	r25, 0x0B	; 11
    2250:	89 9f       	mul	r24, r25
    2252:	f0 01       	movw	r30, r0
    2254:	11 24       	eor	r1, r1
    2256:	e5 5a       	subi	r30, 0xA5	; 165
    2258:	fa 4e       	sbci	r31, 0xEA	; 234
    225a:	90 81       	ld	r25, Z
    225c:	91 11       	cpse	r25, r1
    225e:	0e c0       	rjmp	.+28     	; 0x227c <__stack+0x7d>
    2260:	4b e0       	ldi	r20, 0x0B	; 11
    2262:	81 50       	subi	r24, 0x01	; 1
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	42 9f       	mul	r20, r18
    226a:	f0 01       	movw	r30, r0
    226c:	43 9f       	mul	r20, r19
    226e:	f0 0d       	add	r31, r0
    2270:	11 24       	eor	r1, r1
    2272:	e5 5a       	subi	r30, 0xA5	; 165
    2274:	fa 4e       	sbci	r31, 0xEA	; 234
    2276:	90 81       	ld	r25, Z
    2278:	99 23       	and	r25, r25
    227a:	99 f3       	breq	.-26     	; 0x2262 <__stack+0x63>
    227c:	9b e0       	ldi	r25, 0x0B	; 11
    227e:	92 9f       	mul	r25, r18
    2280:	a0 01       	movw	r20, r0
    2282:	93 9f       	mul	r25, r19
    2284:	50 0d       	add	r21, r0
    2286:	11 24       	eor	r1, r1
    2288:	da 01       	movw	r26, r20
    228a:	a5 5a       	subi	r26, 0xA5	; 165
    228c:	ba 4e       	sbci	r27, 0xEA	; 234
    228e:	11 96       	adiw	r26, 0x01	; 1
    2290:	ed 91       	ld	r30, X+
    2292:	fc 91       	ld	r31, X
    2294:	12 97       	sbiw	r26, 0x02	; 2
    2296:	04 80       	ldd	r0, Z+4	; 0x04
    2298:	f5 81       	ldd	r31, Z+5	; 0x05
    229a:	e0 2d       	mov	r30, r0
    229c:	12 96       	adiw	r26, 0x02	; 2
    229e:	fc 93       	st	X, r31
    22a0:	ee 93       	st	-X, r30
    22a2:	11 97       	sbiw	r26, 0x01	; 1
    22a4:	42 5a       	subi	r20, 0xA2	; 162
    22a6:	5a 4e       	sbci	r21, 0xEA	; 234
    22a8:	e4 17       	cp	r30, r20
    22aa:	f5 07       	cpc	r31, r21
    22ac:	29 f4       	brne	.+10     	; 0x22b8 <__stack+0xb9>
    22ae:	44 81       	ldd	r20, Z+4	; 0x04
    22b0:	55 81       	ldd	r21, Z+5	; 0x05
    22b2:	fd 01       	movw	r30, r26
    22b4:	52 83       	std	Z+2, r21	; 0x02
    22b6:	41 83       	std	Z+1, r20	; 0x01
    22b8:	9b e0       	ldi	r25, 0x0B	; 11
    22ba:	92 9f       	mul	r25, r18
    22bc:	f0 01       	movw	r30, r0
    22be:	93 9f       	mul	r25, r19
    22c0:	f0 0d       	add	r31, r0
    22c2:	11 24       	eor	r1, r1
    22c4:	e5 5a       	subi	r30, 0xA5	; 165
    22c6:	fa 4e       	sbci	r31, 0xEA	; 234
    22c8:	01 80       	ldd	r0, Z+1	; 0x01
    22ca:	f2 81       	ldd	r31, Z+2	; 0x02
    22cc:	e0 2d       	mov	r30, r0
    22ce:	20 85       	ldd	r18, Z+8	; 0x08
    22d0:	31 85       	ldd	r19, Z+9	; 0x09
    22d2:	30 93 ca 15 	sts	0x15CA, r19	; 0x8015ca <pxCurrentTCB+0x1>
    22d6:	20 93 c9 15 	sts	0x15C9, r18	; 0x8015c9 <pxCurrentTCB>
    22da:	80 93 19 15 	sts	0x1519, r24	; 0x801519 <uxTopReadyPriority>
    22de:	08 95       	ret

000022e0 <vTaskPlaceOnEventList>:
    22e0:	cf 92       	push	r12
    22e2:	df 92       	push	r13
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	6a 01       	movw	r12, r20
    22ea:	7b 01       	movw	r14, r22
    22ec:	60 91 c9 15 	lds	r22, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    22f0:	70 91 ca 15 	lds	r23, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    22f4:	62 5f       	subi	r22, 0xF2	; 242
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	c7 01       	movw	r24, r14
    2300:	b6 01       	movw	r22, r12
    2302:	bc da       	rcall	.-2696   	; 0x187c <prvAddCurrentTaskToDelayedList>
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	df 90       	pop	r13
    230a:	cf 90       	pop	r12
    230c:	08 95       	ret

0000230e <vTaskPlaceOnEventListRestricted>:
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	fc 01       	movw	r30, r24
    2314:	cb 01       	movw	r24, r22
    2316:	ba 01       	movw	r22, r20
    2318:	a1 81       	ldd	r26, Z+1	; 0x01
    231a:	b2 81       	ldd	r27, Z+2	; 0x02
    231c:	c0 91 c9 15 	lds	r28, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2320:	d0 91 ca 15 	lds	r29, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2324:	bb 8b       	std	Y+19, r27	; 0x13
    2326:	aa 8b       	std	Y+18, r26	; 0x12
    2328:	c0 91 c9 15 	lds	r28, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    232c:	d0 91 ca 15 	lds	r29, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2330:	16 96       	adiw	r26, 0x06	; 6
    2332:	4d 91       	ld	r20, X+
    2334:	5c 91       	ld	r21, X
    2336:	17 97       	sbiw	r26, 0x07	; 7
    2338:	5d 8b       	std	Y+21, r21	; 0x15
    233a:	4c 8b       	std	Y+20, r20	; 0x14
    233c:	16 96       	adiw	r26, 0x06	; 6
    233e:	cd 91       	ld	r28, X+
    2340:	dc 91       	ld	r29, X
    2342:	17 97       	sbiw	r26, 0x07	; 7
    2344:	40 91 c9 15 	lds	r20, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2348:	50 91 ca 15 	lds	r21, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    234c:	42 5f       	subi	r20, 0xF2	; 242
    234e:	5f 4f       	sbci	r21, 0xFF	; 255
    2350:	5d 83       	std	Y+5, r21	; 0x05
    2352:	4c 83       	std	Y+4, r20	; 0x04
    2354:	40 91 c9 15 	lds	r20, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2358:	50 91 ca 15 	lds	r21, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    235c:	42 5f       	subi	r20, 0xF2	; 242
    235e:	5f 4f       	sbci	r21, 0xFF	; 255
    2360:	17 96       	adiw	r26, 0x07	; 7
    2362:	5c 93       	st	X, r21
    2364:	4e 93       	st	-X, r20
    2366:	16 97       	sbiw	r26, 0x06	; 6
    2368:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    236c:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2370:	59 96       	adiw	r26, 0x19	; 25
    2372:	fc 93       	st	X, r31
    2374:	ee 93       	st	-X, r30
    2376:	58 97       	sbiw	r26, 0x18	; 24
    2378:	30 81       	ld	r19, Z
    237a:	3f 5f       	subi	r19, 0xFF	; 255
    237c:	30 83       	st	Z, r19
    237e:	22 23       	and	r18, r18
    2380:	19 f0       	breq	.+6      	; 0x2388 <vTaskPlaceOnEventListRestricted+0x7a>
    2382:	6f ef       	ldi	r22, 0xFF	; 255
    2384:	7f ef       	ldi	r23, 0xFF	; 255
    2386:	cb 01       	movw	r24, r22
    2388:	42 2f       	mov	r20, r18
    238a:	78 da       	rcall	.-2832   	; 0x187c <prvAddCurrentTaskToDelayedList>
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	08 95       	ret

00002392 <xTaskRemoveFromEventList>:
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	dc 01       	movw	r26, r24
    2398:	17 96       	adiw	r26, 0x07	; 7
    239a:	ed 91       	ld	r30, X+
    239c:	fc 91       	ld	r31, X
    239e:	18 97       	sbiw	r26, 0x08	; 8
    23a0:	00 84       	ldd	r0, Z+8	; 0x08
    23a2:	f1 85       	ldd	r31, Z+9	; 0x09
    23a4:	e0 2d       	mov	r30, r0
    23a6:	a0 8d       	ldd	r26, Z+24	; 0x18
    23a8:	b1 8d       	ldd	r27, Z+25	; 0x19
    23aa:	c2 89       	ldd	r28, Z+18	; 0x12
    23ac:	d3 89       	ldd	r29, Z+19	; 0x13
    23ae:	84 89       	ldd	r24, Z+20	; 0x14
    23b0:	95 89       	ldd	r25, Z+21	; 0x15
    23b2:	9f 83       	std	Y+7, r25	; 0x07
    23b4:	8e 83       	std	Y+6, r24	; 0x06
    23b6:	c4 89       	ldd	r28, Z+20	; 0x14
    23b8:	d5 89       	ldd	r29, Z+21	; 0x15
    23ba:	82 89       	ldd	r24, Z+18	; 0x12
    23bc:	93 89       	ldd	r25, Z+19	; 0x13
    23be:	9d 83       	std	Y+5, r25	; 0x05
    23c0:	8c 83       	std	Y+4, r24	; 0x04
    23c2:	9f 01       	movw	r18, r30
    23c4:	22 5f       	subi	r18, 0xF2	; 242
    23c6:	3f 4f       	sbci	r19, 0xFF	; 255
    23c8:	11 96       	adiw	r26, 0x01	; 1
    23ca:	8d 91       	ld	r24, X+
    23cc:	9c 91       	ld	r25, X
    23ce:	12 97       	sbiw	r26, 0x02	; 2
    23d0:	82 17       	cp	r24, r18
    23d2:	93 07       	cpc	r25, r19
    23d4:	31 f4       	brne	.+12     	; 0x23e2 <xTaskRemoveFromEventList+0x50>
    23d6:	84 89       	ldd	r24, Z+20	; 0x14
    23d8:	95 89       	ldd	r25, Z+21	; 0x15
    23da:	12 96       	adiw	r26, 0x02	; 2
    23dc:	9c 93       	st	X, r25
    23de:	8e 93       	st	-X, r24
    23e0:	11 97       	sbiw	r26, 0x01	; 1
    23e2:	11 8e       	std	Z+25, r1	; 0x19
    23e4:	10 8e       	std	Z+24, r1	; 0x18
    23e6:	8c 91       	ld	r24, X
    23e8:	81 50       	subi	r24, 0x01	; 1
    23ea:	8c 93       	st	X, r24
    23ec:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    23f0:	81 11       	cpse	r24, r1
    23f2:	52 c0       	rjmp	.+164    	; 0x2498 <xTaskRemoveFromEventList+0x106>
    23f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    23f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    23f8:	c6 81       	ldd	r28, Z+6	; 0x06
    23fa:	d7 81       	ldd	r29, Z+7	; 0x07
    23fc:	80 85       	ldd	r24, Z+8	; 0x08
    23fe:	91 85       	ldd	r25, Z+9	; 0x09
    2400:	9f 83       	std	Y+7, r25	; 0x07
    2402:	8e 83       	std	Y+6, r24	; 0x06
    2404:	c0 85       	ldd	r28, Z+8	; 0x08
    2406:	d1 85       	ldd	r29, Z+9	; 0x09
    2408:	86 81       	ldd	r24, Z+6	; 0x06
    240a:	97 81       	ldd	r25, Z+7	; 0x07
    240c:	9d 83       	std	Y+5, r25	; 0x05
    240e:	8c 83       	std	Y+4, r24	; 0x04
    2410:	9f 01       	movw	r18, r30
    2412:	2e 5f       	subi	r18, 0xFE	; 254
    2414:	3f 4f       	sbci	r19, 0xFF	; 255
    2416:	11 96       	adiw	r26, 0x01	; 1
    2418:	8d 91       	ld	r24, X+
    241a:	9c 91       	ld	r25, X
    241c:	12 97       	sbiw	r26, 0x02	; 2
    241e:	82 17       	cp	r24, r18
    2420:	93 07       	cpc	r25, r19
    2422:	31 f4       	brne	.+12     	; 0x2430 <xTaskRemoveFromEventList+0x9e>
    2424:	80 85       	ldd	r24, Z+8	; 0x08
    2426:	91 85       	ldd	r25, Z+9	; 0x09
    2428:	12 96       	adiw	r26, 0x02	; 2
    242a:	9c 93       	st	X, r25
    242c:	8e 93       	st	-X, r24
    242e:	11 97       	sbiw	r26, 0x01	; 1
    2430:	15 86       	std	Z+13, r1	; 0x0d
    2432:	14 86       	std	Z+12, r1	; 0x0c
    2434:	8c 91       	ld	r24, X
    2436:	81 50       	subi	r24, 0x01	; 1
    2438:	8c 93       	st	X, r24
    243a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    243c:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    2440:	8a 17       	cp	r24, r26
    2442:	10 f4       	brcc	.+4      	; 0x2448 <xTaskRemoveFromEventList+0xb6>
    2444:	a0 93 19 15 	sts	0x1519, r26	; 0x801519 <uxTopReadyPriority>
    2448:	8b e0       	ldi	r24, 0x0B	; 11
    244a:	8a 9f       	mul	r24, r26
    244c:	d0 01       	movw	r26, r0
    244e:	11 24       	eor	r1, r1
    2450:	a5 5a       	subi	r26, 0xA5	; 165
    2452:	ba 4e       	sbci	r27, 0xEA	; 234
    2454:	11 96       	adiw	r26, 0x01	; 1
    2456:	0d 90       	ld	r0, X+
    2458:	bc 91       	ld	r27, X
    245a:	a0 2d       	mov	r26, r0
    245c:	b7 83       	std	Z+7, r27	; 0x07
    245e:	a6 83       	std	Z+6, r26	; 0x06
    2460:	16 96       	adiw	r26, 0x06	; 6
    2462:	4d 91       	ld	r20, X+
    2464:	5c 91       	ld	r21, X
    2466:	17 97       	sbiw	r26, 0x07	; 7
    2468:	51 87       	std	Z+9, r21	; 0x09
    246a:	40 87       	std	Z+8, r20	; 0x08
    246c:	16 96       	adiw	r26, 0x06	; 6
    246e:	cd 91       	ld	r28, X+
    2470:	dc 91       	ld	r29, X
    2472:	17 97       	sbiw	r26, 0x07	; 7
    2474:	3d 83       	std	Y+5, r19	; 0x05
    2476:	2c 83       	std	Y+4, r18	; 0x04
    2478:	17 96       	adiw	r26, 0x07	; 7
    247a:	3c 93       	st	X, r19
    247c:	2e 93       	st	-X, r18
    247e:	16 97       	sbiw	r26, 0x06	; 6
    2480:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2482:	8a 9f       	mul	r24, r26
    2484:	d0 01       	movw	r26, r0
    2486:	11 24       	eor	r1, r1
    2488:	a5 5a       	subi	r26, 0xA5	; 165
    248a:	ba 4e       	sbci	r27, 0xEA	; 234
    248c:	b5 87       	std	Z+13, r27	; 0x0d
    248e:	a4 87       	std	Z+12, r26	; 0x0c
    2490:	8c 91       	ld	r24, X
    2492:	8f 5f       	subi	r24, 0xFF	; 255
    2494:	8c 93       	st	X, r24
    2496:	1c c0       	rjmp	.+56     	; 0x24d0 <xTaskRemoveFromEventList+0x13e>
    2498:	46 e3       	ldi	r20, 0x36	; 54
    249a:	55 e1       	ldi	r21, 0x15	; 21
    249c:	da 01       	movw	r26, r20
    249e:	11 96       	adiw	r26, 0x01	; 1
    24a0:	cd 91       	ld	r28, X+
    24a2:	dc 91       	ld	r29, X
    24a4:	12 97       	sbiw	r26, 0x02	; 2
    24a6:	d3 8b       	std	Z+19, r29	; 0x13
    24a8:	c2 8b       	std	Z+18, r28	; 0x12
    24aa:	8e 81       	ldd	r24, Y+6	; 0x06
    24ac:	9f 81       	ldd	r25, Y+7	; 0x07
    24ae:	95 8b       	std	Z+21, r25	; 0x15
    24b0:	84 8b       	std	Z+20, r24	; 0x14
    24b2:	8e 81       	ldd	r24, Y+6	; 0x06
    24b4:	9f 81       	ldd	r25, Y+7	; 0x07
    24b6:	dc 01       	movw	r26, r24
    24b8:	15 96       	adiw	r26, 0x05	; 5
    24ba:	3c 93       	st	X, r19
    24bc:	2e 93       	st	-X, r18
    24be:	14 97       	sbiw	r26, 0x04	; 4
    24c0:	3f 83       	std	Y+7, r19	; 0x07
    24c2:	2e 83       	std	Y+6, r18	; 0x06
    24c4:	51 8f       	std	Z+25, r21	; 0x19
    24c6:	40 8f       	std	Z+24, r20	; 0x18
    24c8:	da 01       	movw	r26, r20
    24ca:	8c 91       	ld	r24, X
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	8c 93       	st	X, r24
    24d0:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    24d4:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    24d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    24da:	5a 96       	adiw	r26, 0x1a	; 26
    24dc:	8c 91       	ld	r24, X
    24de:	89 17       	cp	r24, r25
    24e0:	20 f4       	brcc	.+8      	; 0x24ea <xTaskRemoveFromEventList+0x158>
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <xYieldPending>
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <xTaskRemoveFromEventList+0x15a>
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <vTaskSetTimeOutState>:
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	0f 92       	push	r0
    24f8:	20 91 12 15 	lds	r18, 0x1512	; 0x801512 <xNumOfOverflows>
    24fc:	fc 01       	movw	r30, r24
    24fe:	20 83       	st	Z, r18
    2500:	40 91 1a 15 	lds	r20, 0x151A	; 0x80151a <xTickCount>
    2504:	50 91 1b 15 	lds	r21, 0x151B	; 0x80151b <xTickCount+0x1>
    2508:	60 91 1c 15 	lds	r22, 0x151C	; 0x80151c <xTickCount+0x2>
    250c:	70 91 1d 15 	lds	r23, 0x151D	; 0x80151d <xTickCount+0x3>
    2510:	41 83       	std	Z+1, r20	; 0x01
    2512:	52 83       	std	Z+2, r21	; 0x02
    2514:	63 83       	std	Z+3, r22	; 0x03
    2516:	74 83       	std	Z+4, r23	; 0x04
    2518:	0f 90       	pop	r0
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	08 95       	ret

0000251e <vTaskInternalSetTimeOutState>:
    251e:	20 91 12 15 	lds	r18, 0x1512	; 0x801512 <xNumOfOverflows>
    2522:	fc 01       	movw	r30, r24
    2524:	20 83       	st	Z, r18
    2526:	40 91 1a 15 	lds	r20, 0x151A	; 0x80151a <xTickCount>
    252a:	50 91 1b 15 	lds	r21, 0x151B	; 0x80151b <xTickCount+0x1>
    252e:	60 91 1c 15 	lds	r22, 0x151C	; 0x80151c <xTickCount+0x2>
    2532:	70 91 1d 15 	lds	r23, 0x151D	; 0x80151d <xTickCount+0x3>
    2536:	41 83       	std	Z+1, r20	; 0x01
    2538:	52 83       	std	Z+2, r21	; 0x02
    253a:	63 83       	std	Z+3, r22	; 0x03
    253c:	74 83       	std	Z+4, r23	; 0x04
    253e:	08 95       	ret

00002540 <xTaskCheckForTimeOut>:
    2540:	cf 92       	push	r12
    2542:	df 92       	push	r13
    2544:	ef 92       	push	r14
    2546:	ff 92       	push	r15
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	fb 01       	movw	r30, r22
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	0f 92       	push	r0
    2558:	40 91 1a 15 	lds	r20, 0x151A	; 0x80151a <xTickCount>
    255c:	50 91 1b 15 	lds	r21, 0x151B	; 0x80151b <xTickCount+0x1>
    2560:	60 91 1c 15 	lds	r22, 0x151C	; 0x80151c <xTickCount+0x2>
    2564:	70 91 1d 15 	lds	r23, 0x151D	; 0x80151d <xTickCount+0x3>
    2568:	00 81       	ld	r16, Z
    256a:	11 81       	ldd	r17, Z+1	; 0x01
    256c:	22 81       	ldd	r18, Z+2	; 0x02
    256e:	33 81       	ldd	r19, Z+3	; 0x03
    2570:	0f 3f       	cpi	r16, 0xFF	; 255
    2572:	af ef       	ldi	r26, 0xFF	; 255
    2574:	1a 07       	cpc	r17, r26
    2576:	2a 07       	cpc	r18, r26
    2578:	3a 07       	cpc	r19, r26
    257a:	79 f1       	breq	.+94     	; 0x25da <xTaskCheckForTimeOut+0x9a>
    257c:	ec 01       	movw	r28, r24
    257e:	c9 80       	ldd	r12, Y+1	; 0x01
    2580:	da 80       	ldd	r13, Y+2	; 0x02
    2582:	eb 80       	ldd	r14, Y+3	; 0x03
    2584:	fc 80       	ldd	r15, Y+4	; 0x04
    2586:	a0 91 12 15 	lds	r26, 0x1512	; 0x801512 <xNumOfOverflows>
    258a:	b8 81       	ld	r27, Y
    258c:	ba 17       	cp	r27, r26
    258e:	59 f0       	breq	.+22     	; 0x25a6 <xTaskCheckForTimeOut+0x66>
    2590:	4c 15       	cp	r20, r12
    2592:	5d 05       	cpc	r21, r13
    2594:	6e 05       	cpc	r22, r14
    2596:	7f 05       	cpc	r23, r15
    2598:	30 f0       	brcs	.+12     	; 0x25a6 <xTaskCheckForTimeOut+0x66>
    259a:	10 82       	st	Z, r1
    259c:	11 82       	std	Z+1, r1	; 0x01
    259e:	12 82       	std	Z+2, r1	; 0x02
    25a0:	13 82       	std	Z+3, r1	; 0x03
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	1b c0       	rjmp	.+54     	; 0x25dc <xTaskCheckForTimeOut+0x9c>
    25a6:	4c 19       	sub	r20, r12
    25a8:	5d 09       	sbc	r21, r13
    25aa:	6e 09       	sbc	r22, r14
    25ac:	7f 09       	sbc	r23, r15
    25ae:	40 17       	cp	r20, r16
    25b0:	51 07       	cpc	r21, r17
    25b2:	62 07       	cpc	r22, r18
    25b4:	73 07       	cpc	r23, r19
    25b6:	58 f4       	brcc	.+22     	; 0x25ce <xTaskCheckForTimeOut+0x8e>
    25b8:	04 1b       	sub	r16, r20
    25ba:	15 0b       	sbc	r17, r21
    25bc:	26 0b       	sbc	r18, r22
    25be:	37 0b       	sbc	r19, r23
    25c0:	00 83       	st	Z, r16
    25c2:	11 83       	std	Z+1, r17	; 0x01
    25c4:	22 83       	std	Z+2, r18	; 0x02
    25c6:	33 83       	std	Z+3, r19	; 0x03
    25c8:	aa df       	rcall	.-172    	; 0x251e <vTaskInternalSetTimeOutState>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	07 c0       	rjmp	.+14     	; 0x25dc <xTaskCheckForTimeOut+0x9c>
    25ce:	10 82       	st	Z, r1
    25d0:	11 82       	std	Z+1, r1	; 0x01
    25d2:	12 82       	std	Z+2, r1	; 0x02
    25d4:	13 82       	std	Z+3, r1	; 0x03
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <xTaskCheckForTimeOut+0x9c>
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	0f 90       	pop	r0
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	ff 90       	pop	r15
    25ea:	ef 90       	pop	r14
    25ec:	df 90       	pop	r13
    25ee:	cf 90       	pop	r12
    25f0:	08 95       	ret

000025f2 <vTaskMissedYield>:
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <xYieldPending>
    25f8:	08 95       	ret

000025fa <xTaskGetCurrentTaskHandle>:
    25fa:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    25fe:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2602:	08 95       	ret

00002604 <xTaskGetSchedulerState>:
    2604:	80 91 18 15 	lds	r24, 0x1518	; 0x801518 <xSchedulerRunning>
    2608:	88 23       	and	r24, r24
    260a:	31 f0       	breq	.+12     	; 0x2618 <xTaskGetSchedulerState+0x14>
    260c:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    2610:	88 23       	and	r24, r24
    2612:	21 f0       	breq	.+8      	; 0x261c <xTaskGetSchedulerState+0x18>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	08 95       	ret
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	08 95       	ret
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	08 95       	ret

00002620 <xTaskPriorityInherit>:
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	fc 01       	movw	r30, r24
    262a:	89 2b       	or	r24, r25
    262c:	09 f4       	brne	.+2      	; 0x2630 <xTaskPriorityInherit+0x10>
    262e:	79 c0       	rjmp	.+242    	; 0x2722 <xTaskPriorityInherit+0x102>
    2630:	82 8d       	ldd	r24, Z+26	; 0x1a
    2632:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2636:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    263a:	5a 96       	adiw	r26, 0x1a	; 26
    263c:	9c 91       	ld	r25, X
    263e:	89 17       	cp	r24, r25
    2640:	08 f0       	brcs	.+2      	; 0x2644 <xTaskPriorityInherit+0x24>
    2642:	63 c0       	rjmp	.+198    	; 0x270a <xTaskPriorityInherit+0xea>
    2644:	46 85       	ldd	r20, Z+14	; 0x0e
    2646:	57 85       	ldd	r21, Z+15	; 0x0f
    2648:	60 89       	ldd	r22, Z+16	; 0x10
    264a:	71 89       	ldd	r23, Z+17	; 0x11
    264c:	77 23       	and	r23, r23
    264e:	94 f0       	brlt	.+36     	; 0x2674 <xTaskPriorityInherit+0x54>
    2650:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2654:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2658:	5a 96       	adiw	r26, 0x1a	; 26
    265a:	9c 91       	ld	r25, X
    265c:	4a e0       	ldi	r20, 0x0A	; 10
    265e:	50 e0       	ldi	r21, 0x00	; 0
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	49 1b       	sub	r20, r25
    2666:	51 09       	sbc	r21, r1
    2668:	61 09       	sbc	r22, r1
    266a:	71 09       	sbc	r23, r1
    266c:	46 87       	std	Z+14, r20	; 0x0e
    266e:	57 87       	std	Z+15, r21	; 0x0f
    2670:	60 8b       	std	Z+16, r22	; 0x10
    2672:	71 8b       	std	Z+17, r23	; 0x11
    2674:	2b e0       	ldi	r18, 0x0B	; 11
    2676:	82 9f       	mul	r24, r18
    2678:	c0 01       	movw	r24, r0
    267a:	11 24       	eor	r1, r1
    267c:	85 5a       	subi	r24, 0xA5	; 165
    267e:	9a 4e       	sbci	r25, 0xEA	; 234
    2680:	24 85       	ldd	r18, Z+12	; 0x0c
    2682:	35 85       	ldd	r19, Z+13	; 0x0d
    2684:	28 17       	cp	r18, r24
    2686:	39 07       	cpc	r19, r25
    2688:	b9 f5       	brne	.+110    	; 0x26f8 <xTaskPriorityInherit+0xd8>
    268a:	ef 01       	movw	r28, r30
    268c:	8f 01       	movw	r16, r30
    268e:	0e 5f       	subi	r16, 0xFE	; 254
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	c8 01       	movw	r24, r16
    2694:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
    2698:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    269c:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    26a0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    26a2:	ea 8f       	std	Y+26, r30	; 0x1a
    26a4:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    26a8:	8e 17       	cp	r24, r30
    26aa:	10 f4       	brcc	.+4      	; 0x26b0 <xTaskPriorityInherit+0x90>
    26ac:	e0 93 19 15 	sts	0x1519, r30	; 0x801519 <uxTopReadyPriority>
    26b0:	8b e0       	ldi	r24, 0x0B	; 11
    26b2:	8e 9f       	mul	r24, r30
    26b4:	f0 01       	movw	r30, r0
    26b6:	11 24       	eor	r1, r1
    26b8:	e5 5a       	subi	r30, 0xA5	; 165
    26ba:	fa 4e       	sbci	r31, 0xEA	; 234
    26bc:	01 80       	ldd	r0, Z+1	; 0x01
    26be:	f2 81       	ldd	r31, Z+2	; 0x02
    26c0:	e0 2d       	mov	r30, r0
    26c2:	ff 83       	std	Y+7, r31	; 0x07
    26c4:	ee 83       	std	Y+6, r30	; 0x06
    26c6:	26 81       	ldd	r18, Z+6	; 0x06
    26c8:	37 81       	ldd	r19, Z+7	; 0x07
    26ca:	39 87       	std	Y+9, r19	; 0x09
    26cc:	28 87       	std	Y+8, r18	; 0x08
    26ce:	a6 81       	ldd	r26, Z+6	; 0x06
    26d0:	b7 81       	ldd	r27, Z+7	; 0x07
    26d2:	15 96       	adiw	r26, 0x05	; 5
    26d4:	1c 93       	st	X, r17
    26d6:	0e 93       	st	-X, r16
    26d8:	14 97       	sbiw	r26, 0x04	; 4
    26da:	17 83       	std	Z+7, r17	; 0x07
    26dc:	06 83       	std	Z+6, r16	; 0x06
    26de:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26e0:	8e 9f       	mul	r24, r30
    26e2:	f0 01       	movw	r30, r0
    26e4:	11 24       	eor	r1, r1
    26e6:	e5 5a       	subi	r30, 0xA5	; 165
    26e8:	fa 4e       	sbci	r31, 0xEA	; 234
    26ea:	fd 87       	std	Y+13, r31	; 0x0d
    26ec:	ec 87       	std	Y+12, r30	; 0x0c
    26ee:	80 81       	ld	r24, Z
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	80 83       	st	Z, r24
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	16 c0       	rjmp	.+44     	; 0x2724 <xTaskPriorityInherit+0x104>
    26f8:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    26fc:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2700:	5a 96       	adiw	r26, 0x1a	; 26
    2702:	8c 91       	ld	r24, X
    2704:	82 8f       	std	Z+26, r24	; 0x1a
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	0d c0       	rjmp	.+26     	; 0x2724 <xTaskPriorityInherit+0x104>
    270a:	a0 91 c9 15 	lds	r26, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    270e:	b0 91 ca 15 	lds	r27, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	25 a5       	ldd	r18, Z+45	; 0x2d
    2716:	5a 96       	adiw	r26, 0x1a	; 26
    2718:	9c 91       	ld	r25, X
    271a:	29 17       	cp	r18, r25
    271c:	18 f0       	brcs	.+6      	; 0x2724 <xTaskPriorityInherit+0x104>
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <xTaskPriorityInherit+0x104>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	1f 91       	pop	r17
    272a:	0f 91       	pop	r16
    272c:	08 95       	ret

0000272e <xTaskPriorityDisinherit>:
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	fc 01       	movw	r30, r24
    2738:	89 2b       	or	r24, r25
    273a:	09 f4       	brne	.+2      	; 0x273e <xTaskPriorityDisinherit+0x10>
    273c:	49 c0       	rjmp	.+146    	; 0x27d0 <xTaskPriorityDisinherit+0xa2>
    273e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2740:	81 50       	subi	r24, 0x01	; 1
    2742:	86 a7       	std	Z+46, r24	; 0x2e
    2744:	22 8d       	ldd	r18, Z+26	; 0x1a
    2746:	95 a5       	ldd	r25, Z+45	; 0x2d
    2748:	29 17       	cp	r18, r25
    274a:	09 f4       	brne	.+2      	; 0x274e <xTaskPriorityDisinherit+0x20>
    274c:	43 c0       	rjmp	.+134    	; 0x27d4 <xTaskPriorityDisinherit+0xa6>
    274e:	81 11       	cpse	r24, r1
    2750:	43 c0       	rjmp	.+134    	; 0x27d8 <xTaskPriorityDisinherit+0xaa>
    2752:	ef 01       	movw	r28, r30
    2754:	8f 01       	movw	r16, r30
    2756:	0e 5f       	subi	r16, 0xFE	; 254
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	c8 01       	movw	r24, r16
    275c:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
    2760:	ed a5       	ldd	r30, Y+45	; 0x2d
    2762:	ea 8f       	std	Y+26, r30	; 0x1a
    2764:	8a e0       	ldi	r24, 0x0A	; 10
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a0 e0       	ldi	r26, 0x00	; 0
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	8e 1b       	sub	r24, r30
    276e:	91 09       	sbc	r25, r1
    2770:	a1 09       	sbc	r26, r1
    2772:	b1 09       	sbc	r27, r1
    2774:	8e 87       	std	Y+14, r24	; 0x0e
    2776:	9f 87       	std	Y+15, r25	; 0x0f
    2778:	a8 8b       	std	Y+16, r26	; 0x10
    277a:	b9 8b       	std	Y+17, r27	; 0x11
    277c:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    2780:	8e 17       	cp	r24, r30
    2782:	10 f4       	brcc	.+4      	; 0x2788 <xTaskPriorityDisinherit+0x5a>
    2784:	e0 93 19 15 	sts	0x1519, r30	; 0x801519 <uxTopReadyPriority>
    2788:	8b e0       	ldi	r24, 0x0B	; 11
    278a:	8e 9f       	mul	r24, r30
    278c:	f0 01       	movw	r30, r0
    278e:	11 24       	eor	r1, r1
    2790:	e5 5a       	subi	r30, 0xA5	; 165
    2792:	fa 4e       	sbci	r31, 0xEA	; 234
    2794:	01 80       	ldd	r0, Z+1	; 0x01
    2796:	f2 81       	ldd	r31, Z+2	; 0x02
    2798:	e0 2d       	mov	r30, r0
    279a:	ff 83       	std	Y+7, r31	; 0x07
    279c:	ee 83       	std	Y+6, r30	; 0x06
    279e:	26 81       	ldd	r18, Z+6	; 0x06
    27a0:	37 81       	ldd	r19, Z+7	; 0x07
    27a2:	39 87       	std	Y+9, r19	; 0x09
    27a4:	28 87       	std	Y+8, r18	; 0x08
    27a6:	a6 81       	ldd	r26, Z+6	; 0x06
    27a8:	b7 81       	ldd	r27, Z+7	; 0x07
    27aa:	15 96       	adiw	r26, 0x05	; 5
    27ac:	1c 93       	st	X, r17
    27ae:	0e 93       	st	-X, r16
    27b0:	14 97       	sbiw	r26, 0x04	; 4
    27b2:	17 83       	std	Z+7, r17	; 0x07
    27b4:	06 83       	std	Z+6, r16	; 0x06
    27b6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    27b8:	8e 9f       	mul	r24, r30
    27ba:	f0 01       	movw	r30, r0
    27bc:	11 24       	eor	r1, r1
    27be:	e5 5a       	subi	r30, 0xA5	; 165
    27c0:	fa 4e       	sbci	r31, 0xEA	; 234
    27c2:	fd 87       	std	Y+13, r31	; 0x0d
    27c4:	ec 87       	std	Y+12, r30	; 0x0c
    27c6:	80 81       	ld	r24, Z
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	80 83       	st	Z, r24
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	05 c0       	rjmp	.+10     	; 0x27da <xTaskPriorityDisinherit+0xac>
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	03 c0       	rjmp	.+6      	; 0x27da <xTaskPriorityDisinherit+0xac>
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <xTaskPriorityDisinherit+0xac>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	08 95       	ret

000027e4 <vTaskPriorityDisinheritAfterTimeout>:
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	fc 01       	movw	r30, r24
    27ee:	89 2b       	or	r24, r25
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    27f2:	5a c0       	rjmp	.+180    	; 0x28a8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    27f4:	85 a5       	ldd	r24, Z+45	; 0x2d
    27f6:	86 17       	cp	r24, r22
    27f8:	08 f4       	brcc	.+2      	; 0x27fc <vTaskPriorityDisinheritAfterTimeout+0x18>
    27fa:	86 2f       	mov	r24, r22
    27fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    27fe:	98 17       	cp	r25, r24
    2800:	09 f4       	brne	.+2      	; 0x2804 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2802:	52 c0       	rjmp	.+164    	; 0x28a8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2804:	26 a5       	ldd	r18, Z+46	; 0x2e
    2806:	21 30       	cpi	r18, 0x01	; 1
    2808:	09 f0       	breq	.+2      	; 0x280c <vTaskPriorityDisinheritAfterTimeout+0x28>
    280a:	4e c0       	rjmp	.+156    	; 0x28a8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    280c:	82 8f       	std	Z+26, r24	; 0x1a
    280e:	46 85       	ldd	r20, Z+14	; 0x0e
    2810:	57 85       	ldd	r21, Z+15	; 0x0f
    2812:	60 89       	ldd	r22, Z+16	; 0x10
    2814:	71 89       	ldd	r23, Z+17	; 0x11
    2816:	77 23       	and	r23, r23
    2818:	64 f0       	brlt	.+24     	; 0x2832 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    281a:	4a e0       	ldi	r20, 0x0A	; 10
    281c:	50 e0       	ldi	r21, 0x00	; 0
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	48 1b       	sub	r20, r24
    2824:	51 09       	sbc	r21, r1
    2826:	61 09       	sbc	r22, r1
    2828:	71 09       	sbc	r23, r1
    282a:	46 87       	std	Z+14, r20	; 0x0e
    282c:	57 87       	std	Z+15, r21	; 0x0f
    282e:	60 8b       	std	Z+16, r22	; 0x10
    2830:	71 8b       	std	Z+17, r23	; 0x11
    2832:	2b e0       	ldi	r18, 0x0B	; 11
    2834:	92 9f       	mul	r25, r18
    2836:	c0 01       	movw	r24, r0
    2838:	11 24       	eor	r1, r1
    283a:	85 5a       	subi	r24, 0xA5	; 165
    283c:	9a 4e       	sbci	r25, 0xEA	; 234
    283e:	24 85       	ldd	r18, Z+12	; 0x0c
    2840:	35 85       	ldd	r19, Z+13	; 0x0d
    2842:	28 17       	cp	r18, r24
    2844:	39 07       	cpc	r19, r25
    2846:	81 f5       	brne	.+96     	; 0x28a8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2848:	ef 01       	movw	r28, r30
    284a:	8f 01       	movw	r16, r30
    284c:	0e 5f       	subi	r16, 0xFE	; 254
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	c8 01       	movw	r24, r16
    2852:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
    2856:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2858:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    285c:	8e 17       	cp	r24, r30
    285e:	10 f4       	brcc	.+4      	; 0x2864 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2860:	e0 93 19 15 	sts	0x1519, r30	; 0x801519 <uxTopReadyPriority>
    2864:	8b e0       	ldi	r24, 0x0B	; 11
    2866:	8e 9f       	mul	r24, r30
    2868:	f0 01       	movw	r30, r0
    286a:	11 24       	eor	r1, r1
    286c:	e5 5a       	subi	r30, 0xA5	; 165
    286e:	fa 4e       	sbci	r31, 0xEA	; 234
    2870:	01 80       	ldd	r0, Z+1	; 0x01
    2872:	f2 81       	ldd	r31, Z+2	; 0x02
    2874:	e0 2d       	mov	r30, r0
    2876:	ff 83       	std	Y+7, r31	; 0x07
    2878:	ee 83       	std	Y+6, r30	; 0x06
    287a:	26 81       	ldd	r18, Z+6	; 0x06
    287c:	37 81       	ldd	r19, Z+7	; 0x07
    287e:	39 87       	std	Y+9, r19	; 0x09
    2880:	28 87       	std	Y+8, r18	; 0x08
    2882:	a6 81       	ldd	r26, Z+6	; 0x06
    2884:	b7 81       	ldd	r27, Z+7	; 0x07
    2886:	15 96       	adiw	r26, 0x05	; 5
    2888:	1c 93       	st	X, r17
    288a:	0e 93       	st	-X, r16
    288c:	14 97       	sbiw	r26, 0x04	; 4
    288e:	17 83       	std	Z+7, r17	; 0x07
    2890:	06 83       	std	Z+6, r16	; 0x06
    2892:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2894:	8e 9f       	mul	r24, r30
    2896:	f0 01       	movw	r30, r0
    2898:	11 24       	eor	r1, r1
    289a:	e5 5a       	subi	r30, 0xA5	; 165
    289c:	fa 4e       	sbci	r31, 0xEA	; 234
    289e:	fd 87       	std	Y+13, r31	; 0x0d
    28a0:	ec 87       	std	Y+12, r30	; 0x0c
    28a2:	80 81       	ld	r24, Z
    28a4:	8f 5f       	subi	r24, 0xFF	; 255
    28a6:	80 83       	st	Z, r24
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	08 95       	ret

000028b2 <pvTaskIncrementMutexHeldCount>:
    28b2:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    28b6:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    28ba:	89 2b       	or	r24, r25
    28bc:	39 f0       	breq	.+14     	; 0x28cc <pvTaskIncrementMutexHeldCount+0x1a>
    28be:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    28c2:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    28c6:	86 a5       	ldd	r24, Z+46	; 0x2e
    28c8:	8f 5f       	subi	r24, 0xFF	; 255
    28ca:	86 a7       	std	Z+46, r24	; 0x2e
    28cc:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    28d0:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    28d4:	08 95       	ret

000028d6 <xTaskGenericNotifyWait>:
    28d6:	4f 92       	push	r4
    28d8:	5f 92       	push	r5
    28da:	6f 92       	push	r6
    28dc:	7f 92       	push	r7
    28de:	af 92       	push	r10
    28e0:	bf 92       	push	r11
    28e2:	cf 92       	push	r12
    28e4:	df 92       	push	r13
    28e6:	ef 92       	push	r14
    28e8:	ff 92       	push	r15
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	28 01       	movw	r4, r16
    28f4:	39 01       	movw	r6, r18
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	0f 92       	push	r0
    28fc:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2900:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2904:	c8 2f       	mov	r28, r24
    2906:	d0 e0       	ldi	r29, 0x00	; 0
    2908:	ec 0f       	add	r30, r28
    290a:	fd 1f       	adc	r31, r29
    290c:	83 a9       	ldd	r24, Z+51	; 0x33
    290e:	82 30       	cpi	r24, 0x02	; 2
    2910:	79 f1       	breq	.+94     	; 0x2970 <xTaskGenericNotifyWait+0x9a>
    2912:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2916:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    291a:	ce 01       	movw	r24, r28
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	e8 0f       	add	r30, r24
    2926:	f9 1f       	adc	r31, r25
    2928:	87 a5       	ldd	r24, Z+47	; 0x2f
    292a:	90 a9       	ldd	r25, Z+48	; 0x30
    292c:	a1 a9       	ldd	r26, Z+49	; 0x31
    292e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2930:	40 95       	com	r20
    2932:	50 95       	com	r21
    2934:	60 95       	com	r22
    2936:	70 95       	com	r23
    2938:	48 23       	and	r20, r24
    293a:	59 23       	and	r21, r25
    293c:	6a 23       	and	r22, r26
    293e:	7b 23       	and	r23, r27
    2940:	47 a7       	std	Z+47, r20	; 0x2f
    2942:	50 ab       	std	Z+48, r21	; 0x30
    2944:	61 ab       	std	Z+49, r22	; 0x31
    2946:	72 ab       	std	Z+50, r23	; 0x32
    2948:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    294c:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2950:	ec 0f       	add	r30, r28
    2952:	fd 1f       	adc	r31, r29
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	83 ab       	std	Z+51, r24	; 0x33
    2958:	a1 14       	cp	r10, r1
    295a:	b1 04       	cpc	r11, r1
    295c:	c1 04       	cpc	r12, r1
    295e:	d1 04       	cpc	r13, r1
    2960:	39 f0       	breq	.+14     	; 0x2970 <xTaskGenericNotifyWait+0x9a>
    2962:	41 e0       	ldi	r20, 0x01	; 1
    2964:	c6 01       	movw	r24, r12
    2966:	b5 01       	movw	r22, r10
    2968:	0e 94 3e 0c 	call	0x187c	; 0x187c <prvAddCurrentTaskToDelayedList>
    296c:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	0f 92       	push	r0
    297a:	e1 14       	cp	r14, r1
    297c:	f1 04       	cpc	r15, r1
    297e:	a1 f0       	breq	.+40     	; 0x29a8 <xTaskGenericNotifyWait+0xd2>
    2980:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2984:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2988:	ce 01       	movw	r24, r28
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	e8 0f       	add	r30, r24
    2994:	f9 1f       	adc	r31, r25
    2996:	87 a5       	ldd	r24, Z+47	; 0x2f
    2998:	90 a9       	ldd	r25, Z+48	; 0x30
    299a:	a1 a9       	ldd	r26, Z+49	; 0x31
    299c:	b2 a9       	ldd	r27, Z+50	; 0x32
    299e:	f7 01       	movw	r30, r14
    29a0:	80 83       	st	Z, r24
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	a2 83       	std	Z+2, r26	; 0x02
    29a6:	b3 83       	std	Z+3, r27	; 0x03
    29a8:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    29ac:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    29b0:	ec 0f       	add	r30, r28
    29b2:	fd 1f       	adc	r31, r29
    29b4:	83 a9       	ldd	r24, Z+51	; 0x33
    29b6:	82 30       	cpi	r24, 0x02	; 2
    29b8:	e9 f4       	brne	.+58     	; 0x29f4 <xTaskGenericNotifyWait+0x11e>
    29ba:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    29be:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    29c2:	ce 01       	movw	r24, r28
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	e8 0f       	add	r30, r24
    29ce:	f9 1f       	adc	r31, r25
    29d0:	87 a5       	ldd	r24, Z+47	; 0x2f
    29d2:	90 a9       	ldd	r25, Z+48	; 0x30
    29d4:	a1 a9       	ldd	r26, Z+49	; 0x31
    29d6:	b2 a9       	ldd	r27, Z+50	; 0x32
    29d8:	40 94       	com	r4
    29da:	50 94       	com	r5
    29dc:	60 94       	com	r6
    29de:	70 94       	com	r7
    29e0:	48 22       	and	r4, r24
    29e2:	59 22       	and	r5, r25
    29e4:	6a 22       	and	r6, r26
    29e6:	7b 22       	and	r7, r27
    29e8:	47 a6       	std	Z+47, r4	; 0x2f
    29ea:	50 aa       	std	Z+48, r5	; 0x30
    29ec:	61 aa       	std	Z+49, r6	; 0x31
    29ee:	72 aa       	std	Z+50, r7	; 0x32
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	01 c0       	rjmp	.+2      	; 0x29f6 <xTaskGenericNotifyWait+0x120>
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	20 91 c9 15 	lds	r18, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    29fa:	30 91 ca 15 	lds	r19, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    29fe:	c2 0f       	add	r28, r18
    2a00:	d3 1f       	adc	r29, r19
    2a02:	1b aa       	std	Y+51, r1	; 0x33
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	df 90       	pop	r13
    2a16:	cf 90       	pop	r12
    2a18:	bf 90       	pop	r11
    2a1a:	af 90       	pop	r10
    2a1c:	7f 90       	pop	r7
    2a1e:	6f 90       	pop	r6
    2a20:	5f 90       	pop	r5
    2a22:	4f 90       	pop	r4
    2a24:	08 95       	ret

00002a26 <xTaskGenericNotify>:
    2a26:	8f 92       	push	r8
    2a28:	9f 92       	push	r9
    2a2a:	af 92       	push	r10
    2a2c:	bf 92       	push	r11
    2a2e:	ef 92       	push	r14
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	dc 01       	movw	r26, r24
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	0f 92       	push	r0
    2a40:	e1 14       	cp	r14, r1
    2a42:	f1 04       	cpc	r15, r1
    2a44:	79 f0       	breq	.+30     	; 0x2a64 <xTaskGenericNotify+0x3e>
    2a46:	fc 01       	movw	r30, r24
    2a48:	84 e0       	ldi	r24, 0x04	; 4
    2a4a:	68 9f       	mul	r22, r24
    2a4c:	e0 0d       	add	r30, r0
    2a4e:	f1 1d       	adc	r31, r1
    2a50:	11 24       	eor	r1, r1
    2a52:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a54:	90 a8       	ldd	r9, Z+48	; 0x30
    2a56:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a58:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a5a:	f7 01       	movw	r30, r14
    2a5c:	80 82       	st	Z, r8
    2a5e:	91 82       	std	Z+1, r9	; 0x01
    2a60:	a2 82       	std	Z+2, r10	; 0x02
    2a62:	b3 82       	std	Z+3, r11	; 0x03
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	fd 01       	movw	r30, r26
    2a68:	e6 0f       	add	r30, r22
    2a6a:	f7 1f       	adc	r31, r23
    2a6c:	83 a9       	ldd	r24, Z+51	; 0x33
    2a6e:	92 e0       	ldi	r25, 0x02	; 2
    2a70:	93 ab       	std	Z+51, r25	; 0x33
    2a72:	02 30       	cpi	r16, 0x02	; 2
    2a74:	f9 f0       	breq	.+62     	; 0x2ab4 <xTaskGenericNotify+0x8e>
    2a76:	18 f4       	brcc	.+6      	; 0x2a7e <xTaskGenericNotify+0x58>
    2a78:	01 30       	cpi	r16, 0x01	; 1
    2a7a:	31 f0       	breq	.+12     	; 0x2a88 <xTaskGenericNotify+0x62>
    2a7c:	49 c0       	rjmp	.+146    	; 0x2b10 <xTaskGenericNotify+0xea>
    2a7e:	03 30       	cpi	r16, 0x03	; 3
    2a80:	69 f1       	breq	.+90     	; 0x2adc <xTaskGenericNotify+0xb6>
    2a82:	04 30       	cpi	r16, 0x04	; 4
    2a84:	b9 f1       	breq	.+110    	; 0x2af4 <xTaskGenericNotify+0xce>
    2a86:	44 c0       	rjmp	.+136    	; 0x2b10 <xTaskGenericNotify+0xea>
    2a88:	66 0f       	add	r22, r22
    2a8a:	77 1f       	adc	r23, r23
    2a8c:	66 0f       	add	r22, r22
    2a8e:	77 1f       	adc	r23, r23
    2a90:	fd 01       	movw	r30, r26
    2a92:	e6 0f       	add	r30, r22
    2a94:	f7 1f       	adc	r31, r23
    2a96:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a98:	90 a8       	ldd	r9, Z+48	; 0x30
    2a9a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a9c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a9e:	ba 01       	movw	r22, r20
    2aa0:	a9 01       	movw	r20, r18
    2aa2:	48 29       	or	r20, r8
    2aa4:	59 29       	or	r21, r9
    2aa6:	6a 29       	or	r22, r10
    2aa8:	7b 29       	or	r23, r11
    2aaa:	47 a7       	std	Z+47, r20	; 0x2f
    2aac:	50 ab       	std	Z+48, r21	; 0x30
    2aae:	61 ab       	std	Z+49, r22	; 0x31
    2ab0:	72 ab       	std	Z+50, r23	; 0x32
    2ab2:	2e c0       	rjmp	.+92     	; 0x2b10 <xTaskGenericNotify+0xea>
    2ab4:	66 0f       	add	r22, r22
    2ab6:	77 1f       	adc	r23, r23
    2ab8:	66 0f       	add	r22, r22
    2aba:	77 1f       	adc	r23, r23
    2abc:	fd 01       	movw	r30, r26
    2abe:	e6 0f       	add	r30, r22
    2ac0:	f7 1f       	adc	r31, r23
    2ac2:	47 a5       	ldd	r20, Z+47	; 0x2f
    2ac4:	50 a9       	ldd	r21, Z+48	; 0x30
    2ac6:	61 a9       	ldd	r22, Z+49	; 0x31
    2ac8:	72 a9       	ldd	r23, Z+50	; 0x32
    2aca:	4f 5f       	subi	r20, 0xFF	; 255
    2acc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ace:	6f 4f       	sbci	r22, 0xFF	; 255
    2ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad2:	47 a7       	std	Z+47, r20	; 0x2f
    2ad4:	50 ab       	std	Z+48, r21	; 0x30
    2ad6:	61 ab       	std	Z+49, r22	; 0x31
    2ad8:	72 ab       	std	Z+50, r23	; 0x32
    2ada:	1a c0       	rjmp	.+52     	; 0x2b10 <xTaskGenericNotify+0xea>
    2adc:	66 0f       	add	r22, r22
    2ade:	77 1f       	adc	r23, r23
    2ae0:	66 0f       	add	r22, r22
    2ae2:	77 1f       	adc	r23, r23
    2ae4:	fd 01       	movw	r30, r26
    2ae6:	e6 0f       	add	r30, r22
    2ae8:	f7 1f       	adc	r31, r23
    2aea:	27 a7       	std	Z+47, r18	; 0x2f
    2aec:	30 ab       	std	Z+48, r19	; 0x30
    2aee:	41 ab       	std	Z+49, r20	; 0x31
    2af0:	52 ab       	std	Z+50, r21	; 0x32
    2af2:	0e c0       	rjmp	.+28     	; 0x2b10 <xTaskGenericNotify+0xea>
    2af4:	82 30       	cpi	r24, 0x02	; 2
    2af6:	09 f4       	brne	.+2      	; 0x2afa <xTaskGenericNotify+0xd4>
    2af8:	79 c0       	rjmp	.+242    	; 0x2bec <xTaskGenericNotify+0x1c6>
    2afa:	66 0f       	add	r22, r22
    2afc:	77 1f       	adc	r23, r23
    2afe:	66 0f       	add	r22, r22
    2b00:	77 1f       	adc	r23, r23
    2b02:	fd 01       	movw	r30, r26
    2b04:	e6 0f       	add	r30, r22
    2b06:	f7 1f       	adc	r31, r23
    2b08:	27 a7       	std	Z+47, r18	; 0x2f
    2b0a:	30 ab       	std	Z+48, r19	; 0x30
    2b0c:	41 ab       	std	Z+49, r20	; 0x31
    2b0e:	52 ab       	std	Z+50, r21	; 0x32
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	09 f0       	breq	.+2      	; 0x2b16 <xTaskGenericNotify+0xf0>
    2b14:	6d c0       	rjmp	.+218    	; 0x2bf0 <xTaskGenericNotify+0x1ca>
    2b16:	1c 96       	adiw	r26, 0x0c	; 12
    2b18:	ed 91       	ld	r30, X+
    2b1a:	fc 91       	ld	r31, X
    2b1c:	1d 97       	sbiw	r26, 0x0d	; 13
    2b1e:	16 96       	adiw	r26, 0x06	; 6
    2b20:	cd 91       	ld	r28, X+
    2b22:	dc 91       	ld	r29, X
    2b24:	17 97       	sbiw	r26, 0x07	; 7
    2b26:	18 96       	adiw	r26, 0x08	; 8
    2b28:	8d 91       	ld	r24, X+
    2b2a:	9c 91       	ld	r25, X
    2b2c:	19 97       	sbiw	r26, 0x09	; 9
    2b2e:	9f 83       	std	Y+7, r25	; 0x07
    2b30:	8e 83       	std	Y+6, r24	; 0x06
    2b32:	18 96       	adiw	r26, 0x08	; 8
    2b34:	cd 91       	ld	r28, X+
    2b36:	dc 91       	ld	r29, X
    2b38:	19 97       	sbiw	r26, 0x09	; 9
    2b3a:	16 96       	adiw	r26, 0x06	; 6
    2b3c:	8d 91       	ld	r24, X+
    2b3e:	9c 91       	ld	r25, X
    2b40:	17 97       	sbiw	r26, 0x07	; 7
    2b42:	9d 83       	std	Y+5, r25	; 0x05
    2b44:	8c 83       	std	Y+4, r24	; 0x04
    2b46:	9d 01       	movw	r18, r26
    2b48:	2e 5f       	subi	r18, 0xFE	; 254
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	81 81       	ldd	r24, Z+1	; 0x01
    2b4e:	92 81       	ldd	r25, Z+2	; 0x02
    2b50:	82 17       	cp	r24, r18
    2b52:	93 07       	cpc	r25, r19
    2b54:	31 f4       	brne	.+12     	; 0x2b62 <xTaskGenericNotify+0x13c>
    2b56:	18 96       	adiw	r26, 0x08	; 8
    2b58:	8d 91       	ld	r24, X+
    2b5a:	9c 91       	ld	r25, X
    2b5c:	19 97       	sbiw	r26, 0x09	; 9
    2b5e:	92 83       	std	Z+2, r25	; 0x02
    2b60:	81 83       	std	Z+1, r24	; 0x01
    2b62:	1d 96       	adiw	r26, 0x0d	; 13
    2b64:	1c 92       	st	X, r1
    2b66:	1e 92       	st	-X, r1
    2b68:	1c 97       	sbiw	r26, 0x0c	; 12
    2b6a:	80 81       	ld	r24, Z
    2b6c:	81 50       	subi	r24, 0x01	; 1
    2b6e:	80 83       	st	Z, r24
    2b70:	5a 96       	adiw	r26, 0x1a	; 26
    2b72:	ec 91       	ld	r30, X
    2b74:	5a 97       	sbiw	r26, 0x1a	; 26
    2b76:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    2b7a:	8e 17       	cp	r24, r30
    2b7c:	10 f4       	brcc	.+4      	; 0x2b82 <xTaskGenericNotify+0x15c>
    2b7e:	e0 93 19 15 	sts	0x1519, r30	; 0x801519 <uxTopReadyPriority>
    2b82:	8b e0       	ldi	r24, 0x0B	; 11
    2b84:	8e 9f       	mul	r24, r30
    2b86:	f0 01       	movw	r30, r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	e5 5a       	subi	r30, 0xA5	; 165
    2b8c:	fa 4e       	sbci	r31, 0xEA	; 234
    2b8e:	01 80       	ldd	r0, Z+1	; 0x01
    2b90:	f2 81       	ldd	r31, Z+2	; 0x02
    2b92:	e0 2d       	mov	r30, r0
    2b94:	17 96       	adiw	r26, 0x07	; 7
    2b96:	fc 93       	st	X, r31
    2b98:	ee 93       	st	-X, r30
    2b9a:	16 97       	sbiw	r26, 0x06	; 6
    2b9c:	46 81       	ldd	r20, Z+6	; 0x06
    2b9e:	57 81       	ldd	r21, Z+7	; 0x07
    2ba0:	19 96       	adiw	r26, 0x09	; 9
    2ba2:	5c 93       	st	X, r21
    2ba4:	4e 93       	st	-X, r20
    2ba6:	18 97       	sbiw	r26, 0x08	; 8
    2ba8:	c6 81       	ldd	r28, Z+6	; 0x06
    2baa:	d7 81       	ldd	r29, Z+7	; 0x07
    2bac:	3d 83       	std	Y+5, r19	; 0x05
    2bae:	2c 83       	std	Y+4, r18	; 0x04
    2bb0:	37 83       	std	Z+7, r19	; 0x07
    2bb2:	26 83       	std	Z+6, r18	; 0x06
    2bb4:	5a 96       	adiw	r26, 0x1a	; 26
    2bb6:	ec 91       	ld	r30, X
    2bb8:	5a 97       	sbiw	r26, 0x1a	; 26
    2bba:	8e 9f       	mul	r24, r30
    2bbc:	f0 01       	movw	r30, r0
    2bbe:	11 24       	eor	r1, r1
    2bc0:	e5 5a       	subi	r30, 0xA5	; 165
    2bc2:	fa 4e       	sbci	r31, 0xEA	; 234
    2bc4:	1d 96       	adiw	r26, 0x0d	; 13
    2bc6:	fc 93       	st	X, r31
    2bc8:	ee 93       	st	-X, r30
    2bca:	1c 97       	sbiw	r26, 0x0c	; 12
    2bcc:	80 81       	ld	r24, Z
    2bce:	8f 5f       	subi	r24, 0xFF	; 255
    2bd0:	80 83       	st	Z, r24
    2bd2:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2bd6:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2bda:	5a 96       	adiw	r26, 0x1a	; 26
    2bdc:	9c 91       	ld	r25, X
    2bde:	82 8d       	ldd	r24, Z+26	; 0x1a
    2be0:	89 17       	cp	r24, r25
    2be2:	40 f4       	brcc	.+16     	; 0x2bf4 <xTaskGenericNotify+0x1ce>
    2be4:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	05 c0       	rjmp	.+10     	; 0x2bf6 <xTaskGenericNotify+0x1d0>
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	03 c0       	rjmp	.+6      	; 0x2bf6 <xTaskGenericNotify+0x1d0>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	01 c0       	rjmp	.+2      	; 0x2bf6 <xTaskGenericNotify+0x1d0>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	0f 90       	pop	r0
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	bf 90       	pop	r11
    2c06:	af 90       	pop	r10
    2c08:	9f 90       	pop	r9
    2c0a:	8f 90       	pop	r8
    2c0c:	08 95       	ret

00002c0e <xTaskGenericNotifyFromISR>:
    2c0e:	8f 92       	push	r8
    2c10:	9f 92       	push	r9
    2c12:	af 92       	push	r10
    2c14:	bf 92       	push	r11
    2c16:	cf 92       	push	r12
    2c18:	df 92       	push	r13
    2c1a:	ef 92       	push	r14
    2c1c:	ff 92       	push	r15
    2c1e:	0f 93       	push	r16
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	dc 01       	movw	r26, r24
    2c26:	e1 14       	cp	r14, r1
    2c28:	f1 04       	cpc	r15, r1
    2c2a:	79 f0       	breq	.+30     	; 0x2c4a <xTaskGenericNotifyFromISR+0x3c>
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	84 e0       	ldi	r24, 0x04	; 4
    2c30:	68 9f       	mul	r22, r24
    2c32:	e0 0d       	add	r30, r0
    2c34:	f1 1d       	adc	r31, r1
    2c36:	11 24       	eor	r1, r1
    2c38:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c3a:	90 a8       	ldd	r9, Z+48	; 0x30
    2c3c:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c3e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c40:	f7 01       	movw	r30, r14
    2c42:	80 82       	st	Z, r8
    2c44:	91 82       	std	Z+1, r9	; 0x01
    2c46:	a2 82       	std	Z+2, r10	; 0x02
    2c48:	b3 82       	std	Z+3, r11	; 0x03
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	fd 01       	movw	r30, r26
    2c4e:	e6 0f       	add	r30, r22
    2c50:	f7 1f       	adc	r31, r23
    2c52:	83 a9       	ldd	r24, Z+51	; 0x33
    2c54:	92 e0       	ldi	r25, 0x02	; 2
    2c56:	93 ab       	std	Z+51, r25	; 0x33
    2c58:	02 30       	cpi	r16, 0x02	; 2
    2c5a:	f9 f0       	breq	.+62     	; 0x2c9a <xTaskGenericNotifyFromISR+0x8c>
    2c5c:	18 f4       	brcc	.+6      	; 0x2c64 <xTaskGenericNotifyFromISR+0x56>
    2c5e:	01 30       	cpi	r16, 0x01	; 1
    2c60:	31 f0       	breq	.+12     	; 0x2c6e <xTaskGenericNotifyFromISR+0x60>
    2c62:	49 c0       	rjmp	.+146    	; 0x2cf6 <xTaskGenericNotifyFromISR+0xe8>
    2c64:	03 30       	cpi	r16, 0x03	; 3
    2c66:	69 f1       	breq	.+90     	; 0x2cc2 <xTaskGenericNotifyFromISR+0xb4>
    2c68:	04 30       	cpi	r16, 0x04	; 4
    2c6a:	b9 f1       	breq	.+110    	; 0x2cda <xTaskGenericNotifyFromISR+0xcc>
    2c6c:	44 c0       	rjmp	.+136    	; 0x2cf6 <xTaskGenericNotifyFromISR+0xe8>
    2c6e:	66 0f       	add	r22, r22
    2c70:	77 1f       	adc	r23, r23
    2c72:	66 0f       	add	r22, r22
    2c74:	77 1f       	adc	r23, r23
    2c76:	fd 01       	movw	r30, r26
    2c78:	e6 0f       	add	r30, r22
    2c7a:	f7 1f       	adc	r31, r23
    2c7c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c7e:	90 a8       	ldd	r9, Z+48	; 0x30
    2c80:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c82:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c84:	ba 01       	movw	r22, r20
    2c86:	a9 01       	movw	r20, r18
    2c88:	48 29       	or	r20, r8
    2c8a:	59 29       	or	r21, r9
    2c8c:	6a 29       	or	r22, r10
    2c8e:	7b 29       	or	r23, r11
    2c90:	47 a7       	std	Z+47, r20	; 0x2f
    2c92:	50 ab       	std	Z+48, r21	; 0x30
    2c94:	61 ab       	std	Z+49, r22	; 0x31
    2c96:	72 ab       	std	Z+50, r23	; 0x32
    2c98:	2e c0       	rjmp	.+92     	; 0x2cf6 <xTaskGenericNotifyFromISR+0xe8>
    2c9a:	66 0f       	add	r22, r22
    2c9c:	77 1f       	adc	r23, r23
    2c9e:	66 0f       	add	r22, r22
    2ca0:	77 1f       	adc	r23, r23
    2ca2:	fd 01       	movw	r30, r26
    2ca4:	e6 0f       	add	r30, r22
    2ca6:	f7 1f       	adc	r31, r23
    2ca8:	47 a5       	ldd	r20, Z+47	; 0x2f
    2caa:	50 a9       	ldd	r21, Z+48	; 0x30
    2cac:	61 a9       	ldd	r22, Z+49	; 0x31
    2cae:	72 a9       	ldd	r23, Z+50	; 0x32
    2cb0:	4f 5f       	subi	r20, 0xFF	; 255
    2cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb4:	6f 4f       	sbci	r22, 0xFF	; 255
    2cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb8:	47 a7       	std	Z+47, r20	; 0x2f
    2cba:	50 ab       	std	Z+48, r21	; 0x30
    2cbc:	61 ab       	std	Z+49, r22	; 0x31
    2cbe:	72 ab       	std	Z+50, r23	; 0x32
    2cc0:	1a c0       	rjmp	.+52     	; 0x2cf6 <xTaskGenericNotifyFromISR+0xe8>
    2cc2:	66 0f       	add	r22, r22
    2cc4:	77 1f       	adc	r23, r23
    2cc6:	66 0f       	add	r22, r22
    2cc8:	77 1f       	adc	r23, r23
    2cca:	fd 01       	movw	r30, r26
    2ccc:	e6 0f       	add	r30, r22
    2cce:	f7 1f       	adc	r31, r23
    2cd0:	27 a7       	std	Z+47, r18	; 0x2f
    2cd2:	30 ab       	std	Z+48, r19	; 0x30
    2cd4:	41 ab       	std	Z+49, r20	; 0x31
    2cd6:	52 ab       	std	Z+50, r21	; 0x32
    2cd8:	0e c0       	rjmp	.+28     	; 0x2cf6 <xTaskGenericNotifyFromISR+0xe8>
    2cda:	82 30       	cpi	r24, 0x02	; 2
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <xTaskGenericNotifyFromISR+0xd2>
    2cde:	a4 c0       	rjmp	.+328    	; 0x2e28 <xTaskGenericNotifyFromISR+0x21a>
    2ce0:	66 0f       	add	r22, r22
    2ce2:	77 1f       	adc	r23, r23
    2ce4:	66 0f       	add	r22, r22
    2ce6:	77 1f       	adc	r23, r23
    2ce8:	fd 01       	movw	r30, r26
    2cea:	e6 0f       	add	r30, r22
    2cec:	f7 1f       	adc	r31, r23
    2cee:	27 a7       	std	Z+47, r18	; 0x2f
    2cf0:	30 ab       	std	Z+48, r19	; 0x30
    2cf2:	41 ab       	std	Z+49, r20	; 0x31
    2cf4:	52 ab       	std	Z+50, r21	; 0x32
    2cf6:	81 30       	cpi	r24, 0x01	; 1
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <xTaskGenericNotifyFromISR+0xee>
    2cfa:	98 c0       	rjmp	.+304    	; 0x2e2c <xTaskGenericNotifyFromISR+0x21e>
    2cfc:	80 91 0a 15 	lds	r24, 0x150A	; 0x80150a <uxSchedulerSuspended>
    2d00:	81 11       	cpse	r24, r1
    2d02:	5f c0       	rjmp	.+190    	; 0x2dc2 <xTaskGenericNotifyFromISR+0x1b4>
    2d04:	1c 96       	adiw	r26, 0x0c	; 12
    2d06:	ed 91       	ld	r30, X+
    2d08:	fc 91       	ld	r31, X
    2d0a:	1d 97       	sbiw	r26, 0x0d	; 13
    2d0c:	16 96       	adiw	r26, 0x06	; 6
    2d0e:	cd 91       	ld	r28, X+
    2d10:	dc 91       	ld	r29, X
    2d12:	17 97       	sbiw	r26, 0x07	; 7
    2d14:	18 96       	adiw	r26, 0x08	; 8
    2d16:	8d 91       	ld	r24, X+
    2d18:	9c 91       	ld	r25, X
    2d1a:	19 97       	sbiw	r26, 0x09	; 9
    2d1c:	9f 83       	std	Y+7, r25	; 0x07
    2d1e:	8e 83       	std	Y+6, r24	; 0x06
    2d20:	18 96       	adiw	r26, 0x08	; 8
    2d22:	cd 91       	ld	r28, X+
    2d24:	dc 91       	ld	r29, X
    2d26:	19 97       	sbiw	r26, 0x09	; 9
    2d28:	16 96       	adiw	r26, 0x06	; 6
    2d2a:	8d 91       	ld	r24, X+
    2d2c:	9c 91       	ld	r25, X
    2d2e:	17 97       	sbiw	r26, 0x07	; 7
    2d30:	9d 83       	std	Y+5, r25	; 0x05
    2d32:	8c 83       	std	Y+4, r24	; 0x04
    2d34:	9d 01       	movw	r18, r26
    2d36:	2e 5f       	subi	r18, 0xFE	; 254
    2d38:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3a:	81 81       	ldd	r24, Z+1	; 0x01
    2d3c:	92 81       	ldd	r25, Z+2	; 0x02
    2d3e:	82 17       	cp	r24, r18
    2d40:	93 07       	cpc	r25, r19
    2d42:	31 f4       	brne	.+12     	; 0x2d50 <xTaskGenericNotifyFromISR+0x142>
    2d44:	18 96       	adiw	r26, 0x08	; 8
    2d46:	8d 91       	ld	r24, X+
    2d48:	9c 91       	ld	r25, X
    2d4a:	19 97       	sbiw	r26, 0x09	; 9
    2d4c:	92 83       	std	Z+2, r25	; 0x02
    2d4e:	81 83       	std	Z+1, r24	; 0x01
    2d50:	1d 96       	adiw	r26, 0x0d	; 13
    2d52:	1c 92       	st	X, r1
    2d54:	1e 92       	st	-X, r1
    2d56:	1c 97       	sbiw	r26, 0x0c	; 12
    2d58:	80 81       	ld	r24, Z
    2d5a:	81 50       	subi	r24, 0x01	; 1
    2d5c:	80 83       	st	Z, r24
    2d5e:	5a 96       	adiw	r26, 0x1a	; 26
    2d60:	ec 91       	ld	r30, X
    2d62:	5a 97       	sbiw	r26, 0x1a	; 26
    2d64:	80 91 19 15 	lds	r24, 0x1519	; 0x801519 <uxTopReadyPriority>
    2d68:	8e 17       	cp	r24, r30
    2d6a:	10 f4       	brcc	.+4      	; 0x2d70 <xTaskGenericNotifyFromISR+0x162>
    2d6c:	e0 93 19 15 	sts	0x1519, r30	; 0x801519 <uxTopReadyPriority>
    2d70:	8b e0       	ldi	r24, 0x0B	; 11
    2d72:	8e 9f       	mul	r24, r30
    2d74:	f0 01       	movw	r30, r0
    2d76:	11 24       	eor	r1, r1
    2d78:	e5 5a       	subi	r30, 0xA5	; 165
    2d7a:	fa 4e       	sbci	r31, 0xEA	; 234
    2d7c:	01 80       	ldd	r0, Z+1	; 0x01
    2d7e:	f2 81       	ldd	r31, Z+2	; 0x02
    2d80:	e0 2d       	mov	r30, r0
    2d82:	17 96       	adiw	r26, 0x07	; 7
    2d84:	fc 93       	st	X, r31
    2d86:	ee 93       	st	-X, r30
    2d88:	16 97       	sbiw	r26, 0x06	; 6
    2d8a:	46 81       	ldd	r20, Z+6	; 0x06
    2d8c:	57 81       	ldd	r21, Z+7	; 0x07
    2d8e:	19 96       	adiw	r26, 0x09	; 9
    2d90:	5c 93       	st	X, r21
    2d92:	4e 93       	st	-X, r20
    2d94:	18 97       	sbiw	r26, 0x08	; 8
    2d96:	c6 81       	ldd	r28, Z+6	; 0x06
    2d98:	d7 81       	ldd	r29, Z+7	; 0x07
    2d9a:	3d 83       	std	Y+5, r19	; 0x05
    2d9c:	2c 83       	std	Y+4, r18	; 0x04
    2d9e:	37 83       	std	Z+7, r19	; 0x07
    2da0:	26 83       	std	Z+6, r18	; 0x06
    2da2:	5a 96       	adiw	r26, 0x1a	; 26
    2da4:	ec 91       	ld	r30, X
    2da6:	5a 97       	sbiw	r26, 0x1a	; 26
    2da8:	8e 9f       	mul	r24, r30
    2daa:	f0 01       	movw	r30, r0
    2dac:	11 24       	eor	r1, r1
    2dae:	e5 5a       	subi	r30, 0xA5	; 165
    2db0:	fa 4e       	sbci	r31, 0xEA	; 234
    2db2:	1d 96       	adiw	r26, 0x0d	; 13
    2db4:	fc 93       	st	X, r31
    2db6:	ee 93       	st	-X, r30
    2db8:	1c 97       	sbiw	r26, 0x0c	; 12
    2dba:	80 81       	ld	r24, Z
    2dbc:	8f 5f       	subi	r24, 0xFF	; 255
    2dbe:	80 83       	st	Z, r24
    2dc0:	20 c0       	rjmp	.+64     	; 0x2e02 <xTaskGenericNotifyFromISR+0x1f4>
    2dc2:	46 e3       	ldi	r20, 0x36	; 54
    2dc4:	55 e1       	ldi	r21, 0x15	; 21
    2dc6:	fa 01       	movw	r30, r20
    2dc8:	c1 81       	ldd	r28, Z+1	; 0x01
    2dca:	d2 81       	ldd	r29, Z+2	; 0x02
    2dcc:	53 96       	adiw	r26, 0x13	; 19
    2dce:	dc 93       	st	X, r29
    2dd0:	ce 93       	st	-X, r28
    2dd2:	52 97       	sbiw	r26, 0x12	; 18
    2dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd8:	55 96       	adiw	r26, 0x15	; 21
    2dda:	9c 93       	st	X, r25
    2ddc:	8e 93       	st	-X, r24
    2dde:	54 97       	sbiw	r26, 0x14	; 20
    2de0:	2e 81       	ldd	r18, Y+6	; 0x06
    2de2:	3f 81       	ldd	r19, Y+7	; 0x07
    2de4:	cd 01       	movw	r24, r26
    2de6:	0e 96       	adiw	r24, 0x0e	; 14
    2de8:	f9 01       	movw	r30, r18
    2dea:	95 83       	std	Z+5, r25	; 0x05
    2dec:	84 83       	std	Z+4, r24	; 0x04
    2dee:	9f 83       	std	Y+7, r25	; 0x07
    2df0:	8e 83       	std	Y+6, r24	; 0x06
    2df2:	59 96       	adiw	r26, 0x19	; 25
    2df4:	5c 93       	st	X, r21
    2df6:	4e 93       	st	-X, r20
    2df8:	58 97       	sbiw	r26, 0x18	; 24
    2dfa:	fa 01       	movw	r30, r20
    2dfc:	80 81       	ld	r24, Z
    2dfe:	8f 5f       	subi	r24, 0xFF	; 255
    2e00:	80 83       	st	Z, r24
    2e02:	e0 91 c9 15 	lds	r30, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2e06:	f0 91 ca 15 	lds	r31, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>
    2e0a:	5a 96       	adiw	r26, 0x1a	; 26
    2e0c:	9c 91       	ld	r25, X
    2e0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e10:	89 17       	cp	r24, r25
    2e12:	70 f4       	brcc	.+28     	; 0x2e30 <xTaskGenericNotifyFromISR+0x222>
    2e14:	c1 14       	cp	r12, r1
    2e16:	d1 04       	cpc	r13, r1
    2e18:	19 f0       	breq	.+6      	; 0x2e20 <xTaskGenericNotifyFromISR+0x212>
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	f6 01       	movw	r30, r12
    2e1e:	80 83       	st	Z, r24
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <xYieldPending>
    2e26:	05 c0       	rjmp	.+10     	; 0x2e32 <xTaskGenericNotifyFromISR+0x224>
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	03 c0       	rjmp	.+6      	; 0x2e32 <xTaskGenericNotifyFromISR+0x224>
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	01 c0       	rjmp	.+2      	; 0x2e32 <xTaskGenericNotifyFromISR+0x224>
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	0f 91       	pop	r16
    2e38:	ff 90       	pop	r15
    2e3a:	ef 90       	pop	r14
    2e3c:	df 90       	pop	r13
    2e3e:	cf 90       	pop	r12
    2e40:	bf 90       	pop	r11
    2e42:	af 90       	pop	r10
    2e44:	9f 90       	pop	r9
    2e46:	8f 90       	pop	r8
    2e48:	08 95       	ret

00002e4a <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	21 f4       	brne	.+8      	; 0x2e56 <xTaskGenericNotifyStateClear+0xc>
    2e4e:	80 91 c9 15 	lds	r24, 0x15C9	; 0x8015c9 <pxCurrentTCB>
    2e52:	90 91 ca 15 	lds	r25, 0x15CA	; 0x8015ca <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	fc 01       	movw	r30, r24
    2e60:	e6 0f       	add	r30, r22
    2e62:	f7 1f       	adc	r31, r23
    2e64:	23 a9       	ldd	r18, Z+51	; 0x33
    2e66:	22 30       	cpi	r18, 0x02	; 2
    2e68:	31 f4       	brne	.+12     	; 0x2e76 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	e6 0f       	add	r30, r22
    2e6e:	f7 1f       	adc	r31, r23
    2e70:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2e76:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2e78:	0f 90       	pop	r0
    2e7a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2e7c:	08 95       	ret

00002e7e <prvInsertTimerInActiveList>:
    2e7e:	cf 92       	push	r12
    2e80:	df 92       	push	r13
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	42 83       	std	Z+2, r20	; 0x02
    2e8e:	53 83       	std	Z+3, r21	; 0x03
    2e90:	64 83       	std	Z+4, r22	; 0x04
    2e92:	75 83       	std	Z+5, r23	; 0x05
    2e94:	93 87       	std	Z+11, r25	; 0x0b
    2e96:	82 87       	std	Z+10, r24	; 0x0a
    2e98:	04 17       	cp	r16, r20
    2e9a:	15 07       	cpc	r17, r21
    2e9c:	26 07       	cpc	r18, r22
    2e9e:	37 07       	cpc	r19, r23
    2ea0:	c0 f0       	brcs	.+48     	; 0x2ed2 <prvInsertTimerInActiveList+0x54>
    2ea2:	0c 19       	sub	r16, r12
    2ea4:	1d 09       	sbc	r17, r13
    2ea6:	2e 09       	sbc	r18, r14
    2ea8:	3f 09       	sbc	r19, r15
    2eaa:	86 85       	ldd	r24, Z+14	; 0x0e
    2eac:	97 85       	ldd	r25, Z+15	; 0x0f
    2eae:	a0 89       	ldd	r26, Z+16	; 0x10
    2eb0:	b1 89       	ldd	r27, Z+17	; 0x11
    2eb2:	08 17       	cp	r16, r24
    2eb4:	19 07       	cpc	r17, r25
    2eb6:	2a 07       	cpc	r18, r26
    2eb8:	3b 07       	cpc	r19, r27
    2eba:	00 f5       	brcc	.+64     	; 0x2efc <prvInsertTimerInActiveList+0x7e>
    2ebc:	bf 01       	movw	r22, r30
    2ebe:	6e 5f       	subi	r22, 0xFE	; 254
    2ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec2:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <pxOverflowTimerList>
    2ec6:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <pxOverflowTimerList+0x1>
    2eca:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	18 c0       	rjmp	.+48     	; 0x2f02 <prvInsertTimerInActiveList+0x84>
    2ed2:	0c 15       	cp	r16, r12
    2ed4:	1d 05       	cpc	r17, r13
    2ed6:	2e 05       	cpc	r18, r14
    2ed8:	3f 05       	cpc	r19, r15
    2eda:	28 f4       	brcc	.+10     	; 0x2ee6 <prvInsertTimerInActiveList+0x68>
    2edc:	4c 15       	cp	r20, r12
    2ede:	5d 05       	cpc	r21, r13
    2ee0:	6e 05       	cpc	r22, r14
    2ee2:	7f 05       	cpc	r23, r15
    2ee4:	68 f4       	brcc	.+26     	; 0x2f00 <prvInsertTimerInActiveList+0x82>
    2ee6:	bf 01       	movw	r22, r30
    2ee8:	6e 5f       	subi	r22, 0xFE	; 254
    2eea:	7f 4f       	sbci	r23, 0xFF	; 255
    2eec:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <pxCurrentTimerList>
    2ef0:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <pxCurrentTimerList+0x1>
    2ef4:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	03 c0       	rjmp	.+6      	; 0x2f02 <prvInsertTimerInActiveList+0x84>
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	01 c0       	rjmp	.+2      	; 0x2f02 <prvInsertTimerInActiveList+0x84>
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	1f 91       	pop	r17
    2f04:	0f 91       	pop	r16
    2f06:	ff 90       	pop	r15
    2f08:	ef 90       	pop	r14
    2f0a:	df 90       	pop	r13
    2f0c:	cf 90       	pop	r12
    2f0e:	08 95       	ret

00002f10 <prvCheckForValidListAndQueue>:
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	0f 92       	push	r0
    2f16:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
    2f1a:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    2f1e:	89 2b       	or	r24, r25
    2f20:	e9 f4       	brne	.+58     	; 0x2f5c <prvCheckForValidListAndQueue+0x4c>
    2f22:	82 ee       	ldi	r24, 0xE2	; 226
    2f24:	95 e1       	ldi	r25, 0x15	; 21
    2f26:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    2f2a:	87 ed       	ldi	r24, 0xD7	; 215
    2f2c:	95 e1       	ldi	r25, 0x15	; 21
    2f2e:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    2f32:	82 ee       	ldi	r24, 0xE2	; 226
    2f34:	95 e1       	ldi	r25, 0x15	; 21
    2f36:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <pxCurrentTimerList+0x1>
    2f3a:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <pxCurrentTimerList>
    2f3e:	87 ed       	ldi	r24, 0xD7	; 215
    2f40:	95 e1       	ldi	r25, 0x15	; 21
    2f42:	90 93 d4 15 	sts	0x15D4, r25	; 0x8015d4 <pxOverflowTimerList+0x1>
    2f46:	80 93 d3 15 	sts	0x15D3, r24	; 0x8015d3 <pxOverflowTimerList>
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	67 e0       	ldi	r22, 0x07	; 7
    2f4e:	8a e0       	ldi	r24, 0x0A	; 10
    2f50:	0e 94 61 06 	call	0xcc2	; 0xcc2 <xQueueGenericCreate>
    2f54:	90 93 d2 15 	sts	0x15D2, r25	; 0x8015d2 <xTimerQueue+0x1>
    2f58:	80 93 d1 15 	sts	0x15D1, r24	; 0x8015d1 <xTimerQueue>
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	08 95       	ret

00002f62 <xTimerCreateTimerTask>:
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	d3 df       	rcall	.-90     	; 0x2f10 <prvCheckForValidListAndQueue>
    2f6a:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
    2f6e:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    2f72:	89 2b       	or	r24, r25
    2f74:	91 f0       	breq	.+36     	; 0x2f9a <xTimerCreateTimerTask+0x38>
    2f76:	0f 2e       	mov	r0, r31
    2f78:	ff ec       	ldi	r31, 0xCF	; 207
    2f7a:	ef 2e       	mov	r14, r31
    2f7c:	f5 e1       	ldi	r31, 0x15	; 21
    2f7e:	ff 2e       	mov	r15, r31
    2f80:	f0 2d       	mov	r31, r0
    2f82:	03 e0       	ldi	r16, 0x03	; 3
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 ec       	ldi	r20, 0xC0	; 192
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	64 e7       	ldi	r22, 0x74	; 116
    2f8e:	72 e0       	ldi	r23, 0x02	; 2
    2f90:	83 e0       	ldi	r24, 0x03	; 3
    2f92:	91 e0       	ldi	r25, 0x01	; 1
    2f94:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <xTimerCreateTimerTask+0x3a>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	0f 91       	pop	r16
    2f9e:	ff 90       	pop	r15
    2fa0:	ef 90       	pop	r14
    2fa2:	08 95       	ret

00002fa4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2fa4:	8f 92       	push	r8
    2fa6:	9f 92       	push	r9
    2fa8:	af 92       	push	r10
    2faa:	bf 92       	push	r11
    2fac:	cf 92       	push	r12
    2fae:	df 92       	push	r13
    2fb0:	ef 92       	push	r14
    2fb2:	ff 92       	push	r15
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	27 97       	sbiw	r28, 0x07	; 7
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2fcc:	e0 91 d1 15 	lds	r30, 0x15D1	; 0x8015d1 <xTimerQueue>
    2fd0:	f0 91 d2 15 	lds	r31, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    2fd4:	30 97       	sbiw	r30, 0x00	; 0
    2fd6:	81 f1       	breq	.+96     	; 0x3038 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2fd8:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2fda:	2a 83       	std	Y+2, r18	; 0x02
    2fdc:	3b 83       	std	Y+3, r19	; 0x03
    2fde:	4c 83       	std	Y+4, r20	; 0x04
    2fe0:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2fe2:	9f 83       	std	Y+7, r25	; 0x07
    2fe4:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2fe6:	66 30       	cpi	r22, 0x06	; 6
    2fe8:	f4 f4       	brge	.+60     	; 0x3026 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2fea:	0c db       	rcall	.-2536   	; 0x2604 <xTaskGetSchedulerState>
    2fec:	82 30       	cpi	r24, 0x02	; 2
    2fee:	69 f4       	brne	.+26     	; 0x300a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2ff0:	00 e0       	ldi	r16, 0x00	; 0
    2ff2:	a7 01       	movw	r20, r14
    2ff4:	96 01       	movw	r18, r12
    2ff6:	be 01       	movw	r22, r28
    2ff8:	6f 5f       	subi	r22, 0xFF	; 255
    2ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffc:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
    3000:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    3004:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    3008:	18 c0       	rjmp	.+48     	; 0x303a <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    300a:	00 e0       	ldi	r16, 0x00	; 0
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	a9 01       	movw	r20, r18
    3012:	be 01       	movw	r22, r28
    3014:	6f 5f       	subi	r22, 0xFF	; 255
    3016:	7f 4f       	sbci	r23, 0xFF	; 255
    3018:	80 91 d1 15 	lds	r24, 0x15D1	; 0x8015d1 <xTimerQueue>
    301c:	90 91 d2 15 	lds	r25, 0x15D2	; 0x8015d2 <xTimerQueue+0x1>
    3020:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    3024:	0a c0       	rjmp	.+20     	; 0x303a <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	a8 01       	movw	r20, r16
    302a:	be 01       	movw	r22, r28
    302c:	6f 5f       	subi	r22, 0xFF	; 255
    302e:	7f 4f       	sbci	r23, 0xFF	; 255
    3030:	cf 01       	movw	r24, r30
    3032:	0e 94 40 07 	call	0xe80	; 0xe80 <xQueueGenericSendFromISR>
    3036:	01 c0       	rjmp	.+2      	; 0x303a <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3038:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    303a:	27 96       	adiw	r28, 0x07	; 7
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	f8 94       	cli
    3040:	de bf       	out	0x3e, r29	; 62
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	cd bf       	out	0x3d, r28	; 61
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	1f 91       	pop	r17
    304c:	0f 91       	pop	r16
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	df 90       	pop	r13
    3054:	cf 90       	pop	r12
    3056:	bf 90       	pop	r11
    3058:	af 90       	pop	r10
    305a:	9f 90       	pop	r9
    305c:	8f 90       	pop	r8
    305e:	08 95       	ret

00003060 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3060:	2f 92       	push	r2
    3062:	3f 92       	push	r3
    3064:	4f 92       	push	r4
    3066:	5f 92       	push	r5
    3068:	6f 92       	push	r6
    306a:	7f 92       	push	r7
    306c:	8f 92       	push	r8
    306e:	9f 92       	push	r9
    3070:	af 92       	push	r10
    3072:	bf 92       	push	r11
    3074:	cf 92       	push	r12
    3076:	df 92       	push	r13
    3078:	ef 92       	push	r14
    307a:	ff 92       	push	r15
    307c:	0f 93       	push	r16
    307e:	1f 93       	push	r17
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3086:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    308a:	2b 01       	movw	r4, r22
    308c:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    308e:	80 91 cb 15 	lds	r24, 0x15CB	; 0x8015cb <xLastTime.2436>
    3092:	90 91 cc 15 	lds	r25, 0x15CC	; 0x8015cc <xLastTime.2436+0x1>
    3096:	a0 91 cd 15 	lds	r26, 0x15CD	; 0x8015cd <xLastTime.2436+0x2>
    309a:	b0 91 ce 15 	lds	r27, 0x15CE	; 0x8015ce <xLastTime.2436+0x3>
    309e:	48 16       	cp	r4, r24
    30a0:	59 06       	cpc	r5, r25
    30a2:	6a 06       	cpc	r6, r26
    30a4:	7b 06       	cpc	r7, r27
    30a6:	08 f0       	brcs	.+2      	; 0x30aa <prvSampleTimeNow+0x4a>
    30a8:	53 c0       	rjmp	.+166    	; 0x3150 <prvSampleTimeNow+0xf0>
    30aa:	3b c0       	rjmp	.+118    	; 0x3122 <prvSampleTimeNow+0xc2>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    30ac:	07 80       	ldd	r0, Z+7	; 0x07
    30ae:	f0 85       	ldd	r31, Z+8	; 0x08
    30b0:	e0 2d       	mov	r30, r0
    30b2:	80 80       	ld	r8, Z
    30b4:	91 80       	ldd	r9, Z+1	; 0x01
    30b6:	a2 80       	ldd	r10, Z+2	; 0x02
    30b8:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    30ba:	c0 85       	ldd	r28, Z+8	; 0x08
    30bc:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30be:	8e 01       	movw	r16, r28
    30c0:	0e 5f       	subi	r16, 0xFE	; 254
    30c2:	1f 4f       	sbci	r17, 0xFF	; 255
    30c4:	c8 01       	movw	r24, r16
    30c6:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    30ca:	ec 89       	ldd	r30, Y+20	; 0x14
    30cc:	fd 89       	ldd	r31, Y+21	; 0x15
    30ce:	ce 01       	movw	r24, r28
    30d0:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    30d2:	8e 89       	ldd	r24, Y+22	; 0x16
    30d4:	82 ff       	sbrs	r24, 2
    30d6:	25 c0       	rjmp	.+74     	; 0x3122 <prvSampleTimeNow+0xc2>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    30d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    30da:	9f 85       	ldd	r25, Y+15	; 0x0f
    30dc:	a8 89       	ldd	r26, Y+16	; 0x10
    30de:	b9 89       	ldd	r27, Y+17	; 0x11
    30e0:	88 0d       	add	r24, r8
    30e2:	99 1d       	adc	r25, r9
    30e4:	aa 1d       	adc	r26, r10
    30e6:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    30e8:	88 16       	cp	r8, r24
    30ea:	99 06       	cpc	r9, r25
    30ec:	aa 06       	cpc	r10, r26
    30ee:	bb 06       	cpc	r11, r27
    30f0:	70 f4       	brcc	.+28     	; 0x310e <prvSampleTimeNow+0xae>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    30f2:	8a 83       	std	Y+2, r24	; 0x02
    30f4:	9b 83       	std	Y+3, r25	; 0x03
    30f6:	ac 83       	std	Y+4, r26	; 0x04
    30f8:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    30fa:	db 87       	std	Y+11, r29	; 0x0b
    30fc:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    30fe:	b8 01       	movw	r22, r16
    3100:	80 91 d5 15 	lds	r24, 0x15D5	; 0x8015d5 <pxCurrentTimerList>
    3104:	90 91 d6 15 	lds	r25, 0x15D6	; 0x8015d6 <pxCurrentTimerList+0x1>
    3108:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    310c:	0a c0       	rjmp	.+20     	; 0x3122 <prvSampleTimeNow+0xc2>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    310e:	c1 2c       	mov	r12, r1
    3110:	d1 2c       	mov	r13, r1
    3112:	76 01       	movw	r14, r12
    3114:	00 e0       	ldi	r16, 0x00	; 0
    3116:	10 e0       	ldi	r17, 0x00	; 0
    3118:	a5 01       	movw	r20, r10
    311a:	94 01       	movw	r18, r8
    311c:	60 e0       	ldi	r22, 0x00	; 0
    311e:	ce 01       	movw	r24, r28
    3120:	41 df       	rcall	.-382    	; 0x2fa4 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3122:	e0 91 d5 15 	lds	r30, 0x15D5	; 0x8015d5 <pxCurrentTimerList>
    3126:	f0 91 d6 15 	lds	r31, 0x15D6	; 0x8015d6 <pxCurrentTimerList+0x1>
    312a:	80 81       	ld	r24, Z
    312c:	81 11       	cpse	r24, r1
    312e:	be cf       	rjmp	.-132    	; 0x30ac <prvSampleTimeNow+0x4c>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3130:	80 91 d3 15 	lds	r24, 0x15D3	; 0x8015d3 <pxOverflowTimerList>
    3134:	90 91 d4 15 	lds	r25, 0x15D4	; 0x8015d4 <pxOverflowTimerList+0x1>
    3138:	90 93 d6 15 	sts	0x15D6, r25	; 0x8015d6 <pxCurrentTimerList+0x1>
    313c:	80 93 d5 15 	sts	0x15D5, r24	; 0x8015d5 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3140:	f0 93 d4 15 	sts	0x15D4, r31	; 0x8015d4 <pxOverflowTimerList+0x1>
    3144:	e0 93 d3 15 	sts	0x15D3, r30	; 0x8015d3 <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	f1 01       	movw	r30, r2
    314c:	80 83       	st	Z, r24
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <prvSampleTimeNow+0xf4>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3150:	f1 01       	movw	r30, r2
    3152:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    3154:	40 92 cb 15 	sts	0x15CB, r4	; 0x8015cb <xLastTime.2436>
    3158:	50 92 cc 15 	sts	0x15CC, r5	; 0x8015cc <xLastTime.2436+0x1>
    315c:	60 92 cd 15 	sts	0x15CD, r6	; 0x8015cd <xLastTime.2436+0x2>
    3160:	70 92 ce 15 	sts	0x15CE, r7	; 0x8015ce <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3164:	c3 01       	movw	r24, r6
    3166:	b2 01       	movw	r22, r4
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	df 90       	pop	r13
    3176:	cf 90       	pop	r12
    3178:	bf 90       	pop	r11
    317a:	af 90       	pop	r10
    317c:	9f 90       	pop	r9
    317e:	8f 90       	pop	r8
    3180:	7f 90       	pop	r7
    3182:	6f 90       	pop	r6
    3184:	5f 90       	pop	r5
    3186:	4f 90       	pop	r4
    3188:	3f 90       	pop	r3
    318a:	2f 90       	pop	r2
    318c:	08 95       	ret

0000318e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    318e:	08 95       	ret

00003190 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3190:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3192:	2f 9a       	sbi	0x05, 7	; 5
    3194:	08 95       	ret

00003196 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3196:	1f 9a       	sbi	0x03, 7	; 3
    3198:	08 95       	ret

0000319a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    319a:	fa df       	rcall	.-12     	; 0x3190 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    319c:	2f ef       	ldi	r18, 0xFF	; 255
    319e:	80 e7       	ldi	r24, 0x70	; 112
    31a0:	92 e0       	ldi	r25, 0x02	; 2
    31a2:	21 50       	subi	r18, 0x01	; 1
    31a4:	80 40       	sbci	r24, 0x00	; 0
    31a6:	90 40       	sbci	r25, 0x00	; 0
    31a8:	e1 f7       	brne	.-8      	; 0x31a2 <vApplicationMallocFailedHook+0x8>
    31aa:	00 c0       	rjmp	.+0      	; 0x31ac <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    31ac:	00 00       	nop
    31ae:	f3 df       	rcall	.-26     	; 0x3196 <prvBlinkMainLed>
    31b0:	f5 cf       	rjmp	.-22     	; 0x319c <vApplicationMallocFailedHook+0x2>

000031b2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    31b2:	ee df       	rcall	.-36     	; 0x3190 <prvSetMainLedOn>
    31b4:	2f ef       	ldi	r18, 0xFF	; 255
    31b6:	87 ea       	ldi	r24, 0xA7	; 167
    31b8:	91 e6       	ldi	r25, 0x61	; 97
    31ba:	21 50       	subi	r18, 0x01	; 1
    31bc:	80 40       	sbci	r24, 0x00	; 0
    31be:	90 40       	sbci	r25, 0x00	; 0
    31c0:	e1 f7       	brne	.-8      	; 0x31ba <vApplicationStackOverflowHook+0x8>
    31c2:	00 c0       	rjmp	.+0      	; 0x31c4 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    31c4:	00 00       	nop
    31c6:	e7 df       	rcall	.-50     	; 0x3196 <prvBlinkMainLed>
    31c8:	f5 cf       	rjmp	.-22     	; 0x31b4 <vApplicationStackOverflowHook+0x2>

000031ca <sendData>:
extern float currentID;
extern logik_obj logikObj;
extern MessageBufferHandle_t downLinkMessageBufferHandle;

void sendData(void *pvParameters)
{
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	6a 97       	sbiw	r28, 0x1a	; 26
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 300000 / portTICK_PERIOD_MS;

    xLastWakeTime = xTaskGetTickCount();
    31de:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    31e2:	69 83       	std	Y+1, r22	; 0x01
    31e4:	7a 83       	std	Y+2, r23	; 0x02
    31e6:	8b 83       	std	Y+3, r24	; 0x03
    31e8:	9c 83       	std	Y+4, r25	; 0x04
        xTaskDelayUntil(&xLastWakeTime, xFrequency);

        puts("Uploading values");
        lora_driver_payload_t uplink_payload;
        // Setting up amount of data points
        uplink_payload.len = 4;       // Length of the actual payload
    31ea:	04 e0       	ldi	r16, 0x04	; 4
        uplink_payload.portNo = 1;    // The LoRaWAN port number to send the message to
    31ec:	11 e0       	ldi	r17, 0x01	; 1

    xLastWakeTime = xTaskGetTickCount();

    for (;;)
    {
        xTaskDelayUntil(&xLastWakeTime, xFrequency);
    31ee:	4e e3       	ldi	r20, 0x3E	; 62
    31f0:	59 e4       	ldi	r21, 0x49	; 73
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	ce 01       	movw	r24, r28
    31f8:	01 96       	adiw	r24, 0x01	; 1
    31fa:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>

        puts("Uploading values");
    31fe:	8c e7       	ldi	r24, 0x7C	; 124
    3200:	92 e0       	ldi	r25, 0x02	; 2
    3202:	0e 94 cc 31 	call	0x6398	; 0x6398 <puts>
        lora_driver_payload_t uplink_payload;
        // Setting up amount of data points
        uplink_payload.len = 4;       // Length of the actual payload
    3206:	0e 83       	std	Y+6, r16	; 0x06
        uplink_payload.portNo = 1;    // The LoRaWAN port number to send the message to
    3208:	1d 83       	std	Y+5, r17	; 0x05

        // Saving sensor data to the uplink
        uplink_payload.bytes[0] = sensor_getTemp();
    320a:	69 d4       	rcall	.+2258   	; 0x3ade <sensor_getTemp>
    320c:	59 d5       	rcall	.+2738   	; 0x3cc0 <__fixunssfsi>
    320e:	6f 83       	std	Y+7, r22	; 0x07
        uplink_payload.bytes[1] = sensor_getCo2();
    3210:	9a d4       	rcall	.+2356   	; 0x3b46 <sensor_getCo2>
    3212:	56 d5       	rcall	.+2732   	; 0x3cc0 <__fixunssfsi>
    3214:	68 87       	std	Y+8, r22	; 0x08
        uplink_payload.bytes[2] = sensor_getHum();
    3216:	7d d4       	rcall	.+2298   	; 0x3b12 <sensor_getHum>
    3218:	53 d5       	rcall	.+2726   	; 0x3cc0 <__fixunssfsi>
    321a:	69 87       	std	Y+9, r22	; 0x09
    321c:	60 91 87 17 	lds	r22, 0x1787	; 0x801787 <currentID>
        uplink_payload.bytes[3] = currentID;
    3220:	70 91 88 17 	lds	r23, 0x1788	; 0x801788 <currentID+0x1>
    3224:	80 91 89 17 	lds	r24, 0x1789	; 0x801789 <currentID+0x2>
    3228:	90 91 8a 17 	lds	r25, 0x178A	; 0x80178a <currentID+0x3>
    322c:	49 d5       	rcall	.+2706   	; 0x3cc0 <__fixunssfsi>
    322e:	6a 87       	std	Y+10, r22	; 0x0a
    3230:	be 01       	movw	r22, r28
    3232:	6b 5f       	subi	r22, 0xFB	; 251

        // Sending uplink message
        lora_driver_sendUploadMessage(false, &uplink_payload);
    3234:	7f 4f       	sbci	r23, 0xFF	; 255
    3236:	80 e0       	ldi	r24, 0x00	; 0
    3238:	0e 94 d7 22 	call	0x45ae	; 0x45ae <lora_driver_sendUploadMessage>
    323c:	d8 cf       	rjmp	.-80     	; 0x31ee <sendData+0x24>

0000323e <recieveData>:
    323e:	4f 92       	push	r4
    3240:	5f 92       	push	r5
    }
}


void recieveData(void *pvParameters)
{
    3242:	6f 92       	push	r6
    3244:	7f 92       	push	r7
    3246:	8f 92       	push	r8
    3248:	9f 92       	push	r9
    324a:	af 92       	push	r10
    324c:	bf 92       	push	r11
    324e:	cf 92       	push	r12
    3250:	df 92       	push	r13
    3252:	ef 92       	push	r14
    3254:	ff 92       	push	r15
    3256:	0f 93       	push	r16
    3258:	1f 93       	push	r17
    325a:	cf 93       	push	r28
    325c:	df 93       	push	r29
    325e:	cd b7       	in	r28, 0x3d	; 61
    3260:	de b7       	in	r29, 0x3e	; 62
    3262:	a2 97       	sbiw	r28, 0x22	; 34
    3264:	0f b6       	in	r0, 0x3f	; 63
    3266:	f8 94       	cli
    3268:	de bf       	out	0x3e, r29	; 62
    326a:	0f be       	out	0x3f, r0	; 63
    326c:	cd bf       	out	0x3d, r28	; 61

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 150000 / portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    326e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    3272:	69 83       	std	Y+1, r22	; 0x01
    3274:	7a 83       	std	Y+2, r23	; 0x02
    3276:	8b 83       	std	Y+3, r24	; 0x03
    3278:	9c 83       	std	Y+4, r25	; 0x04
				return 1;
			}

			// Sets the values to the logikObj

			logikObj.co2_Lower = downlinkPayload.bytes[2];
    327a:	0f 2e       	mov	r0, r31
    327c:	f9 e6       	ldi	r31, 0x69	; 105
    327e:	8f 2e       	mov	r8, r31
    3280:	f7 e1       	ldi	r31, 0x17	; 23
    3282:	9f 2e       	mov	r9, r31
    3284:	f0 2d       	mov	r31, r0
	xLastWakeTime = xTaskGetTickCount();

	for (;;)
	{

		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    3286:	4f e9       	ldi	r20, 0x9F	; 159
    3288:	54 e2       	ldi	r21, 0x24	; 36
    328a:	60 e0       	ldi	r22, 0x00	; 0
    328c:	70 e0       	ldi	r23, 0x00	; 0
    328e:	ce 01       	movw	r24, r28
    3290:	01 96       	adiw	r24, 0x01	; 1
    3292:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>

		lora_driver_payload_t downlinkPayload;

		xMessageBufferReceive(downLinkMessageBufferHandle, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    3296:	0f ef       	ldi	r16, 0xFF	; 255
    3298:	1f ef       	ldi	r17, 0xFF	; 255
    329a:	98 01       	movw	r18, r16
    329c:	46 e1       	ldi	r20, 0x16	; 22
    329e:	50 e0       	ldi	r21, 0x00	; 0
    32a0:	be 01       	movw	r22, r28
    32a2:	6b 5f       	subi	r22, 0xFB	; 251
    32a4:	7f 4f       	sbci	r23, 0xFF	; 255
    32a6:	80 91 75 17 	lds	r24, 0x1775	; 0x801775 <downLinkMessageBufferHandle>
    32aa:	90 91 76 17 	lds	r25, 0x1776	; 0x801776 <downLinkMessageBufferHandle+0x1>
    32ae:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
		if (6 < downlinkPayload.len)
    32b2:	8e 81       	ldd	r24, Y+6	; 0x06
    32b4:	87 30       	cpi	r24, 0x07	; 7
    32b6:	38 f3       	brcs	.-50     	; 0x3286 <recieveData+0x48>
		{

			// Checks if all the numbers are validated

			if (validateDownlink(downlinkPayload.bytes[4], downlinkPayload.bytes[5], downlinkPayload.bytes[2], downlinkPayload.bytes[3], downlinkPayload.bytes[0], downlinkPayload.bytes[1], downlinkPayload.bytes[6]) == 0)
    32b8:	6a 85       	ldd	r22, Y+10	; 0x0a
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	80 e0       	ldi	r24, 0x00	; 0
    32be:	90 e0       	ldi	r25, 0x00	; 0
    32c0:	2b d5       	rcall	.+2646   	; 0x3d18 <__floatunsisf>
    32c2:	5b 01       	movw	r10, r22
    32c4:	6c 01       	movw	r12, r24
    32c6:	69 85       	ldd	r22, Y+9	; 0x09
    32c8:	70 e0       	ldi	r23, 0x00	; 0
    32ca:	80 e0       	ldi	r24, 0x00	; 0
    32cc:	90 e0       	ldi	r25, 0x00	; 0
    32ce:	24 d5       	rcall	.+2632   	; 0x3d18 <__floatunsisf>
    32d0:	6b 8f       	std	Y+27, r22	; 0x1b
    32d2:	7c 8f       	std	Y+28, r23	; 0x1c
    32d4:	8d 8f       	std	Y+29, r24	; 0x1d
    32d6:	9e 8f       	std	Y+30, r25	; 0x1e
    32d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    32da:	70 e0       	ldi	r23, 0x00	; 0
    32dc:	80 e0       	ldi	r24, 0x00	; 0
    32de:	90 e0       	ldi	r25, 0x00	; 0
    32e0:	1b d5       	rcall	.+2614   	; 0x3d18 <__floatunsisf>
    32e2:	6f 8f       	std	Y+31, r22	; 0x1f
    32e4:	78 a3       	std	Y+32, r23	; 0x20
    32e6:	89 a3       	std	Y+33, r24	; 0x21
    32e8:	9a a3       	std	Y+34, r25	; 0x22
    32ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    32ec:	70 e0       	ldi	r23, 0x00	; 0
    32ee:	80 e0       	ldi	r24, 0x00	; 0
    32f0:	90 e0       	ldi	r25, 0x00	; 0
    32f2:	12 d5       	rcall	.+2596   	; 0x3d18 <__floatunsisf>
    32f4:	2b 01       	movw	r4, r22
    32f6:	3c 01       	movw	r6, r24
    32f8:	6d 85       	ldd	r22, Y+13	; 0x0d
    32fa:	70 e0       	ldi	r23, 0x00	; 0
    32fc:	80 e0       	ldi	r24, 0x00	; 0
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	0b d5       	rcall	.+2582   	; 0x3d18 <__floatunsisf>
    3302:	9f 93       	push	r25
    3304:	8f 93       	push	r24
    3306:	7f 93       	push	r23
    3308:	6f 93       	push	r22
    330a:	68 85       	ldd	r22, Y+8	; 0x08
    330c:	70 e0       	ldi	r23, 0x00	; 0
    330e:	80 e0       	ldi	r24, 0x00	; 0
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	02 d5       	rcall	.+2564   	; 0x3d18 <__floatunsisf>
    3314:	9f 93       	push	r25
    3316:	8f 93       	push	r24
    3318:	7f 93       	push	r23
    331a:	6f 93       	push	r22
    331c:	6f 81       	ldd	r22, Y+7	; 0x07
    331e:	70 e0       	ldi	r23, 0x00	; 0
    3320:	80 e0       	ldi	r24, 0x00	; 0
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	f9 d4       	rcall	.+2546   	; 0x3d18 <__floatunsisf>
    3326:	9f 93       	push	r25
    3328:	8f 93       	push	r24
    332a:	7f 93       	push	r23
    332c:	6f 93       	push	r22
    332e:	eb 8c       	ldd	r14, Y+27	; 0x1b
    3330:	fc 8c       	ldd	r15, Y+28	; 0x1c
    3332:	0d 8d       	ldd	r16, Y+29	; 0x1d
    3334:	1e 8d       	ldd	r17, Y+30	; 0x1e
    3336:	2f 8d       	ldd	r18, Y+31	; 0x1f
    3338:	38 a1       	ldd	r19, Y+32	; 0x20
    333a:	49 a1       	ldd	r20, Y+33	; 0x21
    333c:	5a a1       	ldd	r21, Y+34	; 0x22
    333e:	c3 01       	movw	r24, r6
    3340:	b2 01       	movw	r22, r4
    3342:	23 d4       	rcall	.+2118   	; 0x3b8a <validateDownlink>
    3344:	0f b6       	in	r0, 0x3f	; 63
    3346:	f8 94       	cli
    3348:	de bf       	out	0x3e, r29	; 62
    334a:	0f be       	out	0x3f, r0	; 63
    334c:	cd bf       	out	0x3d, r28	; 61
    334e:	89 2b       	or	r24, r25
    3350:	39 f1       	breq	.+78     	; 0x33a0 <recieveData+0x162>
				return 1;
			}

			// Sets the values to the logikObj

			logikObj.co2_Lower = downlinkPayload.bytes[2];
    3352:	89 85       	ldd	r24, Y+9	; 0x09
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	f4 01       	movw	r30, r8
    3358:	93 83       	std	Z+3, r25	; 0x03
    335a:	82 83       	std	Z+2, r24	; 0x02
			logikObj.co2_Upper = downlinkPayload.bytes[3];
    335c:	8a 85       	ldd	r24, Y+10	; 0x0a
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	91 83       	std	Z+1, r25	; 0x01
    3362:	80 83       	st	Z, r24
			logikObj.hum_Upper = downlinkPayload.bytes[4];
    3364:	8b 85       	ldd	r24, Y+11	; 0x0b
    3366:	90 e0       	ldi	r25, 0x00	; 0
    3368:	97 83       	std	Z+7, r25	; 0x07
    336a:	86 83       	std	Z+6, r24	; 0x06
			logikObj.hum_Lower = downlinkPayload.bytes[5];
    336c:	8c 85       	ldd	r24, Y+12	; 0x0c
    336e:	90 e0       	ldi	r25, 0x00	; 0
    3370:	95 83       	std	Z+5, r25	; 0x05
    3372:	84 83       	std	Z+4, r24	; 0x04
			logikObj.temp_Lower = downlinkPayload.bytes[0];
    3374:	8f 81       	ldd	r24, Y+7	; 0x07
    3376:	90 e0       	ldi	r25, 0x00	; 0
    3378:	91 87       	std	Z+9, r25	; 0x09
    337a:	80 87       	std	Z+8, r24	; 0x08
			logikObj.temp_Upper = downlinkPayload.bytes[1];
    337c:	88 85       	ldd	r24, Y+8	; 0x08
    337e:	90 e0       	ldi	r25, 0x00	; 0
    3380:	93 87       	std	Z+11, r25	; 0x0b
			currentID = downlinkPayload.bytes[6];
    3382:	82 87       	std	Z+10, r24	; 0x0a
    3384:	6d 85       	ldd	r22, Y+13	; 0x0d
    3386:	70 e0       	ldi	r23, 0x00	; 0
    3388:	80 e0       	ldi	r24, 0x00	; 0
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	c5 d4       	rcall	.+2442   	; 0x3d18 <__floatunsisf>
    338e:	60 93 87 17 	sts	0x1787, r22	; 0x801787 <currentID>
    3392:	70 93 88 17 	sts	0x1788, r23	; 0x801788 <currentID+0x1>
    3396:	80 93 89 17 	sts	0x1789, r24	; 0x801789 <currentID+0x2>
    339a:	90 93 8a 17 	sts	0x178A, r25	; 0x80178a <currentID+0x3>
		}
	}
    339e:	73 cf       	rjmp	.-282    	; 0x3286 <recieveData+0x48>
}
    33a0:	a2 96       	adiw	r28, 0x22	; 34
    33a2:	0f b6       	in	r0, 0x3f	; 63
    33a4:	f8 94       	cli
    33a6:	de bf       	out	0x3e, r29	; 62
    33a8:	0f be       	out	0x3f, r0	; 63
    33aa:	cd bf       	out	0x3d, r28	; 61
    33ac:	df 91       	pop	r29
    33ae:	cf 91       	pop	r28
    33b0:	1f 91       	pop	r17
    33b2:	0f 91       	pop	r16
    33b4:	ff 90       	pop	r15
    33b6:	ef 90       	pop	r14
    33b8:	df 90       	pop	r13
    33ba:	cf 90       	pop	r12
    33bc:	bf 90       	pop	r11
    33be:	af 90       	pop	r10
    33c0:	9f 90       	pop	r9
    33c2:	8f 90       	pop	r8
    33c4:	7f 90       	pop	r7
    33c6:	6f 90       	pop	r6
    33c8:	5f 90       	pop	r5
    33ca:	4f 90       	pop	r4
    33cc:	08 95       	ret

000033ce <comm_vTaskCreate>:

void comm_vTaskCreate(void)
{
    33ce:	ef 92       	push	r14
    33d0:	ff 92       	push	r15
    33d2:	0f 93       	push	r16
    xTaskCreate(sendData, "SendData", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
    33d4:	e1 2c       	mov	r14, r1
    33d6:	f1 2c       	mov	r15, r1
    33d8:	04 e0       	ldi	r16, 0x04	; 4
    33da:	20 e0       	ldi	r18, 0x00	; 0
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	40 ec       	ldi	r20, 0xC0	; 192
    33e0:	50 e0       	ldi	r21, 0x00	; 0
    33e2:	6d e8       	ldi	r22, 0x8D	; 141
    33e4:	72 e0       	ldi	r23, 0x02	; 2
    33e6:	85 ee       	ldi	r24, 0xE5	; 229
    33e8:	98 e1       	ldi	r25, 0x18	; 24
    33ea:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
    xTaskCreate(recieveData, "RecieveData", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
    33ee:	05 e0       	ldi	r16, 0x05	; 5
    33f0:	20 e0       	ldi	r18, 0x00	; 0
    33f2:	30 e0       	ldi	r19, 0x00	; 0
    33f4:	40 ec       	ldi	r20, 0xC0	; 192
    33f6:	50 e0       	ldi	r21, 0x00	; 0
    33f8:	66 e9       	ldi	r22, 0x96	; 150
    33fa:	72 e0       	ldi	r23, 0x02	; 2
    33fc:	8f e1       	ldi	r24, 0x1F	; 31
    33fe:	99 e1       	ldi	r25, 0x19	; 25
    3400:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
    3404:	0f 91       	pop	r16
    3406:	ff 90       	pop	r15
    3408:	ef 90       	pop	r14
    340a:	08 95       	ret

0000340c <startCo2Generator>:
#include "../Headers/ModuleHandler.h"
#include <util/delay.h>


void startCo2Generator(){
	display_7seg_powerDown();
    340c:	bf d5       	rcall	.+2942   	; 0x3f8c <display_7seg_powerDown>
    340e:	2f ef       	ldi	r18, 0xFF	; 255
    3410:	83 ed       	ldi	r24, 0xD3	; 211
    3412:	90 e3       	ldi	r25, 0x30	; 48
    3414:	21 50       	subi	r18, 0x01	; 1
    3416:	80 40       	sbci	r24, 0x00	; 0
    3418:	90 40       	sbci	r25, 0x00	; 0
    341a:	e1 f7       	brne	.-8      	; 0x3414 <startCo2Generator+0x8>
    341c:	00 c0       	rjmp	.+0      	; 0x341e <startCo2Generator+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    341e:	00 00       	nop
    3420:	b1 d5       	rcall	.+2914   	; 0x3f84 <display_7seg_powerUp>
	display_7seg_displayHex("1");
    3422:	88 e4       	ldi	r24, 0x48	; 72
    3424:	96 e0       	ldi	r25, 0x06	; 6
    3426:	06 c5       	rjmp	.+2572   	; 0x3e34 <display_7seg_displayHex>
    3428:	08 95       	ret

0000342a <startVentilation>:
}

void startVentilation(){
	display_7seg_powerDown();
    342a:	b0 d5       	rcall	.+2912   	; 0x3f8c <display_7seg_powerDown>
    342c:	2f ef       	ldi	r18, 0xFF	; 255
    342e:	83 ed       	ldi	r24, 0xD3	; 211
    3430:	90 e3       	ldi	r25, 0x30	; 48
    3432:	21 50       	subi	r18, 0x01	; 1
    3434:	80 40       	sbci	r24, 0x00	; 0
    3436:	90 40       	sbci	r25, 0x00	; 0
    3438:	e1 f7       	brne	.-8      	; 0x3432 <startVentilation+0x8>
    343a:	00 c0       	rjmp	.+0      	; 0x343c <startVentilation+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    343c:	00 00       	nop
    343e:	a2 d5       	rcall	.+2884   	; 0x3f84 <display_7seg_powerUp>
	display_7seg_displayHex("2");
    3440:	85 ed       	ldi	r24, 0xD5	; 213
    3442:	95 e0       	ldi	r25, 0x05	; 5
    3444:	f7 c4       	rjmp	.+2542   	; 0x3e34 <display_7seg_displayHex>
    3446:	08 95       	ret

00003448 <humidifier_Lower>:
}

void humidifier_Lower(){
	display_7seg_powerDown();
    3448:	a1 d5       	rcall	.+2882   	; 0x3f8c <display_7seg_powerDown>
    344a:	2f ef       	ldi	r18, 0xFF	; 255
    344c:	83 ed       	ldi	r24, 0xD3	; 211
    344e:	90 e3       	ldi	r25, 0x30	; 48
    3450:	21 50       	subi	r18, 0x01	; 1
    3452:	80 40       	sbci	r24, 0x00	; 0
    3454:	90 40       	sbci	r25, 0x00	; 0
    3456:	e1 f7       	brne	.-8      	; 0x3450 <humidifier_Lower+0x8>
    3458:	00 c0       	rjmp	.+0      	; 0x345a <humidifier_Lower+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    345a:	00 00       	nop
    345c:	93 d5       	rcall	.+2854   	; 0x3f84 <display_7seg_powerUp>
	display_7seg_displayHex("3");	
    345e:	82 ea       	ldi	r24, 0xA2	; 162
    3460:	92 e0       	ldi	r25, 0x02	; 2
    3462:	e8 c4       	rjmp	.+2512   	; 0x3e34 <display_7seg_displayHex>
    3464:	08 95       	ret

00003466 <humidifier_Raise>:
}

void humidifier_Raise(){
	display_7seg_powerDown();
    3466:	92 d5       	rcall	.+2852   	; 0x3f8c <display_7seg_powerDown>
    3468:	2f ef       	ldi	r18, 0xFF	; 255
    346a:	83 ed       	ldi	r24, 0xD3	; 211
    346c:	90 e3       	ldi	r25, 0x30	; 48
    346e:	21 50       	subi	r18, 0x01	; 1
    3470:	80 40       	sbci	r24, 0x00	; 0
    3472:	90 40       	sbci	r25, 0x00	; 0
    3474:	e1 f7       	brne	.-8      	; 0x346e <humidifier_Raise+0x8>
    3476:	00 c0       	rjmp	.+0      	; 0x3478 <humidifier_Raise+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    3478:	00 00       	nop
    347a:	84 d5       	rcall	.+2824   	; 0x3f84 <display_7seg_powerUp>
	display_7seg_displayHex("4");
    347c:	84 ea       	ldi	r24, 0xA4	; 164
    347e:	92 e0       	ldi	r25, 0x02	; 2
    3480:	d9 c4       	rjmp	.+2482   	; 0x3e34 <display_7seg_displayHex>
    3482:	08 95       	ret

00003484 <ac_Raise>:
}

void ac_Raise(){
	display_7seg_powerDown();
    3484:	83 d5       	rcall	.+2822   	; 0x3f8c <display_7seg_powerDown>
    3486:	2f ef       	ldi	r18, 0xFF	; 255
    3488:	83 ed       	ldi	r24, 0xD3	; 211
    348a:	90 e3       	ldi	r25, 0x30	; 48
    348c:	21 50       	subi	r18, 0x01	; 1
    348e:	80 40       	sbci	r24, 0x00	; 0
    3490:	90 40       	sbci	r25, 0x00	; 0
    3492:	e1 f7       	brne	.-8      	; 0x348c <ac_Raise+0x8>
    3494:	00 c0       	rjmp	.+0      	; 0x3496 <ac_Raise+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    3496:	00 00       	nop
    3498:	75 d5       	rcall	.+2794   	; 0x3f84 <display_7seg_powerUp>
	display_7seg_displayHex("5");
    349a:	8d e5       	ldi	r24, 0x5D	; 93
    349c:	93 e0       	ldi	r25, 0x03	; 3
    349e:	ca c4       	rjmp	.+2452   	; 0x3e34 <display_7seg_displayHex>
    34a0:	08 95       	ret

000034a2 <ac_Lower>:
}

void ac_Lower(){
	display_7seg_powerDown();
    34a2:	74 d5       	rcall	.+2792   	; 0x3f8c <display_7seg_powerDown>
    34a4:	2f ef       	ldi	r18, 0xFF	; 255
    34a6:	83 ed       	ldi	r24, 0xD3	; 211
    34a8:	90 e3       	ldi	r25, 0x30	; 48
    34aa:	21 50       	subi	r18, 0x01	; 1
    34ac:	80 40       	sbci	r24, 0x00	; 0
    34ae:	90 40       	sbci	r25, 0x00	; 0
    34b0:	e1 f7       	brne	.-8      	; 0x34aa <ac_Lower+0x8>
    34b2:	00 c0       	rjmp	.+0      	; 0x34b4 <ac_Lower+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    34b4:	00 00       	nop
    34b6:	66 d5       	rcall	.+2764   	; 0x3f84 <display_7seg_powerUp>
	display_7seg_displayHex("6");
    34b8:	86 ea       	ldi	r24, 0xA6	; 166
    34ba:	92 e0       	ldi	r25, 0x02	; 2
    34bc:	bb c4       	rjmp	.+2422   	; 0x3e34 <display_7seg_displayHex>
    34be:	08 95       	ret

000034c0 <humChecker>:
	xTaskCreate(co2Checker, "Co2Checker", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
	xTaskCreate(tempChecker, "TempChecker", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
}


void humChecker(void *pvParameters){
    34c0:	cf 93       	push	r28
    34c2:	df 93       	push	r29
    34c4:	00 d0       	rcall	.+0      	; 0x34c6 <humChecker+0x6>
    34c6:	1f 92       	push	r1
    34c8:	cd b7       	in	r28, 0x3d	; 61
    34ca:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 60000;
	xLastWakeTime = xTaskGetTickCount();
    34cc:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    34d0:	69 83       	std	Y+1, r22	; 0x01
    34d2:	7a 83       	std	Y+2, r23	; 0x02
    34d4:	8b 83       	std	Y+3, r24	; 0x03
    34d6:	9c 83       	std	Y+4, r25	; 0x04
	
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
		
		printf("BOBB");
    34d8:	0f 2e       	mov	r0, r31
    34da:	f8 ea       	ldi	r31, 0xA8	; 168
    34dc:	ef 2e       	mov	r14, r31
    34de:	f2 e0       	ldi	r31, 0x02	; 2
    34e0:	ff 2e       	mov	r15, r31
    34e2:	f0 2d       	mov	r31, r0
			}
			xSemaphoreGive(Mutex);
		}
		else
		{
			printf("time out");
    34e4:	0f 2e       	mov	r0, r31
    34e6:	fd ea       	ldi	r31, 0xAD	; 173
    34e8:	cf 2e       	mov	r12, r31
    34ea:	f2 e0       	ldi	r31, 0x02	; 2
    34ec:	df 2e       	mov	r13, r31
    34ee:	f0 2d       	mov	r31, r0
		
		printf("BOBB");
		
		if(xSemaphoreTake(Mutex,pdMS_TO_TICKS(200))==pdTRUE){
			
			if (sensor_getHum() < logikObj.hum_Lower)
    34f0:	0f 2e       	mov	r0, r31
    34f2:	f9 e6       	ldi	r31, 0x69	; 105
    34f4:	af 2e       	mov	r10, r31
    34f6:	f7 e1       	ldi	r31, 0x17	; 23
    34f8:	bf 2e       	mov	r11, r31
    34fa:	f0 2d       	mov	r31, r0
	xLastWakeTime = xTaskGetTickCount();
	
	
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    34fc:	40 e6       	ldi	r20, 0x60	; 96
    34fe:	5a ee       	ldi	r21, 0xEA	; 234
    3500:	60 e0       	ldi	r22, 0x00	; 0
    3502:	70 e0       	ldi	r23, 0x00	; 0
    3504:	ce 01       	movw	r24, r28
    3506:	01 96       	adiw	r24, 0x01	; 1
    3508:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>
		
		printf("BOBB");
    350c:	ff 92       	push	r15
    350e:	ef 92       	push	r14
    3510:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>
		
		if(xSemaphoreTake(Mutex,pdMS_TO_TICKS(200))==pdTRUE){
    3514:	4c e0       	ldi	r20, 0x0C	; 12
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	60 e0       	ldi	r22, 0x00	; 0
    351a:	70 e0       	ldi	r23, 0x00	; 0
    351c:	80 91 67 17 	lds	r24, 0x1767	; 0x801767 <Mutex>
    3520:	90 91 68 17 	lds	r25, 0x1768	; 0x801768 <Mutex+0x1>
    3524:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
    3528:	0f 90       	pop	r0
    352a:	0f 90       	pop	r0
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	a1 f5       	brne	.+104    	; 0x3598 <humChecker+0xd8>
			
			if (sensor_getHum() < logikObj.hum_Lower)
    3530:	f0 d2       	rcall	.+1504   	; 0x3b12 <sensor_getHum>
    3532:	2b 01       	movw	r4, r22
    3534:	3c 01       	movw	r6, r24
    3536:	f5 01       	movw	r30, r10
    3538:	64 81       	ldd	r22, Z+4	; 0x04
    353a:	75 81       	ldd	r23, Z+5	; 0x05
    353c:	07 2e       	mov	r0, r23
    353e:	00 0c       	add	r0, r0
    3540:	88 0b       	sbc	r24, r24
    3542:	99 0b       	sbc	r25, r25
    3544:	eb d3       	rcall	.+2006   	; 0x3d1c <__floatsisf>
    3546:	9b 01       	movw	r18, r22
    3548:	ac 01       	movw	r20, r24
    354a:	c3 01       	movw	r24, r6
    354c:	b2 01       	movw	r22, r4
    354e:	b4 d3       	rcall	.+1896   	; 0x3cb8 <__cmpsf2>
    3550:	88 23       	and	r24, r24
    3552:	14 f4       	brge	.+4      	; 0x3558 <humChecker+0x98>
			{
				humidifier_Raise();
    3554:	88 df       	rcall	.-240    	; 0x3466 <humidifier_Raise>
    3556:	13 c0       	rjmp	.+38     	; 0x357e <humChecker+0xbe>
    3558:	dc d2       	rcall	.+1464   	; 0x3b12 <sensor_getHum>
			}
			else if (sensor_getHum() > logikObj.hum_Upper)
    355a:	2b 01       	movw	r4, r22
    355c:	3c 01       	movw	r6, r24
    355e:	f5 01       	movw	r30, r10
    3560:	66 81       	ldd	r22, Z+6	; 0x06
    3562:	77 81       	ldd	r23, Z+7	; 0x07
    3564:	07 2e       	mov	r0, r23
    3566:	00 0c       	add	r0, r0
    3568:	88 0b       	sbc	r24, r24
    356a:	99 0b       	sbc	r25, r25
    356c:	d7 d3       	rcall	.+1966   	; 0x3d1c <__floatsisf>
    356e:	9b 01       	movw	r18, r22
    3570:	ac 01       	movw	r20, r24
    3572:	c3 01       	movw	r24, r6
    3574:	b2 01       	movw	r22, r4
    3576:	5a d4       	rcall	.+2228   	; 0x3e2c <__gesf2>
    3578:	18 16       	cp	r1, r24
    357a:	0c f4       	brge	.+2      	; 0x357e <humChecker+0xbe>
    357c:	65 df       	rcall	.-310    	; 0x3448 <humidifier_Lower>
			{
				humidifier_Lower();
    357e:	00 e0       	ldi	r16, 0x00	; 0
    3580:	20 e0       	ldi	r18, 0x00	; 0
			}
			xSemaphoreGive(Mutex);
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	a9 01       	movw	r20, r18
    3586:	60 e0       	ldi	r22, 0x00	; 0
    3588:	70 e0       	ldi	r23, 0x00	; 0
    358a:	80 91 67 17 	lds	r24, 0x1767	; 0x801767 <Mutex>
    358e:	90 91 68 17 	lds	r25, 0x1768	; 0x801768 <Mutex+0x1>
    3592:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    3596:	b2 cf       	rjmp	.-156    	; 0x34fc <humChecker+0x3c>
    3598:	df 92       	push	r13
    359a:	cf 92       	push	r12
		}
		else
		{
			printf("time out");
    359c:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>
    35a0:	0f 90       	pop	r0
    35a2:	0f 90       	pop	r0
    35a4:	ab cf       	rjmp	.-170    	; 0x34fc <humChecker+0x3c>

000035a6 <co2Checker>:
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29
	}
	
}


void co2Checker(void *pvParameters){
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <co2Checker+0x6>
    35ac:	1f 92       	push	r1
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 60000 / portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    35b2:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    35b6:	69 83       	std	Y+1, r22	; 0x01
    35b8:	7a 83       	std	Y+2, r23	; 0x02
    35ba:	8b 83       	std	Y+3, r24	; 0x03
    35bc:	9c 83       	std	Y+4, r25	; 0x04
			}
			xSemaphoreGive(Mutex);
		}
		else
		{
			printf("time out");
    35be:	0f 2e       	mov	r0, r31
    35c0:	fd ea       	ldi	r31, 0xAD	; 173
    35c2:	ef 2e       	mov	r14, r31
    35c4:	f2 e0       	ldi	r31, 0x02	; 2
    35c6:	ff 2e       	mov	r15, r31
    35c8:	f0 2d       	mov	r31, r0
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
		if(xSemaphoreTake(Mutex,pdMS_TO_TICKS(200))==pdTRUE){
			
			if (sensor_getCo2() < logikObj.co2_Lower)
    35ca:	0f 2e       	mov	r0, r31
    35cc:	f9 e6       	ldi	r31, 0x69	; 105
    35ce:	cf 2e       	mov	r12, r31
    35d0:	f7 e1       	ldi	r31, 0x17	; 23
    35d2:	df 2e       	mov	r13, r31
    35d4:	f0 2d       	mov	r31, r0
	const TickType_t xFrequency = 60000 / portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    35d6:	46 ea       	ldi	r20, 0xA6	; 166
    35d8:	5e e0       	ldi	r21, 0x0E	; 14
    35da:	60 e0       	ldi	r22, 0x00	; 0
    35dc:	70 e0       	ldi	r23, 0x00	; 0
    35de:	ce 01       	movw	r24, r28
    35e0:	01 96       	adiw	r24, 0x01	; 1
    35e2:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>
		if(xSemaphoreTake(Mutex,pdMS_TO_TICKS(200))==pdTRUE){
    35e6:	4c e0       	ldi	r20, 0x0C	; 12
    35e8:	50 e0       	ldi	r21, 0x00	; 0
    35ea:	60 e0       	ldi	r22, 0x00	; 0
    35ec:	70 e0       	ldi	r23, 0x00	; 0
    35ee:	80 91 67 17 	lds	r24, 0x1767	; 0x801767 <Mutex>
    35f2:	90 91 68 17 	lds	r25, 0x1768	; 0x801768 <Mutex+0x1>
    35f6:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
    35fa:	81 30       	cpi	r24, 0x01	; 1
    35fc:	a1 f5       	brne	.+104    	; 0x3666 <co2Checker+0xc0>
			
			if (sensor_getCo2() < logikObj.co2_Lower)
    35fe:	a3 d2       	rcall	.+1350   	; 0x3b46 <sensor_getCo2>
    3600:	4b 01       	movw	r8, r22
    3602:	5c 01       	movw	r10, r24
    3604:	f6 01       	movw	r30, r12
    3606:	62 81       	ldd	r22, Z+2	; 0x02
    3608:	73 81       	ldd	r23, Z+3	; 0x03
    360a:	07 2e       	mov	r0, r23
    360c:	00 0c       	add	r0, r0
    360e:	88 0b       	sbc	r24, r24
    3610:	99 0b       	sbc	r25, r25
    3612:	84 d3       	rcall	.+1800   	; 0x3d1c <__floatsisf>
    3614:	9b 01       	movw	r18, r22
    3616:	ac 01       	movw	r20, r24
    3618:	c5 01       	movw	r24, r10
    361a:	b4 01       	movw	r22, r8
    361c:	4d d3       	rcall	.+1690   	; 0x3cb8 <__cmpsf2>
    361e:	88 23       	and	r24, r24
    3620:	14 f4       	brge	.+4      	; 0x3626 <co2Checker+0x80>
			{
				startCo2Generator();
    3622:	f4 de       	rcall	.-536    	; 0x340c <startCo2Generator>
    3624:	13 c0       	rjmp	.+38     	; 0x364c <co2Checker+0xa6>
    3626:	8f d2       	rcall	.+1310   	; 0x3b46 <sensor_getCo2>
			}
			else if (sensor_getCo2() > logikObj.co2_Upper)
    3628:	4b 01       	movw	r8, r22
    362a:	5c 01       	movw	r10, r24
    362c:	f6 01       	movw	r30, r12
    362e:	60 81       	ld	r22, Z
    3630:	71 81       	ldd	r23, Z+1	; 0x01
    3632:	07 2e       	mov	r0, r23
    3634:	00 0c       	add	r0, r0
    3636:	88 0b       	sbc	r24, r24
    3638:	99 0b       	sbc	r25, r25
    363a:	70 d3       	rcall	.+1760   	; 0x3d1c <__floatsisf>
    363c:	9b 01       	movw	r18, r22
    363e:	ac 01       	movw	r20, r24
    3640:	c5 01       	movw	r24, r10
    3642:	b4 01       	movw	r22, r8
    3644:	f3 d3       	rcall	.+2022   	; 0x3e2c <__gesf2>
    3646:	18 16       	cp	r1, r24
    3648:	0c f4       	brge	.+2      	; 0x364c <co2Checker+0xa6>
    364a:	ef de       	rcall	.-546    	; 0x342a <startVentilation>
			{
				startVentilation();
    364c:	00 e0       	ldi	r16, 0x00	; 0
    364e:	20 e0       	ldi	r18, 0x00	; 0
			}
			xSemaphoreGive(Mutex);
    3650:	30 e0       	ldi	r19, 0x00	; 0
    3652:	a9 01       	movw	r20, r18
    3654:	60 e0       	ldi	r22, 0x00	; 0
    3656:	70 e0       	ldi	r23, 0x00	; 0
    3658:	80 91 67 17 	lds	r24, 0x1767	; 0x801767 <Mutex>
    365c:	90 91 68 17 	lds	r25, 0x1768	; 0x801768 <Mutex+0x1>
    3660:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    3664:	b8 cf       	rjmp	.-144    	; 0x35d6 <co2Checker+0x30>
    3666:	ff 92       	push	r15
    3668:	ef 92       	push	r14
		}
		else
		{
			printf("time out");
    366a:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>
    366e:	0f 90       	pop	r0
    3670:	0f 90       	pop	r0
    3672:	b1 cf       	rjmp	.-158    	; 0x35d6 <co2Checker+0x30>

00003674 <tempChecker>:
    3674:	cf 93       	push	r28
    3676:	df 93       	push	r29
	}
	
}
	

void tempChecker(void *pvParameters){
    3678:	00 d0       	rcall	.+0      	; 0x367a <tempChecker+0x6>
    367a:	1f 92       	push	r1
    367c:	cd b7       	in	r28, 0x3d	; 61
    367e:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 60000 / portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    3680:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    3684:	69 83       	std	Y+1, r22	; 0x01
    3686:	7a 83       	std	Y+2, r23	; 0x02
    3688:	8b 83       	std	Y+3, r24	; 0x03
    368a:	9c 83       	std	Y+4, r25	; 0x04
			}
			xSemaphoreGive(Mutex);
		}
		else
		{
			printf("time out");
    368c:	0f 2e       	mov	r0, r31
    368e:	fd ea       	ldi	r31, 0xAD	; 173
    3690:	ef 2e       	mov	r14, r31
    3692:	f2 e0       	ldi	r31, 0x02	; 2
    3694:	ff 2e       	mov	r15, r31
    3696:	f0 2d       	mov	r31, r0
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
		
		if(xSemaphoreTake(Mutex,pdMS_TO_TICKS(200))==pdTRUE){
			
			if (sensor_getTemp() < logikObj.temp_Lower)
    3698:	0f 2e       	mov	r0, r31
    369a:	f9 e6       	ldi	r31, 0x69	; 105
    369c:	cf 2e       	mov	r12, r31
    369e:	f7 e1       	ldi	r31, 0x17	; 23
    36a0:	df 2e       	mov	r13, r31
    36a2:	f0 2d       	mov	r31, r0
	const TickType_t xFrequency = 60000 / portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    36a4:	46 ea       	ldi	r20, 0xA6	; 166
    36a6:	5e e0       	ldi	r21, 0x0E	; 14
    36a8:	60 e0       	ldi	r22, 0x00	; 0
    36aa:	70 e0       	ldi	r23, 0x00	; 0
    36ac:	ce 01       	movw	r24, r28
    36ae:	01 96       	adiw	r24, 0x01	; 1
    36b0:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>
		
		if(xSemaphoreTake(Mutex,pdMS_TO_TICKS(200))==pdTRUE){
    36b4:	4c e0       	ldi	r20, 0x0C	; 12
    36b6:	50 e0       	ldi	r21, 0x00	; 0
    36b8:	60 e0       	ldi	r22, 0x00	; 0
    36ba:	70 e0       	ldi	r23, 0x00	; 0
    36bc:	80 91 67 17 	lds	r24, 0x1767	; 0x801767 <Mutex>
    36c0:	90 91 68 17 	lds	r25, 0x1768	; 0x801768 <Mutex+0x1>
    36c4:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
    36c8:	81 30       	cpi	r24, 0x01	; 1
    36ca:	a1 f5       	brne	.+104    	; 0x3734 <tempChecker+0xc0>
			
			if (sensor_getTemp() < logikObj.temp_Lower)
    36cc:	08 d2       	rcall	.+1040   	; 0x3ade <sensor_getTemp>
    36ce:	4b 01       	movw	r8, r22
    36d0:	5c 01       	movw	r10, r24
    36d2:	f6 01       	movw	r30, r12
    36d4:	60 85       	ldd	r22, Z+8	; 0x08
    36d6:	71 85       	ldd	r23, Z+9	; 0x09
    36d8:	07 2e       	mov	r0, r23
    36da:	00 0c       	add	r0, r0
    36dc:	88 0b       	sbc	r24, r24
    36de:	99 0b       	sbc	r25, r25
    36e0:	1d d3       	rcall	.+1594   	; 0x3d1c <__floatsisf>
    36e2:	9b 01       	movw	r18, r22
    36e4:	ac 01       	movw	r20, r24
    36e6:	c5 01       	movw	r24, r10
    36e8:	b4 01       	movw	r22, r8
    36ea:	e6 d2       	rcall	.+1484   	; 0x3cb8 <__cmpsf2>
    36ec:	88 23       	and	r24, r24
    36ee:	14 f4       	brge	.+4      	; 0x36f4 <tempChecker+0x80>
			{
				ac_Raise();
    36f0:	c9 de       	rcall	.-622    	; 0x3484 <ac_Raise>
    36f2:	13 c0       	rjmp	.+38     	; 0x371a <tempChecker+0xa6>
    36f4:	f4 d1       	rcall	.+1000   	; 0x3ade <sensor_getTemp>
			}
			else if (sensor_getTemp() > logikObj.temp_Upper)
    36f6:	4b 01       	movw	r8, r22
    36f8:	5c 01       	movw	r10, r24
    36fa:	f6 01       	movw	r30, r12
    36fc:	62 85       	ldd	r22, Z+10	; 0x0a
    36fe:	73 85       	ldd	r23, Z+11	; 0x0b
    3700:	07 2e       	mov	r0, r23
    3702:	00 0c       	add	r0, r0
    3704:	88 0b       	sbc	r24, r24
    3706:	99 0b       	sbc	r25, r25
    3708:	09 d3       	rcall	.+1554   	; 0x3d1c <__floatsisf>
    370a:	9b 01       	movw	r18, r22
    370c:	ac 01       	movw	r20, r24
    370e:	c5 01       	movw	r24, r10
    3710:	b4 01       	movw	r22, r8
    3712:	8c d3       	rcall	.+1816   	; 0x3e2c <__gesf2>
    3714:	18 16       	cp	r1, r24
    3716:	0c f4       	brge	.+2      	; 0x371a <tempChecker+0xa6>
    3718:	c4 de       	rcall	.-632    	; 0x34a2 <ac_Lower>
			{
				ac_Lower();
    371a:	00 e0       	ldi	r16, 0x00	; 0
    371c:	20 e0       	ldi	r18, 0x00	; 0
			}
			xSemaphoreGive(Mutex);
    371e:	30 e0       	ldi	r19, 0x00	; 0
    3720:	a9 01       	movw	r20, r18
    3722:	60 e0       	ldi	r22, 0x00	; 0
    3724:	70 e0       	ldi	r23, 0x00	; 0
    3726:	80 91 67 17 	lds	r24, 0x1767	; 0x801767 <Mutex>
    372a:	90 91 68 17 	lds	r25, 0x1768	; 0x801768 <Mutex+0x1>
    372e:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    3732:	b8 cf       	rjmp	.-144    	; 0x36a4 <tempChecker+0x30>
    3734:	ff 92       	push	r15
    3736:	ef 92       	push	r14
		}
		else
		{
			printf("time out");
    3738:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	b1 cf       	rjmp	.-158    	; 0x36a4 <tempChecker+0x30>

00003742 <initialise>:
    3742:	ef 92       	push	r14
    3744:	ff 92       	push	r15
void co2Checker(void *pvParameters);
void tempChecker(void *pvParameters);
void humChecker(void *pvParameters);


void initialise(void){
    3746:	0f 93       	push	r16
	if (Mutex == NULL) // Check to confirm that the Semaphore has not already been created.
    3748:	80 91 67 17 	lds	r24, 0x1767	; 0x801767 <Mutex>
    374c:	90 91 68 17 	lds	r25, 0x1768	; 0x801768 <Mutex+0x1>
    3750:	89 2b       	or	r24, r25
    3752:	89 f4       	brne	.+34     	; 0x3776 <initialise+0x34>
	{
		Mutex = xSemaphoreCreateMutex(); // Create a mutex semaphore.
    3754:	81 e0       	ldi	r24, 0x01	; 1
    3756:	0e 94 25 07 	call	0xe4a	; 0xe4a <xQueueCreateMutex>
    375a:	90 93 68 17 	sts	0x1768, r25	; 0x801768 <Mutex+0x1>
    375e:	80 93 67 17 	sts	0x1767, r24	; 0x801767 <Mutex>
		if ((Mutex) != NULL)
    3762:	00 97       	sbiw	r24, 0x00	; 0
    3764:	41 f0       	breq	.+16     	; 0x3776 <initialise+0x34>
		{
			xSemaphoreGive((Mutex)); // Make the mutex available for use, by initially "Giving" the Semaphore.
    3766:	00 e0       	ldi	r16, 0x00	; 0
    3768:	20 e0       	ldi	r18, 0x00	; 0
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	a9 01       	movw	r20, r18
    376e:	60 e0       	ldi	r22, 0x00	; 0
    3770:	70 e0       	ldi	r23, 0x00	; 0
    3772:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
		}
	}

	xTaskCreate(humChecker, "HumChecker", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    3776:	e1 2c       	mov	r14, r1
    3778:	f1 2c       	mov	r15, r1
    377a:	01 e0       	ldi	r16, 0x01	; 1
    377c:	20 e0       	ldi	r18, 0x00	; 0
    377e:	30 e0       	ldi	r19, 0x00	; 0
    3780:	40 ec       	ldi	r20, 0xC0	; 192
    3782:	50 e0       	ldi	r21, 0x00	; 0
    3784:	66 eb       	ldi	r22, 0xB6	; 182
    3786:	72 e0       	ldi	r23, 0x02	; 2
    3788:	80 e6       	ldi	r24, 0x60	; 96
    378a:	9a e1       	ldi	r25, 0x1A	; 26
    378c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
	xTaskCreate(co2Checker, "Co2Checker", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
    3790:	02 e0       	ldi	r16, 0x02	; 2
    3792:	20 e0       	ldi	r18, 0x00	; 0
    3794:	30 e0       	ldi	r19, 0x00	; 0
    3796:	40 ec       	ldi	r20, 0xC0	; 192
    3798:	50 e0       	ldi	r21, 0x00	; 0
    379a:	61 ec       	ldi	r22, 0xC1	; 193
    379c:	72 e0       	ldi	r23, 0x02	; 2
    379e:	83 ed       	ldi	r24, 0xD3	; 211
    37a0:	9a e1       	ldi	r25, 0x1A	; 26
    37a2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
	xTaskCreate(tempChecker, "TempChecker", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    37a6:	03 e0       	ldi	r16, 0x03	; 3
    37a8:	20 e0       	ldi	r18, 0x00	; 0
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	40 ec       	ldi	r20, 0xC0	; 192
    37ae:	50 e0       	ldi	r21, 0x00	; 0
    37b0:	6c ec       	ldi	r22, 0xCC	; 204
    37b2:	72 e0       	ldi	r23, 0x02	; 2
    37b4:	8a e3       	ldi	r24, 0x3A	; 58
    37b6:	9b e1       	ldi	r25, 0x1B	; 27
    37b8:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
}
    37bc:	0f 91       	pop	r16
    37be:	ff 90       	pop	r15
    37c0:	ef 90       	pop	r14
    37c2:	08 95       	ret

000037c4 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
    37c8:	cd b7       	in	r28, 0x3d	; 61
    37ca:	de b7       	in	r29, 0x3e	; 62
    37cc:	68 97       	sbiw	r28, 0x18	; 24
    37ce:	0f b6       	in	r0, 0x3f	; 63
    37d0:	f8 94       	cli
    37d2:	de bf       	out	0x3e, r29	; 62
    37d4:	0f be       	out	0x3f, r0	; 63
    37d6:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    37d8:	81 e0       	ldi	r24, 0x01	; 1
    37da:	4b d6       	rcall	.+3222   	; 0x4472 <lora_driver_resetRn2483>
	vTaskDelay(2);
    37dc:	62 e0       	ldi	r22, 0x02	; 2
    37de:	70 e0       	ldi	r23, 0x00	; 0
    37e0:	80 e0       	ldi	r24, 0x00	; 0
    37e2:	90 e0       	ldi	r25, 0x00	; 0
    37e4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <vTaskDelay>
	lora_driver_resetRn2483(0);
    37e8:	80 e0       	ldi	r24, 0x00	; 0
    37ea:	43 d6       	rcall	.+3206   	; 0x4472 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    37ec:	66 e9       	ldi	r22, 0x96	; 150
    37ee:	70 e0       	ldi	r23, 0x00	; 0
    37f0:	80 e0       	ldi	r24, 0x00	; 0
    37f2:	90 e0       	ldi	r25, 0x00	; 0
    37f4:	0e 94 e6 10 	call	0x21cc	; 0x21cc <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    37f8:	f5 d5       	rcall	.+3050   	; 0x43e4 <lora_driver_flushBuffers>

static void _lora_setup(void)
{
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	0e 94 60 2c 	call	0x58c0	; 0x58c0 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    3800:	46 d6       	rcall	.+3212   	; 0x448e <lora_driver_rn2483FactoryReset>
    3802:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_mapReturnCodeToText>
    3806:	9f 93       	push	r25
    3808:	8f 93       	push	r24
    380a:	88 ed       	ldi	r24, 0xD8	; 216
    380c:	92 e0       	ldi	r25, 0x02	; 2
    380e:	9f 93       	push	r25
    3810:	8f 93       	push	r24
    3812:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3816:	b9 d7       	rcall	.+3954   	; 0x478a <lora_driver_configureToEu868>
    3818:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_mapReturnCodeToText>
    381c:	9f 93       	push	r25
    381e:	8f 93       	push	r24
    3820:	8b ee       	ldi	r24, 0xEB	; 235
    3822:	92 e0       	ldi	r25, 0x02	; 2
    3824:	9f 93       	push	r25
    3826:	8f 93       	push	r24
    3828:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    382c:	8e 01       	movw	r16, r28
    382e:	0b 5f       	subi	r16, 0xFB	; 251
    3830:	1f 4f       	sbci	r17, 0xFF	; 255
    3832:	c8 01       	movw	r24, r16
    3834:	3e d6       	rcall	.+3196   	; 0x44b2 <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3836:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_mapReturnCodeToText>
    383a:	1f 93       	push	r17
    383c:	0f 93       	push	r16
    383e:	9f 93       	push	r25
    3840:	8f 93       	push	r24
    3842:	84 e0       	ldi	r24, 0x04	; 4
    3844:	93 e0       	ldi	r25, 0x03	; 3
    3846:	9f 93       	push	r25
    3848:	8f 93       	push	r24
    384a:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    384e:	c8 01       	movw	r24, r16
    3850:	4c d6       	rcall	.+3224   	; 0x44ea <lora_driver_setDeviceIdentifier>
    3852:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_mapReturnCodeToText>
    3856:	9f 93       	push	r25
    3858:	8f 93       	push	r24
    385a:	1f 93       	push	r17
    385c:	0f 93       	push	r16
    385e:	88 e1       	ldi	r24, 0x18	; 24
    3860:	93 e0       	ldi	r25, 0x03	; 3
    3862:	9f 93       	push	r25
    3864:	8f 93       	push	r24
    3866:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    386a:	a8 01       	movw	r20, r16
    386c:	6d e2       	ldi	r22, 0x2D	; 45
    386e:	73 e0       	ldi	r23, 0x03	; 3
    3870:	8e e4       	ldi	r24, 0x4E	; 78
    3872:	93 e0       	ldi	r25, 0x03	; 3
    3874:	0e 94 a3 24 	call	0x4946	; 0x4946 <lora_driver_setOtaaIdentity>
    3878:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_mapReturnCodeToText>
    387c:	9f 93       	push	r25
    387e:	8f 93       	push	r24
    3880:	1f 93       	push	r17
    3882:	0f 93       	push	r16
    3884:	8d e2       	ldi	r24, 0x2D	; 45
    3886:	93 e0       	ldi	r25, 0x03	; 3
    3888:	9f 93       	push	r25
    388a:	8f 93       	push	r24
    388c:	8e e4       	ldi	r24, 0x4E	; 78
    388e:	93 e0       	ldi	r25, 0x03	; 3
    3890:	9f 93       	push	r25
    3892:	8f 93       	push	r24
    3894:	8f e5       	ldi	r24, 0x5F	; 95
    3896:	93 e0       	ldi	r25, 0x03	; 3
    3898:	9f 93       	push	r25
    389a:	8f 93       	push	r24
    389c:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    38a0:	57 d6       	rcall	.+3246   	; 0x4550 <lora_driver_saveMac>
    38a2:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_mapReturnCodeToText>
    38a6:	9f 93       	push	r25
    38a8:	8f 93       	push	r24
    38aa:	85 e9       	ldi	r24, 0x95	; 149
    38ac:	93 e0       	ldi	r25, 0x03	; 3
    38ae:	9f 93       	push	r25
    38b0:	8f 93       	push	r24
    38b2:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    38b6:	0f b6       	in	r0, 0x3f	; 63
    38b8:	f8 94       	cli
    38ba:	de bf       	out	0x3e, r29	; 62
    38bc:	0f be       	out	0x3f, r0	; 63
    38be:	cd bf       	out	0x3d, r28	; 61
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	40 d7       	rcall	.+3712   	; 0x4744 <lora_driver_setAdaptiveDataRate>
    38c4:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_mapReturnCodeToText>
    38c8:	9f 93       	push	r25
    38ca:	8f 93       	push	r24
    38cc:	84 ea       	ldi	r24, 0xA4	; 164
    38ce:	93 e0       	ldi	r25, 0x03	; 3
    38d0:	9f 93       	push	r25
    38d2:	8f 93       	push	r24
    38d4:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    38d8:	84 ef       	ldi	r24, 0xF4	; 244
    38da:	91 e0       	ldi	r25, 0x01	; 1
    38dc:	3e d7       	rcall	.+3708   	; 0x475a <lora_driver_setReceiveDelay>
    38de:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_mapReturnCodeToText>
    38e2:	9f 93       	push	r25
    38e4:	8f 93       	push	r24
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	8f 93       	push	r24
    38ea:	84 ef       	ldi	r24, 0xF4	; 244
    38ec:	8f 93       	push	r24
    38ee:	85 ec       	ldi	r24, 0xC5	; 197
    38f0:	93 e0       	ldi	r25, 0x03	; 3
    38f2:	9f 93       	push	r25
    38f4:	8f 93       	push	r24
    38f6:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>
    38fa:	0f b6       	in	r0, 0x3f	; 63
    38fc:	f8 94       	cli
    38fe:	de bf       	out	0x3e, r29	; 62
    3900:	0f be       	out	0x3f, r0	; 63
    3902:	cd bf       	out	0x3d, r28	; 61
    3904:	0a e0       	ldi	r16, 0x0A	; 10
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3906:	10 e0       	ldi	r17, 0x00	; 0
    3908:	0f 2e       	mov	r0, r31
    390a:	f5 ee       	ldi	r31, 0xE5	; 229
    390c:	ef 2e       	mov	r14, r31
    390e:	f3 e0       	ldi	r31, 0x03	; 3
    3910:	ff 2e       	mov	r15, r31

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3912:	f0 2d       	mov	r31, r0
    3914:	80 e0       	ldi	r24, 0x00	; 0
    3916:	22 d6       	rcall	.+3140   	; 0x455c <lora_driver_join>
    3918:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    391a:	0e 94 c4 24 	call	0x4988	; 0x4988 <lora_driver_mapReturnCodeToText>
    391e:	9f 93       	push	r25
    3920:	8f 93       	push	r24
    3922:	1f 93       	push	r17
    3924:	0f 93       	push	r16
    3926:	ff 92       	push	r15
    3928:	ef 92       	push	r14
    392a:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>

		if ( rc != LORA_ACCEPTED)
    392e:	0f 90       	pop	r0
    3930:	0f 90       	pop	r0
    3932:	0f 90       	pop	r0
    3934:	0f 90       	pop	r0
    3936:	0f 90       	pop	r0
    3938:	0f 90       	pop	r0
    393a:	f8 e0       	ldi	r31, 0x08	; 8
    393c:	df 16       	cp	r13, r31
    393e:	c1 f1       	breq	.+112    	; 0x39b0 <lora_handler_task+0x1ec>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3940:	80 e0       	ldi	r24, 0x00	; 0
    3942:	0e 94 c4 2c 	call	0x5988	; 0x5988 <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3946:	66 e3       	ldi	r22, 0x36	; 54
    3948:	71 e0       	ldi	r23, 0x01	; 1
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <vTaskDelay>
    3952:	01 50       	subi	r16, 0x01	; 1
    3954:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3956:	f1 f6       	brne	.-68     	; 0x3914 <lora_handler_task+0x150>
    3958:	24 c0       	rjmp	.+72     	; 0x39a2 <lora_handler_task+0x1de>
		status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    395a:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    395e:	fd cf       	rjmp	.-6      	; 0x395a <lora_handler_task+0x196>
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3960:	48 ea       	ldi	r20, 0xA8	; 168
    3962:	58 e4       	ldi	r21, 0x48	; 72
    3964:	60 e0       	ldi	r22, 0x00	; 0
    3966:	70 e0       	ldi	r23, 0x00	; 0
    3968:	ce 01       	movw	r24, r28
    396a:	01 96       	adiw	r24, 0x01	; 1
    396c:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    3970:	f8 01       	movw	r30, r16
		_uplink_payload.bytes[1] = hum & 0xFF;
		_uplink_payload.bytes[2] = temp >> 8;
    3972:	82 82       	std	Z+2, r8	; 0x02
		_uplink_payload.bytes[3] = temp & 0xFF;
    3974:	93 82       	std	Z+3, r9	; 0x03
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    3976:	a4 82       	std	Z+4, r10	; 0x04
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    3978:	b5 82       	std	Z+5, r11	; 0x05

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    397a:	c6 82       	std	Z+6, r12	; 0x06
    397c:	d7 82       	std	Z+7, r13	; 0x07
    397e:	83 e0       	ldi	r24, 0x03	; 3
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3980:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <status_leds_shortPuls>
    3984:	b8 01       	movw	r22, r16
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	12 d6       	rcall	.+3108   	; 0x45ae <lora_driver_sendUploadMessage>
    398a:	fe d7       	rcall	.+4092   	; 0x4988 <lora_driver_mapReturnCodeToText>
    398c:	9f 93       	push	r25
    398e:	8f 93       	push	r24
    3990:	ff 92       	push	r15
    3992:	ef 92       	push	r14
    3994:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>
    3998:	0f 90       	pop	r0
    399a:	0f 90       	pop	r0
    399c:	0f 90       	pop	r0
    399e:	0f 90       	pop	r0
    39a0:	df cf       	rjmp	.-66     	; 0x3960 <lora_handler_task+0x19c>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    39a2:	81 e0       	ldi	r24, 0x01	; 1
    39a4:	0e 94 b5 2c 	call	0x596a	; 0x596a <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    39a8:	80 e0       	ldi	r24, 0x00	; 0
    39aa:	0e 94 83 2c 	call	0x5906	; 0x5906 <status_leds_fastBlink>
    39ae:	d5 cf       	rjmp	.-86     	; 0x395a <lora_handler_task+0x196>

	if (rc == LORA_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    39b0:	81 e0       	ldi	r24, 0x01	; 1
    39b2:	0e 94 a6 2c 	call	0x594c	; 0x594c <status_leds_ledOn>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
    39b6:	ed ee       	ldi	r30, 0xED	; 237
    39b8:	f5 e1       	ldi	r31, 0x15	; 21
    39ba:	86 e0       	ldi	r24, 0x06	; 6
    39bc:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    39be:	82 e0       	ldi	r24, 0x02	; 2
    39c0:	80 83       	st	Z, r24

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    39c2:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    39c6:	69 83       	std	Y+1, r22	; 0x01
    39c8:	7a 83       	std	Y+2, r23	; 0x02
    39ca:	8b 83       	std	Y+3, r24	; 0x03
    39cc:	9c 83       	std	Y+4, r25	; 0x04
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    39ce:	0d ee       	ldi	r16, 0xED	; 237
    39d0:	15 e1       	ldi	r17, 0x15	; 21
    39d2:	0f 2e       	mov	r0, r31
    39d4:	f0 e3       	ldi	r31, 0x30	; 48
    39d6:	8f 2e       	mov	r8, r31
    39d8:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
    39da:	0f 2e       	mov	r0, r31
    39dc:	f9 e3       	ldi	r31, 0x39	; 57
    39de:	9f 2e       	mov	r9, r31
    39e0:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
    39e2:	68 94       	set
    39e4:	aa 24       	eor	r10, r10
    39e6:	a1 f8       	bld	r10, 1
		_uplink_payload.bytes[3] = temp & 0xFF;
    39e8:	0f 2e       	mov	r0, r31
    39ea:	f3 ea       	ldi	r31, 0xA3	; 163
    39ec:	bf 2e       	mov	r11, r31
    39ee:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    39f0:	68 94       	set
    39f2:	cc 24       	eor	r12, r12
    39f4:	c2 f8       	bld	r12, 2
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    39f6:	0f 2e       	mov	r0, r31
    39f8:	fa e1       	ldi	r31, 0x1A	; 26
    39fa:	df 2e       	mov	r13, r31
    39fc:	f0 2d       	mov	r31, r0

		status_leds_shortPuls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    39fe:	0f 2e       	mov	r0, r31
    3a00:	f5 e0       	ldi	r31, 0x05	; 5
    3a02:	ef 2e       	mov	r14, r31
    3a04:	f4 e0       	ldi	r31, 0x04	; 4
    3a06:	ff 2e       	mov	r15, r31
    3a08:	f0 2d       	mov	r31, r0
    3a0a:	aa cf       	rjmp	.-172    	; 0x3960 <lora_handler_task+0x19c>

00003a0c <lora_handler_initialise>:
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3a0c:	ef 92       	push	r14
    3a0e:	ff 92       	push	r15
    3a10:	0f 93       	push	r16
	xTaskCreate(
    3a12:	e1 2c       	mov	r14, r1
    3a14:	f1 2c       	mov	r15, r1
    3a16:	08 2f       	mov	r16, r24
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	48 e8       	ldi	r20, 0x88	; 136
    3a1e:	51 e0       	ldi	r21, 0x01	; 1
    3a20:	6a e1       	ldi	r22, 0x1A	; 26
    3a22:	74 e0       	ldi	r23, 0x04	; 4
    3a24:	82 ee       	ldi	r24, 0xE2	; 226
    3a26:	9b e1       	ldi	r25, 0x1B	; 27
    3a28:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3a2c:	0f 91       	pop	r16
    3a2e:	ff 90       	pop	r15
    3a30:	ef 90       	pop	r14
    3a32:	08 95       	ret

00003a34 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    3a34:	0f 93       	push	r16
    // Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
    // because it is sharing a resource, such as the Serial port.
    // Semaphores should only be used whilst the scheduler is running, but we can set it up here.
    if (xTestSemaphore == NULL) // Check to confirm that the Semaphore has not already been created.
    3a36:	80 91 79 17 	lds	r24, 0x1779	; 0x801779 <xTestSemaphore>
    3a3a:	90 91 7a 17 	lds	r25, 0x177A	; 0x80177a <xTestSemaphore+0x1>
    3a3e:	89 2b       	or	r24, r25
    3a40:	89 f4       	brne	.+34     	; 0x3a64 <create_tasks_and_semaphores+0x30>
    {
        xTestSemaphore = xSemaphoreCreateMutex(); // Create a mutex semaphore.
    3a42:	81 e0       	ldi	r24, 0x01	; 1
    3a44:	0e 94 25 07 	call	0xe4a	; 0xe4a <xQueueCreateMutex>
    3a48:	90 93 7a 17 	sts	0x177A, r25	; 0x80177a <xTestSemaphore+0x1>
    3a4c:	80 93 79 17 	sts	0x1779, r24	; 0x801779 <xTestSemaphore>
        if ((xTestSemaphore) != NULL)
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	41 f0       	breq	.+16     	; 0x3a64 <create_tasks_and_semaphores+0x30>
        {
            xSemaphoreGive((xTestSemaphore)); // Make the mutex available for use, by initially "Giving" the Semaphore.
    3a54:	00 e0       	ldi	r16, 0x00	; 0
    3a56:	20 e0       	ldi	r18, 0x00	; 0
    3a58:	30 e0       	ldi	r19, 0x00	; 0
    3a5a:	a9 01       	movw	r20, r18
    3a5c:	60 e0       	ldi	r22, 0x00	; 0
    3a5e:	70 e0       	ldi	r23, 0x00	; 0
    3a60:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
        }
    }

    comm_vTaskCreate();
    3a64:	b4 dc       	rcall	.-1688   	; 0x33ce <comm_vTaskCreate>
	initialise();
    3a66:	6d de       	rcall	.-806    	; 0x3742 <initialise>
    3a68:	0f 91       	pop	r16
}
    3a6a:	08 95       	ret

00003a6c <initialiseDrivers>:
    3a6c:	34 d3       	rcall	.+1640   	; 0x40d6 <hih8120_initialise>
        // Driver initialised OK
        // Always check what hih8120_initialise() returns
    }

    // // MH-Z19 initialization (default USART port is USART3)
    mh_z19_initialise(ser_USART3);
    3a6e:	83 e0       	ldi	r24, 0x03	; 3
    3a70:	0c 94 a0 25 	jmp	0x4b40	; 0x4b40 <mh_z19_initialise>
    3a74:	08 95       	ret

00003a76 <initialiseSystem>:
/*-----------------------------------------------------------*/

void initialiseSystem()
{
    // Set output ports for leds used in the example
    DDRA |= _BV(DDA0) | _BV(DDA7);
    3a76:	81 b1       	in	r24, 0x01	; 1
    3a78:	81 68       	ori	r24, 0x81	; 129
    3a7a:	81 b9       	out	0x01, r24	; 1

    // initialise trace driver
    trace_init();
    3a7c:	0e 94 69 02 	call	0x4d2	; 0x4d2 <trace_init>

    // Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
    stdio_initialise(ser_USART0);
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	0e 94 c2 29 	call	0x5384	; 0x5384 <stdio_initialise>
    // Let's create some tasks

    // initialiseDrivers - handles driver initailazation for modules HIH8120, MH-Z19
    initialiseDrivers();
    3a86:	f2 df       	rcall	.-28     	; 0x3a6c <initialiseDrivers>

    create_tasks_and_semaphores();
    3a88:	d5 df       	rcall	.-86     	; 0x3a34 <create_tasks_and_semaphores>
    3a8a:	83 e3       	ldi	r24, 0x33	; 51

    // vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    // Status Leds driver
    status_leds_initialise(51); // Priority 5 for internal task
    3a8c:	0e 94 12 2c 	call	0x5824	; 0x5824 <status_leds_initialise>
    3a90:	41 e0       	ldi	r20, 0x01	; 1
    // Initialise the LoRaWAN driver with down-link buffer
    downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t) * 2); // Here I make room for two downlink messages in the message buffer
    3a92:	60 e0       	ldi	r22, 0x00	; 0
    3a94:	70 e0       	ldi	r23, 0x00	; 0
    3a96:	8c e2       	ldi	r24, 0x2C	; 44
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <xStreamBufferGenericCreate>
    3a9e:	90 93 76 17 	sts	0x1776, r25	; 0x801776 <downLinkMessageBufferHandle+0x1>
    3aa2:	80 93 75 17 	sts	0x1775, r24	; 0x801775 <downLinkMessageBufferHandle>
    3aa6:	bc 01       	movw	r22, r24
    lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);                       // The parameter is the USART port the RN2483 module is connected to - in this case USART1 - here no message buffer for down-link messages are defined
    3aa8:	81 e0       	ldi	r24, 0x01	; 1
    3aaa:	a3 d4       	rcall	.+2374   	; 0x43f2 <lora_driver_initialise>
    // Create LoRaWAN task and start it up with priority 3
    lora_handler_initialise(50);
    3aac:	82 e3       	ldi	r24, 0x32	; 50
    3aae:	ae cf       	rjmp	.-164    	; 0x3a0c <lora_handler_initialise>
    3ab0:	08 95       	ret

00003ab2 <main>:
    3ab2:	e1 df       	rcall	.-62     	; 0x3a76 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
    initialiseSystem(); // Must be done as the very first thing!!
    printf("Program started!!\n");
    3ab4:	81 e2       	ldi	r24, 0x21	; 33
    3ab6:	94 e0       	ldi	r25, 0x04	; 4
    3ab8:	0e 94 cc 31 	call	0x6398	; 0x6398 <puts>
    vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3abc:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <vTaskStartScheduler>
    3ac0:	ff cf       	rjmp	.-2      	; 0x3ac0 <main+0xe>

00003ac2 <sensor_wakeUp>:

#include "../Headers/SensorReading.h"

void sensor_wakeUp(void)
{
    hih8120_driverReturnCode_t wake_rc = hih8120_wakeup();
    3ac2:	24 d3       	rcall	.+1608   	; 0x410c <hih8120_wakeup>

    printf("HIH8120 Wake up status: %c\n", (char)wake_rc);
    3ac4:	1f 92       	push	r1
    3ac6:	8f 93       	push	r24
    3ac8:	83 e3       	ldi	r24, 0x33	; 51
    3aca:	94 e0       	ldi	r25, 0x04	; 4
    3acc:	9f 93       	push	r25
    3ace:	8f 93       	push	r24
    3ad0:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>
}
    3ad4:	0f 90       	pop	r0
    3ad6:	0f 90       	pop	r0
    3ad8:	0f 90       	pop	r0
    3ada:	0f 90       	pop	r0
    3adc:	08 95       	ret

00003ade <sensor_getTemp>:

float sensor_getTemp(void){
	sensor_wakeUp();
    3ade:	f1 df       	rcall	.-30     	; 0x3ac2 <sensor_wakeUp>
    3ae0:	2f ef       	ldi	r18, 0xFF	; 255
    3ae2:	8d ee       	ldi	r24, 0xED	; 237
    3ae4:	92 e0       	ldi	r25, 0x02	; 2
    3ae6:	21 50       	subi	r18, 0x01	; 1
    3ae8:	80 40       	sbci	r24, 0x00	; 0
    3aea:	90 40       	sbci	r25, 0x00	; 0
    3aec:	e1 f7       	brne	.-8      	; 0x3ae6 <sensor_getTemp+0x8>
    3aee:	00 c0       	rjmp	.+0      	; 0x3af0 <sensor_getTemp+0x12>

	_delay_ms(60);

	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
    3af0:	00 00       	nop
    3af2:	21 d3       	rcall	.+1602   	; 0x4136 <hih8120_measure>

	 while (!(hih8120_isReady())) {
    3af4:	09 c0       	rjmp	.+18     	; 0x3b08 <sensor_getTemp+0x2a>
    3af6:	2f ef       	ldi	r18, 0xFF	; 255
    3af8:	8d ee       	ldi	r24, 0xED	; 237
    3afa:	92 e0       	ldi	r25, 0x02	; 2
    3afc:	21 50       	subi	r18, 0x01	; 1
    3afe:	80 40       	sbci	r24, 0x00	; 0
    3b00:	90 40       	sbci	r25, 0x00	; 0
    3b02:	e1 f7       	brne	.-8      	; 0x3afc <sensor_getTemp+0x1e>
    3b04:	00 c0       	rjmp	.+0      	; 0x3b06 <sensor_getTemp+0x28>
    3b06:	00 00       	nop
    3b08:	fe d2       	rcall	.+1532   	; 0x4106 <hih8120_isReady>
    3b0a:	88 23       	and	r24, r24

		 _delay_ms(60);
	 }
	 return( hih8120_getTemperature());
    3b0c:	a1 f3       	breq	.-24     	; 0x3af6 <sensor_getTemp+0x18>
    3b0e:	38 c3       	rjmp	.+1648   	; 0x4180 <hih8120_getTemperature>
}
    3b10:	08 95       	ret

00003b12 <sensor_getHum>:


float sensor_getHum(void){

	sensor_wakeUp();
    3b12:	d7 df       	rcall	.-82     	; 0x3ac2 <sensor_wakeUp>
    3b14:	2f ef       	ldi	r18, 0xFF	; 255
    3b16:	8d ee       	ldi	r24, 0xED	; 237
    3b18:	92 e0       	ldi	r25, 0x02	; 2
    3b1a:	21 50       	subi	r18, 0x01	; 1
    3b1c:	80 40       	sbci	r24, 0x00	; 0
    3b1e:	90 40       	sbci	r25, 0x00	; 0
    3b20:	e1 f7       	brne	.-8      	; 0x3b1a <sensor_getHum+0x8>
    3b22:	00 c0       	rjmp	.+0      	; 0x3b24 <sensor_getHum+0x12>

	_delay_ms(60);

	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
    3b24:	00 00       	nop
    3b26:	07 d3       	rcall	.+1550   	; 0x4136 <hih8120_measure>

	while (!(hih8120_isReady())) {
    3b28:	09 c0       	rjmp	.+18     	; 0x3b3c <sensor_getHum+0x2a>
    3b2a:	2f ef       	ldi	r18, 0xFF	; 255
    3b2c:	8d ee       	ldi	r24, 0xED	; 237
    3b2e:	92 e0       	ldi	r25, 0x02	; 2
    3b30:	21 50       	subi	r18, 0x01	; 1
    3b32:	80 40       	sbci	r24, 0x00	; 0
    3b34:	90 40       	sbci	r25, 0x00	; 0
    3b36:	e1 f7       	brne	.-8      	; 0x3b30 <sensor_getHum+0x1e>
    3b38:	00 c0       	rjmp	.+0      	; 0x3b3a <sensor_getHum+0x28>
    3b3a:	00 00       	nop
    3b3c:	e4 d2       	rcall	.+1480   	; 0x4106 <hih8120_isReady>
    3b3e:	88 23       	and	r24, r24

		_delay_ms(60);
	}
	return( hih8120_getHumidity());
    3b40:	a1 f3       	breq	.-24     	; 0x3b2a <sensor_getHum+0x18>
    3b42:	0a c3       	rjmp	.+1556   	; 0x4158 <hih8120_getHumidity>
}
    3b44:	08 95       	ret

00003b46 <sensor_getCo2>:

float sensor_getCo2(void){
    3b46:	cf 93       	push	r28
    3b48:	df 93       	push	r29
    3b4a:	1f 92       	push	r1
    3b4c:	1f 92       	push	r1
    3b4e:	cd b7       	in	r28, 0x3d	; 61
    3b50:	de b7       	in	r29, 0x3e	; 62
	
	mh_z19_returnCode_t co2_rc = mh_z19_takeMeassuring();
    3b52:	0e 94 c5 25 	call	0x4b8a	; 0x4b8a <mh_z19_takeMeassuring>

	printf("MH_Z19 Measure status: %c\n", co2_rc);
    3b56:	1f 92       	push	r1
    3b58:	8f 93       	push	r24
    3b5a:	8f e4       	ldi	r24, 0x4F	; 79
    3b5c:	94 e0       	ldi	r25, 0x04	; 4
    3b5e:	9f 93       	push	r25
    3b60:	8f 93       	push	r24
    3b62:	0e 94 b9 31 	call	0x6372	; 0x6372 <printf>

	uint16_t ppm;
	mh_z19_getCo2Ppm(&ppm);
    3b66:	ce 01       	movw	r24, r28
    3b68:	01 96       	adiw	r24, 0x01	; 1
    3b6a:	0e 94 f4 25 	call	0x4be8	; 0x4be8 <mh_z19_getCo2Ppm>
	  
	return (float)ppm;
    3b6e:	69 81       	ldd	r22, Y+1	; 0x01
    3b70:	7a 81       	ldd	r23, Y+2	; 0x02
    3b72:	80 e0       	ldi	r24, 0x00	; 0
    3b74:	90 e0       	ldi	r25, 0x00	; 0
    3b76:	d0 d0       	rcall	.+416    	; 0x3d18 <__floatunsisf>
}
    3b78:	0f 90       	pop	r0
    3b7a:	0f 90       	pop	r0
    3b7c:	0f 90       	pop	r0
    3b7e:	0f 90       	pop	r0
    3b80:	0f 90       	pop	r0
    3b82:	0f 90       	pop	r0
    3b84:	df 91       	pop	r29
    3b86:	cf 91       	pop	r28
    3b88:	08 95       	ret

00003b8a <validateDownlink>:
void initialise() {
    currentID = 0;
}
*/

int validateDownlink(float hum_lower, float hum_upper, float co2_lower, float co2_upper, float temp_lower, float temp_upper, float id) {
    3b8a:	4f 92       	push	r4
    3b8c:	5f 92       	push	r5
    3b8e:	6f 92       	push	r6
    3b90:	7f 92       	push	r7
    3b92:	af 92       	push	r10
    3b94:	bf 92       	push	r11
    3b96:	cf 92       	push	r12
    3b98:	df 92       	push	r13
    3b9a:	ef 92       	push	r14
    3b9c:	ff 92       	push	r15
    3b9e:	0f 93       	push	r16
    3ba0:	1f 93       	push	r17
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
    3ba6:	cd b7       	in	r28, 0x3d	; 61
    3ba8:	de b7       	in	r29, 0x3e	; 62
    3baa:	28 97       	sbiw	r28, 0x08	; 8
    3bac:	0f b6       	in	r0, 0x3f	; 63
    3bae:	f8 94       	cli
    3bb0:	de bf       	out	0x3e, r29	; 62
    3bb2:	0f be       	out	0x3f, r0	; 63
    3bb4:	cd bf       	out	0x3d, r28	; 61
    3bb6:	2b 01       	movw	r4, r22
    3bb8:	3c 01       	movw	r6, r24
    3bba:	29 83       	std	Y+1, r18	; 0x01
    3bbc:	3a 83       	std	Y+2, r19	; 0x02
    3bbe:	4b 83       	std	Y+3, r20	; 0x03
    3bc0:	5c 83       	std	Y+4, r21	; 0x04
    3bc2:	ed 82       	std	Y+5, r14	; 0x05
    3bc4:	fe 82       	std	Y+6, r15	; 0x06
    3bc6:	0f 83       	std	Y+7, r16	; 0x07
    3bc8:	18 87       	std	Y+8, r17	; 0x08

    // Checks the current ID against the saved ID.

    if (id == currentID) {
    3bca:	2a a1       	ldd	r18, Y+34	; 0x22
    3bcc:	3b a1       	ldd	r19, Y+35	; 0x23
    3bce:	4c a1       	ldd	r20, Y+36	; 0x24
    3bd0:	5d a1       	ldd	r21, Y+37	; 0x25
    3bd2:	60 91 87 17 	lds	r22, 0x1787	; 0x801787 <currentID>
    3bd6:	70 91 88 17 	lds	r23, 0x1788	; 0x801788 <currentID+0x1>
    3bda:	80 91 89 17 	lds	r24, 0x1789	; 0x801789 <currentID+0x2>
    3bde:	90 91 8a 17 	lds	r25, 0x178A	; 0x80178a <currentID+0x3>
    3be2:	6a d0       	rcall	.+212    	; 0x3cb8 <__cmpsf2>
    3be4:	88 23       	and	r24, r24
    3be6:	09 f4       	brne	.+2      	; 0x3bea <validateDownlink+0x60>
    3be8:	41 c0       	rjmp	.+130    	; 0x3c6c <validateDownlink+0xe2>
    }

    // Checks Humidity. Settings cannot go below 0, as that's impossible and 
    // not above 95 as the CO2 driver would not function in that envoirment.

    if (hum_lower < 0 || hum_upper > 95) {
    3bea:	20 e0       	ldi	r18, 0x00	; 0
    3bec:	30 e0       	ldi	r19, 0x00	; 0
    3bee:	a9 01       	movw	r20, r18
    3bf0:	c3 01       	movw	r24, r6
    3bf2:	b2 01       	movw	r22, r4
    3bf4:	61 d0       	rcall	.+194    	; 0x3cb8 <__cmpsf2>
    3bf6:	88 23       	and	r24, r24
    3bf8:	0c f4       	brge	.+2      	; 0x3bfc <validateDownlink+0x72>
    3bfa:	3b c0       	rjmp	.+118    	; 0x3c72 <validateDownlink+0xe8>
    3bfc:	20 e0       	ldi	r18, 0x00	; 0
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	4e eb       	ldi	r20, 0xBE	; 190
    3c02:	52 e4       	ldi	r21, 0x42	; 66
    3c04:	69 81       	ldd	r22, Y+1	; 0x01
    3c06:	7a 81       	ldd	r23, Y+2	; 0x02
    3c08:	8b 81       	ldd	r24, Y+3	; 0x03
    3c0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3c0c:	0f d1       	rcall	.+542    	; 0x3e2c <__gesf2>
    3c0e:	18 16       	cp	r1, r24
    3c10:	9c f1       	brlt	.+102    	; 0x3c78 <validateDownlink+0xee>
        return 0;
    }

    // The upper and lower limits here are dictated by what the sensor can read.

    if (co2_lower < 0 || co2_upper > 5000) {
    3c12:	20 e0       	ldi	r18, 0x00	; 0
    3c14:	30 e0       	ldi	r19, 0x00	; 0
    3c16:	a9 01       	movw	r20, r18
    3c18:	c8 01       	movw	r24, r16
    3c1a:	b7 01       	movw	r22, r14
    3c1c:	4d d0       	rcall	.+154    	; 0x3cb8 <__cmpsf2>
    3c1e:	88 23       	and	r24, r24
    3c20:	74 f1       	brlt	.+92     	; 0x3c7e <validateDownlink+0xf4>
    3c22:	20 e0       	ldi	r18, 0x00	; 0
    3c24:	30 e4       	ldi	r19, 0x40	; 64
    3c26:	4c e9       	ldi	r20, 0x9C	; 156
    3c28:	55 e4       	ldi	r21, 0x45	; 69
    3c2a:	c6 01       	movw	r24, r12
    3c2c:	b5 01       	movw	r22, r10
    3c2e:	fe d0       	rcall	.+508    	; 0x3e2c <__gesf2>
    3c30:	18 16       	cp	r1, r24
    3c32:	44 f1       	brlt	.+80     	; 0x3c84 <validateDownlink+0xfa>
    }

    // The lower limit is the lowest the sensor can read.
    // The upper limit is the max temperature the CO2 sensor can work in.

    if (temp_lower < -40 || temp_upper > 50) {
    3c34:	20 e0       	ldi	r18, 0x00	; 0
    3c36:	30 e0       	ldi	r19, 0x00	; 0
    3c38:	40 e2       	ldi	r20, 0x20	; 32
    3c3a:	52 ec       	ldi	r21, 0xC2	; 194
    3c3c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    3c3e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    3c40:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3c42:	9d 8d       	ldd	r25, Y+29	; 0x1d
    3c44:	39 d0       	rcall	.+114    	; 0x3cb8 <__cmpsf2>
    3c46:	88 23       	and	r24, r24
    3c48:	04 f1       	brlt	.+64     	; 0x3c8a <validateDownlink+0x100>
int validateDownlink(float hum_lower, float hum_upper, float co2_lower, float co2_upper, float temp_lower, float temp_upper, float id) {

    // Checks the current ID against the saved ID.

    if (id == currentID) {
        return 0;
    3c4a:	11 e0       	ldi	r17, 0x01	; 1
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	30 e0       	ldi	r19, 0x00	; 0
    3c50:	48 e4       	ldi	r20, 0x48	; 72
    3c52:	52 e4       	ldi	r21, 0x42	; 66
    3c54:	6e 8d       	ldd	r22, Y+30	; 0x1e
    3c56:	7f 8d       	ldd	r23, Y+31	; 0x1f
    3c58:	88 a1       	ldd	r24, Y+32	; 0x20
    3c5a:	99 a1       	ldd	r25, Y+33	; 0x21
    3c5c:	e7 d0       	rcall	.+462    	; 0x3e2c <__gesf2>
    3c5e:	18 16       	cp	r1, r24
    3c60:	0c f0       	brlt	.+2      	; 0x3c64 <validateDownlink+0xda>
    3c62:	10 e0       	ldi	r17, 0x00	; 0
    3c64:	81 e0       	ldi	r24, 0x01	; 1
    3c66:	81 27       	eor	r24, r17
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	11 c0       	rjmp	.+34     	; 0x3c8e <validateDownlink+0x104>
    3c6c:	80 e0       	ldi	r24, 0x00	; 0
    3c6e:	90 e0       	ldi	r25, 0x00	; 0
    3c70:	0e c0       	rjmp	.+28     	; 0x3c8e <validateDownlink+0x104>

    // Checks Humidity. Settings cannot go below 0, as that's impossible and 
    // not above 95 as the CO2 driver would not function in that envoirment.

    if (hum_lower < 0 || hum_upper > 95) {
        return 0;
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	0b c0       	rjmp	.+22     	; 0x3c8e <validateDownlink+0x104>
    3c78:	80 e0       	ldi	r24, 0x00	; 0
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	08 c0       	rjmp	.+16     	; 0x3c8e <validateDownlink+0x104>
    }

    // The upper and lower limits here are dictated by what the sensor can read.

    if (co2_lower < 0 || co2_upper > 5000) {
        return 0;
    3c7e:	80 e0       	ldi	r24, 0x00	; 0
    3c80:	90 e0       	ldi	r25, 0x00	; 0
    3c82:	05 c0       	rjmp	.+10     	; 0x3c8e <validateDownlink+0x104>
    3c84:	80 e0       	ldi	r24, 0x00	; 0
    3c86:	90 e0       	ldi	r25, 0x00	; 0
    3c88:	02 c0       	rjmp	.+4      	; 0x3c8e <validateDownlink+0x104>

    // The lower limit is the lowest the sensor can read.
    // The upper limit is the max temperature the CO2 sensor can work in.

    if (temp_lower < -40 || temp_upper > 50) {
        return 0;
    3c8a:	80 e0       	ldi	r24, 0x00	; 0
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    }

    return 1;
    3c8e:	28 96       	adiw	r28, 0x08	; 8
    3c90:	0f b6       	in	r0, 0x3f	; 63
    3c92:	f8 94       	cli
    3c94:	de bf       	out	0x3e, r29	; 62
    3c96:	0f be       	out	0x3f, r0	; 63
    3c98:	cd bf       	out	0x3d, r28	; 61
    3c9a:	df 91       	pop	r29
    3c9c:	cf 91       	pop	r28
    3c9e:	1f 91       	pop	r17
    3ca0:	0f 91       	pop	r16
    3ca2:	ff 90       	pop	r15
    3ca4:	ef 90       	pop	r14
    3ca6:	df 90       	pop	r13
    3ca8:	cf 90       	pop	r12
    3caa:	bf 90       	pop	r11
    3cac:	af 90       	pop	r10
    3cae:	7f 90       	pop	r7
    3cb0:	6f 90       	pop	r6
    3cb2:	5f 90       	pop	r5
    3cb4:	4f 90       	pop	r4
    3cb6:	08 95       	ret

00003cb8 <__cmpsf2>:
    3cb8:	6c d0       	rcall	.+216    	; 0x3d92 <__fp_cmp>
    3cba:	08 f4       	brcc	.+2      	; 0x3cbe <__cmpsf2+0x6>
    3cbc:	81 e0       	ldi	r24, 0x01	; 1
    3cbe:	08 95       	ret

00003cc0 <__fixunssfsi>:
    3cc0:	94 d0       	rcall	.+296    	; 0x3dea <__fp_splitA>
    3cc2:	88 f0       	brcs	.+34     	; 0x3ce6 <__fixunssfsi+0x26>
    3cc4:	9f 57       	subi	r25, 0x7F	; 127
    3cc6:	90 f0       	brcs	.+36     	; 0x3cec <__fixunssfsi+0x2c>
    3cc8:	b9 2f       	mov	r27, r25
    3cca:	99 27       	eor	r25, r25
    3ccc:	b7 51       	subi	r27, 0x17	; 23
    3cce:	a0 f0       	brcs	.+40     	; 0x3cf8 <__fixunssfsi+0x38>
    3cd0:	d1 f0       	breq	.+52     	; 0x3d06 <__fixunssfsi+0x46>
    3cd2:	66 0f       	add	r22, r22
    3cd4:	77 1f       	adc	r23, r23
    3cd6:	88 1f       	adc	r24, r24
    3cd8:	99 1f       	adc	r25, r25
    3cda:	1a f0       	brmi	.+6      	; 0x3ce2 <__fixunssfsi+0x22>
    3cdc:	ba 95       	dec	r27
    3cde:	c9 f7       	brne	.-14     	; 0x3cd2 <__fixunssfsi+0x12>
    3ce0:	12 c0       	rjmp	.+36     	; 0x3d06 <__fixunssfsi+0x46>
    3ce2:	b1 30       	cpi	r27, 0x01	; 1
    3ce4:	81 f0       	breq	.+32     	; 0x3d06 <__fixunssfsi+0x46>
    3ce6:	9b d0       	rcall	.+310    	; 0x3e1e <__fp_zero>
    3ce8:	b1 e0       	ldi	r27, 0x01	; 1
    3cea:	08 95       	ret
    3cec:	98 c0       	rjmp	.+304    	; 0x3e1e <__fp_zero>
    3cee:	67 2f       	mov	r22, r23
    3cf0:	78 2f       	mov	r23, r24
    3cf2:	88 27       	eor	r24, r24
    3cf4:	b8 5f       	subi	r27, 0xF8	; 248
    3cf6:	39 f0       	breq	.+14     	; 0x3d06 <__fixunssfsi+0x46>
    3cf8:	b9 3f       	cpi	r27, 0xF9	; 249
    3cfa:	cc f3       	brlt	.-14     	; 0x3cee <__fixunssfsi+0x2e>
    3cfc:	86 95       	lsr	r24
    3cfe:	77 95       	ror	r23
    3d00:	67 95       	ror	r22
    3d02:	b3 95       	inc	r27
    3d04:	d9 f7       	brne	.-10     	; 0x3cfc <__fixunssfsi+0x3c>
    3d06:	3e f4       	brtc	.+14     	; 0x3d16 <__fixunssfsi+0x56>
    3d08:	90 95       	com	r25
    3d0a:	80 95       	com	r24
    3d0c:	70 95       	com	r23
    3d0e:	61 95       	neg	r22
    3d10:	7f 4f       	sbci	r23, 0xFF	; 255
    3d12:	8f 4f       	sbci	r24, 0xFF	; 255
    3d14:	9f 4f       	sbci	r25, 0xFF	; 255
    3d16:	08 95       	ret

00003d18 <__floatunsisf>:
    3d18:	e8 94       	clt
    3d1a:	09 c0       	rjmp	.+18     	; 0x3d2e <__floatsisf+0x12>

00003d1c <__floatsisf>:
    3d1c:	97 fb       	bst	r25, 7
    3d1e:	3e f4       	brtc	.+14     	; 0x3d2e <__floatsisf+0x12>
    3d20:	90 95       	com	r25
    3d22:	80 95       	com	r24
    3d24:	70 95       	com	r23
    3d26:	61 95       	neg	r22
    3d28:	7f 4f       	sbci	r23, 0xFF	; 255
    3d2a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d2c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d2e:	99 23       	and	r25, r25
    3d30:	a9 f0       	breq	.+42     	; 0x3d5c <__floatsisf+0x40>
    3d32:	f9 2f       	mov	r31, r25
    3d34:	96 e9       	ldi	r25, 0x96	; 150
    3d36:	bb 27       	eor	r27, r27
    3d38:	93 95       	inc	r25
    3d3a:	f6 95       	lsr	r31
    3d3c:	87 95       	ror	r24
    3d3e:	77 95       	ror	r23
    3d40:	67 95       	ror	r22
    3d42:	b7 95       	ror	r27
    3d44:	f1 11       	cpse	r31, r1
    3d46:	f8 cf       	rjmp	.-16     	; 0x3d38 <__floatsisf+0x1c>
    3d48:	fa f4       	brpl	.+62     	; 0x3d88 <__floatsisf+0x6c>
    3d4a:	bb 0f       	add	r27, r27
    3d4c:	11 f4       	brne	.+4      	; 0x3d52 <__floatsisf+0x36>
    3d4e:	60 ff       	sbrs	r22, 0
    3d50:	1b c0       	rjmp	.+54     	; 0x3d88 <__floatsisf+0x6c>
    3d52:	6f 5f       	subi	r22, 0xFF	; 255
    3d54:	7f 4f       	sbci	r23, 0xFF	; 255
    3d56:	8f 4f       	sbci	r24, 0xFF	; 255
    3d58:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5a:	16 c0       	rjmp	.+44     	; 0x3d88 <__floatsisf+0x6c>
    3d5c:	88 23       	and	r24, r24
    3d5e:	11 f0       	breq	.+4      	; 0x3d64 <__floatsisf+0x48>
    3d60:	96 e9       	ldi	r25, 0x96	; 150
    3d62:	11 c0       	rjmp	.+34     	; 0x3d86 <__floatsisf+0x6a>
    3d64:	77 23       	and	r23, r23
    3d66:	21 f0       	breq	.+8      	; 0x3d70 <__floatsisf+0x54>
    3d68:	9e e8       	ldi	r25, 0x8E	; 142
    3d6a:	87 2f       	mov	r24, r23
    3d6c:	76 2f       	mov	r23, r22
    3d6e:	05 c0       	rjmp	.+10     	; 0x3d7a <__floatsisf+0x5e>
    3d70:	66 23       	and	r22, r22
    3d72:	71 f0       	breq	.+28     	; 0x3d90 <__floatsisf+0x74>
    3d74:	96 e8       	ldi	r25, 0x86	; 134
    3d76:	86 2f       	mov	r24, r22
    3d78:	70 e0       	ldi	r23, 0x00	; 0
    3d7a:	60 e0       	ldi	r22, 0x00	; 0
    3d7c:	2a f0       	brmi	.+10     	; 0x3d88 <__floatsisf+0x6c>
    3d7e:	9a 95       	dec	r25
    3d80:	66 0f       	add	r22, r22
    3d82:	77 1f       	adc	r23, r23
    3d84:	88 1f       	adc	r24, r24
    3d86:	da f7       	brpl	.-10     	; 0x3d7e <__floatsisf+0x62>
    3d88:	88 0f       	add	r24, r24
    3d8a:	96 95       	lsr	r25
    3d8c:	87 95       	ror	r24
    3d8e:	97 f9       	bld	r25, 7
    3d90:	08 95       	ret

00003d92 <__fp_cmp>:
    3d92:	99 0f       	add	r25, r25
    3d94:	00 08       	sbc	r0, r0
    3d96:	55 0f       	add	r21, r21
    3d98:	aa 0b       	sbc	r26, r26
    3d9a:	e0 e8       	ldi	r30, 0x80	; 128
    3d9c:	fe ef       	ldi	r31, 0xFE	; 254
    3d9e:	16 16       	cp	r1, r22
    3da0:	17 06       	cpc	r1, r23
    3da2:	e8 07       	cpc	r30, r24
    3da4:	f9 07       	cpc	r31, r25
    3da6:	c0 f0       	brcs	.+48     	; 0x3dd8 <__fp_cmp+0x46>
    3da8:	12 16       	cp	r1, r18
    3daa:	13 06       	cpc	r1, r19
    3dac:	e4 07       	cpc	r30, r20
    3dae:	f5 07       	cpc	r31, r21
    3db0:	98 f0       	brcs	.+38     	; 0x3dd8 <__fp_cmp+0x46>
    3db2:	62 1b       	sub	r22, r18
    3db4:	73 0b       	sbc	r23, r19
    3db6:	84 0b       	sbc	r24, r20
    3db8:	95 0b       	sbc	r25, r21
    3dba:	39 f4       	brne	.+14     	; 0x3dca <__fp_cmp+0x38>
    3dbc:	0a 26       	eor	r0, r26
    3dbe:	61 f0       	breq	.+24     	; 0x3dd8 <__fp_cmp+0x46>
    3dc0:	23 2b       	or	r18, r19
    3dc2:	24 2b       	or	r18, r20
    3dc4:	25 2b       	or	r18, r21
    3dc6:	21 f4       	brne	.+8      	; 0x3dd0 <__fp_cmp+0x3e>
    3dc8:	08 95       	ret
    3dca:	0a 26       	eor	r0, r26
    3dcc:	09 f4       	brne	.+2      	; 0x3dd0 <__fp_cmp+0x3e>
    3dce:	a1 40       	sbci	r26, 0x01	; 1
    3dd0:	a6 95       	lsr	r26
    3dd2:	8f ef       	ldi	r24, 0xFF	; 255
    3dd4:	81 1d       	adc	r24, r1
    3dd6:	81 1d       	adc	r24, r1
    3dd8:	08 95       	ret

00003dda <__fp_split3>:
    3dda:	57 fd       	sbrc	r21, 7
    3ddc:	90 58       	subi	r25, 0x80	; 128
    3dde:	44 0f       	add	r20, r20
    3de0:	55 1f       	adc	r21, r21
    3de2:	59 f0       	breq	.+22     	; 0x3dfa <__fp_splitA+0x10>
    3de4:	5f 3f       	cpi	r21, 0xFF	; 255
    3de6:	71 f0       	breq	.+28     	; 0x3e04 <__fp_splitA+0x1a>
    3de8:	47 95       	ror	r20

00003dea <__fp_splitA>:
    3dea:	88 0f       	add	r24, r24
    3dec:	97 fb       	bst	r25, 7
    3dee:	99 1f       	adc	r25, r25
    3df0:	61 f0       	breq	.+24     	; 0x3e0a <__fp_splitA+0x20>
    3df2:	9f 3f       	cpi	r25, 0xFF	; 255
    3df4:	79 f0       	breq	.+30     	; 0x3e14 <__fp_splitA+0x2a>
    3df6:	87 95       	ror	r24
    3df8:	08 95       	ret
    3dfa:	12 16       	cp	r1, r18
    3dfc:	13 06       	cpc	r1, r19
    3dfe:	14 06       	cpc	r1, r20
    3e00:	55 1f       	adc	r21, r21
    3e02:	f2 cf       	rjmp	.-28     	; 0x3de8 <__fp_split3+0xe>
    3e04:	46 95       	lsr	r20
    3e06:	f1 df       	rcall	.-30     	; 0x3dea <__fp_splitA>
    3e08:	08 c0       	rjmp	.+16     	; 0x3e1a <__fp_splitA+0x30>
    3e0a:	16 16       	cp	r1, r22
    3e0c:	17 06       	cpc	r1, r23
    3e0e:	18 06       	cpc	r1, r24
    3e10:	99 1f       	adc	r25, r25
    3e12:	f1 cf       	rjmp	.-30     	; 0x3df6 <__fp_splitA+0xc>
    3e14:	86 95       	lsr	r24
    3e16:	71 05       	cpc	r23, r1
    3e18:	61 05       	cpc	r22, r1
    3e1a:	08 94       	sec
    3e1c:	08 95       	ret

00003e1e <__fp_zero>:
    3e1e:	e8 94       	clt

00003e20 <__fp_szero>:
    3e20:	bb 27       	eor	r27, r27
    3e22:	66 27       	eor	r22, r22
    3e24:	77 27       	eor	r23, r23
    3e26:	cb 01       	movw	r24, r22
    3e28:	97 f9       	bld	r25, 7
    3e2a:	08 95       	ret

00003e2c <__gesf2>:
    3e2c:	b2 df       	rcall	.-156    	; 0x3d92 <__fp_cmp>
    3e2e:	08 f4       	brcc	.+2      	; 0x3e32 <__gesf2+0x6>
    3e30:	8f ef       	ldi	r24, 0xFF	; 255
    3e32:	08 95       	ret

00003e34 <display_7seg_displayHex>:
    3e34:	cf 93       	push	r28
    3e36:	df 93       	push	r29
    3e38:	ec 01       	movw	r28, r24
    3e3a:	fc 01       	movw	r30, r24
    3e3c:	01 90       	ld	r0, Z+
    3e3e:	00 20       	and	r0, r0
    3e40:	e9 f7       	brne	.-6      	; 0x3e3c <display_7seg_displayHex+0x8>
    3e42:	31 97       	sbiw	r30, 0x01	; 1
    3e44:	e8 1b       	sub	r30, r24
    3e46:	f9 0b       	sbc	r31, r25
    3e48:	e0 93 07 16 	sts	0x1607, r30	; 0x801607 <_hexStringLength>
    3e4c:	e1 32       	cpi	r30, 0x21	; 33
    3e4e:	08 f4       	brcc	.+2      	; 0x3e52 <display_7seg_displayHex+0x1e>
    3e50:	7d c0       	rjmp	.+250    	; 0x3f4c <display_7seg_displayHex+0x118>
    3e52:	18 a2       	std	Y+32, r1	; 0x20
    3e54:	0e 94 af 31 	call	0x635e	; 0x635e <strupr>
    3e58:	80 91 07 16 	lds	r24, 0x1607	; 0x801607 <_hexStringLength>
    3e5c:	85 30       	cpi	r24, 0x05	; 5
    3e5e:	e0 f4       	brcc	.+56     	; 0x3e98 <display_7seg_displayHex+0x64>
    3e60:	44 e0       	ldi	r20, 0x04	; 4
    3e62:	50 e0       	ldi	r21, 0x00	; 0
    3e64:	48 1b       	sub	r20, r24
    3e66:	51 09       	sbc	r21, r1
    3e68:	14 16       	cp	r1, r20
    3e6a:	15 06       	cpc	r1, r21
    3e6c:	74 f4       	brge	.+28     	; 0x3e8a <display_7seg_displayHex+0x56>
    3e6e:	80 e0       	ldi	r24, 0x00	; 0
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	20 e0       	ldi	r18, 0x00	; 0
    3e74:	2f 5f       	subi	r18, 0xFF	; 255
    3e76:	fc 01       	movw	r30, r24
    3e78:	e8 5f       	subi	r30, 0xF8	; 248
    3e7a:	f9 4e       	sbci	r31, 0xE9	; 233
    3e7c:	10 82       	st	Z, r1
    3e7e:	82 2f       	mov	r24, r18
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	84 17       	cp	r24, r20
    3e84:	95 07       	cpc	r25, r21
    3e86:	b4 f3       	brlt	.-20     	; 0x3e74 <display_7seg_displayHex+0x40>
    3e88:	01 c0       	rjmp	.+2      	; 0x3e8c <display_7seg_displayHex+0x58>
    3e8a:	20 e0       	ldi	r18, 0x00	; 0
    3e8c:	10 92 04 16 	sts	0x1604, r1	; 0x801604 <_maxHexSegmentindex>
    3e90:	91 e0       	ldi	r25, 0x01	; 1
    3e92:	92 0f       	add	r25, r18
    3e94:	20 e0       	ldi	r18, 0x00	; 0
    3e96:	2e c0       	rjmp	.+92     	; 0x3ef4 <display_7seg_displayHex+0xc0>
    3e98:	e8 e0       	ldi	r30, 0x08	; 8
    3e9a:	f6 e1       	ldi	r31, 0x16	; 22
    3e9c:	10 82       	st	Z, r1
    3e9e:	11 82       	std	Z+1, r1	; 0x01
    3ea0:	12 82       	std	Z+2, r1	; 0x02
    3ea2:	23 e0       	ldi	r18, 0x03	; 3
    3ea4:	f5 cf       	rjmp	.-22     	; 0x3e90 <display_7seg_displayHex+0x5c>
    3ea6:	fe 01       	movw	r30, r28
    3ea8:	e4 0f       	add	r30, r20
    3eaa:	f5 1f       	adc	r31, r21
    3eac:	a0 81       	ld	r26, Z
    3eae:	30 ed       	ldi	r19, 0xD0	; 208
    3eb0:	3a 0f       	add	r19, r26
    3eb2:	3a 30       	cpi	r19, 0x0A	; 10
    3eb4:	50 f4       	brcc	.+20     	; 0x3eca <display_7seg_displayHex+0x96>
    3eb6:	e8 2f       	mov	r30, r24
    3eb8:	f0 e0       	ldi	r31, 0x00	; 0
    3eba:	e8 5f       	subi	r30, 0xF8	; 248
    3ebc:	f9 4e       	sbci	r31, 0xE9	; 233
    3ebe:	b0 e0       	ldi	r27, 0x00	; 0
    3ec0:	a6 5c       	subi	r26, 0xC6	; 198
    3ec2:	bb 4f       	sbci	r27, 0xFB	; 251
    3ec4:	8c 91       	ld	r24, X
    3ec6:	80 83       	st	Z, r24
    3ec8:	13 c0       	rjmp	.+38     	; 0x3ef0 <display_7seg_displayHex+0xbc>
    3eca:	3f eb       	ldi	r19, 0xBF	; 191
    3ecc:	3a 0f       	add	r19, r26
    3ece:	36 30       	cpi	r19, 0x06	; 6
    3ed0:	50 f4       	brcc	.+20     	; 0x3ee6 <display_7seg_displayHex+0xb2>
    3ed2:	e8 2f       	mov	r30, r24
    3ed4:	f0 e0       	ldi	r31, 0x00	; 0
    3ed6:	e8 5f       	subi	r30, 0xF8	; 248
    3ed8:	f9 4e       	sbci	r31, 0xE9	; 233
    3eda:	b0 e0       	ldi	r27, 0x00	; 0
    3edc:	ad 5c       	subi	r26, 0xCD	; 205
    3ede:	bb 4f       	sbci	r27, 0xFB	; 251
    3ee0:	8c 91       	ld	r24, X
    3ee2:	80 83       	st	Z, r24
    3ee4:	05 c0       	rjmp	.+10     	; 0x3ef0 <display_7seg_displayHex+0xbc>
    3ee6:	e8 2f       	mov	r30, r24
    3ee8:	f0 e0       	ldi	r31, 0x00	; 0
    3eea:	e8 5f       	subi	r30, 0xF8	; 248
    3eec:	f9 4e       	sbci	r31, 0xE9	; 233
    3eee:	10 82       	st	Z, r1
    3ef0:	2f 5f       	subi	r18, 0xFF	; 255
    3ef2:	9f 5f       	subi	r25, 0xFF	; 255
    3ef4:	8f ef       	ldi	r24, 0xFF	; 255
    3ef6:	89 0f       	add	r24, r25
    3ef8:	42 2f       	mov	r20, r18
    3efa:	50 e0       	ldi	r21, 0x00	; 0
    3efc:	fe 01       	movw	r30, r28
    3efe:	01 90       	ld	r0, Z+
    3f00:	00 20       	and	r0, r0
    3f02:	e9 f7       	brne	.-6      	; 0x3efe <display_7seg_displayHex+0xca>
    3f04:	31 97       	sbiw	r30, 0x01	; 1
    3f06:	ec 1b       	sub	r30, r28
    3f08:	fd 0b       	sbc	r31, r29
    3f0a:	4e 17       	cp	r20, r30
    3f0c:	5f 07       	cpc	r21, r31
    3f0e:	58 f2       	brcs	.-106    	; 0x3ea6 <display_7seg_displayHex+0x72>
    3f10:	20 91 07 16 	lds	r18, 0x1607	; 0x801607 <_hexStringLength>
    3f14:	25 30       	cpi	r18, 0x05	; 5
    3f16:	10 f1       	brcs	.+68     	; 0x3f5c <display_7seg_displayHex+0x128>
    3f18:	e8 2f       	mov	r30, r24
    3f1a:	f0 e0       	ldi	r31, 0x00	; 0
    3f1c:	e8 5f       	subi	r30, 0xF8	; 248
    3f1e:	f9 4e       	sbci	r31, 0xE9	; 233
    3f20:	10 82       	st	Z, r1
    3f22:	e9 2f       	mov	r30, r25
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	e8 5f       	subi	r30, 0xF8	; 248
    3f28:	f9 4e       	sbci	r31, 0xE9	; 233
    3f2a:	10 82       	st	Z, r1
    3f2c:	e1 e0       	ldi	r30, 0x01	; 1
    3f2e:	e9 0f       	add	r30, r25
    3f30:	f0 e0       	ldi	r31, 0x00	; 0
    3f32:	e8 5f       	subi	r30, 0xF8	; 248
    3f34:	f9 4e       	sbci	r31, 0xE9	; 233
    3f36:	10 82       	st	Z, r1
    3f38:	9e 5f       	subi	r25, 0xFE	; 254
    3f3a:	90 93 04 16 	sts	0x1604, r25	; 0x801604 <_maxHexSegmentindex>
    3f3e:	10 92 03 16 	sts	0x1603, r1	; 0x801603 <_scrollIndex>
    3f42:	10 92 06 16 	sts	0x1606, r1	; 0x801606 <_intCounter+0x1>
    3f46:	10 92 05 16 	sts	0x1605, r1	; 0x801605 <_intCounter>
    3f4a:	08 c0       	rjmp	.+16     	; 0x3f5c <display_7seg_displayHex+0x128>
    3f4c:	0e 94 af 31 	call	0x635e	; 0x635e <strupr>
    3f50:	80 91 07 16 	lds	r24, 0x1607	; 0x801607 <_hexStringLength>
    3f54:	85 30       	cpi	r24, 0x05	; 5
    3f56:	08 f4       	brcc	.+2      	; 0x3f5a <display_7seg_displayHex+0x126>
    3f58:	83 cf       	rjmp	.-250    	; 0x3e60 <display_7seg_displayHex+0x2c>
    3f5a:	9e cf       	rjmp	.-196    	; 0x3e98 <display_7seg_displayHex+0x64>
    3f5c:	ee e2       	ldi	r30, 0x2E	; 46
    3f5e:	f6 e1       	ldi	r31, 0x16	; 22
    3f60:	a8 e0       	ldi	r26, 0x08	; 8
    3f62:	b6 e1       	ldi	r27, 0x16	; 22
    3f64:	8c 91       	ld	r24, X
    3f66:	80 83       	st	Z, r24
    3f68:	11 96       	adiw	r26, 0x01	; 1
    3f6a:	8c 91       	ld	r24, X
    3f6c:	11 97       	sbiw	r26, 0x01	; 1
    3f6e:	81 83       	std	Z+1, r24	; 0x01
    3f70:	12 96       	adiw	r26, 0x02	; 2
    3f72:	8c 91       	ld	r24, X
    3f74:	12 97       	sbiw	r26, 0x02	; 2
    3f76:	82 83       	std	Z+2, r24	; 0x02
    3f78:	13 96       	adiw	r26, 0x03	; 3
    3f7a:	8c 91       	ld	r24, X
    3f7c:	83 83       	std	Z+3, r24	; 0x03
    3f7e:	df 91       	pop	r29
    3f80:	cf 91       	pop	r28
    3f82:	08 95       	ret

00003f84 <display_7seg_powerUp>:
    3f84:	85 b5       	in	r24, 0x25	; 37
    3f86:	85 60       	ori	r24, 0x05	; 5
    3f88:	85 bd       	out	0x25, r24	; 37
    3f8a:	08 95       	ret

00003f8c <display_7seg_powerDown>:
    3f8c:	85 b5       	in	r24, 0x25	; 37
    3f8e:	88 7f       	andi	r24, 0xF8	; 248
    3f90:	85 bd       	out	0x25, r24	; 37
    3f92:	81 b3       	in	r24, 0x11	; 17
    3f94:	8f 60       	ori	r24, 0x0F	; 15
    3f96:	81 bb       	out	0x11, r24	; 17
    3f98:	08 95       	ret

00003f9a <__vector_21>:
    3f9a:	1f 92       	push	r1
    3f9c:	0f 92       	push	r0
    3f9e:	0f b6       	in	r0, 0x3f	; 63
    3fa0:	0f 92       	push	r0
    3fa2:	11 24       	eor	r1, r1
    3fa4:	0b b6       	in	r0, 0x3b	; 59
    3fa6:	0f 92       	push	r0
    3fa8:	2f 93       	push	r18
    3faa:	3f 93       	push	r19
    3fac:	4f 93       	push	r20
    3fae:	5f 93       	push	r21
    3fb0:	6f 93       	push	r22
    3fb2:	7f 93       	push	r23
    3fb4:	8f 93       	push	r24
    3fb6:	9f 93       	push	r25
    3fb8:	af 93       	push	r26
    3fba:	bf 93       	push	r27
    3fbc:	ef 93       	push	r30
    3fbe:	ff 93       	push	r31
    3fc0:	80 91 04 16 	lds	r24, 0x1604	; 0x801604 <_maxHexSegmentindex>
    3fc4:	88 23       	and	r24, r24
    3fc6:	69 f1       	breq	.+90     	; 0x4022 <__vector_21+0x88>
    3fc8:	20 91 05 16 	lds	r18, 0x1605	; 0x801605 <_intCounter>
    3fcc:	30 91 06 16 	lds	r19, 0x1606	; 0x801606 <_intCounter+0x1>
    3fd0:	25 3f       	cpi	r18, 0xF5	; 245
    3fd2:	91 e0       	ldi	r25, 0x01	; 1
    3fd4:	39 07       	cpc	r19, r25
    3fd6:	38 f4       	brcc	.+14     	; 0x3fe6 <__vector_21+0x4c>
    3fd8:	2f 5f       	subi	r18, 0xFF	; 255
    3fda:	3f 4f       	sbci	r19, 0xFF	; 255
    3fdc:	30 93 06 16 	sts	0x1606, r19	; 0x801606 <_intCounter+0x1>
    3fe0:	20 93 05 16 	sts	0x1605, r18	; 0x801605 <_intCounter>
    3fe4:	1e c0       	rjmp	.+60     	; 0x4022 <__vector_21+0x88>
    3fe6:	10 92 06 16 	sts	0x1606, r1	; 0x801606 <_intCounter+0x1>
    3fea:	10 92 05 16 	sts	0x1605, r1	; 0x801605 <_intCounter>
    3fee:	e0 91 03 16 	lds	r30, 0x1603	; 0x801603 <_scrollIndex>
    3ff2:	2e 2f       	mov	r18, r30
    3ff4:	30 e0       	ldi	r19, 0x00	; 0
    3ff6:	90 e0       	ldi	r25, 0x00	; 0
    3ff8:	04 97       	sbiw	r24, 0x04	; 4
    3ffa:	28 17       	cp	r18, r24
    3ffc:	39 07       	cpc	r19, r25
    3ffe:	14 f4       	brge	.+4      	; 0x4004 <__vector_21+0x6a>
    4000:	ef 5f       	subi	r30, 0xFF	; 255
    4002:	01 c0       	rjmp	.+2      	; 0x4006 <__vector_21+0x6c>
    4004:	e0 e0       	ldi	r30, 0x00	; 0
    4006:	e0 93 03 16 	sts	0x1603, r30	; 0x801603 <_scrollIndex>
    400a:	f0 e0       	ldi	r31, 0x00	; 0
    400c:	e8 5f       	subi	r30, 0xF8	; 248
    400e:	f9 4e       	sbci	r31, 0xE9	; 233
    4010:	ae e2       	ldi	r26, 0x2E	; 46
    4012:	b6 e1       	ldi	r27, 0x16	; 22
    4014:	22 e3       	ldi	r18, 0x32	; 50
    4016:	36 e1       	ldi	r19, 0x16	; 22
    4018:	81 91       	ld	r24, Z+
    401a:	8d 93       	st	X+, r24
    401c:	a2 17       	cp	r26, r18
    401e:	b3 07       	cpc	r27, r19
    4020:	d9 f7       	brne	.-10     	; 0x4018 <__vector_21+0x7e>
    4022:	80 91 32 16 	lds	r24, 0x1632	; 0x801632 <_digitNo>
    4026:	90 e0       	ldi	r25, 0x00	; 0
    4028:	01 96       	adiw	r24, 0x01	; 1
    402a:	83 70       	andi	r24, 0x03	; 3
    402c:	90 78       	andi	r25, 0x80	; 128
    402e:	99 23       	and	r25, r25
    4030:	24 f4       	brge	.+8      	; 0x403a <__vector_21+0xa0>
    4032:	01 97       	sbiw	r24, 0x01	; 1
    4034:	8c 6f       	ori	r24, 0xFC	; 252
    4036:	9f 6f       	ori	r25, 0xFF	; 255
    4038:	01 96       	adiw	r24, 0x01	; 1
    403a:	80 93 32 16 	sts	0x1632, r24	; 0x801632 <_digitNo>
    403e:	99 27       	eor	r25, r25
    4040:	fc 01       	movw	r30, r24
    4042:	e2 5d       	subi	r30, 0xD2	; 210
    4044:	f9 4e       	sbci	r31, 0xE9	; 233
    4046:	60 81       	ld	r22, Z
    4048:	60 95       	com	r22
    404a:	80 91 33 16 	lds	r24, 0x1633	; 0x801633 <_spi>
    404e:	90 91 34 16 	lds	r25, 0x1634	; 0x801634 <_spi+0x1>
    4052:	0e 94 24 2a 	call	0x5448	; 0x5448 <spi_sendByte>
    4056:	ff 91       	pop	r31
    4058:	ef 91       	pop	r30
    405a:	bf 91       	pop	r27
    405c:	af 91       	pop	r26
    405e:	9f 91       	pop	r25
    4060:	8f 91       	pop	r24
    4062:	7f 91       	pop	r23
    4064:	6f 91       	pop	r22
    4066:	5f 91       	pop	r21
    4068:	4f 91       	pop	r20
    406a:	3f 91       	pop	r19
    406c:	2f 91       	pop	r18
    406e:	0f 90       	pop	r0
    4070:	0b be       	out	0x3b, r0	; 59
    4072:	0f 90       	pop	r0
    4074:	0f be       	out	0x3f, r0	; 63
    4076:	0f 90       	pop	r0
    4078:	1f 90       	pop	r1
    407a:	18 95       	reti

0000407c <_hihTwiCallback>:
    407c:	65 30       	cpi	r22, 0x05	; 5
    407e:	f1 f4       	brne	.+60     	; 0x40bc <_hihTwiCallback+0x40>
    4080:	fa 01       	movw	r30, r20
    4082:	80 81       	ld	r24, Z
    4084:	8f 73       	andi	r24, 0x3F	; 63
    4086:	90 e0       	ldi	r25, 0x00	; 0
    4088:	98 2f       	mov	r25, r24
    408a:	88 27       	eor	r24, r24
    408c:	21 81       	ldd	r18, Z+1	; 0x01
    408e:	82 2b       	or	r24, r18
    4090:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    4094:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    4098:	82 81       	ldd	r24, Z+2	; 0x02
    409a:	f0 e4       	ldi	r31, 0x40	; 64
    409c:	8f 9f       	mul	r24, r31
    409e:	c0 01       	movw	r24, r0
    40a0:	11 24       	eor	r1, r1
    40a2:	fa 01       	movw	r30, r20
    40a4:	23 81       	ldd	r18, Z+3	; 0x03
    40a6:	26 95       	lsr	r18
    40a8:	26 95       	lsr	r18
    40aa:	82 2b       	or	r24, r18
    40ac:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    40b0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    40b4:	81 e0       	ldi	r24, 0x01	; 1
    40b6:	80 93 35 16 	sts	0x1635, r24	; 0x801635 <_measuringIsReady>
    40ba:	08 95       	ret
    40bc:	64 30       	cpi	r22, 0x04	; 4
    40be:	51 f0       	breq	.+20     	; 0x40d4 <_hihTwiCallback+0x58>
    40c0:	80 e0       	ldi	r24, 0x00	; 0
    40c2:	90 e4       	ldi	r25, 0x40	; 64
    40c4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    40c8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    40cc:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    40d0:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    40d4:	08 95       	ret

000040d6 <hih8120_initialise>:
    40d6:	0f 93       	push	r16
    40d8:	1f 93       	push	r17
    40da:	0e e3       	ldi	r16, 0x3E	; 62
    40dc:	10 e2       	ldi	r17, 0x20	; 32
    40de:	20 e0       	ldi	r18, 0x00	; 0
    40e0:	34 e2       	ldi	r19, 0x24	; 36
    40e2:	44 ef       	ldi	r20, 0xF4	; 244
    40e4:	50 e0       	ldi	r21, 0x00	; 0
    40e6:	60 e0       	ldi	r22, 0x00	; 0
    40e8:	87 e2       	ldi	r24, 0x27	; 39
    40ea:	0e 94 f8 2c 	call	0x59f0	; 0x59f0 <twiCreate>
    40ee:	90 93 37 16 	sts	0x1637, r25	; 0x801637 <_hih8120Handler+0x1>
    40f2:	80 93 36 16 	sts	0x1636, r24	; 0x801636 <_hih8120Handler>
    40f6:	21 e0       	ldi	r18, 0x01	; 1
    40f8:	89 2b       	or	r24, r25
    40fa:	09 f0       	breq	.+2      	; 0x40fe <hih8120_initialise+0x28>
    40fc:	20 e0       	ldi	r18, 0x00	; 0
    40fe:	82 2f       	mov	r24, r18
    4100:	1f 91       	pop	r17
    4102:	0f 91       	pop	r16
    4104:	08 95       	ret

00004106 <hih8120_isReady>:
    4106:	80 91 35 16 	lds	r24, 0x1635	; 0x801635 <_measuringIsReady>
    410a:	08 95       	ret

0000410c <hih8120_wakeup>:
    410c:	80 91 36 16 	lds	r24, 0x1636	; 0x801636 <_hih8120Handler>
    4110:	90 91 37 16 	lds	r25, 0x1637	; 0x801637 <_hih8120Handler+0x1>
    4114:	00 97       	sbiw	r24, 0x00	; 0
    4116:	59 f0       	breq	.+22     	; 0x412e <hih8120_wakeup+0x22>
    4118:	40 e0       	ldi	r20, 0x00	; 0
    411a:	60 e0       	ldi	r22, 0x00	; 0
    411c:	70 e0       	ldi	r23, 0x00	; 0
    411e:	0e 94 49 2d 	call	0x5a92	; 0x5a92 <twiTransmit>
    4122:	84 30       	cpi	r24, 0x04	; 4
    4124:	31 f4       	brne	.+12     	; 0x4132 <hih8120_wakeup+0x26>
    4126:	10 92 35 16 	sts	0x1635, r1	; 0x801635 <_measuringIsReady>
    412a:	80 e0       	ldi	r24, 0x00	; 0
    412c:	08 95       	ret
    412e:	82 e0       	ldi	r24, 0x02	; 2
    4130:	08 95       	ret
    4132:	83 e0       	ldi	r24, 0x03	; 3
    4134:	08 95       	ret

00004136 <hih8120_measure>:
    4136:	80 91 36 16 	lds	r24, 0x1636	; 0x801636 <_hih8120Handler>
    413a:	90 91 37 16 	lds	r25, 0x1637	; 0x801637 <_hih8120Handler+0x1>
    413e:	00 97       	sbiw	r24, 0x00	; 0
    4140:	39 f0       	breq	.+14     	; 0x4150 <hih8120_measure+0x1a>
    4142:	64 e0       	ldi	r22, 0x04	; 4
    4144:	0e 94 95 2d 	call	0x5b2a	; 0x5b2a <twiReceive>
    4148:	85 30       	cpi	r24, 0x05	; 5
    414a:	21 f0       	breq	.+8      	; 0x4154 <hih8120_measure+0x1e>
    414c:	83 e0       	ldi	r24, 0x03	; 3
    414e:	08 95       	ret
    4150:	82 e0       	ldi	r24, 0x02	; 2
    4152:	08 95       	ret
    4154:	80 e0       	ldi	r24, 0x00	; 0
    4156:	08 95       	ret

00004158 <hih8120_getHumidity>:
    4158:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    415c:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    4160:	80 e0       	ldi	r24, 0x00	; 0
    4162:	90 e0       	ldi	r25, 0x00	; 0
    4164:	d9 dd       	rcall	.-1102   	; 0x3d18 <__floatunsisf>
    4166:	20 e0       	ldi	r18, 0x00	; 0
    4168:	30 e0       	ldi	r19, 0x00	; 0
    416a:	48 ec       	ldi	r20, 0xC8	; 200
    416c:	52 e4       	ldi	r21, 0x42	; 66
    416e:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__mulsf3>
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	38 ef       	ldi	r19, 0xF8	; 248
    4176:	4f e7       	ldi	r20, 0x7F	; 127
    4178:	56 e4       	ldi	r21, 0x46	; 70
    417a:	0c 94 08 2f 	jmp	0x5e10	; 0x5e10 <__divsf3>
    417e:	08 95       	ret

00004180 <hih8120_getTemperature>:
    4180:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    4184:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    4188:	80 e0       	ldi	r24, 0x00	; 0
    418a:	90 e0       	ldi	r25, 0x00	; 0
    418c:	c5 dd       	rcall	.-1142   	; 0x3d18 <__floatunsisf>
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	30 e0       	ldi	r19, 0x00	; 0
    4192:	45 e2       	ldi	r20, 0x25	; 37
    4194:	53 e4       	ldi	r21, 0x43	; 67
    4196:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__mulsf3>
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	38 ef       	ldi	r19, 0xF8	; 248
    419e:	4f e7       	ldi	r20, 0x7F	; 127
    41a0:	56 e4       	ldi	r21, 0x46	; 70
    41a2:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__divsf3>
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	40 e2       	ldi	r20, 0x20	; 32
    41ac:	52 e4       	ldi	r21, 0x42	; 66
    41ae:	0c 94 a1 2e 	jmp	0x5d42	; 0x5d42 <__subsf3>
    41b2:	08 95       	ret

000041b4 <_serialCallBack>:
    41b4:	0f 93       	push	r16
    41b6:	1f 93       	push	r17
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
    41bc:	1f 92       	push	r1
    41be:	1f 92       	push	r1
    41c0:	cd b7       	in	r28, 0x3d	; 61
    41c2:	de b7       	in	r29, 0x3e	; 62
    41c4:	8c 01       	movw	r16, r24
    41c6:	19 82       	std	Y+1, r1	; 0x01
    41c8:	2d c0       	rjmp	.+90     	; 0x4224 <_serialCallBack+0x70>
    41ca:	e0 91 6f 16 	lds	r30, 0x166F	; 0x80166f <rec_buf_inp.2878>
    41ce:	ec 32       	cpi	r30, 0x2C	; 44
    41d0:	50 f4       	brcc	.+20     	; 0x41e6 <_serialCallBack+0x32>
    41d2:	81 e0       	ldi	r24, 0x01	; 1
    41d4:	8e 0f       	add	r24, r30
    41d6:	80 93 6f 16 	sts	0x166F, r24	; 0x80166f <rec_buf_inp.2878>
    41da:	f0 e0       	ldi	r31, 0x00	; 0
    41dc:	ef 55       	subi	r30, 0x5F	; 95
    41de:	f9 4e       	sbci	r31, 0xE9	; 233
    41e0:	8a 81       	ldd	r24, Y+2	; 0x02
    41e2:	80 83       	st	Z, r24
    41e4:	02 c0       	rjmp	.+4      	; 0x41ea <_serialCallBack+0x36>
    41e6:	10 92 6f 16 	sts	0x166F, r1	; 0x80166f <rec_buf_inp.2878>
    41ea:	8a 81       	ldd	r24, Y+2	; 0x02
    41ec:	8a 30       	cpi	r24, 0x0A	; 10
    41ee:	d1 f4       	brne	.+52     	; 0x4224 <_serialCallBack+0x70>
    41f0:	40 91 6f 16 	lds	r20, 0x166F	; 0x80166f <rec_buf_inp.2878>
    41f4:	50 e0       	ldi	r21, 0x00	; 0
    41f6:	fa 01       	movw	r30, r20
    41f8:	e1 56       	subi	r30, 0x61	; 97
    41fa:	f9 4e       	sbci	r31, 0xE9	; 233
    41fc:	10 82       	st	Z, r1
    41fe:	41 50       	subi	r20, 0x01	; 1
    4200:	51 09       	sbc	r21, r1
    4202:	9e 01       	movw	r18, r28
    4204:	2f 5f       	subi	r18, 0xFF	; 255
    4206:	3f 4f       	sbci	r19, 0xFF	; 255
    4208:	61 ea       	ldi	r22, 0xA1	; 161
    420a:	76 e1       	ldi	r23, 0x16	; 22
    420c:	80 91 72 16 	lds	r24, 0x1672	; 0x801672 <_serialReplyBufferHandle>
    4210:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <_serialReplyBufferHandle+0x1>
    4214:	0e 94 28 0b 	call	0x1650	; 0x1650 <xStreamBufferSendFromISR>
    4218:	89 81       	ldd	r24, Y+1	; 0x01
    421a:	81 11       	cpse	r24, r1
    421c:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    4220:	10 92 6f 16 	sts	0x166F, r1	; 0x80166f <rec_buf_inp.2878>
    4224:	be 01       	movw	r22, r28
    4226:	6e 5f       	subi	r22, 0xFE	; 254
    4228:	7f 4f       	sbci	r23, 0xFF	; 255
    422a:	c8 01       	movw	r24, r16
    422c:	15 d6       	rcall	.+3114   	; 0x4e58 <serial_getByte>
    422e:	88 23       	and	r24, r24
    4230:	61 f2       	breq	.-104    	; 0x41ca <_serialCallBack+0x16>
    4232:	0f 90       	pop	r0
    4234:	0f 90       	pop	r0
    4236:	df 91       	pop	r29
    4238:	cf 91       	pop	r28
    423a:	1f 91       	pop	r17
    423c:	0f 91       	pop	r16
    423e:	08 95       	ret

00004240 <_uploadMessage>:
    4240:	0f 93       	push	r16
    4242:	1f 93       	push	r17
    4244:	cf 93       	push	r28
    4246:	df 93       	push	r29
    4248:	8c 01       	movw	r16, r24
    424a:	eb 01       	movw	r28, r22
    424c:	80 91 72 16 	lds	r24, 0x1672	; 0x801672 <_serialReplyBufferHandle>
    4250:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <_serialReplyBufferHandle+0x1>
    4254:	0e 94 1d 0a 	call	0x143a	; 0x143a <xStreamBufferReset>
    4258:	b8 01       	movw	r22, r16
    425a:	88 e3       	ldi	r24, 0x38	; 56
    425c:	96 e1       	ldi	r25, 0x16	; 22
    425e:	0e 94 90 31 	call	0x6320	; 0x6320 <strcpy>
    4262:	20 97       	sbiw	r28, 0x00	; 0
    4264:	79 f0       	breq	.+30     	; 0x4284 <_uploadMessage+0x44>
    4266:	e8 e3       	ldi	r30, 0x38	; 56
    4268:	f6 e1       	ldi	r31, 0x16	; 22
    426a:	01 90       	ld	r0, Z+
    426c:	00 20       	and	r0, r0
    426e:	e9 f7       	brne	.-6      	; 0x426a <_uploadMessage+0x2a>
    4270:	31 97       	sbiw	r30, 0x01	; 1
    4272:	80 e2       	ldi	r24, 0x20	; 32
    4274:	90 e0       	ldi	r25, 0x00	; 0
    4276:	91 83       	std	Z+1, r25	; 0x01
    4278:	80 83       	st	Z, r24
    427a:	be 01       	movw	r22, r28
    427c:	88 e3       	ldi	r24, 0x38	; 56
    427e:	96 e1       	ldi	r25, 0x16	; 22
    4280:	0e 94 85 31 	call	0x630a	; 0x630a <strcat>
    4284:	e8 e3       	ldi	r30, 0x38	; 56
    4286:	f6 e1       	ldi	r31, 0x16	; 22
    4288:	df 01       	movw	r26, r30
    428a:	0d 90       	ld	r0, X+
    428c:	00 20       	and	r0, r0
    428e:	e9 f7       	brne	.-6      	; 0x428a <_uploadMessage+0x4a>
    4290:	11 97       	sbiw	r26, 0x01	; 1
    4292:	8d e0       	ldi	r24, 0x0D	; 13
    4294:	9a e0       	ldi	r25, 0x0A	; 10
    4296:	11 96       	adiw	r26, 0x01	; 1
    4298:	9c 93       	st	X, r25
    429a:	8e 93       	st	-X, r24
    429c:	12 96       	adiw	r26, 0x02	; 2
    429e:	1c 92       	st	X, r1
    42a0:	01 90       	ld	r0, Z+
    42a2:	00 20       	and	r0, r0
    42a4:	e9 f7       	brne	.-6      	; 0x42a0 <_uploadMessage+0x60>
    42a6:	31 97       	sbiw	r30, 0x01	; 1
    42a8:	e8 53       	subi	r30, 0x38	; 56
    42aa:	f6 41       	sbci	r31, 0x16	; 22
    42ac:	ae 2f       	mov	r26, r30
    42ae:	88 e3       	ldi	r24, 0x38	; 56
    42b0:	96 e1       	ldi	r25, 0x16	; 22
    42b2:	ac 01       	movw	r20, r24
    42b4:	6a 2f       	mov	r22, r26
    42b6:	80 91 74 16 	lds	r24, 0x1674	; 0x801674 <_rn2483_serial>
    42ba:	90 91 75 16 	lds	r25, 0x1675	; 0x801675 <_rn2483_serial+0x1>
    42be:	77 d5       	rcall	.+2798   	; 0x4dae <serial_sendBytes>
    42c0:	81 11       	cpse	r24, r1
    42c2:	11 c0       	rjmp	.+34     	; 0x42e6 <_uploadMessage+0xa6>
    42c4:	08 e2       	ldi	r16, 0x28	; 40
    42c6:	15 e0       	ldi	r17, 0x05	; 5
    42c8:	20 e0       	ldi	r18, 0x00	; 0
    42ca:	30 e0       	ldi	r19, 0x00	; 0
    42cc:	4d e2       	ldi	r20, 0x2D	; 45
    42ce:	50 e0       	ldi	r21, 0x00	; 0
    42d0:	6b ef       	ldi	r22, 0xFB	; 251
    42d2:	76 e1       	ldi	r23, 0x16	; 22
    42d4:	80 91 72 16 	lds	r24, 0x1672	; 0x801672 <_serialReplyBufferHandle>
    42d8:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <_serialReplyBufferHandle+0x1>
    42dc:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
    42e0:	8b ef       	ldi	r24, 0xFB	; 251
    42e2:	96 e1       	ldi	r25, 0x16	; 22
    42e4:	02 c0       	rjmp	.+4      	; 0x42ea <_uploadMessage+0xaa>
    42e6:	80 e0       	ldi	r24, 0x00	; 0
    42e8:	90 e0       	ldi	r25, 0x00	; 0
    42ea:	df 91       	pop	r29
    42ec:	cf 91       	pop	r28
    42ee:	1f 91       	pop	r17
    42f0:	0f 91       	pop	r16
    42f2:	08 95       	ret

000042f4 <_reply2ReturnCode>:
    42f4:	2f 92       	push	r2
    42f6:	3f 92       	push	r3
    42f8:	4f 92       	push	r4
    42fa:	5f 92       	push	r5
    42fc:	6f 92       	push	r6
    42fe:	7f 92       	push	r7
    4300:	8f 92       	push	r8
    4302:	9f 92       	push	r9
    4304:	af 92       	push	r10
    4306:	bf 92       	push	r11
    4308:	cf 92       	push	r12
    430a:	df 92       	push	r13
    430c:	ef 92       	push	r14
    430e:	ff 92       	push	r15
    4310:	0f 93       	push	r16
    4312:	1f 93       	push	r17
    4314:	cf 93       	push	r28
    4316:	df 93       	push	r29
    4318:	5c 01       	movw	r10, r24
    431a:	fc 01       	movw	r30, r24
    431c:	01 90       	ld	r0, Z+
    431e:	00 20       	and	r0, r0
    4320:	e9 f7       	brne	.-6      	; 0x431c <_reply2ReturnCode+0x28>
    4322:	31 97       	sbiw	r30, 0x01	; 1
    4324:	6f 01       	movw	r12, r30
    4326:	c8 1a       	sub	r12, r24
    4328:	d9 0a       	sbc	r13, r25
    432a:	5c 2c       	mov	r5, r12
    432c:	0f 2e       	mov	r0, r31
    432e:	f3 e1       	ldi	r31, 0x13	; 19
    4330:	8f 2e       	mov	r8, r31
    4332:	f7 e0       	ldi	r31, 0x07	; 7
    4334:	9f 2e       	mov	r9, r31
    4336:	f0 2d       	mov	r31, r0
    4338:	e1 2c       	mov	r14, r1
    433a:	f1 2c       	mov	r15, r1
    433c:	4c 2c       	mov	r4, r12
    433e:	37 01       	movw	r6, r14
    4340:	f4 01       	movw	r30, r8
    4342:	01 81       	ldd	r16, Z+1	; 0x01
    4344:	12 81       	ldd	r17, Z+2	; 0x02
    4346:	e8 01       	movw	r28, r16
    4348:	09 90       	ld	r0, Y+
    434a:	00 20       	and	r0, r0
    434c:	e9 f7       	brne	.-6      	; 0x4348 <_reply2ReturnCode+0x54>
    434e:	21 97       	sbiw	r28, 0x01	; 1
    4350:	c0 1b       	sub	r28, r16
    4352:	d1 0b       	sbc	r29, r17
    4354:	3c 2e       	mov	r3, r28
    4356:	f9 e0       	ldi	r31, 0x09	; 9
    4358:	cf 16       	cp	r12, r31
    435a:	d1 04       	cpc	r13, r1
    435c:	58 f0       	brcs	.+22     	; 0x4374 <_reply2ReturnCode+0x80>
    435e:	f4 01       	movw	r30, r8
    4360:	20 80       	ld	r2, Z
    4362:	fe e0       	ldi	r31, 0x0E	; 14
    4364:	2f 12       	cpse	r2, r31
    4366:	06 c0       	rjmp	.+12     	; 0x4374 <_reply2ReturnCode+0x80>
    4368:	b8 01       	movw	r22, r16
    436a:	c5 01       	movw	r24, r10
    436c:	0e 94 60 31 	call	0x62c0	; 0x62c0 <strcasestr>
    4370:	89 2b       	or	r24, r25
    4372:	09 f5       	brne	.+66     	; 0x43b6 <_reply2ReturnCode+0xc2>
    4374:	44 2d       	mov	r20, r4
    4376:	35 14       	cp	r3, r5
    4378:	08 f4       	brcc	.+2      	; 0x437c <_reply2ReturnCode+0x88>
    437a:	4c 2f       	mov	r20, r28
    437c:	50 e0       	ldi	r21, 0x00	; 0
    437e:	b8 01       	movw	r22, r16
    4380:	c5 01       	movw	r24, r10
    4382:	0e 94 97 31 	call	0x632e	; 0x632e <strncasecmp>
    4386:	89 2b       	or	r24, r25
    4388:	49 f4       	brne	.+18     	; 0x439c <_reply2ReturnCode+0xa8>
    438a:	f3 01       	movw	r30, r6
    438c:	ee 0f       	add	r30, r30
    438e:	ff 1f       	adc	r31, r31
    4390:	e6 0d       	add	r30, r6
    4392:	f7 1d       	adc	r31, r7
    4394:	ed 5e       	subi	r30, 0xED	; 237
    4396:	f8 4f       	sbci	r31, 0xF8	; 248
    4398:	20 80       	ld	r2, Z
    439a:	0d c0       	rjmp	.+26     	; 0x43b6 <_reply2ReturnCode+0xc2>
    439c:	8f ef       	ldi	r24, 0xFF	; 255
    439e:	e8 1a       	sub	r14, r24
    43a0:	f8 0a       	sbc	r15, r24
    43a2:	e3 e0       	ldi	r30, 0x03	; 3
    43a4:	8e 0e       	add	r8, r30
    43a6:	91 1c       	adc	r9, r1
    43a8:	f1 e1       	ldi	r31, 0x11	; 17
    43aa:	ef 16       	cp	r14, r31
    43ac:	f1 04       	cpc	r15, r1
    43ae:	39 f6       	brne	.-114    	; 0x433e <_reply2ReturnCode+0x4a>
    43b0:	68 94       	set
    43b2:	22 24       	eor	r2, r2
    43b4:	24 f8       	bld	r2, 4
    43b6:	82 2d       	mov	r24, r2
    43b8:	df 91       	pop	r29
    43ba:	cf 91       	pop	r28
    43bc:	1f 91       	pop	r17
    43be:	0f 91       	pop	r16
    43c0:	ff 90       	pop	r15
    43c2:	ef 90       	pop	r14
    43c4:	df 90       	pop	r13
    43c6:	cf 90       	pop	r12
    43c8:	bf 90       	pop	r11
    43ca:	af 90       	pop	r10
    43cc:	9f 90       	pop	r9
    43ce:	8f 90       	pop	r8
    43d0:	7f 90       	pop	r7
    43d2:	6f 90       	pop	r6
    43d4:	5f 90       	pop	r5
    43d6:	4f 90       	pop	r4
    43d8:	3f 90       	pop	r3
    43da:	2f 90       	pop	r2
    43dc:	08 95       	ret

000043de <_uploadMessageRc>:
    43de:	30 df       	rcall	.-416    	; 0x4240 <_uploadMessage>
    43e0:	89 cf       	rjmp	.-238    	; 0x42f4 <_reply2ReturnCode>
    43e2:	08 95       	ret

000043e4 <lora_driver_flushBuffers>:
    43e4:	80 91 72 16 	lds	r24, 0x1672	; 0x801672 <_serialReplyBufferHandle>
    43e8:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <_serialReplyBufferHandle+0x1>
    43ec:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <xStreamBufferReset>
    43f0:	08 95       	ret

000043f2 <lora_driver_initialise>:
    43f2:	8f 92       	push	r8
    43f4:	9f 92       	push	r9
    43f6:	af 92       	push	r10
    43f8:	cf 92       	push	r12
    43fa:	ef 92       	push	r14
    43fc:	0f 93       	push	r16
    43fe:	1f 93       	push	r17
    4400:	cf 93       	push	r28
    4402:	c8 2f       	mov	r28, r24
    4404:	8b 01       	movw	r16, r22
    4406:	41 e0       	ldi	r20, 0x01	; 1
    4408:	60 e0       	ldi	r22, 0x00	; 0
    440a:	70 e0       	ldi	r23, 0x00	; 0
    440c:	88 ec       	ldi	r24, 0xC8	; 200
    440e:	90 e0       	ldi	r25, 0x00	; 0
    4410:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <xStreamBufferGenericCreate>
    4414:	90 93 73 16 	sts	0x1673, r25	; 0x801673 <_serialReplyBufferHandle+0x1>
    4418:	80 93 72 16 	sts	0x1672, r24	; 0x801672 <_serialReplyBufferHandle>
    441c:	10 93 71 16 	sts	0x1671, r17	; 0x801671 <_downlinkMessageBuffer+0x1>
    4420:	00 93 70 16 	sts	0x1670, r16	; 0x801670 <_downlinkMessageBuffer>
    4424:	0f 2e       	mov	r0, r31
    4426:	fa ed       	ldi	r31, 0xDA	; 218
    4428:	8f 2e       	mov	r8, r31
    442a:	f0 e2       	ldi	r31, 0x20	; 32
    442c:	9f 2e       	mov	r9, r31
    442e:	f0 2d       	mov	r31, r0
    4430:	68 94       	set
    4432:	aa 24       	eor	r10, r10
    4434:	a6 f8       	bld	r10, 6
    4436:	68 94       	set
    4438:	cc 24       	eor	r12, r12
    443a:	c6 f8       	bld	r12, 6
    443c:	e1 2c       	mov	r14, r1
    443e:	00 e0       	ldi	r16, 0x00	; 0
    4440:	23 e0       	ldi	r18, 0x03	; 3
    4442:	40 e0       	ldi	r20, 0x00	; 0
    4444:	51 ee       	ldi	r21, 0xE1	; 225
    4446:	60 e0       	ldi	r22, 0x00	; 0
    4448:	70 e0       	ldi	r23, 0x00	; 0
    444a:	8c 2f       	mov	r24, r28
    444c:	de d3       	rcall	.+1980   	; 0x4c0a <serial_create>
    444e:	90 93 75 16 	sts	0x1675, r25	; 0x801675 <_rn2483_serial+0x1>
    4452:	80 93 74 16 	sts	0x1674, r24	; 0x801674 <_rn2483_serial>
    4456:	e7 e0       	ldi	r30, 0x07	; 7
    4458:	f1 e0       	ldi	r31, 0x01	; 1
    445a:	80 81       	ld	r24, Z
    445c:	80 61       	ori	r24, 0x10	; 16
    445e:	80 83       	st	Z, r24
    4460:	cf 91       	pop	r28
    4462:	1f 91       	pop	r17
    4464:	0f 91       	pop	r16
    4466:	ef 90       	pop	r14
    4468:	cf 90       	pop	r12
    446a:	af 90       	pop	r10
    446c:	9f 90       	pop	r9
    446e:	8f 90       	pop	r8
    4470:	08 95       	ret

00004472 <lora_driver_resetRn2483>:
    4472:	88 23       	and	r24, r24
    4474:	31 f0       	breq	.+12     	; 0x4482 <lora_driver_resetRn2483+0x10>
    4476:	e8 e0       	ldi	r30, 0x08	; 8
    4478:	f1 e0       	ldi	r31, 0x01	; 1
    447a:	80 81       	ld	r24, Z
    447c:	8f 7e       	andi	r24, 0xEF	; 239
    447e:	80 83       	st	Z, r24
    4480:	08 95       	ret
    4482:	e8 e0       	ldi	r30, 0x08	; 8
    4484:	f1 e0       	ldi	r31, 0x01	; 1
    4486:	80 81       	ld	r24, Z
    4488:	80 61       	ori	r24, 0x10	; 16
    448a:	80 83       	st	Z, r24
    448c:	08 95       	ret

0000448e <lora_driver_rn2483FactoryReset>:
    448e:	60 e0       	ldi	r22, 0x00	; 0
    4490:	70 e0       	ldi	r23, 0x00	; 0
    4492:	89 e9       	ldi	r24, 0x99	; 153
    4494:	94 e0       	ldi	r25, 0x04	; 4
    4496:	d4 de       	rcall	.-600    	; 0x4240 <_uploadMessage>
    4498:	eb ef       	ldi	r30, 0xFB	; 251
    449a:	f6 e1       	ldi	r31, 0x16	; 22
    449c:	01 90       	ld	r0, Z+
    449e:	00 20       	and	r0, r0
    44a0:	e9 f7       	brne	.-6      	; 0x449c <lora_driver_rn2483FactoryReset+0xe>
    44a2:	31 97       	sbiw	r30, 0x01	; 1
    44a4:	eb 5f       	subi	r30, 0xFB	; 251
    44a6:	f6 41       	sbci	r31, 0x16	; 22
    44a8:	81 e0       	ldi	r24, 0x01	; 1
    44aa:	75 97       	sbiw	r30, 0x15	; 21
    44ac:	08 f0       	brcs	.+2      	; 0x44b0 <lora_driver_rn2483FactoryReset+0x22>
    44ae:	80 e0       	ldi	r24, 0x00	; 0
    44b0:	08 95       	ret

000044b2 <lora_driver_getRn2483Hweui>:
    44b2:	cf 93       	push	r28
    44b4:	df 93       	push	r29
    44b6:	ec 01       	movw	r28, r24
    44b8:	60 e0       	ldi	r22, 0x00	; 0
    44ba:	70 e0       	ldi	r23, 0x00	; 0
    44bc:	8a ea       	ldi	r24, 0xAA	; 170
    44be:	94 e0       	ldi	r25, 0x04	; 4
    44c0:	bf de       	rcall	.-642    	; 0x4240 <_uploadMessage>
    44c2:	eb ef       	ldi	r30, 0xFB	; 251
    44c4:	f6 e1       	ldi	r31, 0x16	; 22
    44c6:	01 90       	ld	r0, Z+
    44c8:	00 20       	and	r0, r0
    44ca:	e9 f7       	brne	.-6      	; 0x44c6 <lora_driver_getRn2483Hweui+0x14>
    44cc:	ec 50       	subi	r30, 0x0C	; 12
    44ce:	f7 41       	sbci	r31, 0x17	; 23
    44d0:	39 f4       	brne	.+14     	; 0x44e0 <lora_driver_getRn2483Hweui+0x2e>
    44d2:	6b ef       	ldi	r22, 0xFB	; 251
    44d4:	76 e1       	ldi	r23, 0x16	; 22
    44d6:	ce 01       	movw	r24, r28
    44d8:	0e 94 90 31 	call	0x6320	; 0x6320 <strcpy>
    44dc:	80 e0       	ldi	r24, 0x00	; 0
    44de:	02 c0       	rjmp	.+4      	; 0x44e4 <lora_driver_getRn2483Hweui+0x32>
    44e0:	18 82       	st	Y, r1
    44e2:	81 e0       	ldi	r24, 0x01	; 1
    44e4:	df 91       	pop	r29
    44e6:	cf 91       	pop	r28
    44e8:	08 95       	ret

000044ea <lora_driver_setDeviceIdentifier>:
    44ea:	fc 01       	movw	r30, r24
    44ec:	01 90       	ld	r0, Z+
    44ee:	00 20       	and	r0, r0
    44f0:	e9 f7       	brne	.-6      	; 0x44ec <lora_driver_setDeviceIdentifier+0x2>
    44f2:	9f 01       	movw	r18, r30
    44f4:	21 51       	subi	r18, 0x11	; 17
    44f6:	31 09       	sbc	r19, r1
    44f8:	28 17       	cp	r18, r24
    44fa:	39 07       	cpc	r19, r25
    44fc:	29 f4       	brne	.+10     	; 0x4508 <lora_driver_setDeviceIdentifier+0x1e>
    44fe:	bc 01       	movw	r22, r24
    4500:	88 ed       	ldi	r24, 0xD8	; 216
    4502:	94 e0       	ldi	r25, 0x04	; 4
    4504:	6c cf       	rjmp	.-296    	; 0x43de <_uploadMessageRc>
    4506:	08 95       	ret
    4508:	89 e0       	ldi	r24, 0x09	; 9
    450a:	08 95       	ret

0000450c <lora_driver_setApplicationIdentifier>:
    450c:	fc 01       	movw	r30, r24
    450e:	01 90       	ld	r0, Z+
    4510:	00 20       	and	r0, r0
    4512:	e9 f7       	brne	.-6      	; 0x450e <lora_driver_setApplicationIdentifier+0x2>
    4514:	9f 01       	movw	r18, r30
    4516:	21 51       	subi	r18, 0x11	; 17
    4518:	31 09       	sbc	r19, r1
    451a:	28 17       	cp	r18, r24
    451c:	39 07       	cpc	r19, r25
    451e:	29 f4       	brne	.+10     	; 0x452a <lora_driver_setApplicationIdentifier+0x1e>
    4520:	bc 01       	movw	r22, r24
    4522:	87 ee       	ldi	r24, 0xE7	; 231
    4524:	94 e0       	ldi	r25, 0x04	; 4
    4526:	5b cf       	rjmp	.-330    	; 0x43de <_uploadMessageRc>
    4528:	08 95       	ret
    452a:	89 e0       	ldi	r24, 0x09	; 9
    452c:	08 95       	ret

0000452e <lora_driver_setApplicationKey>:
    452e:	fc 01       	movw	r30, r24
    4530:	01 90       	ld	r0, Z+
    4532:	00 20       	and	r0, r0
    4534:	e9 f7       	brne	.-6      	; 0x4530 <lora_driver_setApplicationKey+0x2>
    4536:	9f 01       	movw	r18, r30
    4538:	21 52       	subi	r18, 0x21	; 33
    453a:	31 09       	sbc	r19, r1
    453c:	28 17       	cp	r18, r24
    453e:	39 07       	cpc	r19, r25
    4540:	29 f4       	brne	.+10     	; 0x454c <lora_driver_setApplicationKey+0x1e>
    4542:	bc 01       	movw	r22, r24
    4544:	86 ef       	ldi	r24, 0xF6	; 246
    4546:	94 e0       	ldi	r25, 0x04	; 4
    4548:	4a cf       	rjmp	.-364    	; 0x43de <_uploadMessageRc>
    454a:	08 95       	ret
    454c:	89 e0       	ldi	r24, 0x09	; 9
    454e:	08 95       	ret

00004550 <lora_driver_saveMac>:
    4550:	60 e0       	ldi	r22, 0x00	; 0
    4552:	70 e0       	ldi	r23, 0x00	; 0
    4554:	85 e3       	ldi	r24, 0x35	; 53
    4556:	95 e0       	ldi	r25, 0x05	; 5
    4558:	42 cf       	rjmp	.-380    	; 0x43de <_uploadMessageRc>
    455a:	08 95       	ret

0000455c <lora_driver_join>:
    455c:	0f 93       	push	r16
    455e:	1f 93       	push	r17
    4560:	e8 2f       	mov	r30, r24
    4562:	f0 e0       	ldi	r31, 0x00	; 0
    4564:	ee 0f       	add	r30, r30
    4566:	ff 1f       	adc	r31, r31
    4568:	e1 5f       	subi	r30, 0xF1	; 241
    456a:	f8 4f       	sbci	r31, 0xF8	; 248
    456c:	60 81       	ld	r22, Z
    456e:	71 81       	ldd	r23, Z+1	; 0x01
    4570:	8e e3       	ldi	r24, 0x3E	; 62
    4572:	95 e0       	ldi	r25, 0x05	; 5
    4574:	34 df       	rcall	.-408    	; 0x43de <_uploadMessageRc>
    4576:	81 11       	cpse	r24, r1
    4578:	14 c0       	rjmp	.+40     	; 0x45a2 <lora_driver_join+0x46>
    457a:	08 e2       	ldi	r16, 0x28	; 40
    457c:	15 e0       	ldi	r17, 0x05	; 5
    457e:	20 e0       	ldi	r18, 0x00	; 0
    4580:	30 e0       	ldi	r19, 0x00	; 0
    4582:	4d e2       	ldi	r20, 0x2D	; 45
    4584:	50 e0       	ldi	r21, 0x00	; 0
    4586:	6b ef       	ldi	r22, 0xFB	; 251
    4588:	76 e1       	ldi	r23, 0x16	; 22
    458a:	80 91 72 16 	lds	r24, 0x1672	; 0x801672 <_serialReplyBufferHandle>
    458e:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <_serialReplyBufferHandle+0x1>
    4592:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
    4596:	88 23       	and	r24, r24
    4598:	21 f0       	breq	.+8      	; 0x45a2 <lora_driver_join+0x46>
    459a:	8b ef       	ldi	r24, 0xFB	; 251
    459c:	96 e1       	ldi	r25, 0x16	; 22
    459e:	aa de       	rcall	.-684    	; 0x42f4 <_reply2ReturnCode>
    45a0:	03 c0       	rjmp	.+6      	; 0x45a8 <lora_driver_join+0x4c>
    45a2:	8b ef       	ldi	r24, 0xFB	; 251
    45a4:	96 e1       	ldi	r25, 0x16	; 22
    45a6:	a6 de       	rcall	.-692    	; 0x42f4 <_reply2ReturnCode>
    45a8:	1f 91       	pop	r17
    45aa:	0f 91       	pop	r16
    45ac:	08 95       	ret

000045ae <lora_driver_sendUploadMessage>:
    45ae:	0f 93       	push	r16
    45b0:	1f 93       	push	r17
    45b2:	cf 93       	push	r28
    45b4:	df 93       	push	r29
    45b6:	1f 92       	push	r1
    45b8:	cd b7       	in	r28, 0x3d	; 61
    45ba:	de b7       	in	r29, 0x3e	; 62
    45bc:	db 01       	movw	r26, r22
    45be:	11 96       	adiw	r26, 0x01	; 1
    45c0:	9c 91       	ld	r25, X
    45c2:	11 97       	sbiw	r26, 0x01	; 1
    45c4:	95 31       	cpi	r25, 0x15	; 21
    45c6:	08 f0       	brcs	.+2      	; 0x45ca <lora_driver_sendUploadMessage+0x1c>
    45c8:	b4 c0       	rjmp	.+360    	; 0x4732 <lora_driver_sendUploadMessage+0x184>
    45ca:	99 23       	and	r25, r25
    45cc:	81 f1       	breq	.+96     	; 0x462e <lora_driver_sendUploadMessage+0x80>
    45ce:	60 e0       	ldi	r22, 0x00	; 0
    45d0:	70 e0       	ldi	r23, 0x00	; 0
    45d2:	27 2f       	mov	r18, r23
    45d4:	30 e0       	ldi	r19, 0x00	; 0
    45d6:	46 2f       	mov	r20, r22
    45d8:	50 e0       	ldi	r21, 0x00	; 0
    45da:	fd 01       	movw	r30, r26
    45dc:	e4 0f       	add	r30, r20
    45de:	f5 1f       	adc	r31, r21
    45e0:	92 81       	ldd	r25, Z+2	; 0x02
    45e2:	92 95       	swap	r25
    45e4:	9f 70       	andi	r25, 0x0F	; 15
    45e6:	9a 30       	cpi	r25, 0x0A	; 10
    45e8:	10 f0       	brcs	.+4      	; 0x45ee <lora_driver_sendUploadMessage+0x40>
    45ea:	99 5c       	subi	r25, 0xC9	; 201
    45ec:	01 c0       	rjmp	.+2      	; 0x45f0 <lora_driver_sendUploadMessage+0x42>
    45ee:	90 5d       	subi	r25, 0xD0	; 208
    45f0:	f9 01       	movw	r30, r18
    45f2:	e4 57       	subi	r30, 0x74	; 116
    45f4:	f9 4e       	sbci	r31, 0xE9	; 233
    45f6:	90 83       	st	Z, r25
    45f8:	2f 5f       	subi	r18, 0xFF	; 255
    45fa:	3f 4f       	sbci	r19, 0xFF	; 255
    45fc:	fd 01       	movw	r30, r26
    45fe:	e4 0f       	add	r30, r20
    4600:	f5 1f       	adc	r31, r21
    4602:	92 81       	ldd	r25, Z+2	; 0x02
    4604:	9f 70       	andi	r25, 0x0F	; 15
    4606:	49 2f       	mov	r20, r25
    4608:	50 e0       	ldi	r21, 0x00	; 0
    460a:	4a 30       	cpi	r20, 0x0A	; 10
    460c:	51 05       	cpc	r21, r1
    460e:	14 f0       	brlt	.+4      	; 0x4614 <lora_driver_sendUploadMessage+0x66>
    4610:	99 5c       	subi	r25, 0xC9	; 201
    4612:	01 c0       	rjmp	.+2      	; 0x4616 <lora_driver_sendUploadMessage+0x68>
    4614:	90 5d       	subi	r25, 0xD0	; 208
    4616:	f9 01       	movw	r30, r18
    4618:	e4 57       	subi	r30, 0x74	; 116
    461a:	f9 4e       	sbci	r31, 0xE9	; 233
    461c:	90 83       	st	Z, r25
    461e:	7e 5f       	subi	r23, 0xFE	; 254
    4620:	6f 5f       	subi	r22, 0xFF	; 255
    4622:	11 96       	adiw	r26, 0x01	; 1
    4624:	9c 91       	ld	r25, X
    4626:	11 97       	sbiw	r26, 0x01	; 1
    4628:	69 17       	cp	r22, r25
    462a:	98 f2       	brcs	.-90     	; 0x45d2 <lora_driver_sendUploadMessage+0x24>
    462c:	01 c0       	rjmp	.+2      	; 0x4630 <lora_driver_sendUploadMessage+0x82>
    462e:	70 e0       	ldi	r23, 0x00	; 0
    4630:	e7 2f       	mov	r30, r23
    4632:	f0 e0       	ldi	r31, 0x00	; 0
    4634:	e4 57       	subi	r30, 0x74	; 116
    4636:	f9 4e       	sbci	r31, 0xE9	; 233
    4638:	10 82       	st	Z, r1
    463a:	4c 91       	ld	r20, X
    463c:	81 11       	cpse	r24, r1
    463e:	03 c0       	rjmp	.+6      	; 0x4646 <lora_driver_sendUploadMessage+0x98>
    4640:	87 e4       	ldi	r24, 0x47	; 71
    4642:	95 e0       	ldi	r25, 0x05	; 5
    4644:	02 c0       	rjmp	.+4      	; 0x464a <lora_driver_sendUploadMessage+0x9c>
    4646:	89 e4       	ldi	r24, 0x49	; 73
    4648:	95 e0       	ldi	r25, 0x05	; 5
    464a:	2c e8       	ldi	r18, 0x8C	; 140
    464c:	36 e1       	ldi	r19, 0x16	; 22
    464e:	3f 93       	push	r19
    4650:	2f 93       	push	r18
    4652:	1f 92       	push	r1
    4654:	4f 93       	push	r20
    4656:	9f 93       	push	r25
    4658:	8f 93       	push	r24
    465a:	8d e4       	ldi	r24, 0x4D	; 77
    465c:	95 e0       	ldi	r25, 0x05	; 5
    465e:	9f 93       	push	r25
    4660:	8f 93       	push	r24
    4662:	8e ec       	ldi	r24, 0xCE	; 206
    4664:	96 e1       	ldi	r25, 0x16	; 22
    4666:	9f 93       	push	r25
    4668:	8f 93       	push	r24
    466a:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <sprintf>
    466e:	60 e0       	ldi	r22, 0x00	; 0
    4670:	70 e0       	ldi	r23, 0x00	; 0
    4672:	8e ec       	ldi	r24, 0xCE	; 206
    4674:	96 e1       	ldi	r25, 0x16	; 22
    4676:	b3 de       	rcall	.-666    	; 0x43de <_uploadMessageRc>
    4678:	0f b6       	in	r0, 0x3f	; 63
    467a:	f8 94       	cli
    467c:	de bf       	out	0x3e, r29	; 62
    467e:	0f be       	out	0x3f, r0	; 63
    4680:	cd bf       	out	0x3d, r28	; 61
    4682:	81 11       	cpse	r24, r1
    4684:	59 c0       	rjmp	.+178    	; 0x4738 <lora_driver_sendUploadMessage+0x18a>
    4686:	08 e2       	ldi	r16, 0x28	; 40
    4688:	15 e0       	ldi	r17, 0x05	; 5
    468a:	20 e0       	ldi	r18, 0x00	; 0
    468c:	30 e0       	ldi	r19, 0x00	; 0
    468e:	4d e2       	ldi	r20, 0x2D	; 45
    4690:	50 e0       	ldi	r21, 0x00	; 0
    4692:	6b ef       	ldi	r22, 0xFB	; 251
    4694:	76 e1       	ldi	r23, 0x16	; 22
    4696:	80 91 72 16 	lds	r24, 0x1672	; 0x801672 <_serialReplyBufferHandle>
    469a:	90 91 73 16 	lds	r25, 0x1673	; 0x801673 <_serialReplyBufferHandle+0x1>
    469e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
    46a2:	88 23       	and	r24, r24
    46a4:	09 f4       	brne	.+2      	; 0x46a8 <lora_driver_sendUploadMessage+0xfa>
    46a6:	47 c0       	rjmp	.+142    	; 0x4736 <lora_driver_sendUploadMessage+0x188>
    46a8:	8b ef       	ldi	r24, 0xFB	; 251
    46aa:	96 e1       	ldi	r25, 0x16	; 22
    46ac:	23 de       	rcall	.-954    	; 0x42f4 <_reply2ReturnCode>
    46ae:	8e 30       	cpi	r24, 0x0E	; 14
    46b0:	09 f0       	breq	.+2      	; 0x46b4 <lora_driver_sendUploadMessage+0x106>
    46b2:	42 c0       	rjmp	.+132    	; 0x4738 <lora_driver_sendUploadMessage+0x18a>
    46b4:	87 e0       	ldi	r24, 0x07	; 7
    46b6:	89 83       	std	Y+1, r24	; 0x01
    46b8:	80 91 70 16 	lds	r24, 0x1670	; 0x801670 <_downlinkMessageBuffer>
    46bc:	90 91 71 16 	lds	r25, 0x1671	; 0x801671 <_downlinkMessageBuffer+0x1>
    46c0:	89 2b       	or	r24, r25
    46c2:	a9 f1       	breq	.+106    	; 0x472e <lora_driver_sendUploadMessage+0x180>
    46c4:	be 01       	movw	r22, r28
    46c6:	6f 5f       	subi	r22, 0xFF	; 255
    46c8:	7f 4f       	sbci	r23, 0xFF	; 255
    46ca:	8b ef       	ldi	r24, 0xFB	; 251
    46cc:	96 e1       	ldi	r25, 0x16	; 22
    46ce:	68 d1       	rcall	.+720    	; 0x49a0 <decode_port_no>
    46d0:	80 93 76 16 	sts	0x1676, r24	; 0x801676 <_downlinkPayload>
    46d4:	e9 81       	ldd	r30, Y+1	; 0x01
    46d6:	f0 e0       	ldi	r31, 0x00	; 0
    46d8:	e5 50       	subi	r30, 0x05	; 5
    46da:	f9 4e       	sbci	r31, 0xE9	; 233
    46dc:	df 01       	movw	r26, r30
    46de:	0d 90       	ld	r0, X+
    46e0:	00 20       	and	r0, r0
    46e2:	e9 f7       	brne	.-6      	; 0x46de <lora_driver_sendUploadMessage+0x130>
    46e4:	11 97       	sbiw	r26, 0x01	; 1
    46e6:	ae 1b       	sub	r26, r30
    46e8:	bf 0b       	sbc	r27, r31
    46ea:	aa 23       	and	r26, r26
    46ec:	91 f0       	breq	.+36     	; 0x4712 <lora_driver_sendUploadMessage+0x164>
    46ee:	bb 27       	eor	r27, r27
    46f0:	cd 01       	movw	r24, r26
    46f2:	01 97       	sbiw	r24, 0x01	; 1
    46f4:	9c 01       	movw	r18, r24
    46f6:	12 f4       	brpl	.+4      	; 0x46fc <lora_driver_sendUploadMessage+0x14e>
    46f8:	2f 5f       	subi	r18, 0xFF	; 255
    46fa:	3f 4f       	sbci	r19, 0xFF	; 255
    46fc:	35 95       	asr	r19
    46fe:	27 95       	ror	r18
    4700:	20 93 77 16 	sts	0x1677, r18	; 0x801677 <_downlinkPayload+0x1>
    4704:	af 01       	movw	r20, r30
    4706:	4f 5f       	subi	r20, 0xFF	; 255
    4708:	5f 4f       	sbci	r21, 0xFF	; 255
    470a:	64 e1       	ldi	r22, 0x14	; 20
    470c:	88 e7       	ldi	r24, 0x78	; 120
    470e:	96 e1       	ldi	r25, 0x16	; 22
    4710:	73 d1       	rcall	.+742    	; 0x49f8 <decode_hexadecimal_string_bytes>
    4712:	01 e0       	ldi	r16, 0x01	; 1
    4714:	10 e0       	ldi	r17, 0x00	; 0
    4716:	20 e0       	ldi	r18, 0x00	; 0
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	46 e1       	ldi	r20, 0x16	; 22
    471c:	50 e0       	ldi	r21, 0x00	; 0
    471e:	66 e7       	ldi	r22, 0x76	; 118
    4720:	76 e1       	ldi	r23, 0x16	; 22
    4722:	80 91 70 16 	lds	r24, 0x1670	; 0x801670 <_downlinkMessageBuffer>
    4726:	90 91 71 16 	lds	r25, 0x1671	; 0x801671 <_downlinkMessageBuffer+0x1>
    472a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <xStreamBufferSend>
    472e:	8e e0       	ldi	r24, 0x0E	; 14
    4730:	03 c0       	rjmp	.+6      	; 0x4738 <lora_driver_sendUploadMessage+0x18a>
    4732:	84 e1       	ldi	r24, 0x14	; 20
    4734:	01 c0       	rjmp	.+2      	; 0x4738 <lora_driver_sendUploadMessage+0x18a>
    4736:	80 e0       	ldi	r24, 0x00	; 0
    4738:	0f 90       	pop	r0
    473a:	df 91       	pop	r29
    473c:	cf 91       	pop	r28
    473e:	1f 91       	pop	r17
    4740:	0f 91       	pop	r16
    4742:	08 95       	ret

00004744 <lora_driver_setAdaptiveDataRate>:
    4744:	81 30       	cpi	r24, 0x01	; 1
    4746:	19 f0       	breq	.+6      	; 0x474e <lora_driver_setAdaptiveDataRate+0xa>
    4748:	6d e5       	ldi	r22, 0x5D	; 93
    474a:	75 e0       	ldi	r23, 0x05	; 5
    474c:	02 c0       	rjmp	.+4      	; 0x4752 <lora_driver_setAdaptiveDataRate+0xe>
    474e:	66 e3       	ldi	r22, 0x36	; 54
    4750:	76 e0       	ldi	r23, 0x06	; 6
    4752:	81 e6       	ldi	r24, 0x61	; 97
    4754:	95 e0       	ldi	r25, 0x05	; 5
    4756:	43 ce       	rjmp	.-890    	; 0x43de <_uploadMessageRc>
    4758:	08 95       	ret

0000475a <lora_driver_setReceiveDelay>:
    475a:	9f 93       	push	r25
    475c:	8f 93       	push	r24
    475e:	82 e9       	ldi	r24, 0x92	; 146
    4760:	95 e0       	ldi	r25, 0x05	; 5
    4762:	9f 93       	push	r25
    4764:	8f 93       	push	r24
    4766:	8e ec       	ldi	r24, 0xCE	; 206
    4768:	96 e1       	ldi	r25, 0x16	; 22
    476a:	9f 93       	push	r25
    476c:	8f 93       	push	r24
    476e:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <sprintf>
    4772:	60 e0       	ldi	r22, 0x00	; 0
    4774:	70 e0       	ldi	r23, 0x00	; 0
    4776:	8e ec       	ldi	r24, 0xCE	; 206
    4778:	96 e1       	ldi	r25, 0x16	; 22
    477a:	31 de       	rcall	.-926    	; 0x43de <_uploadMessageRc>
    477c:	0f 90       	pop	r0
    477e:	0f 90       	pop	r0
    4780:	0f 90       	pop	r0
    4782:	0f 90       	pop	r0
    4784:	0f 90       	pop	r0
    4786:	0f 90       	pop	r0
    4788:	08 95       	ret

0000478a <lora_driver_configureToEu868>:
    478a:	2f 92       	push	r2
    478c:	3f 92       	push	r3
    478e:	4f 92       	push	r4
    4790:	5f 92       	push	r5
    4792:	6f 92       	push	r6
    4794:	7f 92       	push	r7
    4796:	8f 92       	push	r8
    4798:	9f 92       	push	r9
    479a:	af 92       	push	r10
    479c:	bf 92       	push	r11
    479e:	cf 92       	push	r12
    47a0:	df 92       	push	r13
    47a2:	ef 92       	push	r14
    47a4:	ff 92       	push	r15
    47a6:	0f 93       	push	r16
    47a8:	1f 93       	push	r17
    47aa:	cf 93       	push	r28
    47ac:	df 93       	push	r29
    47ae:	cd b7       	in	r28, 0x3d	; 61
    47b0:	de b7       	in	r29, 0x3e	; 62
    47b2:	a0 97       	sbiw	r28, 0x20	; 32
    47b4:	0f b6       	in	r0, 0x3f	; 63
    47b6:	f8 94       	cli
    47b8:	de bf       	out	0x3e, r29	; 62
    47ba:	0f be       	out	0x3f, r0	; 63
    47bc:	cd bf       	out	0x3d, r28	; 61
    47be:	6f eb       	ldi	r22, 0xBF	; 191
    47c0:	75 e0       	ldi	r23, 0x05	; 5
    47c2:	8b ec       	ldi	r24, 0xCB	; 203
    47c4:	95 e0       	ldi	r25, 0x05	; 5
    47c6:	3c dd       	rcall	.-1416   	; 0x4240 <_uploadMessage>
    47c8:	95 dd       	rcall	.-1238   	; 0x42f4 <_reply2ReturnCode>
    47ca:	81 11       	cpse	r24, r1
    47cc:	a3 c0       	rjmp	.+326    	; 0x4914 <lora_driver_configureToEu868+0x18a>
    47ce:	80 e2       	ldi	r24, 0x20	; 32
    47d0:	e2 e2       	ldi	r30, 0x22	; 34
    47d2:	f2 e0       	ldi	r31, 0x02	; 2
    47d4:	de 01       	movw	r26, r28
    47d6:	11 96       	adiw	r26, 0x01	; 1
    47d8:	01 90       	ld	r0, Z+
    47da:	0d 92       	st	X+, r0
    47dc:	8a 95       	dec	r24
    47de:	e1 f7       	brne	.-8      	; 0x47d8 <lora_driver_configureToEu868+0x4e>
    47e0:	9e 01       	movw	r18, r28
    47e2:	2f 5f       	subi	r18, 0xFF	; 255
    47e4:	3f 4f       	sbci	r19, 0xFF	; 255
    47e6:	69 01       	movw	r12, r18
    47e8:	e1 2c       	mov	r14, r1
    47ea:	f1 2c       	mov	r15, r1
    47ec:	0f 2e       	mov	r0, r31
    47ee:	f7 ed       	ldi	r31, 0xD7	; 215
    47f0:	af 2e       	mov	r10, r31
    47f2:	f5 e0       	ldi	r31, 0x05	; 5
    47f4:	bf 2e       	mov	r11, r31
    47f6:	f0 2d       	mov	r31, r0
    47f8:	0e ec       	ldi	r16, 0xCE	; 206
    47fa:	16 e1       	ldi	r17, 0x16	; 22
    47fc:	0f 2e       	mov	r0, r31
    47fe:	f0 ef       	ldi	r31, 0xF0	; 240
    4800:	4f 2e       	mov	r4, r31
    4802:	f5 e0       	ldi	r31, 0x05	; 5
    4804:	5f 2e       	mov	r5, r31
    4806:	f0 2d       	mov	r31, r0
    4808:	0f 2e       	mov	r0, r31
    480a:	f7 e0       	ldi	r31, 0x07	; 7
    480c:	8f 2e       	mov	r8, r31
    480e:	f6 e0       	ldi	r31, 0x06	; 6
    4810:	9f 2e       	mov	r9, r31
    4812:	f0 2d       	mov	r31, r0
    4814:	0f 2e       	mov	r0, r31
    4816:	f1 e2       	ldi	r31, 0x21	; 33
    4818:	6f 2e       	mov	r6, r31
    481a:	f6 e0       	ldi	r31, 0x06	; 6
    481c:	7f 2e       	mov	r7, r31
    481e:	f0 2d       	mov	r31, r0
    4820:	3e 2c       	mov	r3, r14
    4822:	2f 2c       	mov	r2, r15
    4824:	ff 92       	push	r15
    4826:	ef 92       	push	r14
    4828:	bf 92       	push	r11
    482a:	af 92       	push	r10
    482c:	1f 93       	push	r17
    482e:	0f 93       	push	r16
    4830:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <sprintf>
    4834:	60 e0       	ldi	r22, 0x00	; 0
    4836:	70 e0       	ldi	r23, 0x00	; 0
    4838:	c8 01       	movw	r24, r16
    483a:	02 dd       	rcall	.-1532   	; 0x4240 <_uploadMessage>
    483c:	5b dd       	rcall	.-1354   	; 0x42f4 <_reply2ReturnCode>
    483e:	0f 90       	pop	r0
    4840:	0f 90       	pop	r0
    4842:	0f 90       	pop	r0
    4844:	0f 90       	pop	r0
    4846:	0f 90       	pop	r0
    4848:	0f 90       	pop	r0
    484a:	81 11       	cpse	r24, r1
    484c:	63 c0       	rjmp	.+198    	; 0x4914 <lora_driver_configureToEu868+0x18a>
    484e:	32 e0       	ldi	r19, 0x02	; 2
    4850:	3e 15       	cp	r19, r14
    4852:	e8 f4       	brcc	.+58     	; 0x488e <lora_driver_configureToEu868+0x104>
    4854:	f6 01       	movw	r30, r12
    4856:	83 81       	ldd	r24, Z+3	; 0x03
    4858:	8f 93       	push	r24
    485a:	82 81       	ldd	r24, Z+2	; 0x02
    485c:	8f 93       	push	r24
    485e:	81 81       	ldd	r24, Z+1	; 0x01
    4860:	8f 93       	push	r24
    4862:	80 81       	ld	r24, Z
    4864:	8f 93       	push	r24
    4866:	ff 92       	push	r15
    4868:	ef 92       	push	r14
    486a:	5f 92       	push	r5
    486c:	4f 92       	push	r4
    486e:	1f 93       	push	r17
    4870:	0f 93       	push	r16
    4872:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <sprintf>
    4876:	60 e0       	ldi	r22, 0x00	; 0
    4878:	70 e0       	ldi	r23, 0x00	; 0
    487a:	c8 01       	movw	r24, r16
    487c:	e1 dc       	rcall	.-1598   	; 0x4240 <_uploadMessage>
    487e:	3a dd       	rcall	.-1420   	; 0x42f4 <_reply2ReturnCode>
    4880:	0f b6       	in	r0, 0x3f	; 63
    4882:	f8 94       	cli
    4884:	de bf       	out	0x3e, r29	; 62
    4886:	0f be       	out	0x3f, r0	; 63
    4888:	cd bf       	out	0x3d, r28	; 61
    488a:	81 11       	cpse	r24, r1
    488c:	43 c0       	rjmp	.+134    	; 0x4914 <lora_driver_configureToEu868+0x18a>
    488e:	2f 92       	push	r2
    4890:	3f 92       	push	r3
    4892:	9f 92       	push	r9
    4894:	8f 92       	push	r8
    4896:	1f 93       	push	r17
    4898:	0f 93       	push	r16
    489a:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <sprintf>
    489e:	60 e0       	ldi	r22, 0x00	; 0
    48a0:	70 e0       	ldi	r23, 0x00	; 0
    48a2:	c8 01       	movw	r24, r16
    48a4:	cd dc       	rcall	.-1638   	; 0x4240 <_uploadMessage>
    48a6:	26 dd       	rcall	.-1460   	; 0x42f4 <_reply2ReturnCode>
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	0f 90       	pop	r0
    48b0:	0f 90       	pop	r0
    48b2:	0f 90       	pop	r0
    48b4:	81 11       	cpse	r24, r1
    48b6:	2e c0       	rjmp	.+92     	; 0x4914 <lora_driver_configureToEu868+0x18a>
    48b8:	2f 92       	push	r2
    48ba:	3f 92       	push	r3
    48bc:	7f 92       	push	r7
    48be:	6f 92       	push	r6
    48c0:	1f 93       	push	r17
    48c2:	0f 93       	push	r16
    48c4:	0e 94 fc 31 	call	0x63f8	; 0x63f8 <sprintf>
    48c8:	60 e0       	ldi	r22, 0x00	; 0
    48ca:	70 e0       	ldi	r23, 0x00	; 0
    48cc:	c8 01       	movw	r24, r16
    48ce:	b8 dc       	rcall	.-1680   	; 0x4240 <_uploadMessage>
    48d0:	11 dd       	rcall	.-1502   	; 0x42f4 <_reply2ReturnCode>
    48d2:	0f 90       	pop	r0
    48d4:	0f 90       	pop	r0
    48d6:	0f 90       	pop	r0
    48d8:	0f 90       	pop	r0
    48da:	0f 90       	pop	r0
    48dc:	0f 90       	pop	r0
    48de:	81 11       	cpse	r24, r1
    48e0:	19 c0       	rjmp	.+50     	; 0x4914 <lora_driver_configureToEu868+0x18a>
    48e2:	3f ef       	ldi	r19, 0xFF	; 255
    48e4:	e3 1a       	sub	r14, r19
    48e6:	f3 0a       	sbc	r15, r19
    48e8:	84 e0       	ldi	r24, 0x04	; 4
    48ea:	c8 0e       	add	r12, r24
    48ec:	d1 1c       	adc	r13, r1
    48ee:	98 e0       	ldi	r25, 0x08	; 8
    48f0:	e9 16       	cp	r14, r25
    48f2:	f1 04       	cpc	r15, r1
    48f4:	09 f0       	breq	.+2      	; 0x48f8 <lora_driver_configureToEu868+0x16e>
    48f6:	94 cf       	rjmp	.-216    	; 0x4820 <lora_driver_configureToEu868+0x96>
    48f8:	60 e0       	ldi	r22, 0x00	; 0
    48fa:	70 e0       	ldi	r23, 0x00	; 0
    48fc:	89 e3       	ldi	r24, 0x39	; 57
    48fe:	96 e0       	ldi	r25, 0x06	; 6
    4900:	9f dc       	rcall	.-1730   	; 0x4240 <_uploadMessage>
    4902:	f8 dc       	rcall	.-1552   	; 0x42f4 <_reply2ReturnCode>
    4904:	81 11       	cpse	r24, r1
    4906:	06 c0       	rjmp	.+12     	; 0x4914 <lora_driver_configureToEu868+0x18a>
    4908:	60 e0       	ldi	r22, 0x00	; 0
    490a:	70 e0       	ldi	r23, 0x00	; 0
    490c:	8a e4       	ldi	r24, 0x4A	; 74
    490e:	96 e0       	ldi	r25, 0x06	; 6
    4910:	97 dc       	rcall	.-1746   	; 0x4240 <_uploadMessage>
    4912:	f0 dc       	rcall	.-1568   	; 0x42f4 <_reply2ReturnCode>
    4914:	a0 96       	adiw	r28, 0x20	; 32
    4916:	0f b6       	in	r0, 0x3f	; 63
    4918:	f8 94       	cli
    491a:	de bf       	out	0x3e, r29	; 62
    491c:	0f be       	out	0x3f, r0	; 63
    491e:	cd bf       	out	0x3d, r28	; 61
    4920:	df 91       	pop	r29
    4922:	cf 91       	pop	r28
    4924:	1f 91       	pop	r17
    4926:	0f 91       	pop	r16
    4928:	ff 90       	pop	r15
    492a:	ef 90       	pop	r14
    492c:	df 90       	pop	r13
    492e:	cf 90       	pop	r12
    4930:	bf 90       	pop	r11
    4932:	af 90       	pop	r10
    4934:	9f 90       	pop	r9
    4936:	8f 90       	pop	r8
    4938:	7f 90       	pop	r7
    493a:	6f 90       	pop	r6
    493c:	5f 90       	pop	r5
    493e:	4f 90       	pop	r4
    4940:	3f 90       	pop	r3
    4942:	2f 90       	pop	r2
    4944:	08 95       	ret

00004946 <lora_driver_setOtaaIdentity>:
    4946:	ef 92       	push	r14
    4948:	ff 92       	push	r15
    494a:	0f 93       	push	r16
    494c:	1f 93       	push	r17
    494e:	cf 93       	push	r28
    4950:	df 93       	push	r29
    4952:	ec 01       	movw	r28, r24
    4954:	8b 01       	movw	r16, r22
    4956:	7a 01       	movw	r14, r20
    4958:	81 e0       	ldi	r24, 0x01	; 1
    495a:	f4 de       	rcall	.-536    	; 0x4744 <lora_driver_setAdaptiveDataRate>
    495c:	81 11       	cpse	r24, r1
    495e:	0d c0       	rjmp	.+26     	; 0x497a <lora_driver_setOtaaIdentity+0x34>
    4960:	ce 01       	movw	r24, r28
    4962:	d4 dd       	rcall	.-1112   	; 0x450c <lora_driver_setApplicationIdentifier>
    4964:	81 11       	cpse	r24, r1
    4966:	09 c0       	rjmp	.+18     	; 0x497a <lora_driver_setOtaaIdentity+0x34>
    4968:	c8 01       	movw	r24, r16
    496a:	e1 dd       	rcall	.-1086   	; 0x452e <lora_driver_setApplicationKey>
    496c:	81 11       	cpse	r24, r1
    496e:	05 c0       	rjmp	.+10     	; 0x497a <lora_driver_setOtaaIdentity+0x34>
    4970:	c7 01       	movw	r24, r14
    4972:	bb dd       	rcall	.-1162   	; 0x44ea <lora_driver_setDeviceIdentifier>
    4974:	81 11       	cpse	r24, r1
    4976:	01 c0       	rjmp	.+2      	; 0x497a <lora_driver_setOtaaIdentity+0x34>
    4978:	eb dd       	rcall	.-1066   	; 0x4550 <lora_driver_saveMac>
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	1f 91       	pop	r17
    4980:	0f 91       	pop	r16
    4982:	ff 90       	pop	r15
    4984:	ef 90       	pop	r14
    4986:	08 95       	ret

00004988 <lora_driver_mapReturnCodeToText>:
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	fc 01       	movw	r30, r24
    498c:	ee 0f       	add	r30, r30
    498e:	ff 1f       	adc	r31, r31
    4990:	8e 0f       	add	r24, r30
    4992:	9f 1f       	adc	r25, r31
    4994:	fc 01       	movw	r30, r24
    4996:	ed 5e       	subi	r30, 0xED	; 237
    4998:	f8 4f       	sbci	r31, 0xF8	; 248
    499a:	81 81       	ldd	r24, Z+1	; 0x01
    499c:	92 81       	ldd	r25, Z+2	; 0x02
    499e:	08 95       	ret

000049a0 <decode_port_no>:
    49a0:	dc 01       	movw	r26, r24
    49a2:	00 97       	sbiw	r24, 0x00	; 0
    49a4:	29 f1       	breq	.+74     	; 0x49f0 <decode_port_no+0x50>
    49a6:	fb 01       	movw	r30, r22
    49a8:	20 81       	ld	r18, Z
    49aa:	fc 01       	movw	r30, r24
    49ac:	01 90       	ld	r0, Z+
    49ae:	00 20       	and	r0, r0
    49b0:	e9 f7       	brne	.-6      	; 0x49ac <decode_port_no+0xc>
    49b2:	31 97       	sbiw	r30, 0x01	; 1
    49b4:	e8 1b       	sub	r30, r24
    49b6:	f9 0b       	sbc	r31, r25
    49b8:	82 2f       	mov	r24, r18
    49ba:	90 e0       	ldi	r25, 0x00	; 0
    49bc:	e8 17       	cp	r30, r24
    49be:	f9 07       	cpc	r31, r25
    49c0:	c8 f0       	brcs	.+50     	; 0x49f4 <decode_port_no+0x54>
    49c2:	80 e0       	ldi	r24, 0x00	; 0
    49c4:	08 c0       	rjmp	.+16     	; 0x49d6 <decode_port_no+0x36>
    49c6:	88 0f       	add	r24, r24
    49c8:	38 2f       	mov	r19, r24
    49ca:	33 0f       	add	r19, r19
    49cc:	33 0f       	add	r19, r19
    49ce:	83 0f       	add	r24, r19
    49d0:	80 53       	subi	r24, 0x30	; 48
    49d2:	89 0f       	add	r24, r25
    49d4:	2f 5f       	subi	r18, 0xFF	; 255
    49d6:	fd 01       	movw	r30, r26
    49d8:	e2 0f       	add	r30, r18
    49da:	f1 1d       	adc	r31, r1
    49dc:	90 81       	ld	r25, Z
    49de:	30 ed       	ldi	r19, 0xD0	; 208
    49e0:	39 0f       	add	r19, r25
    49e2:	3a 30       	cpi	r19, 0x0A	; 10
    49e4:	10 f4       	brcc	.+4      	; 0x49ea <decode_port_no+0x4a>
    49e6:	91 11       	cpse	r25, r1
    49e8:	ee cf       	rjmp	.-36     	; 0x49c6 <decode_port_no+0x26>
    49ea:	fb 01       	movw	r30, r22
    49ec:	20 83       	st	Z, r18
    49ee:	08 95       	ret
    49f0:	80 e0       	ldi	r24, 0x00	; 0
    49f2:	08 95       	ret
    49f4:	80 e0       	ldi	r24, 0x00	; 0
    49f6:	08 95       	ret

000049f8 <decode_hexadecimal_string_bytes>:
    49f8:	0f 93       	push	r16
    49fa:	1f 93       	push	r17
    49fc:	cf 93       	push	r28
    49fe:	df 93       	push	r29
    4a00:	dc 01       	movw	r26, r24
    4a02:	ea 01       	movw	r28, r20
    4a04:	20 97       	sbiw	r28, 0x00	; 0
    4a06:	e1 f1       	breq	.+120    	; 0x4a80 <decode_hexadecimal_string_bytes+0x88>
    4a08:	fa 01       	movw	r30, r20
    4a0a:	01 90       	ld	r0, Z+
    4a0c:	00 20       	and	r0, r0
    4a0e:	e9 f7       	brne	.-6      	; 0x4a0a <decode_hexadecimal_string_bytes+0x12>
    4a10:	31 97       	sbiw	r30, 0x01	; 1
    4a12:	e4 1b       	sub	r30, r20
    4a14:	f5 0b       	sbc	r31, r21
    4a16:	32 97       	sbiw	r30, 0x02	; 2
    4a18:	10 f5       	brcc	.+68     	; 0x4a5e <decode_hexadecimal_string_bytes+0x66>
    4a1a:	32 c0       	rjmp	.+100    	; 0x4a80 <decode_hexadecimal_string_bytes+0x88>
    4a1c:	8d 01       	movw	r16, r26
    4a1e:	04 0f       	add	r16, r20
    4a20:	15 1f       	adc	r17, r21
    4a22:	30 e0       	ldi	r19, 0x00	; 0
    4a24:	ae 01       	movw	r20, r28
    4a26:	42 0f       	add	r20, r18
    4a28:	53 1f       	adc	r21, r19
    4a2a:	fa 01       	movw	r30, r20
    4a2c:	90 81       	ld	r25, Z
    4a2e:	91 34       	cpi	r25, 0x41	; 65
    4a30:	28 f0       	brcs	.+10     	; 0x4a3c <decode_hexadecimal_string_bytes+0x44>
    4a32:	97 53       	subi	r25, 0x37	; 55
    4a34:	59 2f       	mov	r21, r25
    4a36:	52 95       	swap	r21
    4a38:	50 7f       	andi	r21, 0xF0	; 240
    4a3a:	03 c0       	rjmp	.+6      	; 0x4a42 <decode_hexadecimal_string_bytes+0x4a>
    4a3c:	59 2f       	mov	r21, r25
    4a3e:	52 95       	swap	r21
    4a40:	50 7f       	andi	r21, 0xF0	; 240
    4a42:	2c 0f       	add	r18, r28
    4a44:	3d 1f       	adc	r19, r29
    4a46:	f9 01       	movw	r30, r18
    4a48:	91 81       	ldd	r25, Z+1	; 0x01
    4a4a:	91 34       	cpi	r25, 0x41	; 65
    4a4c:	10 f0       	brcs	.+4      	; 0x4a52 <decode_hexadecimal_string_bytes+0x5a>
    4a4e:	97 53       	subi	r25, 0x37	; 55
    4a50:	01 c0       	rjmp	.+2      	; 0x4a54 <decode_hexadecimal_string_bytes+0x5c>
    4a52:	90 53       	subi	r25, 0x30	; 48
    4a54:	95 0f       	add	r25, r21
    4a56:	f8 01       	movw	r30, r16
    4a58:	90 83       	st	Z, r25
    4a5a:	8f 5f       	subi	r24, 0xFF	; 255
    4a5c:	01 c0       	rjmp	.+2      	; 0x4a60 <decode_hexadecimal_string_bytes+0x68>
    4a5e:	80 e0       	ldi	r24, 0x00	; 0
    4a60:	28 2f       	mov	r18, r24
    4a62:	22 0f       	add	r18, r18
    4a64:	48 2f       	mov	r20, r24
    4a66:	50 e0       	ldi	r21, 0x00	; 0
    4a68:	fe 01       	movw	r30, r28
    4a6a:	01 90       	ld	r0, Z+
    4a6c:	00 20       	and	r0, r0
    4a6e:	e9 f7       	brne	.-6      	; 0x4a6a <decode_hexadecimal_string_bytes+0x72>
    4a70:	31 97       	sbiw	r30, 0x01	; 1
    4a72:	ec 1b       	sub	r30, r28
    4a74:	fd 0b       	sbc	r31, r29
    4a76:	4e 17       	cp	r20, r30
    4a78:	5f 07       	cpc	r21, r31
    4a7a:	10 f4       	brcc	.+4      	; 0x4a80 <decode_hexadecimal_string_bytes+0x88>
    4a7c:	86 13       	cpse	r24, r22
    4a7e:	ce cf       	rjmp	.-100    	; 0x4a1c <decode_hexadecimal_string_bytes+0x24>
    4a80:	df 91       	pop	r29
    4a82:	cf 91       	pop	r28
    4a84:	1f 91       	pop	r17
    4a86:	0f 91       	pop	r16
    4a88:	08 95       	ret

00004a8a <_serialCallBack>:
    4a8a:	80 91 2b 17 	lds	r24, 0x172B	; 0x80172b <crc_sum.1945>
    4a8e:	86 0f       	add	r24, r22
    4a90:	80 93 2b 17 	sts	0x172B, r24	; 0x80172b <crc_sum.1945>
    4a94:	90 91 2e 17 	lds	r25, 0x172E	; 0x80172e <_mh_state>
    4a98:	91 30       	cpi	r25, 0x01	; 1
    4a9a:	79 f0       	breq	.+30     	; 0x4aba <_serialCallBack+0x30>
    4a9c:	28 f0       	brcs	.+10     	; 0x4aa8 <_serialCallBack+0x1e>
    4a9e:	92 30       	cpi	r25, 0x02	; 2
    4aa0:	a9 f0       	breq	.+42     	; 0x4acc <_serialCallBack+0x42>
    4aa2:	93 30       	cpi	r25, 0x03	; 3
    4aa4:	19 f1       	breq	.+70     	; 0x4aec <_serialCallBack+0x62>
    4aa6:	08 95       	ret
    4aa8:	6f 3f       	cpi	r22, 0xFF	; 255
    4aaa:	09 f0       	breq	.+2      	; 0x4aae <_serialCallBack+0x24>
    4aac:	48 c0       	rjmp	.+144    	; 0x4b3e <_serialCallBack+0xb4>
    4aae:	10 92 2b 17 	sts	0x172B, r1	; 0x80172b <crc_sum.1945>
    4ab2:	81 e0       	ldi	r24, 0x01	; 1
    4ab4:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <_mh_state>
    4ab8:	08 95       	ret
    4aba:	66 38       	cpi	r22, 0x86	; 134
    4abc:	09 f0       	breq	.+2      	; 0x4ac0 <_serialCallBack+0x36>
    4abe:	3f c0       	rjmp	.+126    	; 0x4b3e <_serialCallBack+0xb4>
    4ac0:	10 92 2a 17 	sts	0x172A, r1	; 0x80172a <inDex.1943>
    4ac4:	82 e0       	ldi	r24, 0x02	; 2
    4ac6:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <_mh_state>
    4aca:	08 95       	ret
    4acc:	e0 91 2a 17 	lds	r30, 0x172A	; 0x80172a <inDex.1943>
    4ad0:	81 e0       	ldi	r24, 0x01	; 1
    4ad2:	8e 0f       	add	r24, r30
    4ad4:	80 93 2a 17 	sts	0x172A, r24	; 0x80172a <inDex.1943>
    4ad8:	f0 e0       	ldi	r31, 0x00	; 0
    4ada:	e8 5d       	subi	r30, 0xD8	; 216
    4adc:	f8 4e       	sbci	r31, 0xE8	; 232
    4ade:	60 83       	st	Z, r22
    4ae0:	82 30       	cpi	r24, 0x02	; 2
    4ae2:	69 f5       	brne	.+90     	; 0x4b3e <_serialCallBack+0xb4>
    4ae4:	83 e0       	ldi	r24, 0x03	; 3
    4ae6:	80 93 2e 17 	sts	0x172E, r24	; 0x80172e <_mh_state>
    4aea:	08 95       	ret
    4aec:	90 91 2a 17 	lds	r25, 0x172A	; 0x80172a <inDex.1943>
    4af0:	21 e0       	ldi	r18, 0x01	; 1
    4af2:	29 0f       	add	r18, r25
    4af4:	20 93 2a 17 	sts	0x172A, r18	; 0x80172a <inDex.1943>
    4af8:	96 30       	cpi	r25, 0x06	; 6
    4afa:	09 f5       	brne	.+66     	; 0x4b3e <_serialCallBack+0xb4>
    4afc:	81 11       	cpse	r24, r1
    4afe:	0e c0       	rjmp	.+28     	; 0x4b1c <_serialCallBack+0x92>
    4b00:	e8 e2       	ldi	r30, 0x28	; 40
    4b02:	f7 e1       	ldi	r31, 0x17	; 23
    4b04:	80 81       	ld	r24, Z
    4b06:	90 e0       	ldi	r25, 0x00	; 0
    4b08:	98 2f       	mov	r25, r24
    4b0a:	88 27       	eor	r24, r24
    4b0c:	21 81       	ldd	r18, Z+1	; 0x01
    4b0e:	82 0f       	add	r24, r18
    4b10:	91 1d       	adc	r25, r1
    4b12:	90 93 30 17 	sts	0x1730, r25	; 0x801730 <_ppm+0x1>
    4b16:	80 93 2f 17 	sts	0x172F, r24	; 0x80172f <_ppm>
    4b1a:	04 c0       	rjmp	.+8      	; 0x4b24 <_serialCallBack+0x9a>
    4b1c:	10 92 30 17 	sts	0x1730, r1	; 0x801730 <_ppm+0x1>
    4b20:	10 92 2f 17 	sts	0x172F, r1	; 0x80172f <_ppm>
    4b24:	10 92 2e 17 	sts	0x172E, r1	; 0x80172e <_mh_state>
    4b28:	e0 91 2c 17 	lds	r30, 0x172C	; 0x80172c <_appCallBack>
    4b2c:	f0 91 2d 17 	lds	r31, 0x172D	; 0x80172d <_appCallBack+0x1>
    4b30:	30 97       	sbiw	r30, 0x00	; 0
    4b32:	29 f0       	breq	.+10     	; 0x4b3e <_serialCallBack+0xb4>
    4b34:	80 91 2f 17 	lds	r24, 0x172F	; 0x80172f <_ppm>
    4b38:	90 91 30 17 	lds	r25, 0x1730	; 0x801730 <_ppm+0x1>
    4b3c:	19 95       	eicall
    4b3e:	08 95       	ret

00004b40 <mh_z19_initialise>:
    4b40:	8f 92       	push	r8
    4b42:	9f 92       	push	r9
    4b44:	af 92       	push	r10
    4b46:	cf 92       	push	r12
    4b48:	ef 92       	push	r14
    4b4a:	0f 93       	push	r16
    4b4c:	0f 2e       	mov	r0, r31
    4b4e:	f5 e4       	ldi	r31, 0x45	; 69
    4b50:	8f 2e       	mov	r8, r31
    4b52:	f5 e2       	ldi	r31, 0x25	; 37
    4b54:	9f 2e       	mov	r9, r31
    4b56:	f0 2d       	mov	r31, r0
    4b58:	68 94       	set
    4b5a:	aa 24       	eor	r10, r10
    4b5c:	a4 f8       	bld	r10, 4
    4b5e:	68 94       	set
    4b60:	cc 24       	eor	r12, r12
    4b62:	c4 f8       	bld	r12, 4
    4b64:	e1 2c       	mov	r14, r1
    4b66:	00 e0       	ldi	r16, 0x00	; 0
    4b68:	23 e0       	ldi	r18, 0x03	; 3
    4b6a:	40 e8       	ldi	r20, 0x80	; 128
    4b6c:	55 e2       	ldi	r21, 0x25	; 37
    4b6e:	60 e0       	ldi	r22, 0x00	; 0
    4b70:	70 e0       	ldi	r23, 0x00	; 0
    4b72:	4b d0       	rcall	.+150    	; 0x4c0a <serial_create>
    4b74:	90 93 32 17 	sts	0x1732, r25	; 0x801732 <_serial+0x1>
    4b78:	80 93 31 17 	sts	0x1731, r24	; 0x801731 <_serial>
    4b7c:	0f 91       	pop	r16
    4b7e:	ef 90       	pop	r14
    4b80:	cf 90       	pop	r12
    4b82:	af 90       	pop	r10
    4b84:	9f 90       	pop	r9
    4b86:	8f 90       	pop	r8
    4b88:	08 95       	ret

00004b8a <mh_z19_takeMeassuring>:
    4b8a:	cf 93       	push	r28
    4b8c:	df 93       	push	r29
    4b8e:	cd b7       	in	r28, 0x3d	; 61
    4b90:	de b7       	in	r29, 0x3e	; 62
    4b92:	29 97       	sbiw	r28, 0x09	; 9
    4b94:	0f b6       	in	r0, 0x3f	; 63
    4b96:	f8 94       	cli
    4b98:	de bf       	out	0x3e, r29	; 62
    4b9a:	0f be       	out	0x3f, r0	; 63
    4b9c:	cd bf       	out	0x3d, r28	; 61
    4b9e:	89 e0       	ldi	r24, 0x09	; 9
    4ba0:	e2 e4       	ldi	r30, 0x42	; 66
    4ba2:	f2 e0       	ldi	r31, 0x02	; 2
    4ba4:	9e 01       	movw	r18, r28
    4ba6:	2f 5f       	subi	r18, 0xFF	; 255
    4ba8:	3f 4f       	sbci	r19, 0xFF	; 255
    4baa:	d9 01       	movw	r26, r18
    4bac:	01 90       	ld	r0, Z+
    4bae:	0d 92       	st	X+, r0
    4bb0:	8a 95       	dec	r24
    4bb2:	e1 f7       	brne	.-8      	; 0x4bac <mh_z19_takeMeassuring+0x22>
    4bb4:	10 92 30 17 	sts	0x1730, r1	; 0x801730 <_ppm+0x1>
    4bb8:	10 92 2f 17 	sts	0x172F, r1	; 0x80172f <_ppm>
    4bbc:	80 91 31 17 	lds	r24, 0x1731	; 0x801731 <_serial>
    4bc0:	90 91 32 17 	lds	r25, 0x1732	; 0x801732 <_serial+0x1>
    4bc4:	00 97       	sbiw	r24, 0x00	; 0
    4bc6:	31 f0       	breq	.+12     	; 0x4bd4 <mh_z19_takeMeassuring+0x4a>
    4bc8:	42 2f       	mov	r20, r18
    4bca:	53 2f       	mov	r21, r19
    4bcc:	69 e0       	ldi	r22, 0x09	; 9
    4bce:	ef d0       	rcall	.+478    	; 0x4dae <serial_sendBytes>
    4bd0:	80 e0       	ldi	r24, 0x00	; 0
    4bd2:	01 c0       	rjmp	.+2      	; 0x4bd6 <mh_z19_takeMeassuring+0x4c>
    4bd4:	82 e0       	ldi	r24, 0x02	; 2
    4bd6:	29 96       	adiw	r28, 0x09	; 9
    4bd8:	0f b6       	in	r0, 0x3f	; 63
    4bda:	f8 94       	cli
    4bdc:	de bf       	out	0x3e, r29	; 62
    4bde:	0f be       	out	0x3f, r0	; 63
    4be0:	cd bf       	out	0x3d, r28	; 61
    4be2:	df 91       	pop	r29
    4be4:	cf 91       	pop	r28
    4be6:	08 95       	ret

00004be8 <mh_z19_getCo2Ppm>:
    4be8:	20 91 2f 17 	lds	r18, 0x172F	; 0x80172f <_ppm>
    4bec:	30 91 30 17 	lds	r19, 0x1730	; 0x801730 <_ppm+0x1>
    4bf0:	21 15       	cp	r18, r1
    4bf2:	31 05       	cpc	r19, r1
    4bf4:	29 f4       	brne	.+10     	; 0x4c00 <mh_z19_getCo2Ppm+0x18>
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	11 82       	std	Z+1, r1	; 0x01
    4bfa:	10 82       	st	Z, r1
    4bfc:	81 e0       	ldi	r24, 0x01	; 1
    4bfe:	08 95       	ret
    4c00:	fc 01       	movw	r30, r24
    4c02:	31 83       	std	Z+1, r19	; 0x01
    4c04:	20 83       	st	Z, r18
    4c06:	80 e0       	ldi	r24, 0x00	; 0
    4c08:	08 95       	ret

00004c0a <serial_create>:
    4c0a:	2f 92       	push	r2
    4c0c:	3f 92       	push	r3
    4c0e:	4f 92       	push	r4
    4c10:	5f 92       	push	r5
    4c12:	6f 92       	push	r6
    4c14:	7f 92       	push	r7
    4c16:	8f 92       	push	r8
    4c18:	9f 92       	push	r9
    4c1a:	af 92       	push	r10
    4c1c:	cf 92       	push	r12
    4c1e:	ef 92       	push	r14
    4c20:	ff 92       	push	r15
    4c22:	0f 93       	push	r16
    4c24:	1f 93       	push	r17
    4c26:	cf 93       	push	r28
    4c28:	df 93       	push	r29
    4c2a:	cd b7       	in	r28, 0x3d	; 61
    4c2c:	de b7       	in	r29, 0x3e	; 62
    4c2e:	f8 2e       	mov	r15, r24
    4c30:	2a 01       	movw	r4, r20
    4c32:	3b 01       	movw	r6, r22
    4c34:	88 e0       	ldi	r24, 0x08	; 8
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	0e 94 2b 30 	call	0x6056	; 0x6056 <malloc>
    4c3c:	8c 01       	movw	r16, r24
    4c3e:	8f 2d       	mov	r24, r15
    4c40:	90 e0       	ldi	r25, 0x00	; 0
    4c42:	fc 01       	movw	r30, r24
    4c44:	ee 0f       	add	r30, r30
    4c46:	ff 1f       	adc	r31, r31
    4c48:	ed 5c       	subi	r30, 0xCD	; 205
    4c4a:	f8 4e       	sbci	r31, 0xE8	; 232
    4c4c:	11 83       	std	Z+1, r17	; 0x01
    4c4e:	00 83       	st	Z, r16
    4c50:	01 15       	cp	r16, r1
    4c52:	11 05       	cpc	r17, r1
    4c54:	09 f4       	brne	.+2      	; 0x4c58 <serial_create+0x4e>
    4c56:	6e c0       	rjmp	.+220    	; 0x4d34 <serial_create+0x12a>
    4c58:	88 0f       	add	r24, r24
    4c5a:	99 1f       	adc	r25, r25
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	e5 5f       	subi	r30, 0xF5	; 245
    4c60:	fd 4f       	sbci	r31, 0xFD	; 253
    4c62:	80 81       	ld	r24, Z
    4c64:	91 81       	ldd	r25, Z+1	; 0x01
    4c66:	d8 01       	movw	r26, r16
    4c68:	8d 93       	st	X+, r24
    4c6a:	9c 93       	st	X, r25
    4c6c:	8c 2d       	mov	r24, r12
    4c6e:	90 e0       	ldi	r25, 0x00	; 0
    4c70:	88 0f       	add	r24, r24
    4c72:	99 1f       	adc	r25, r25
    4c74:	88 0f       	add	r24, r24
    4c76:	99 1f       	adc	r25, r25
    4c78:	0e 94 2b 30 	call	0x6056	; 0x6056 <malloc>
    4c7c:	1c 01       	movw	r2, r24
    4c7e:	86 e0       	ldi	r24, 0x06	; 6
    4c80:	90 e0       	ldi	r25, 0x00	; 0
    4c82:	0e 94 2b 30 	call	0x6056	; 0x6056 <malloc>
    4c86:	7c 01       	movw	r14, r24
    4c88:	4c 2d       	mov	r20, r12
    4c8a:	b1 01       	movw	r22, r2
    4c8c:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <fifo_init>
    4c90:	f8 01       	movw	r30, r16
    4c92:	f5 82       	std	Z+5, r15	; 0x05
    4c94:	e4 82       	std	Z+4, r14	; 0x04
    4c96:	8a 2d       	mov	r24, r10
    4c98:	90 e0       	ldi	r25, 0x00	; 0
    4c9a:	88 0f       	add	r24, r24
    4c9c:	99 1f       	adc	r25, r25
    4c9e:	88 0f       	add	r24, r24
    4ca0:	99 1f       	adc	r25, r25
    4ca2:	0e 94 2b 30 	call	0x6056	; 0x6056 <malloc>
    4ca6:	1c 01       	movw	r2, r24
    4ca8:	86 e0       	ldi	r24, 0x06	; 6
    4caa:	90 e0       	ldi	r25, 0x00	; 0
    4cac:	0e 94 2b 30 	call	0x6056	; 0x6056 <malloc>
    4cb0:	7c 01       	movw	r14, r24
    4cb2:	4a 2d       	mov	r20, r10
    4cb4:	b1 01       	movw	r22, r2
    4cb6:	0e 94 85 2e 	call	0x5d0a	; 0x5d0a <fifo_init>
    4cba:	d8 01       	movw	r26, r16
    4cbc:	13 96       	adiw	r26, 0x03	; 3
    4cbe:	fc 92       	st	X, r15
    4cc0:	ee 92       	st	-X, r14
    4cc2:	12 97       	sbiw	r26, 0x02	; 2
    4cc4:	17 96       	adiw	r26, 0x07	; 7
    4cc6:	9c 92       	st	X, r9
    4cc8:	8e 92       	st	-X, r8
    4cca:	16 97       	sbiw	r26, 0x06	; 6
    4ccc:	ff b6       	in	r15, 0x3f	; 63
    4cce:	f8 94       	cli
    4cd0:	ed 91       	ld	r30, X+
    4cd2:	fc 91       	ld	r31, X
    4cd4:	11 97       	sbiw	r26, 0x01	; 1
    4cd6:	36 97       	sbiw	r30, 0x06	; 6
    4cd8:	80 81       	ld	r24, Z
    4cda:	82 60       	ori	r24, 0x02	; 2
    4cdc:	80 83       	st	Z, r24
    4cde:	8d 90       	ld	r8, X+
    4ce0:	9c 90       	ld	r9, X
    4ce2:	c3 01       	movw	r24, r6
    4ce4:	b2 01       	movw	r22, r4
    4ce6:	18 d8       	rcall	.-4048   	; 0x3d18 <__floatunsisf>
    4ce8:	20 e0       	ldi	r18, 0x00	; 0
    4cea:	30 e0       	ldi	r19, 0x00	; 0
    4cec:	40 e0       	ldi	r20, 0x00	; 0
    4cee:	51 e4       	ldi	r21, 0x41	; 65
    4cf0:	0e 94 9b 2f 	call	0x5f36	; 0x5f36 <__mulsf3>
    4cf4:	9b 01       	movw	r18, r22
    4cf6:	ac 01       	movw	r20, r24
    4cf8:	60 e0       	ldi	r22, 0x00	; 0
    4cfa:	74 e2       	ldi	r23, 0x24	; 36
    4cfc:	84 e7       	ldi	r24, 0x74	; 116
    4cfe:	9b e4       	ldi	r25, 0x4B	; 75
    4d00:	0e 94 08 2f 	call	0x5e10	; 0x5e10 <__divsf3>
    4d04:	20 e0       	ldi	r18, 0x00	; 0
    4d06:	30 e0       	ldi	r19, 0x00	; 0
    4d08:	40 e8       	ldi	r20, 0x80	; 128
    4d0a:	5f e3       	ldi	r21, 0x3F	; 63
    4d0c:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <__subsf3>
    4d10:	0e 94 60 1e 	call	0x3cc0	; 0x3cc0 <__fixunssfsi>
    4d14:	f4 01       	movw	r30, r8
    4d16:	32 97       	sbiw	r30, 0x02	; 2
    4d18:	60 83       	st	Z, r22
    4d1a:	d8 01       	movw	r26, r16
    4d1c:	ed 91       	ld	r30, X+
    4d1e:	fc 91       	ld	r31, X
    4d20:	11 97       	sbiw	r26, 0x01	; 1
    4d22:	35 97       	sbiw	r30, 0x05	; 5
    4d24:	88 e9       	ldi	r24, 0x98	; 152
    4d26:	80 83       	st	Z, r24
    4d28:	ed 91       	ld	r30, X+
    4d2a:	fc 91       	ld	r31, X
    4d2c:	34 97       	sbiw	r30, 0x04	; 4
    4d2e:	86 e0       	ldi	r24, 0x06	; 6
    4d30:	80 83       	st	Z, r24
    4d32:	ff be       	out	0x3f, r15	; 63
    4d34:	c8 01       	movw	r24, r16
    4d36:	df 91       	pop	r29
    4d38:	cf 91       	pop	r28
    4d3a:	1f 91       	pop	r17
    4d3c:	0f 91       	pop	r16
    4d3e:	ff 90       	pop	r15
    4d40:	ef 90       	pop	r14
    4d42:	cf 90       	pop	r12
    4d44:	af 90       	pop	r10
    4d46:	9f 90       	pop	r9
    4d48:	8f 90       	pop	r8
    4d4a:	7f 90       	pop	r7
    4d4c:	6f 90       	pop	r6
    4d4e:	5f 90       	pop	r5
    4d50:	4f 90       	pop	r4
    4d52:	3f 90       	pop	r3
    4d54:	2f 90       	pop	r2
    4d56:	08 95       	ret

00004d58 <serial_sendByte>:
    4d58:	cf 93       	push	r28
    4d5a:	df 93       	push	r29
    4d5c:	dc 01       	movw	r26, r24
    4d5e:	89 2b       	or	r24, r25
    4d60:	01 f1       	breq	.+64     	; 0x4da2 <serial_sendByte+0x4a>
    4d62:	12 96       	adiw	r26, 0x02	; 2
    4d64:	ed 91       	ld	r30, X+
    4d66:	fc 91       	ld	r31, X
    4d68:	13 97       	sbiw	r26, 0x03	; 3
    4d6a:	93 81       	ldd	r25, Z+3	; 0x03
    4d6c:	82 81       	ldd	r24, Z+2	; 0x02
    4d6e:	25 81       	ldd	r18, Z+5	; 0x05
    4d70:	98 1b       	sub	r25, r24
    4d72:	92 23       	and	r25, r18
    4d74:	84 81       	ldd	r24, Z+4	; 0x04
    4d76:	98 17       	cp	r25, r24
    4d78:	b1 f0       	breq	.+44     	; 0x4da6 <serial_sendByte+0x4e>
    4d7a:	83 81       	ldd	r24, Z+3	; 0x03
    4d7c:	26 95       	lsr	r18
    4d7e:	28 23       	and	r18, r24
    4d80:	c0 81       	ld	r28, Z
    4d82:	d1 81       	ldd	r29, Z+1	; 0x01
    4d84:	c2 0f       	add	r28, r18
    4d86:	d1 1d       	adc	r29, r1
    4d88:	68 83       	st	Y, r22
    4d8a:	8f 5f       	subi	r24, 0xFF	; 255
    4d8c:	95 81       	ldd	r25, Z+5	; 0x05
    4d8e:	89 23       	and	r24, r25
    4d90:	83 83       	std	Z+3, r24	; 0x03
    4d92:	ed 91       	ld	r30, X+
    4d94:	fc 91       	ld	r31, X
    4d96:	35 97       	sbiw	r30, 0x05	; 5
    4d98:	80 81       	ld	r24, Z
    4d9a:	80 62       	ori	r24, 0x20	; 32
    4d9c:	80 83       	st	Z, r24
    4d9e:	80 e0       	ldi	r24, 0x00	; 0
    4da0:	03 c0       	rjmp	.+6      	; 0x4da8 <serial_sendByte+0x50>
    4da2:	81 e0       	ldi	r24, 0x01	; 1
    4da4:	01 c0       	rjmp	.+2      	; 0x4da8 <serial_sendByte+0x50>
    4da6:	82 e0       	ldi	r24, 0x02	; 2
    4da8:	df 91       	pop	r29
    4daa:	cf 91       	pop	r28
    4dac:	08 95       	ret

00004dae <serial_sendBytes>:
    4dae:	ef 92       	push	r14
    4db0:	ff 92       	push	r15
    4db2:	0f 93       	push	r16
    4db4:	1f 93       	push	r17
    4db6:	cf 93       	push	r28
    4db8:	df 93       	push	r29
    4dba:	7c 01       	movw	r14, r24
    4dbc:	00 97       	sbiw	r24, 0x00	; 0
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <serial_sendBytes+0x14>
    4dc0:	41 c0       	rjmp	.+130    	; 0x4e44 <serial_sendBytes+0x96>
    4dc2:	dc 01       	movw	r26, r24
    4dc4:	12 96       	adiw	r26, 0x02	; 2
    4dc6:	ed 91       	ld	r30, X+
    4dc8:	fc 91       	ld	r31, X
    4dca:	13 97       	sbiw	r26, 0x03	; 3
    4dcc:	93 81       	ldd	r25, Z+3	; 0x03
    4dce:	82 81       	ldd	r24, Z+2	; 0x02
    4dd0:	98 1b       	sub	r25, r24
    4dd2:	85 81       	ldd	r24, Z+5	; 0x05
    4dd4:	98 23       	and	r25, r24
    4dd6:	84 81       	ldd	r24, Z+4	; 0x04
    4dd8:	89 1b       	sub	r24, r25
    4dda:	86 17       	cp	r24, r22
    4ddc:	a8 f1       	brcs	.+106    	; 0x4e48 <serial_sendBytes+0x9a>
    4dde:	66 23       	and	r22, r22
    4de0:	41 f1       	breq	.+80     	; 0x4e32 <serial_sendBytes+0x84>
    4de2:	84 2f       	mov	r24, r20
    4de4:	95 2f       	mov	r25, r21
    4de6:	dc 01       	movw	r26, r24
    4de8:	61 50       	subi	r22, 0x01	; 1
    4dea:	46 2f       	mov	r20, r22
    4dec:	50 e0       	ldi	r21, 0x00	; 0
    4dee:	4f 5f       	subi	r20, 0xFF	; 255
    4df0:	5f 4f       	sbci	r21, 0xFF	; 255
    4df2:	48 0f       	add	r20, r24
    4df4:	59 1f       	adc	r21, r25
    4df6:	e7 01       	movw	r28, r14
    4df8:	ea 81       	ldd	r30, Y+2	; 0x02
    4dfa:	fb 81       	ldd	r31, Y+3	; 0x03
    4dfc:	93 81       	ldd	r25, Z+3	; 0x03
    4dfe:	82 81       	ldd	r24, Z+2	; 0x02
    4e00:	25 81       	ldd	r18, Z+5	; 0x05
    4e02:	98 1b       	sub	r25, r24
    4e04:	92 23       	and	r25, r18
    4e06:	84 81       	ldd	r24, Z+4	; 0x04
    4e08:	98 17       	cp	r25, r24
    4e0a:	79 f0       	breq	.+30     	; 0x4e2a <serial_sendBytes+0x7c>
    4e0c:	8c 91       	ld	r24, X
    4e0e:	93 81       	ldd	r25, Z+3	; 0x03
    4e10:	26 95       	lsr	r18
    4e12:	29 23       	and	r18, r25
    4e14:	60 81       	ld	r22, Z
    4e16:	71 81       	ldd	r23, Z+1	; 0x01
    4e18:	8b 01       	movw	r16, r22
    4e1a:	02 0f       	add	r16, r18
    4e1c:	11 1d       	adc	r17, r1
    4e1e:	e8 01       	movw	r28, r16
    4e20:	88 83       	st	Y, r24
    4e22:	9f 5f       	subi	r25, 0xFF	; 255
    4e24:	85 81       	ldd	r24, Z+5	; 0x05
    4e26:	98 23       	and	r25, r24
    4e28:	93 83       	std	Z+3, r25	; 0x03
    4e2a:	11 96       	adiw	r26, 0x01	; 1
    4e2c:	a4 17       	cp	r26, r20
    4e2e:	b5 07       	cpc	r27, r21
    4e30:	11 f7       	brne	.-60     	; 0x4df6 <serial_sendBytes+0x48>
    4e32:	d7 01       	movw	r26, r14
    4e34:	ed 91       	ld	r30, X+
    4e36:	fc 91       	ld	r31, X
    4e38:	35 97       	sbiw	r30, 0x05	; 5
    4e3a:	80 81       	ld	r24, Z
    4e3c:	80 62       	ori	r24, 0x20	; 32
    4e3e:	80 83       	st	Z, r24
    4e40:	80 e0       	ldi	r24, 0x00	; 0
    4e42:	03 c0       	rjmp	.+6      	; 0x4e4a <serial_sendBytes+0x9c>
    4e44:	81 e0       	ldi	r24, 0x01	; 1
    4e46:	01 c0       	rjmp	.+2      	; 0x4e4a <serial_sendBytes+0x9c>
    4e48:	82 e0       	ldi	r24, 0x02	; 2
    4e4a:	df 91       	pop	r29
    4e4c:	cf 91       	pop	r28
    4e4e:	1f 91       	pop	r17
    4e50:	0f 91       	pop	r16
    4e52:	ff 90       	pop	r15
    4e54:	ef 90       	pop	r14
    4e56:	08 95       	ret

00004e58 <serial_getByte>:
    4e58:	00 97       	sbiw	r24, 0x00	; 0
    4e5a:	d1 f0       	breq	.+52     	; 0x4e90 <serial_getByte+0x38>
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	14 96       	adiw	r26, 0x04	; 4
    4e60:	ed 91       	ld	r30, X+
    4e62:	fc 91       	ld	r31, X
    4e64:	15 97       	sbiw	r26, 0x05	; 5
    4e66:	93 81       	ldd	r25, Z+3	; 0x03
    4e68:	82 81       	ldd	r24, Z+2	; 0x02
    4e6a:	98 17       	cp	r25, r24
    4e6c:	99 f0       	breq	.+38     	; 0x4e94 <serial_getByte+0x3c>
    4e6e:	92 81       	ldd	r25, Z+2	; 0x02
    4e70:	85 81       	ldd	r24, Z+5	; 0x05
    4e72:	86 95       	lsr	r24
    4e74:	89 23       	and	r24, r25
    4e76:	a0 81       	ld	r26, Z
    4e78:	b1 81       	ldd	r27, Z+1	; 0x01
    4e7a:	a8 0f       	add	r26, r24
    4e7c:	b1 1d       	adc	r27, r1
    4e7e:	8c 91       	ld	r24, X
    4e80:	db 01       	movw	r26, r22
    4e82:	8c 93       	st	X, r24
    4e84:	9f 5f       	subi	r25, 0xFF	; 255
    4e86:	85 81       	ldd	r24, Z+5	; 0x05
    4e88:	98 23       	and	r25, r24
    4e8a:	92 83       	std	Z+2, r25	; 0x02
    4e8c:	80 e0       	ldi	r24, 0x00	; 0
    4e8e:	08 95       	ret
    4e90:	81 e0       	ldi	r24, 0x01	; 1
    4e92:	08 95       	ret
    4e94:	83 e0       	ldi	r24, 0x03	; 3
    4e96:	08 95       	ret

00004e98 <__vector_25>:
    4e98:	1f 92       	push	r1
    4e9a:	0f 92       	push	r0
    4e9c:	0f b6       	in	r0, 0x3f	; 63
    4e9e:	0f 92       	push	r0
    4ea0:	11 24       	eor	r1, r1
    4ea2:	0b b6       	in	r0, 0x3b	; 59
    4ea4:	0f 92       	push	r0
    4ea6:	2f 93       	push	r18
    4ea8:	3f 93       	push	r19
    4eaa:	4f 93       	push	r20
    4eac:	5f 93       	push	r21
    4eae:	6f 93       	push	r22
    4eb0:	7f 93       	push	r23
    4eb2:	8f 93       	push	r24
    4eb4:	9f 93       	push	r25
    4eb6:	af 93       	push	r26
    4eb8:	bf 93       	push	r27
    4eba:	cf 93       	push	r28
    4ebc:	df 93       	push	r29
    4ebe:	ef 93       	push	r30
    4ec0:	ff 93       	push	r31
    4ec2:	a0 91 33 17 	lds	r26, 0x1733	; 0x801733 <_ser_handle>
    4ec6:	b0 91 34 17 	lds	r27, 0x1734	; 0x801734 <_ser_handle+0x1>
    4eca:	10 97       	sbiw	r26, 0x00	; 0
    4ecc:	11 f1       	breq	.+68     	; 0x4f12 <__vector_25+0x7a>
    4ece:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4ed2:	14 96       	adiw	r26, 0x04	; 4
    4ed4:	ed 91       	ld	r30, X+
    4ed6:	fc 91       	ld	r31, X
    4ed8:	15 97       	sbiw	r26, 0x05	; 5
    4eda:	93 81       	ldd	r25, Z+3	; 0x03
    4edc:	82 81       	ldd	r24, Z+2	; 0x02
    4ede:	25 81       	ldd	r18, Z+5	; 0x05
    4ee0:	98 1b       	sub	r25, r24
    4ee2:	92 23       	and	r25, r18
    4ee4:	84 81       	ldd	r24, Z+4	; 0x04
    4ee6:	98 17       	cp	r25, r24
    4ee8:	61 f0       	breq	.+24     	; 0x4f02 <__vector_25+0x6a>
    4eea:	83 81       	ldd	r24, Z+3	; 0x03
    4eec:	26 95       	lsr	r18
    4eee:	28 23       	and	r18, r24
    4ef0:	c0 81       	ld	r28, Z
    4ef2:	d1 81       	ldd	r29, Z+1	; 0x01
    4ef4:	c2 0f       	add	r28, r18
    4ef6:	d1 1d       	adc	r29, r1
    4ef8:	68 83       	st	Y, r22
    4efa:	8f 5f       	subi	r24, 0xFF	; 255
    4efc:	95 81       	ldd	r25, Z+5	; 0x05
    4efe:	89 23       	and	r24, r25
    4f00:	83 83       	std	Z+3, r24	; 0x03
    4f02:	16 96       	adiw	r26, 0x06	; 6
    4f04:	ed 91       	ld	r30, X+
    4f06:	fc 91       	ld	r31, X
    4f08:	17 97       	sbiw	r26, 0x07	; 7
    4f0a:	30 97       	sbiw	r30, 0x00	; 0
    4f0c:	11 f0       	breq	.+4      	; 0x4f12 <__vector_25+0x7a>
    4f0e:	cd 01       	movw	r24, r26
    4f10:	19 95       	eicall
    4f12:	ff 91       	pop	r31
    4f14:	ef 91       	pop	r30
    4f16:	df 91       	pop	r29
    4f18:	cf 91       	pop	r28
    4f1a:	bf 91       	pop	r27
    4f1c:	af 91       	pop	r26
    4f1e:	9f 91       	pop	r25
    4f20:	8f 91       	pop	r24
    4f22:	7f 91       	pop	r23
    4f24:	6f 91       	pop	r22
    4f26:	5f 91       	pop	r21
    4f28:	4f 91       	pop	r20
    4f2a:	3f 91       	pop	r19
    4f2c:	2f 91       	pop	r18
    4f2e:	0f 90       	pop	r0
    4f30:	0b be       	out	0x3b, r0	; 59
    4f32:	0f 90       	pop	r0
    4f34:	0f be       	out	0x3f, r0	; 63
    4f36:	0f 90       	pop	r0
    4f38:	1f 90       	pop	r1
    4f3a:	18 95       	reti

00004f3c <__vector_26>:
    4f3c:	1f 92       	push	r1
    4f3e:	0f 92       	push	r0
    4f40:	0f b6       	in	r0, 0x3f	; 63
    4f42:	0f 92       	push	r0
    4f44:	11 24       	eor	r1, r1
    4f46:	0b b6       	in	r0, 0x3b	; 59
    4f48:	0f 92       	push	r0
    4f4a:	2f 93       	push	r18
    4f4c:	8f 93       	push	r24
    4f4e:	9f 93       	push	r25
    4f50:	af 93       	push	r26
    4f52:	bf 93       	push	r27
    4f54:	ef 93       	push	r30
    4f56:	ff 93       	push	r31
    4f58:	e0 91 33 17 	lds	r30, 0x1733	; 0x801733 <_ser_handle>
    4f5c:	f0 91 34 17 	lds	r31, 0x1734	; 0x801734 <_ser_handle+0x1>
    4f60:	30 97       	sbiw	r30, 0x00	; 0
    4f62:	b9 f0       	breq	.+46     	; 0x4f92 <__vector_26+0x56>
    4f64:	02 80       	ldd	r0, Z+2	; 0x02
    4f66:	f3 81       	ldd	r31, Z+3	; 0x03
    4f68:	e0 2d       	mov	r30, r0
    4f6a:	93 81       	ldd	r25, Z+3	; 0x03
    4f6c:	82 81       	ldd	r24, Z+2	; 0x02
    4f6e:	98 17       	cp	r25, r24
    4f70:	b1 f0       	breq	.+44     	; 0x4f9e <__vector_26+0x62>
    4f72:	92 81       	ldd	r25, Z+2	; 0x02
    4f74:	85 81       	ldd	r24, Z+5	; 0x05
    4f76:	28 2f       	mov	r18, r24
    4f78:	26 95       	lsr	r18
    4f7a:	29 23       	and	r18, r25
    4f7c:	a0 81       	ld	r26, Z
    4f7e:	b1 81       	ldd	r27, Z+1	; 0x01
    4f80:	a2 0f       	add	r26, r18
    4f82:	b1 1d       	adc	r27, r1
    4f84:	2c 91       	ld	r18, X
    4f86:	9f 5f       	subi	r25, 0xFF	; 255
    4f88:	89 23       	and	r24, r25
    4f8a:	82 83       	std	Z+2, r24	; 0x02
    4f8c:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4f90:	0b c0       	rjmp	.+22     	; 0x4fa8 <__vector_26+0x6c>
    4f92:	e1 ec       	ldi	r30, 0xC1	; 193
    4f94:	f0 e0       	ldi	r31, 0x00	; 0
    4f96:	80 81       	ld	r24, Z
    4f98:	8f 7d       	andi	r24, 0xDF	; 223
    4f9a:	80 83       	st	Z, r24
    4f9c:	05 c0       	rjmp	.+10     	; 0x4fa8 <__vector_26+0x6c>
    4f9e:	e1 ec       	ldi	r30, 0xC1	; 193
    4fa0:	f0 e0       	ldi	r31, 0x00	; 0
    4fa2:	80 81       	ld	r24, Z
    4fa4:	8f 7d       	andi	r24, 0xDF	; 223
    4fa6:	80 83       	st	Z, r24
    4fa8:	ff 91       	pop	r31
    4faa:	ef 91       	pop	r30
    4fac:	bf 91       	pop	r27
    4fae:	af 91       	pop	r26
    4fb0:	9f 91       	pop	r25
    4fb2:	8f 91       	pop	r24
    4fb4:	2f 91       	pop	r18
    4fb6:	0f 90       	pop	r0
    4fb8:	0b be       	out	0x3b, r0	; 59
    4fba:	0f 90       	pop	r0
    4fbc:	0f be       	out	0x3f, r0	; 63
    4fbe:	0f 90       	pop	r0
    4fc0:	1f 90       	pop	r1
    4fc2:	18 95       	reti

00004fc4 <__vector_36>:
    4fc4:	1f 92       	push	r1
    4fc6:	0f 92       	push	r0
    4fc8:	0f b6       	in	r0, 0x3f	; 63
    4fca:	0f 92       	push	r0
    4fcc:	11 24       	eor	r1, r1
    4fce:	0b b6       	in	r0, 0x3b	; 59
    4fd0:	0f 92       	push	r0
    4fd2:	2f 93       	push	r18
    4fd4:	3f 93       	push	r19
    4fd6:	4f 93       	push	r20
    4fd8:	5f 93       	push	r21
    4fda:	6f 93       	push	r22
    4fdc:	7f 93       	push	r23
    4fde:	8f 93       	push	r24
    4fe0:	9f 93       	push	r25
    4fe2:	af 93       	push	r26
    4fe4:	bf 93       	push	r27
    4fe6:	cf 93       	push	r28
    4fe8:	df 93       	push	r29
    4fea:	ef 93       	push	r30
    4fec:	ff 93       	push	r31
    4fee:	a0 91 35 17 	lds	r26, 0x1735	; 0x801735 <_ser_handle+0x2>
    4ff2:	b0 91 36 17 	lds	r27, 0x1736	; 0x801736 <_ser_handle+0x3>
    4ff6:	10 97       	sbiw	r26, 0x00	; 0
    4ff8:	11 f1       	breq	.+68     	; 0x503e <__vector_36+0x7a>
    4ffa:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    4ffe:	14 96       	adiw	r26, 0x04	; 4
    5000:	ed 91       	ld	r30, X+
    5002:	fc 91       	ld	r31, X
    5004:	15 97       	sbiw	r26, 0x05	; 5
    5006:	93 81       	ldd	r25, Z+3	; 0x03
    5008:	82 81       	ldd	r24, Z+2	; 0x02
    500a:	25 81       	ldd	r18, Z+5	; 0x05
    500c:	98 1b       	sub	r25, r24
    500e:	92 23       	and	r25, r18
    5010:	84 81       	ldd	r24, Z+4	; 0x04
    5012:	98 17       	cp	r25, r24
    5014:	61 f0       	breq	.+24     	; 0x502e <__vector_36+0x6a>
    5016:	83 81       	ldd	r24, Z+3	; 0x03
    5018:	26 95       	lsr	r18
    501a:	28 23       	and	r18, r24
    501c:	c0 81       	ld	r28, Z
    501e:	d1 81       	ldd	r29, Z+1	; 0x01
    5020:	c2 0f       	add	r28, r18
    5022:	d1 1d       	adc	r29, r1
    5024:	68 83       	st	Y, r22
    5026:	8f 5f       	subi	r24, 0xFF	; 255
    5028:	95 81       	ldd	r25, Z+5	; 0x05
    502a:	89 23       	and	r24, r25
    502c:	83 83       	std	Z+3, r24	; 0x03
    502e:	16 96       	adiw	r26, 0x06	; 6
    5030:	ed 91       	ld	r30, X+
    5032:	fc 91       	ld	r31, X
    5034:	17 97       	sbiw	r26, 0x07	; 7
    5036:	30 97       	sbiw	r30, 0x00	; 0
    5038:	11 f0       	breq	.+4      	; 0x503e <__vector_36+0x7a>
    503a:	cd 01       	movw	r24, r26
    503c:	19 95       	eicall
    503e:	ff 91       	pop	r31
    5040:	ef 91       	pop	r30
    5042:	df 91       	pop	r29
    5044:	cf 91       	pop	r28
    5046:	bf 91       	pop	r27
    5048:	af 91       	pop	r26
    504a:	9f 91       	pop	r25
    504c:	8f 91       	pop	r24
    504e:	7f 91       	pop	r23
    5050:	6f 91       	pop	r22
    5052:	5f 91       	pop	r21
    5054:	4f 91       	pop	r20
    5056:	3f 91       	pop	r19
    5058:	2f 91       	pop	r18
    505a:	0f 90       	pop	r0
    505c:	0b be       	out	0x3b, r0	; 59
    505e:	0f 90       	pop	r0
    5060:	0f be       	out	0x3f, r0	; 63
    5062:	0f 90       	pop	r0
    5064:	1f 90       	pop	r1
    5066:	18 95       	reti

00005068 <__vector_37>:
    5068:	1f 92       	push	r1
    506a:	0f 92       	push	r0
    506c:	0f b6       	in	r0, 0x3f	; 63
    506e:	0f 92       	push	r0
    5070:	11 24       	eor	r1, r1
    5072:	0b b6       	in	r0, 0x3b	; 59
    5074:	0f 92       	push	r0
    5076:	2f 93       	push	r18
    5078:	8f 93       	push	r24
    507a:	9f 93       	push	r25
    507c:	af 93       	push	r26
    507e:	bf 93       	push	r27
    5080:	ef 93       	push	r30
    5082:	ff 93       	push	r31
    5084:	e0 91 35 17 	lds	r30, 0x1735	; 0x801735 <_ser_handle+0x2>
    5088:	f0 91 36 17 	lds	r31, 0x1736	; 0x801736 <_ser_handle+0x3>
    508c:	30 97       	sbiw	r30, 0x00	; 0
    508e:	b9 f0       	breq	.+46     	; 0x50be <__vector_37+0x56>
    5090:	02 80       	ldd	r0, Z+2	; 0x02
    5092:	f3 81       	ldd	r31, Z+3	; 0x03
    5094:	e0 2d       	mov	r30, r0
    5096:	93 81       	ldd	r25, Z+3	; 0x03
    5098:	82 81       	ldd	r24, Z+2	; 0x02
    509a:	98 17       	cp	r25, r24
    509c:	b1 f0       	breq	.+44     	; 0x50ca <__vector_37+0x62>
    509e:	92 81       	ldd	r25, Z+2	; 0x02
    50a0:	85 81       	ldd	r24, Z+5	; 0x05
    50a2:	28 2f       	mov	r18, r24
    50a4:	26 95       	lsr	r18
    50a6:	29 23       	and	r18, r25
    50a8:	a0 81       	ld	r26, Z
    50aa:	b1 81       	ldd	r27, Z+1	; 0x01
    50ac:	a2 0f       	add	r26, r18
    50ae:	b1 1d       	adc	r27, r1
    50b0:	2c 91       	ld	r18, X
    50b2:	9f 5f       	subi	r25, 0xFF	; 255
    50b4:	89 23       	and	r24, r25
    50b6:	82 83       	std	Z+2, r24	; 0x02
    50b8:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    50bc:	0b c0       	rjmp	.+22     	; 0x50d4 <__vector_37+0x6c>
    50be:	e9 ec       	ldi	r30, 0xC9	; 201
    50c0:	f0 e0       	ldi	r31, 0x00	; 0
    50c2:	80 81       	ld	r24, Z
    50c4:	8f 7d       	andi	r24, 0xDF	; 223
    50c6:	80 83       	st	Z, r24
    50c8:	05 c0       	rjmp	.+10     	; 0x50d4 <__vector_37+0x6c>
    50ca:	e9 ec       	ldi	r30, 0xC9	; 201
    50cc:	f0 e0       	ldi	r31, 0x00	; 0
    50ce:	80 81       	ld	r24, Z
    50d0:	8f 7d       	andi	r24, 0xDF	; 223
    50d2:	80 83       	st	Z, r24
    50d4:	ff 91       	pop	r31
    50d6:	ef 91       	pop	r30
    50d8:	bf 91       	pop	r27
    50da:	af 91       	pop	r26
    50dc:	9f 91       	pop	r25
    50de:	8f 91       	pop	r24
    50e0:	2f 91       	pop	r18
    50e2:	0f 90       	pop	r0
    50e4:	0b be       	out	0x3b, r0	; 59
    50e6:	0f 90       	pop	r0
    50e8:	0f be       	out	0x3f, r0	; 63
    50ea:	0f 90       	pop	r0
    50ec:	1f 90       	pop	r1
    50ee:	18 95       	reti

000050f0 <__vector_51>:
    50f0:	1f 92       	push	r1
    50f2:	0f 92       	push	r0
    50f4:	0f b6       	in	r0, 0x3f	; 63
    50f6:	0f 92       	push	r0
    50f8:	11 24       	eor	r1, r1
    50fa:	0b b6       	in	r0, 0x3b	; 59
    50fc:	0f 92       	push	r0
    50fe:	2f 93       	push	r18
    5100:	3f 93       	push	r19
    5102:	4f 93       	push	r20
    5104:	5f 93       	push	r21
    5106:	6f 93       	push	r22
    5108:	7f 93       	push	r23
    510a:	8f 93       	push	r24
    510c:	9f 93       	push	r25
    510e:	af 93       	push	r26
    5110:	bf 93       	push	r27
    5112:	cf 93       	push	r28
    5114:	df 93       	push	r29
    5116:	ef 93       	push	r30
    5118:	ff 93       	push	r31
    511a:	a0 91 37 17 	lds	r26, 0x1737	; 0x801737 <_ser_handle+0x4>
    511e:	b0 91 38 17 	lds	r27, 0x1738	; 0x801738 <_ser_handle+0x5>
    5122:	10 97       	sbiw	r26, 0x00	; 0
    5124:	11 f1       	breq	.+68     	; 0x516a <__vector_51+0x7a>
    5126:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    512a:	14 96       	adiw	r26, 0x04	; 4
    512c:	ed 91       	ld	r30, X+
    512e:	fc 91       	ld	r31, X
    5130:	15 97       	sbiw	r26, 0x05	; 5
    5132:	93 81       	ldd	r25, Z+3	; 0x03
    5134:	82 81       	ldd	r24, Z+2	; 0x02
    5136:	25 81       	ldd	r18, Z+5	; 0x05
    5138:	98 1b       	sub	r25, r24
    513a:	92 23       	and	r25, r18
    513c:	84 81       	ldd	r24, Z+4	; 0x04
    513e:	98 17       	cp	r25, r24
    5140:	61 f0       	breq	.+24     	; 0x515a <__vector_51+0x6a>
    5142:	83 81       	ldd	r24, Z+3	; 0x03
    5144:	26 95       	lsr	r18
    5146:	28 23       	and	r18, r24
    5148:	c0 81       	ld	r28, Z
    514a:	d1 81       	ldd	r29, Z+1	; 0x01
    514c:	c2 0f       	add	r28, r18
    514e:	d1 1d       	adc	r29, r1
    5150:	68 83       	st	Y, r22
    5152:	8f 5f       	subi	r24, 0xFF	; 255
    5154:	95 81       	ldd	r25, Z+5	; 0x05
    5156:	89 23       	and	r24, r25
    5158:	83 83       	std	Z+3, r24	; 0x03
    515a:	16 96       	adiw	r26, 0x06	; 6
    515c:	ed 91       	ld	r30, X+
    515e:	fc 91       	ld	r31, X
    5160:	17 97       	sbiw	r26, 0x07	; 7
    5162:	30 97       	sbiw	r30, 0x00	; 0
    5164:	11 f0       	breq	.+4      	; 0x516a <__vector_51+0x7a>
    5166:	cd 01       	movw	r24, r26
    5168:	19 95       	eicall
    516a:	ff 91       	pop	r31
    516c:	ef 91       	pop	r30
    516e:	df 91       	pop	r29
    5170:	cf 91       	pop	r28
    5172:	bf 91       	pop	r27
    5174:	af 91       	pop	r26
    5176:	9f 91       	pop	r25
    5178:	8f 91       	pop	r24
    517a:	7f 91       	pop	r23
    517c:	6f 91       	pop	r22
    517e:	5f 91       	pop	r21
    5180:	4f 91       	pop	r20
    5182:	3f 91       	pop	r19
    5184:	2f 91       	pop	r18
    5186:	0f 90       	pop	r0
    5188:	0b be       	out	0x3b, r0	; 59
    518a:	0f 90       	pop	r0
    518c:	0f be       	out	0x3f, r0	; 63
    518e:	0f 90       	pop	r0
    5190:	1f 90       	pop	r1
    5192:	18 95       	reti

00005194 <__vector_52>:
    5194:	1f 92       	push	r1
    5196:	0f 92       	push	r0
    5198:	0f b6       	in	r0, 0x3f	; 63
    519a:	0f 92       	push	r0
    519c:	11 24       	eor	r1, r1
    519e:	0b b6       	in	r0, 0x3b	; 59
    51a0:	0f 92       	push	r0
    51a2:	2f 93       	push	r18
    51a4:	8f 93       	push	r24
    51a6:	9f 93       	push	r25
    51a8:	af 93       	push	r26
    51aa:	bf 93       	push	r27
    51ac:	ef 93       	push	r30
    51ae:	ff 93       	push	r31
    51b0:	e0 91 37 17 	lds	r30, 0x1737	; 0x801737 <_ser_handle+0x4>
    51b4:	f0 91 38 17 	lds	r31, 0x1738	; 0x801738 <_ser_handle+0x5>
    51b8:	30 97       	sbiw	r30, 0x00	; 0
    51ba:	b9 f0       	breq	.+46     	; 0x51ea <__vector_52+0x56>
    51bc:	02 80       	ldd	r0, Z+2	; 0x02
    51be:	f3 81       	ldd	r31, Z+3	; 0x03
    51c0:	e0 2d       	mov	r30, r0
    51c2:	93 81       	ldd	r25, Z+3	; 0x03
    51c4:	82 81       	ldd	r24, Z+2	; 0x02
    51c6:	98 17       	cp	r25, r24
    51c8:	b1 f0       	breq	.+44     	; 0x51f6 <__vector_52+0x62>
    51ca:	92 81       	ldd	r25, Z+2	; 0x02
    51cc:	85 81       	ldd	r24, Z+5	; 0x05
    51ce:	28 2f       	mov	r18, r24
    51d0:	26 95       	lsr	r18
    51d2:	29 23       	and	r18, r25
    51d4:	a0 81       	ld	r26, Z
    51d6:	b1 81       	ldd	r27, Z+1	; 0x01
    51d8:	a2 0f       	add	r26, r18
    51da:	b1 1d       	adc	r27, r1
    51dc:	2c 91       	ld	r18, X
    51de:	9f 5f       	subi	r25, 0xFF	; 255
    51e0:	89 23       	and	r24, r25
    51e2:	82 83       	std	Z+2, r24	; 0x02
    51e4:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    51e8:	0b c0       	rjmp	.+22     	; 0x5200 <__vector_52+0x6c>
    51ea:	e1 ed       	ldi	r30, 0xD1	; 209
    51ec:	f0 e0       	ldi	r31, 0x00	; 0
    51ee:	80 81       	ld	r24, Z
    51f0:	8f 7d       	andi	r24, 0xDF	; 223
    51f2:	80 83       	st	Z, r24
    51f4:	05 c0       	rjmp	.+10     	; 0x5200 <__vector_52+0x6c>
    51f6:	e1 ed       	ldi	r30, 0xD1	; 209
    51f8:	f0 e0       	ldi	r31, 0x00	; 0
    51fa:	80 81       	ld	r24, Z
    51fc:	8f 7d       	andi	r24, 0xDF	; 223
    51fe:	80 83       	st	Z, r24
    5200:	ff 91       	pop	r31
    5202:	ef 91       	pop	r30
    5204:	bf 91       	pop	r27
    5206:	af 91       	pop	r26
    5208:	9f 91       	pop	r25
    520a:	8f 91       	pop	r24
    520c:	2f 91       	pop	r18
    520e:	0f 90       	pop	r0
    5210:	0b be       	out	0x3b, r0	; 59
    5212:	0f 90       	pop	r0
    5214:	0f be       	out	0x3f, r0	; 63
    5216:	0f 90       	pop	r0
    5218:	1f 90       	pop	r1
    521a:	18 95       	reti

0000521c <__vector_54>:
    521c:	1f 92       	push	r1
    521e:	0f 92       	push	r0
    5220:	0f b6       	in	r0, 0x3f	; 63
    5222:	0f 92       	push	r0
    5224:	11 24       	eor	r1, r1
    5226:	0b b6       	in	r0, 0x3b	; 59
    5228:	0f 92       	push	r0
    522a:	2f 93       	push	r18
    522c:	3f 93       	push	r19
    522e:	4f 93       	push	r20
    5230:	5f 93       	push	r21
    5232:	6f 93       	push	r22
    5234:	7f 93       	push	r23
    5236:	8f 93       	push	r24
    5238:	9f 93       	push	r25
    523a:	af 93       	push	r26
    523c:	bf 93       	push	r27
    523e:	cf 93       	push	r28
    5240:	df 93       	push	r29
    5242:	ef 93       	push	r30
    5244:	ff 93       	push	r31
    5246:	a0 91 39 17 	lds	r26, 0x1739	; 0x801739 <_ser_handle+0x6>
    524a:	b0 91 3a 17 	lds	r27, 0x173A	; 0x80173a <_ser_handle+0x7>
    524e:	10 97       	sbiw	r26, 0x00	; 0
    5250:	11 f1       	breq	.+68     	; 0x5296 <__vector_54+0x7a>
    5252:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5256:	14 96       	adiw	r26, 0x04	; 4
    5258:	ed 91       	ld	r30, X+
    525a:	fc 91       	ld	r31, X
    525c:	15 97       	sbiw	r26, 0x05	; 5
    525e:	93 81       	ldd	r25, Z+3	; 0x03
    5260:	82 81       	ldd	r24, Z+2	; 0x02
    5262:	25 81       	ldd	r18, Z+5	; 0x05
    5264:	98 1b       	sub	r25, r24
    5266:	92 23       	and	r25, r18
    5268:	84 81       	ldd	r24, Z+4	; 0x04
    526a:	98 17       	cp	r25, r24
    526c:	61 f0       	breq	.+24     	; 0x5286 <__vector_54+0x6a>
    526e:	83 81       	ldd	r24, Z+3	; 0x03
    5270:	26 95       	lsr	r18
    5272:	28 23       	and	r18, r24
    5274:	c0 81       	ld	r28, Z
    5276:	d1 81       	ldd	r29, Z+1	; 0x01
    5278:	c2 0f       	add	r28, r18
    527a:	d1 1d       	adc	r29, r1
    527c:	68 83       	st	Y, r22
    527e:	8f 5f       	subi	r24, 0xFF	; 255
    5280:	95 81       	ldd	r25, Z+5	; 0x05
    5282:	89 23       	and	r24, r25
    5284:	83 83       	std	Z+3, r24	; 0x03
    5286:	16 96       	adiw	r26, 0x06	; 6
    5288:	ed 91       	ld	r30, X+
    528a:	fc 91       	ld	r31, X
    528c:	17 97       	sbiw	r26, 0x07	; 7
    528e:	30 97       	sbiw	r30, 0x00	; 0
    5290:	11 f0       	breq	.+4      	; 0x5296 <__vector_54+0x7a>
    5292:	cd 01       	movw	r24, r26
    5294:	19 95       	eicall
    5296:	ff 91       	pop	r31
    5298:	ef 91       	pop	r30
    529a:	df 91       	pop	r29
    529c:	cf 91       	pop	r28
    529e:	bf 91       	pop	r27
    52a0:	af 91       	pop	r26
    52a2:	9f 91       	pop	r25
    52a4:	8f 91       	pop	r24
    52a6:	7f 91       	pop	r23
    52a8:	6f 91       	pop	r22
    52aa:	5f 91       	pop	r21
    52ac:	4f 91       	pop	r20
    52ae:	3f 91       	pop	r19
    52b0:	2f 91       	pop	r18
    52b2:	0f 90       	pop	r0
    52b4:	0b be       	out	0x3b, r0	; 59
    52b6:	0f 90       	pop	r0
    52b8:	0f be       	out	0x3f, r0	; 63
    52ba:	0f 90       	pop	r0
    52bc:	1f 90       	pop	r1
    52be:	18 95       	reti

000052c0 <__vector_55>:
    52c0:	1f 92       	push	r1
    52c2:	0f 92       	push	r0
    52c4:	0f b6       	in	r0, 0x3f	; 63
    52c6:	0f 92       	push	r0
    52c8:	11 24       	eor	r1, r1
    52ca:	0b b6       	in	r0, 0x3b	; 59
    52cc:	0f 92       	push	r0
    52ce:	2f 93       	push	r18
    52d0:	8f 93       	push	r24
    52d2:	9f 93       	push	r25
    52d4:	af 93       	push	r26
    52d6:	bf 93       	push	r27
    52d8:	ef 93       	push	r30
    52da:	ff 93       	push	r31
    52dc:	e0 91 39 17 	lds	r30, 0x1739	; 0x801739 <_ser_handle+0x6>
    52e0:	f0 91 3a 17 	lds	r31, 0x173A	; 0x80173a <_ser_handle+0x7>
    52e4:	30 97       	sbiw	r30, 0x00	; 0
    52e6:	b9 f0       	breq	.+46     	; 0x5316 <__vector_55+0x56>
    52e8:	02 80       	ldd	r0, Z+2	; 0x02
    52ea:	f3 81       	ldd	r31, Z+3	; 0x03
    52ec:	e0 2d       	mov	r30, r0
    52ee:	93 81       	ldd	r25, Z+3	; 0x03
    52f0:	82 81       	ldd	r24, Z+2	; 0x02
    52f2:	98 17       	cp	r25, r24
    52f4:	b1 f0       	breq	.+44     	; 0x5322 <__vector_55+0x62>
    52f6:	92 81       	ldd	r25, Z+2	; 0x02
    52f8:	85 81       	ldd	r24, Z+5	; 0x05
    52fa:	28 2f       	mov	r18, r24
    52fc:	26 95       	lsr	r18
    52fe:	29 23       	and	r18, r25
    5300:	a0 81       	ld	r26, Z
    5302:	b1 81       	ldd	r27, Z+1	; 0x01
    5304:	a2 0f       	add	r26, r18
    5306:	b1 1d       	adc	r27, r1
    5308:	2c 91       	ld	r18, X
    530a:	9f 5f       	subi	r25, 0xFF	; 255
    530c:	89 23       	and	r24, r25
    530e:	82 83       	std	Z+2, r24	; 0x02
    5310:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    5314:	0b c0       	rjmp	.+22     	; 0x532c <__vector_55+0x6c>
    5316:	e1 e3       	ldi	r30, 0x31	; 49
    5318:	f1 e0       	ldi	r31, 0x01	; 1
    531a:	80 81       	ld	r24, Z
    531c:	8f 7d       	andi	r24, 0xDF	; 223
    531e:	80 83       	st	Z, r24
    5320:	05 c0       	rjmp	.+10     	; 0x532c <__vector_55+0x6c>
    5322:	e1 e3       	ldi	r30, 0x31	; 49
    5324:	f1 e0       	ldi	r31, 0x01	; 1
    5326:	80 81       	ld	r24, Z
    5328:	8f 7d       	andi	r24, 0xDF	; 223
    532a:	80 83       	st	Z, r24
    532c:	ff 91       	pop	r31
    532e:	ef 91       	pop	r30
    5330:	bf 91       	pop	r27
    5332:	af 91       	pop	r26
    5334:	9f 91       	pop	r25
    5336:	8f 91       	pop	r24
    5338:	2f 91       	pop	r18
    533a:	0f 90       	pop	r0
    533c:	0b be       	out	0x3b, r0	; 59
    533e:	0f 90       	pop	r0
    5340:	0f be       	out	0x3f, r0	; 63
    5342:	0f 90       	pop	r0
    5344:	1f 90       	pop	r1
    5346:	18 95       	reti

00005348 <usart_getchar>:
    5348:	cf 93       	push	r28
    534a:	df 93       	push	r29
    534c:	1f 92       	push	r1
    534e:	cd b7       	in	r28, 0x3d	; 61
    5350:	de b7       	in	r29, 0x3e	; 62
    5352:	be 01       	movw	r22, r28
    5354:	6f 5f       	subi	r22, 0xFF	; 255
    5356:	7f 4f       	sbci	r23, 0xFF	; 255
    5358:	80 91 3b 17 	lds	r24, 0x173B	; 0x80173b <_com_serial_instance>
    535c:	90 91 3c 17 	lds	r25, 0x173C	; 0x80173c <_com_serial_instance+0x1>
    5360:	7b dd       	rcall	.-1290   	; 0x4e58 <serial_getByte>
    5362:	81 11       	cpse	r24, r1
    5364:	f6 cf       	rjmp	.-20     	; 0x5352 <usart_getchar+0xa>
    5366:	89 81       	ldd	r24, Y+1	; 0x01
    5368:	90 e0       	ldi	r25, 0x00	; 0
    536a:	0f 90       	pop	r0
    536c:	df 91       	pop	r29
    536e:	cf 91       	pop	r28
    5370:	08 95       	ret

00005372 <usart_putchar>:
    5372:	68 2f       	mov	r22, r24
    5374:	80 91 3b 17 	lds	r24, 0x173B	; 0x80173b <_com_serial_instance>
    5378:	90 91 3c 17 	lds	r25, 0x173C	; 0x80173c <_com_serial_instance+0x1>
    537c:	ed dc       	rcall	.-1574   	; 0x4d58 <serial_sendByte>
    537e:	80 e0       	ldi	r24, 0x00	; 0
    5380:	90 e0       	ldi	r25, 0x00	; 0
    5382:	08 95       	ret

00005384 <stdio_initialise>:
    5384:	8f 92       	push	r8
    5386:	9f 92       	push	r9
    5388:	af 92       	push	r10
    538a:	cf 92       	push	r12
    538c:	ef 92       	push	r14
    538e:	0f 93       	push	r16
    5390:	81 2c       	mov	r8, r1
    5392:	91 2c       	mov	r9, r1
    5394:	68 94       	set
    5396:	aa 24       	eor	r10, r10
    5398:	a7 f8       	bld	r10, 7
    539a:	68 94       	set
    539c:	cc 24       	eor	r12, r12
    539e:	c7 f8       	bld	r12, 7
    53a0:	e1 2c       	mov	r14, r1
    53a2:	00 e0       	ldi	r16, 0x00	; 0
    53a4:	23 e0       	ldi	r18, 0x03	; 3
    53a6:	40 e0       	ldi	r20, 0x00	; 0
    53a8:	51 ee       	ldi	r21, 0xE1	; 225
    53aa:	60 e0       	ldi	r22, 0x00	; 0
    53ac:	70 e0       	ldi	r23, 0x00	; 0
    53ae:	2d dc       	rcall	.-1958   	; 0x4c0a <serial_create>
    53b0:	90 93 3c 17 	sts	0x173C, r25	; 0x80173c <_com_serial_instance+0x1>
    53b4:	80 93 3b 17 	sts	0x173B, r24	; 0x80173b <_com_serial_instance>
    53b8:	ef e8       	ldi	r30, 0x8F	; 143
    53ba:	f7 e1       	ldi	r31, 0x17	; 23
    53bc:	83 e1       	ldi	r24, 0x13	; 19
    53be:	92 e0       	ldi	r25, 0x02	; 2
    53c0:	91 83       	std	Z+1, r25	; 0x01
    53c2:	80 83       	st	Z, r24
    53c4:	93 83       	std	Z+3, r25	; 0x03
    53c6:	82 83       	std	Z+2, r24	; 0x02
    53c8:	0f 91       	pop	r16
    53ca:	ef 90       	pop	r14
    53cc:	cf 90       	pop	r12
    53ce:	af 90       	pop	r10
    53d0:	9f 90       	pop	r9
    53d2:	8f 90       	pop	r8
    53d4:	08 95       	ret

000053d6 <_select_instance>:
    53d6:	e0 91 3d 17 	lds	r30, 0x173D	; 0x80173d <_this>
    53da:	f0 91 3e 17 	lds	r31, 0x173E	; 0x80173e <_this+0x1>
    53de:	30 97       	sbiw	r30, 0x00	; 0
    53e0:	f9 f0       	breq	.+62     	; 0x5420 <_select_instance+0x4a>
    53e2:	a0 81       	ld	r26, Z
    53e4:	b1 81       	ldd	r27, Z+1	; 0x01
    53e6:	10 97       	sbiw	r26, 0x00	; 0
    53e8:	d9 f0       	breq	.+54     	; 0x5420 <_select_instance+0x4a>
    53ea:	23 81       	ldd	r18, Z+3	; 0x03
    53ec:	21 30       	cpi	r18, 0x01	; 1
    53ee:	69 f4       	brne	.+26     	; 0x540a <_select_instance+0x34>
    53f0:	4c 91       	ld	r20, X
    53f2:	21 e0       	ldi	r18, 0x01	; 1
    53f4:	30 e0       	ldi	r19, 0x00	; 0
    53f6:	02 80       	ldd	r0, Z+2	; 0x02
    53f8:	02 c0       	rjmp	.+4      	; 0x53fe <_select_instance+0x28>
    53fa:	22 0f       	add	r18, r18
    53fc:	33 1f       	adc	r19, r19
    53fe:	0a 94       	dec	r0
    5400:	e2 f7       	brpl	.-8      	; 0x53fa <_select_instance+0x24>
    5402:	20 95       	com	r18
    5404:	24 23       	and	r18, r20
    5406:	2c 93       	st	X, r18
    5408:	0b c0       	rjmp	.+22     	; 0x5420 <_select_instance+0x4a>
    540a:	4c 91       	ld	r20, X
    540c:	21 e0       	ldi	r18, 0x01	; 1
    540e:	30 e0       	ldi	r19, 0x00	; 0
    5410:	02 80       	ldd	r0, Z+2	; 0x02
    5412:	02 c0       	rjmp	.+4      	; 0x5418 <_select_instance+0x42>
    5414:	22 0f       	add	r18, r18
    5416:	33 1f       	adc	r19, r19
    5418:	0a 94       	dec	r0
    541a:	e2 f7       	brpl	.-8      	; 0x5414 <_select_instance+0x3e>
    541c:	24 2b       	or	r18, r20
    541e:	2c 93       	st	X, r18
    5420:	90 93 3e 17 	sts	0x173E, r25	; 0x80173e <_this+0x1>
    5424:	80 93 3d 17 	sts	0x173D, r24	; 0x80173d <_this>
    5428:	00 97       	sbiw	r24, 0x00	; 0
    542a:	69 f0       	breq	.+26     	; 0x5446 <_select_instance+0x70>
    542c:	10 92 3f 17 	sts	0x173F, r1	; 0x80173f <_spi_active>
    5430:	2c b5       	in	r18, 0x2c	; 44
    5432:	2f 73       	andi	r18, 0x3F	; 63
    5434:	2c bd       	out	0x2c, r18	; 44
    5436:	fc 01       	movw	r30, r24
    5438:	24 81       	ldd	r18, Z+4	; 0x04
    543a:	2c bd       	out	0x2c, r18	; 44
    543c:	85 81       	ldd	r24, Z+5	; 0x05
    543e:	8d bd       	out	0x2d, r24	; 45
    5440:	8c b5       	in	r24, 0x2c	; 44
    5442:	80 64       	ori	r24, 0x40	; 64
    5444:	8c bd       	out	0x2c, r24	; 44
    5446:	08 95       	ret

00005448 <spi_sendByte>:
    5448:	1f 93       	push	r17
    544a:	cf 93       	push	r28
    544c:	df 93       	push	r29
    544e:	00 97       	sbiw	r24, 0x00	; 0
    5450:	09 f4       	brne	.+2      	; 0x5454 <spi_sendByte+0xc>
    5452:	6a c0       	rjmp	.+212    	; 0x5528 <spi_sendByte+0xe0>
    5454:	16 2f       	mov	r17, r22
    5456:	ec 01       	movw	r28, r24
    5458:	80 91 3d 17 	lds	r24, 0x173D	; 0x80173d <_this>
    545c:	90 91 3e 17 	lds	r25, 0x173E	; 0x80173e <_this+0x1>
    5460:	c8 17       	cp	r28, r24
    5462:	d9 07       	cpc	r29, r25
    5464:	11 f0       	breq	.+4      	; 0x546a <spi_sendByte+0x22>
    5466:	ce 01       	movw	r24, r28
    5468:	b6 df       	rcall	.-148    	; 0x53d6 <_select_instance>
    546a:	8f b7       	in	r24, 0x3f	; 63
    546c:	2f b7       	in	r18, 0x3f	; 63
    546e:	f8 94       	cli
    5470:	80 91 3f 17 	lds	r24, 0x173F	; 0x80173f <_spi_active>
    5474:	81 11       	cpse	r24, r1
    5476:	31 c0       	rjmp	.+98     	; 0x54da <spi_sendByte+0x92>
    5478:	81 e0       	ldi	r24, 0x01	; 1
    547a:	80 93 3f 17 	sts	0x173F, r24	; 0x80173f <_spi_active>
    547e:	a0 91 3d 17 	lds	r26, 0x173D	; 0x80173d <_this>
    5482:	b0 91 3e 17 	lds	r27, 0x173E	; 0x80173e <_this+0x1>
    5486:	ed 91       	ld	r30, X+
    5488:	fc 91       	ld	r31, X
    548a:	11 97       	sbiw	r26, 0x01	; 1
    548c:	30 97       	sbiw	r30, 0x00	; 0
    548e:	f9 f0       	breq	.+62     	; 0x54ce <spi_sendByte+0x86>
    5490:	13 96       	adiw	r26, 0x03	; 3
    5492:	8c 91       	ld	r24, X
    5494:	13 97       	sbiw	r26, 0x03	; 3
    5496:	81 30       	cpi	r24, 0x01	; 1
    5498:	69 f4       	brne	.+26     	; 0x54b4 <spi_sendByte+0x6c>
    549a:	30 81       	ld	r19, Z
    549c:	81 e0       	ldi	r24, 0x01	; 1
    549e:	90 e0       	ldi	r25, 0x00	; 0
    54a0:	12 96       	adiw	r26, 0x02	; 2
    54a2:	0c 90       	ld	r0, X
    54a4:	02 c0       	rjmp	.+4      	; 0x54aa <spi_sendByte+0x62>
    54a6:	88 0f       	add	r24, r24
    54a8:	99 1f       	adc	r25, r25
    54aa:	0a 94       	dec	r0
    54ac:	e2 f7       	brpl	.-8      	; 0x54a6 <spi_sendByte+0x5e>
    54ae:	83 2b       	or	r24, r19
    54b0:	80 83       	st	Z, r24
    54b2:	0d c0       	rjmp	.+26     	; 0x54ce <spi_sendByte+0x86>
    54b4:	30 81       	ld	r19, Z
    54b6:	81 e0       	ldi	r24, 0x01	; 1
    54b8:	90 e0       	ldi	r25, 0x00	; 0
    54ba:	12 96       	adiw	r26, 0x02	; 2
    54bc:	0c 90       	ld	r0, X
    54be:	02 c0       	rjmp	.+4      	; 0x54c4 <spi_sendByte+0x7c>
    54c0:	88 0f       	add	r24, r24
    54c2:	99 1f       	adc	r25, r25
    54c4:	0a 94       	dec	r0
    54c6:	e2 f7       	brpl	.-8      	; 0x54c0 <spi_sendByte+0x78>
    54c8:	80 95       	com	r24
    54ca:	83 23       	and	r24, r19
    54cc:	80 83       	st	Z, r24
    54ce:	8c b5       	in	r24, 0x2c	; 44
    54d0:	80 68       	ori	r24, 0x80	; 128
    54d2:	8c bd       	out	0x2c, r24	; 44
    54d4:	1e bd       	out	0x2e, r17	; 46
    54d6:	80 e0       	ldi	r24, 0x00	; 0
    54d8:	25 c0       	rjmp	.+74     	; 0x5524 <spi_sendByte+0xdc>
    54da:	ee 81       	ldd	r30, Y+6	; 0x06
    54dc:	ff 81       	ldd	r31, Y+7	; 0x07
    54de:	30 97       	sbiw	r30, 0x00	; 0
    54e0:	e1 f0       	breq	.+56     	; 0x551a <spi_sendByte+0xd2>
    54e2:	34 81       	ldd	r19, Z+4	; 0x04
    54e4:	83 81       	ldd	r24, Z+3	; 0x03
    54e6:	42 81       	ldd	r20, Z+2	; 0x02
    54e8:	95 81       	ldd	r25, Z+5	; 0x05
    54ea:	84 1b       	sub	r24, r20
    54ec:	89 23       	and	r24, r25
    54ee:	38 17       	cp	r19, r24
    54f0:	b1 f0       	breq	.+44     	; 0x551e <spi_sendByte+0xd6>
    54f2:	83 81       	ldd	r24, Z+3	; 0x03
    54f4:	42 81       	ldd	r20, Z+2	; 0x02
    54f6:	84 1b       	sub	r24, r20
    54f8:	89 23       	and	r24, r25
    54fa:	38 17       	cp	r19, r24
    54fc:	91 f0       	breq	.+36     	; 0x5522 <spi_sendByte+0xda>
    54fe:	83 81       	ldd	r24, Z+3	; 0x03
    5500:	96 95       	lsr	r25
    5502:	98 23       	and	r25, r24
    5504:	a0 81       	ld	r26, Z
    5506:	b1 81       	ldd	r27, Z+1	; 0x01
    5508:	a9 0f       	add	r26, r25
    550a:	b1 1d       	adc	r27, r1
    550c:	1c 93       	st	X, r17
    550e:	8f 5f       	subi	r24, 0xFF	; 255
    5510:	95 81       	ldd	r25, Z+5	; 0x05
    5512:	89 23       	and	r24, r25
    5514:	83 83       	std	Z+3, r24	; 0x03
    5516:	80 e0       	ldi	r24, 0x00	; 0
    5518:	05 c0       	rjmp	.+10     	; 0x5524 <spi_sendByte+0xdc>
    551a:	82 e0       	ldi	r24, 0x02	; 2
    551c:	03 c0       	rjmp	.+6      	; 0x5524 <spi_sendByte+0xdc>
    551e:	81 e0       	ldi	r24, 0x01	; 1
    5520:	01 c0       	rjmp	.+2      	; 0x5524 <spi_sendByte+0xdc>
    5522:	80 e0       	ldi	r24, 0x00	; 0
    5524:	2f bf       	out	0x3f, r18	; 63
    5526:	01 c0       	rjmp	.+2      	; 0x552a <spi_sendByte+0xe2>
    5528:	83 e0       	ldi	r24, 0x03	; 3
    552a:	df 91       	pop	r29
    552c:	cf 91       	pop	r28
    552e:	1f 91       	pop	r17
    5530:	08 95       	ret

00005532 <__vector_24>:
    5532:	1f 92       	push	r1
    5534:	0f 92       	push	r0
    5536:	0f b6       	in	r0, 0x3f	; 63
    5538:	0f 92       	push	r0
    553a:	11 24       	eor	r1, r1
    553c:	0b b6       	in	r0, 0x3b	; 59
    553e:	0f 92       	push	r0
    5540:	2f 93       	push	r18
    5542:	3f 93       	push	r19
    5544:	4f 93       	push	r20
    5546:	5f 93       	push	r21
    5548:	6f 93       	push	r22
    554a:	7f 93       	push	r23
    554c:	8f 93       	push	r24
    554e:	9f 93       	push	r25
    5550:	af 93       	push	r26
    5552:	bf 93       	push	r27
    5554:	cf 93       	push	r28
    5556:	df 93       	push	r29
    5558:	ef 93       	push	r30
    555a:	ff 93       	push	r31
    555c:	6e b5       	in	r22, 0x2e	; 46
    555e:	a0 91 3d 17 	lds	r26, 0x173D	; 0x80173d <_this>
    5562:	b0 91 3e 17 	lds	r27, 0x173E	; 0x80173e <_this+0x1>
    5566:	18 96       	adiw	r26, 0x08	; 8
    5568:	ed 91       	ld	r30, X+
    556a:	fc 91       	ld	r31, X
    556c:	19 97       	sbiw	r26, 0x09	; 9
    556e:	30 97       	sbiw	r30, 0x00	; 0
    5570:	a1 f0       	breq	.+40     	; 0x559a <__vector_24+0x68>
    5572:	83 81       	ldd	r24, Z+3	; 0x03
    5574:	22 81       	ldd	r18, Z+2	; 0x02
    5576:	95 81       	ldd	r25, Z+5	; 0x05
    5578:	82 1b       	sub	r24, r18
    557a:	89 23       	and	r24, r25
    557c:	24 81       	ldd	r18, Z+4	; 0x04
    557e:	82 17       	cp	r24, r18
    5580:	61 f0       	breq	.+24     	; 0x559a <__vector_24+0x68>
    5582:	83 81       	ldd	r24, Z+3	; 0x03
    5584:	96 95       	lsr	r25
    5586:	98 23       	and	r25, r24
    5588:	c0 81       	ld	r28, Z
    558a:	d1 81       	ldd	r29, Z+1	; 0x01
    558c:	c9 0f       	add	r28, r25
    558e:	d1 1d       	adc	r29, r1
    5590:	68 83       	st	Y, r22
    5592:	8f 5f       	subi	r24, 0xFF	; 255
    5594:	95 81       	ldd	r25, Z+5	; 0x05
    5596:	89 23       	and	r24, r25
    5598:	83 83       	std	Z+3, r24	; 0x03
    559a:	16 96       	adiw	r26, 0x06	; 6
    559c:	ed 91       	ld	r30, X+
    559e:	fc 91       	ld	r31, X
    55a0:	17 97       	sbiw	r26, 0x07	; 7
    55a2:	30 97       	sbiw	r30, 0x00	; 0
    55a4:	99 f0       	breq	.+38     	; 0x55cc <__vector_24+0x9a>
    55a6:	93 81       	ldd	r25, Z+3	; 0x03
    55a8:	82 81       	ldd	r24, Z+2	; 0x02
    55aa:	98 17       	cp	r25, r24
    55ac:	79 f0       	breq	.+30     	; 0x55cc <__vector_24+0x9a>
    55ae:	92 81       	ldd	r25, Z+2	; 0x02
    55b0:	85 81       	ldd	r24, Z+5	; 0x05
    55b2:	28 2f       	mov	r18, r24
    55b4:	26 95       	lsr	r18
    55b6:	29 23       	and	r18, r25
    55b8:	a0 81       	ld	r26, Z
    55ba:	b1 81       	ldd	r27, Z+1	; 0x01
    55bc:	a2 0f       	add	r26, r18
    55be:	b1 1d       	adc	r27, r1
    55c0:	2c 91       	ld	r18, X
    55c2:	9f 5f       	subi	r25, 0xFF	; 255
    55c4:	89 23       	and	r24, r25
    55c6:	82 83       	std	Z+2, r24	; 0x02
    55c8:	2e bd       	out	0x2e, r18	; 46
    55ca:	2d c0       	rjmp	.+90     	; 0x5626 <__vector_24+0xf4>
    55cc:	8c b5       	in	r24, 0x2c	; 44
    55ce:	8f 77       	andi	r24, 0x7F	; 127
    55d0:	8c bd       	out	0x2c, r24	; 44
    55d2:	10 92 3f 17 	sts	0x173F, r1	; 0x80173f <_spi_active>
    55d6:	a0 91 3d 17 	lds	r26, 0x173D	; 0x80173d <_this>
    55da:	b0 91 3e 17 	lds	r27, 0x173E	; 0x80173e <_this+0x1>
    55de:	ed 91       	ld	r30, X+
    55e0:	fc 91       	ld	r31, X
    55e2:	11 97       	sbiw	r26, 0x01	; 1
    55e4:	30 97       	sbiw	r30, 0x00	; 0
    55e6:	f9 f0       	breq	.+62     	; 0x5626 <__vector_24+0xf4>
    55e8:	13 96       	adiw	r26, 0x03	; 3
    55ea:	8c 91       	ld	r24, X
    55ec:	13 97       	sbiw	r26, 0x03	; 3
    55ee:	81 30       	cpi	r24, 0x01	; 1
    55f0:	71 f4       	brne	.+28     	; 0x560e <__vector_24+0xdc>
    55f2:	20 81       	ld	r18, Z
    55f4:	81 e0       	ldi	r24, 0x01	; 1
    55f6:	90 e0       	ldi	r25, 0x00	; 0
    55f8:	12 96       	adiw	r26, 0x02	; 2
    55fa:	0c 90       	ld	r0, X
    55fc:	02 c0       	rjmp	.+4      	; 0x5602 <__vector_24+0xd0>
    55fe:	88 0f       	add	r24, r24
    5600:	99 1f       	adc	r25, r25
    5602:	0a 94       	dec	r0
    5604:	e2 f7       	brpl	.-8      	; 0x55fe <__vector_24+0xcc>
    5606:	80 95       	com	r24
    5608:	82 23       	and	r24, r18
    560a:	80 83       	st	Z, r24
    560c:	0c c0       	rjmp	.+24     	; 0x5626 <__vector_24+0xf4>
    560e:	20 81       	ld	r18, Z
    5610:	81 e0       	ldi	r24, 0x01	; 1
    5612:	90 e0       	ldi	r25, 0x00	; 0
    5614:	12 96       	adiw	r26, 0x02	; 2
    5616:	0c 90       	ld	r0, X
    5618:	02 c0       	rjmp	.+4      	; 0x561e <__vector_24+0xec>
    561a:	88 0f       	add	r24, r24
    561c:	99 1f       	adc	r25, r25
    561e:	0a 94       	dec	r0
    5620:	e2 f7       	brpl	.-8      	; 0x561a <__vector_24+0xe8>
    5622:	82 2b       	or	r24, r18
    5624:	80 83       	st	Z, r24
    5626:	80 91 3d 17 	lds	r24, 0x173D	; 0x80173d <_this>
    562a:	90 91 3e 17 	lds	r25, 0x173E	; 0x80173e <_this+0x1>
    562e:	dc 01       	movw	r26, r24
    5630:	1a 96       	adiw	r26, 0x0a	; 10
    5632:	ed 91       	ld	r30, X+
    5634:	fc 91       	ld	r31, X
    5636:	1b 97       	sbiw	r26, 0x0b	; 11
    5638:	30 97       	sbiw	r30, 0x00	; 0
    563a:	09 f0       	breq	.+2      	; 0x563e <__vector_24+0x10c>
    563c:	19 95       	eicall
    563e:	ff 91       	pop	r31
    5640:	ef 91       	pop	r30
    5642:	df 91       	pop	r29
    5644:	cf 91       	pop	r28
    5646:	bf 91       	pop	r27
    5648:	af 91       	pop	r26
    564a:	9f 91       	pop	r25
    564c:	8f 91       	pop	r24
    564e:	7f 91       	pop	r23
    5650:	6f 91       	pop	r22
    5652:	5f 91       	pop	r21
    5654:	4f 91       	pop	r20
    5656:	3f 91       	pop	r19
    5658:	2f 91       	pop	r18
    565a:	0f 90       	pop	r0
    565c:	0b be       	out	0x3b, r0	; 59
    565e:	0f 90       	pop	r0
    5660:	0f be       	out	0x3f, r0	; 63
    5662:	0f 90       	pop	r0
    5664:	1f 90       	pop	r1
    5666:	18 95       	reti

00005668 <_turn_off>:
    5668:	90 e0       	ldi	r25, 0x00	; 0
    566a:	fc 01       	movw	r30, r24
    566c:	ee 0f       	add	r30, r30
    566e:	ff 1f       	adc	r31, r31
    5670:	e8 0f       	add	r30, r24
    5672:	f9 1f       	adc	r31, r25
    5674:	ee 0f       	add	r30, r30
    5676:	ff 1f       	adc	r31, r31
    5678:	e0 5c       	subi	r30, 0xC0	; 192
    567a:	f8 4e       	sbci	r31, 0xE8	; 232
    567c:	23 81       	ldd	r18, Z+3	; 0x03
    567e:	21 11       	cpse	r18, r1
    5680:	1f c0       	rjmp	.+62     	; 0x56c0 <_turn_off+0x58>
    5682:	9c 01       	movw	r18, r24
    5684:	22 0f       	add	r18, r18
    5686:	33 1f       	adc	r19, r19
    5688:	f9 01       	movw	r30, r18
    568a:	e8 0f       	add	r30, r24
    568c:	f9 1f       	adc	r31, r25
    568e:	ee 0f       	add	r30, r30
    5690:	ff 1f       	adc	r31, r31
    5692:	e0 5c       	subi	r30, 0xC0	; 192
    5694:	f8 4e       	sbci	r31, 0xE8	; 232
    5696:	a0 81       	ld	r26, Z
    5698:	b1 81       	ldd	r27, Z+1	; 0x01
    569a:	4c 91       	ld	r20, X
    569c:	f9 01       	movw	r30, r18
    569e:	e8 0f       	add	r30, r24
    56a0:	f9 1f       	adc	r31, r25
    56a2:	ee 0f       	add	r30, r30
    56a4:	ff 1f       	adc	r31, r31
    56a6:	e0 5c       	subi	r30, 0xC0	; 192
    56a8:	f8 4e       	sbci	r31, 0xE8	; 232
    56aa:	81 e0       	ldi	r24, 0x01	; 1
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	02 80       	ldd	r0, Z+2	; 0x02
    56b0:	02 c0       	rjmp	.+4      	; 0x56b6 <_turn_off+0x4e>
    56b2:	88 0f       	add	r24, r24
    56b4:	99 1f       	adc	r25, r25
    56b6:	0a 94       	dec	r0
    56b8:	e2 f7       	brpl	.-8      	; 0x56b2 <_turn_off+0x4a>
    56ba:	84 2b       	or	r24, r20
    56bc:	8c 93       	st	X, r24
    56be:	08 95       	ret
    56c0:	fc 01       	movw	r30, r24
    56c2:	ee 0f       	add	r30, r30
    56c4:	ff 1f       	adc	r31, r31
    56c6:	df 01       	movw	r26, r30
    56c8:	a8 0f       	add	r26, r24
    56ca:	b9 1f       	adc	r27, r25
    56cc:	aa 0f       	add	r26, r26
    56ce:	bb 1f       	adc	r27, r27
    56d0:	a0 5c       	subi	r26, 0xC0	; 192
    56d2:	b8 4e       	sbci	r27, 0xE8	; 232
    56d4:	0d 90       	ld	r0, X+
    56d6:	bc 91       	ld	r27, X
    56d8:	a0 2d       	mov	r26, r0
    56da:	2c 91       	ld	r18, X
    56dc:	e8 0f       	add	r30, r24
    56de:	f9 1f       	adc	r31, r25
    56e0:	ee 0f       	add	r30, r30
    56e2:	ff 1f       	adc	r31, r31
    56e4:	e0 5c       	subi	r30, 0xC0	; 192
    56e6:	f8 4e       	sbci	r31, 0xE8	; 232
    56e8:	81 e0       	ldi	r24, 0x01	; 1
    56ea:	90 e0       	ldi	r25, 0x00	; 0
    56ec:	02 80       	ldd	r0, Z+2	; 0x02
    56ee:	02 c0       	rjmp	.+4      	; 0x56f4 <_turn_off+0x8c>
    56f0:	88 0f       	add	r24, r24
    56f2:	99 1f       	adc	r25, r25
    56f4:	0a 94       	dec	r0
    56f6:	e2 f7       	brpl	.-8      	; 0x56f0 <_turn_off+0x88>
    56f8:	80 95       	com	r24
    56fa:	82 23       	and	r24, r18
    56fc:	8c 93       	st	X, r24
    56fe:	08 95       	ret

00005700 <_turn_on>:
    5700:	90 e0       	ldi	r25, 0x00	; 0
    5702:	fc 01       	movw	r30, r24
    5704:	ee 0f       	add	r30, r30
    5706:	ff 1f       	adc	r31, r31
    5708:	e8 0f       	add	r30, r24
    570a:	f9 1f       	adc	r31, r25
    570c:	ee 0f       	add	r30, r30
    570e:	ff 1f       	adc	r31, r31
    5710:	e0 5c       	subi	r30, 0xC0	; 192
    5712:	f8 4e       	sbci	r31, 0xE8	; 232
    5714:	23 81       	ldd	r18, Z+3	; 0x03
    5716:	21 11       	cpse	r18, r1
    5718:	20 c0       	rjmp	.+64     	; 0x575a <_turn_on+0x5a>
    571a:	9c 01       	movw	r18, r24
    571c:	22 0f       	add	r18, r18
    571e:	33 1f       	adc	r19, r19
    5720:	f9 01       	movw	r30, r18
    5722:	e8 0f       	add	r30, r24
    5724:	f9 1f       	adc	r31, r25
    5726:	ee 0f       	add	r30, r30
    5728:	ff 1f       	adc	r31, r31
    572a:	e0 5c       	subi	r30, 0xC0	; 192
    572c:	f8 4e       	sbci	r31, 0xE8	; 232
    572e:	a0 81       	ld	r26, Z
    5730:	b1 81       	ldd	r27, Z+1	; 0x01
    5732:	4c 91       	ld	r20, X
    5734:	f9 01       	movw	r30, r18
    5736:	e8 0f       	add	r30, r24
    5738:	f9 1f       	adc	r31, r25
    573a:	ee 0f       	add	r30, r30
    573c:	ff 1f       	adc	r31, r31
    573e:	e0 5c       	subi	r30, 0xC0	; 192
    5740:	f8 4e       	sbci	r31, 0xE8	; 232
    5742:	81 e0       	ldi	r24, 0x01	; 1
    5744:	90 e0       	ldi	r25, 0x00	; 0
    5746:	02 80       	ldd	r0, Z+2	; 0x02
    5748:	02 c0       	rjmp	.+4      	; 0x574e <_turn_on+0x4e>
    574a:	88 0f       	add	r24, r24
    574c:	99 1f       	adc	r25, r25
    574e:	0a 94       	dec	r0
    5750:	e2 f7       	brpl	.-8      	; 0x574a <_turn_on+0x4a>
    5752:	80 95       	com	r24
    5754:	84 23       	and	r24, r20
    5756:	8c 93       	st	X, r24
    5758:	08 95       	ret
    575a:	fc 01       	movw	r30, r24
    575c:	ee 0f       	add	r30, r30
    575e:	ff 1f       	adc	r31, r31
    5760:	df 01       	movw	r26, r30
    5762:	a8 0f       	add	r26, r24
    5764:	b9 1f       	adc	r27, r25
    5766:	aa 0f       	add	r26, r26
    5768:	bb 1f       	adc	r27, r27
    576a:	a0 5c       	subi	r26, 0xC0	; 192
    576c:	b8 4e       	sbci	r27, 0xE8	; 232
    576e:	0d 90       	ld	r0, X+
    5770:	bc 91       	ld	r27, X
    5772:	a0 2d       	mov	r26, r0
    5774:	2c 91       	ld	r18, X
    5776:	e8 0f       	add	r30, r24
    5778:	f9 1f       	adc	r31, r25
    577a:	ee 0f       	add	r30, r30
    577c:	ff 1f       	adc	r31, r31
    577e:	e0 5c       	subi	r30, 0xC0	; 192
    5780:	f8 4e       	sbci	r31, 0xE8	; 232
    5782:	81 e0       	ldi	r24, 0x01	; 1
    5784:	90 e0       	ldi	r25, 0x00	; 0
    5786:	02 80       	ldd	r0, Z+2	; 0x02
    5788:	02 c0       	rjmp	.+4      	; 0x578e <_turn_on+0x8e>
    578a:	88 0f       	add	r24, r24
    578c:	99 1f       	adc	r25, r25
    578e:	0a 94       	dec	r0
    5790:	e2 f7       	brpl	.-8      	; 0x578a <_turn_on+0x8a>
    5792:	82 2b       	or	r24, r18
    5794:	8c 93       	st	X, r24
    5796:	08 95       	ret

00005798 <_hal_led_task>:
    5798:	cc 24       	eor	r12, r12
    579a:	c3 94       	inc	r12
    579c:	d1 2c       	mov	r13, r1
    579e:	68 94       	set
    57a0:	bb 24       	eor	r11, r11
    57a2:	b2 f8       	bld	r11, 2
    57a4:	c0 e4       	ldi	r28, 0x40	; 64
    57a6:	d7 e1       	ldi	r29, 0x17	; 23
    57a8:	10 e0       	ldi	r17, 0x00	; 0
    57aa:	8c 81       	ldd	r24, Y+4	; 0x04
    57ac:	81 30       	cpi	r24, 0x01	; 1
    57ae:	81 f0       	breq	.+32     	; 0x57d0 <_hal_led_task+0x38>
    57b0:	18 f1       	brcs	.+70     	; 0x57f8 <_hal_led_task+0x60>
    57b2:	82 30       	cpi	r24, 0x02	; 2
    57b4:	61 f5       	brne	.+88     	; 0x580e <_hal_led_task+0x76>
    57b6:	e8 81       	ld	r30, Y
    57b8:	f9 81       	ldd	r31, Y+1	; 0x01
    57ba:	20 81       	ld	r18, Z
    57bc:	c6 01       	movw	r24, r12
    57be:	0a 80       	ldd	r0, Y+2	; 0x02
    57c0:	02 c0       	rjmp	.+4      	; 0x57c6 <_hal_led_task+0x2e>
    57c2:	88 0f       	add	r24, r24
    57c4:	99 1f       	adc	r25, r25
    57c6:	0a 94       	dec	r0
    57c8:	e2 f7       	brpl	.-8      	; 0x57c2 <_hal_led_task+0x2a>
    57ca:	82 27       	eor	r24, r18
    57cc:	80 83       	st	Z, r24
    57ce:	1f c0       	rjmp	.+62     	; 0x580e <_hal_led_task+0x76>
    57d0:	8d 81       	ldd	r24, Y+5	; 0x05
    57d2:	8f 5f       	subi	r24, 0xFF	; 255
    57d4:	86 30       	cpi	r24, 0x06	; 6
    57d6:	10 f4       	brcc	.+4      	; 0x57dc <_hal_led_task+0x44>
    57d8:	8d 83       	std	Y+5, r24	; 0x05
    57da:	19 c0       	rjmp	.+50     	; 0x580e <_hal_led_task+0x76>
    57dc:	1d 82       	std	Y+5, r1	; 0x05
    57de:	e8 81       	ld	r30, Y
    57e0:	f9 81       	ldd	r31, Y+1	; 0x01
    57e2:	20 81       	ld	r18, Z
    57e4:	c6 01       	movw	r24, r12
    57e6:	0a 80       	ldd	r0, Y+2	; 0x02
    57e8:	02 c0       	rjmp	.+4      	; 0x57ee <_hal_led_task+0x56>
    57ea:	88 0f       	add	r24, r24
    57ec:	99 1f       	adc	r25, r25
    57ee:	0a 94       	dec	r0
    57f0:	e2 f7       	brpl	.-8      	; 0x57ea <_hal_led_task+0x52>
    57f2:	82 27       	eor	r24, r18
    57f4:	80 83       	st	Z, r24
    57f6:	0b c0       	rjmp	.+22     	; 0x580e <_hal_led_task+0x76>
    57f8:	0d 81       	ldd	r16, Y+5	; 0x05
    57fa:	00 23       	and	r16, r16
    57fc:	29 f0       	breq	.+10     	; 0x5808 <_hal_led_task+0x70>
    57fe:	81 2f       	mov	r24, r17
    5800:	7f df       	rcall	.-258    	; 0x5700 <_turn_on>
    5802:	01 50       	subi	r16, 0x01	; 1
    5804:	0d 83       	std	Y+5, r16	; 0x05
    5806:	03 c0       	rjmp	.+6      	; 0x580e <_hal_led_task+0x76>
    5808:	bc 82       	std	Y+4, r11	; 0x04
    580a:	81 2f       	mov	r24, r17
    580c:	2d df       	rcall	.-422    	; 0x5668 <_turn_off>
    580e:	1f 5f       	subi	r17, 0xFF	; 255
    5810:	26 96       	adiw	r28, 0x06	; 6
    5812:	14 30       	cpi	r17, 0x04	; 4
    5814:	51 f6       	brne	.-108    	; 0x57aa <_hal_led_task+0x12>
    5816:	6c e0       	ldi	r22, 0x0C	; 12
    5818:	70 e0       	ldi	r23, 0x00	; 0
    581a:	80 e0       	ldi	r24, 0x00	; 0
    581c:	90 e0       	ldi	r25, 0x00	; 0
    581e:	0e 94 e6 10 	call	0x21cc	; 0x21cc <vTaskDelay>
    5822:	c0 cf       	rjmp	.-128    	; 0x57a4 <_hal_led_task+0xc>

00005824 <status_leds_initialise>:
    5824:	ef 92       	push	r14
    5826:	ff 92       	push	r15
    5828:	0f 93       	push	r16
    582a:	1f 93       	push	r17
    582c:	cf 93       	push	r28
    582e:	df 93       	push	r29
    5830:	08 2f       	mov	r16, r24
    5832:	80 e4       	ldi	r24, 0x40	; 64
    5834:	87 b9       	out	0x07, r24	; 7
    5836:	c0 e4       	ldi	r28, 0x40	; 64
    5838:	d7 e1       	ldi	r29, 0x17	; 23
    583a:	0f 2e       	mov	r0, r31
    583c:	f8 e2       	ldi	r31, 0x28	; 40
    583e:	ef 2e       	mov	r14, r31
    5840:	f1 2c       	mov	r15, r1
    5842:	f0 2d       	mov	r31, r0
    5844:	f9 82       	std	Y+1, r15	; 0x01
    5846:	e8 82       	st	Y, r14
    5848:	86 e0       	ldi	r24, 0x06	; 6
    584a:	8a 83       	std	Y+2, r24	; 0x02
    584c:	1b 82       	std	Y+3, r1	; 0x03
    584e:	14 e0       	ldi	r17, 0x04	; 4
    5850:	1c 83       	std	Y+4, r17	; 0x04
    5852:	80 e0       	ldi	r24, 0x00	; 0
    5854:	09 df       	rcall	.-494    	; 0x5668 <_turn_off>
    5856:	80 e8       	ldi	r24, 0x80	; 128
    5858:	87 b9       	out	0x07, r24	; 7
    585a:	ff 82       	std	Y+7, r15	; 0x07
    585c:	ee 82       	std	Y+6, r14	; 0x06
    585e:	87 e0       	ldi	r24, 0x07	; 7
    5860:	88 87       	std	Y+8, r24	; 0x08
    5862:	19 86       	std	Y+9, r1	; 0x09
    5864:	1a 87       	std	Y+10, r17	; 0x0a
    5866:	81 e0       	ldi	r24, 0x01	; 1
    5868:	ff de       	rcall	.-514    	; 0x5668 <_turn_off>
    586a:	80 e2       	ldi	r24, 0x20	; 32
    586c:	83 bb       	out	0x13, r24	; 19
    586e:	84 e3       	ldi	r24, 0x34	; 52
    5870:	90 e0       	ldi	r25, 0x00	; 0
    5872:	9d 87       	std	Y+13, r25	; 0x0d
    5874:	8c 87       	std	Y+12, r24	; 0x0c
    5876:	85 e0       	ldi	r24, 0x05	; 5
    5878:	8e 87       	std	Y+14, r24	; 0x0e
    587a:	1f 86       	std	Y+15, r1	; 0x0f
    587c:	18 8b       	std	Y+16, r17	; 0x10
    587e:	82 e0       	ldi	r24, 0x02	; 2
    5880:	f3 de       	rcall	.-538    	; 0x5668 <_turn_off>
    5882:	80 e1       	ldi	r24, 0x10	; 16
    5884:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
    5888:	82 e0       	ldi	r24, 0x02	; 2
    588a:	91 e0       	ldi	r25, 0x01	; 1
    588c:	9b 8b       	std	Y+19, r25	; 0x13
    588e:	8a 8b       	std	Y+18, r24	; 0x12
    5890:	1c 8b       	std	Y+20, r17	; 0x14
    5892:	1d 8a       	std	Y+21, r1	; 0x15
    5894:	1e 8b       	std	Y+22, r17	; 0x16
    5896:	83 e0       	ldi	r24, 0x03	; 3
    5898:	e7 de       	rcall	.-562    	; 0x5668 <_turn_off>
    589a:	e1 2c       	mov	r14, r1
    589c:	f1 2c       	mov	r15, r1
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	40 ec       	ldi	r20, 0xC0	; 192
    58a4:	50 e0       	ldi	r21, 0x00	; 0
    58a6:	66 e4       	ldi	r22, 0x46	; 70
    58a8:	77 e0       	ldi	r23, 0x07	; 7
    58aa:	8c ec       	ldi	r24, 0xCC	; 204
    58ac:	9b e2       	ldi	r25, 0x2B	; 43
    58ae:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
    58b2:	df 91       	pop	r29
    58b4:	cf 91       	pop	r28
    58b6:	1f 91       	pop	r17
    58b8:	0f 91       	pop	r16
    58ba:	ff 90       	pop	r15
    58bc:	ef 90       	pop	r14
    58be:	08 95       	ret

000058c0 <status_leds_slowBlink>:
    58c0:	cf 93       	push	r28
    58c2:	df 93       	push	r29
    58c4:	90 e0       	ldi	r25, 0x00	; 0
    58c6:	fc 01       	movw	r30, r24
    58c8:	ee 0f       	add	r30, r30
    58ca:	ff 1f       	adc	r31, r31
    58cc:	df 01       	movw	r26, r30
    58ce:	a8 0f       	add	r26, r24
    58d0:	b9 1f       	adc	r27, r25
    58d2:	aa 0f       	add	r26, r26
    58d4:	bb 1f       	adc	r27, r27
    58d6:	a0 5c       	subi	r26, 0xC0	; 192
    58d8:	b8 4e       	sbci	r27, 0xE8	; 232
    58da:	cd 91       	ld	r28, X+
    58dc:	dc 91       	ld	r29, X
    58de:	11 97       	sbiw	r26, 0x01	; 1
    58e0:	48 81       	ld	r20, Y
    58e2:	21 e0       	ldi	r18, 0x01	; 1
    58e4:	30 e0       	ldi	r19, 0x00	; 0
    58e6:	12 96       	adiw	r26, 0x02	; 2
    58e8:	0c 90       	ld	r0, X
    58ea:	12 97       	sbiw	r26, 0x02	; 2
    58ec:	02 c0       	rjmp	.+4      	; 0x58f2 <status_leds_slowBlink+0x32>
    58ee:	22 0f       	add	r18, r18
    58f0:	33 1f       	adc	r19, r19
    58f2:	0a 94       	dec	r0
    58f4:	e2 f7       	brpl	.-8      	; 0x58ee <status_leds_slowBlink+0x2e>
    58f6:	24 27       	eor	r18, r20
    58f8:	28 83       	st	Y, r18
    58fa:	fd 01       	movw	r30, r26
    58fc:	81 e0       	ldi	r24, 0x01	; 1
    58fe:	84 83       	std	Z+4, r24	; 0x04
    5900:	df 91       	pop	r29
    5902:	cf 91       	pop	r28
    5904:	08 95       	ret

00005906 <status_leds_fastBlink>:
    5906:	cf 93       	push	r28
    5908:	df 93       	push	r29
    590a:	90 e0       	ldi	r25, 0x00	; 0
    590c:	fc 01       	movw	r30, r24
    590e:	ee 0f       	add	r30, r30
    5910:	ff 1f       	adc	r31, r31
    5912:	df 01       	movw	r26, r30
    5914:	a8 0f       	add	r26, r24
    5916:	b9 1f       	adc	r27, r25
    5918:	aa 0f       	add	r26, r26
    591a:	bb 1f       	adc	r27, r27
    591c:	a0 5c       	subi	r26, 0xC0	; 192
    591e:	b8 4e       	sbci	r27, 0xE8	; 232
    5920:	cd 91       	ld	r28, X+
    5922:	dc 91       	ld	r29, X
    5924:	11 97       	sbiw	r26, 0x01	; 1
    5926:	48 81       	ld	r20, Y
    5928:	21 e0       	ldi	r18, 0x01	; 1
    592a:	30 e0       	ldi	r19, 0x00	; 0
    592c:	12 96       	adiw	r26, 0x02	; 2
    592e:	0c 90       	ld	r0, X
    5930:	12 97       	sbiw	r26, 0x02	; 2
    5932:	02 c0       	rjmp	.+4      	; 0x5938 <status_leds_fastBlink+0x32>
    5934:	22 0f       	add	r18, r18
    5936:	33 1f       	adc	r19, r19
    5938:	0a 94       	dec	r0
    593a:	e2 f7       	brpl	.-8      	; 0x5934 <status_leds_fastBlink+0x2e>
    593c:	24 27       	eor	r18, r20
    593e:	28 83       	st	Y, r18
    5940:	fd 01       	movw	r30, r26
    5942:	82 e0       	ldi	r24, 0x02	; 2
    5944:	84 83       	std	Z+4, r24	; 0x04
    5946:	df 91       	pop	r29
    5948:	cf 91       	pop	r28
    594a:	08 95       	ret

0000594c <status_leds_ledOn>:
    594c:	28 2f       	mov	r18, r24
    594e:	30 e0       	ldi	r19, 0x00	; 0
    5950:	f9 01       	movw	r30, r18
    5952:	ee 0f       	add	r30, r30
    5954:	ff 1f       	adc	r31, r31
    5956:	e2 0f       	add	r30, r18
    5958:	f3 1f       	adc	r31, r19
    595a:	ee 0f       	add	r30, r30
    595c:	ff 1f       	adc	r31, r31
    595e:	e0 5c       	subi	r30, 0xC0	; 192
    5960:	f8 4e       	sbci	r31, 0xE8	; 232
    5962:	93 e0       	ldi	r25, 0x03	; 3
    5964:	94 83       	std	Z+4, r25	; 0x04
    5966:	cc ce       	rjmp	.-616    	; 0x5700 <_turn_on>
    5968:	08 95       	ret

0000596a <status_leds_ledOff>:
    596a:	28 2f       	mov	r18, r24
    596c:	30 e0       	ldi	r19, 0x00	; 0
    596e:	f9 01       	movw	r30, r18
    5970:	ee 0f       	add	r30, r30
    5972:	ff 1f       	adc	r31, r31
    5974:	e2 0f       	add	r30, r18
    5976:	f3 1f       	adc	r31, r19
    5978:	ee 0f       	add	r30, r30
    597a:	ff 1f       	adc	r31, r31
    597c:	e0 5c       	subi	r30, 0xC0	; 192
    597e:	f8 4e       	sbci	r31, 0xE8	; 232
    5980:	94 e0       	ldi	r25, 0x04	; 4
    5982:	94 83       	std	Z+4, r25	; 0x04
    5984:	71 ce       	rjmp	.-798    	; 0x5668 <_turn_off>
    5986:	08 95       	ret

00005988 <status_leds_longPuls>:
    5988:	90 e0       	ldi	r25, 0x00	; 0
    598a:	fc 01       	movw	r30, r24
    598c:	ee 0f       	add	r30, r30
    598e:	ff 1f       	adc	r31, r31
    5990:	df 01       	movw	r26, r30
    5992:	a8 0f       	add	r26, r24
    5994:	b9 1f       	adc	r27, r25
    5996:	aa 0f       	add	r26, r26
    5998:	bb 1f       	adc	r27, r27
    599a:	a0 5c       	subi	r26, 0xC0	; 192
    599c:	b8 4e       	sbci	r27, 0xE8	; 232
    599e:	26 e0       	ldi	r18, 0x06	; 6
    59a0:	15 96       	adiw	r26, 0x05	; 5
    59a2:	2c 93       	st	X, r18
    59a4:	15 97       	sbiw	r26, 0x05	; 5
    59a6:	fd 01       	movw	r30, r26
    59a8:	14 82       	std	Z+4, r1	; 0x04
    59aa:	08 95       	ret

000059ac <status_leds_shortPuls>:
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	fc 01       	movw	r30, r24
    59b0:	ee 0f       	add	r30, r30
    59b2:	ff 1f       	adc	r31, r31
    59b4:	df 01       	movw	r26, r30
    59b6:	a8 0f       	add	r26, r24
    59b8:	b9 1f       	adc	r27, r25
    59ba:	aa 0f       	add	r26, r26
    59bc:	bb 1f       	adc	r27, r27
    59be:	a0 5c       	subi	r26, 0xC0	; 192
    59c0:	b8 4e       	sbci	r27, 0xE8	; 232
    59c2:	15 96       	adiw	r26, 0x05	; 5
    59c4:	1c 92       	st	X, r1
    59c6:	15 97       	sbiw	r26, 0x05	; 5
    59c8:	fd 01       	movw	r30, r26
    59ca:	14 82       	std	Z+4, r1	; 0x04
    59cc:	08 95       	ret

000059ce <_initTwiInterface>:
    59ce:	80 91 66 17 	lds	r24, 0x1766	; 0x801766 <_twiIsInitiated>
    59d2:	81 11       	cpse	r24, r1
    59d4:	0c c0       	rjmp	.+24     	; 0x59ee <_initTwiInterface+0x20>
    59d6:	8c e0       	ldi	r24, 0x0C	; 12
    59d8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    59dc:	8f ef       	ldi	r24, 0xFF	; 255
    59de:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    59e2:	84 e0       	ldi	r24, 0x04	; 4
    59e4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    59e8:	81 e0       	ldi	r24, 0x01	; 1
    59ea:	80 93 66 17 	sts	0x1766, r24	; 0x801766 <_twiIsInitiated>
    59ee:	08 95       	ret

000059f0 <twiCreate>:
    59f0:	af 92       	push	r10
    59f2:	bf 92       	push	r11
    59f4:	cf 92       	push	r12
    59f6:	df 92       	push	r13
    59f8:	ef 92       	push	r14
    59fa:	ff 92       	push	r15
    59fc:	0f 93       	push	r16
    59fe:	1f 93       	push	r17
    5a00:	cf 93       	push	r28
    5a02:	df 93       	push	r29
    5a04:	a8 2e       	mov	r10, r24
    5a06:	b6 2e       	mov	r11, r22
    5a08:	69 01       	movw	r12, r18
    5a0a:	7a 01       	movw	r14, r20
    5a0c:	84 e0       	ldi	r24, 0x04	; 4
    5a0e:	90 e0       	ldi	r25, 0x00	; 0
    5a10:	22 d3       	rcall	.+1604   	; 0x6056 <malloc>
    5a12:	ec 01       	movw	r28, r24
    5a14:	89 2b       	or	r24, r25
    5a16:	61 f1       	breq	.+88     	; 0x5a70 <twiCreate+0x80>
    5a18:	a8 82       	st	Y, r10
    5a1a:	81 e0       	ldi	r24, 0x01	; 1
    5a1c:	b8 12       	cpse	r11, r24
    5a1e:	12 c0       	rjmp	.+36     	; 0x5a44 <twiCreate+0x54>
    5a20:	c7 01       	movw	r24, r14
    5a22:	b6 01       	movw	r22, r12
    5a24:	20 ea       	ldi	r18, 0xA0	; 160
    5a26:	36 e8       	ldi	r19, 0x86	; 134
    5a28:	41 e0       	ldi	r20, 0x01	; 1
    5a2a:	50 e0       	ldi	r21, 0x00	; 0
    5a2c:	ea d2       	rcall	.+1492   	; 0x6002 <__udivmodsi4>
    5a2e:	da 01       	movw	r26, r20
    5a30:	c9 01       	movw	r24, r18
    5a32:	40 97       	sbiw	r24, 0x10	; 16
    5a34:	a1 09       	sbc	r26, r1
    5a36:	b1 09       	sbc	r27, r1
    5a38:	b6 95       	lsr	r27
    5a3a:	a7 95       	ror	r26
    5a3c:	97 95       	ror	r25
    5a3e:	87 95       	ror	r24
    5a40:	89 83       	std	Y+1, r24	; 0x01
    5a42:	11 c0       	rjmp	.+34     	; 0x5a66 <twiCreate+0x76>
    5a44:	c7 01       	movw	r24, r14
    5a46:	b6 01       	movw	r22, r12
    5a48:	20 e8       	ldi	r18, 0x80	; 128
    5a4a:	3a e1       	ldi	r19, 0x1A	; 26
    5a4c:	46 e0       	ldi	r20, 0x06	; 6
    5a4e:	50 e0       	ldi	r21, 0x00	; 0
    5a50:	d8 d2       	rcall	.+1456   	; 0x6002 <__udivmodsi4>
    5a52:	da 01       	movw	r26, r20
    5a54:	c9 01       	movw	r24, r18
    5a56:	40 97       	sbiw	r24, 0x10	; 16
    5a58:	a1 09       	sbc	r26, r1
    5a5a:	b1 09       	sbc	r27, r1
    5a5c:	b6 95       	lsr	r27
    5a5e:	a7 95       	ror	r26
    5a60:	97 95       	ror	r25
    5a62:	87 95       	ror	r24
    5a64:	89 83       	std	Y+1, r24	; 0x01
    5a66:	1b 83       	std	Y+3, r17	; 0x03
    5a68:	0a 83       	std	Y+2, r16	; 0x02
    5a6a:	8c 2f       	mov	r24, r28
    5a6c:	9d 2f       	mov	r25, r29
    5a6e:	02 c0       	rjmp	.+4      	; 0x5a74 <twiCreate+0x84>
    5a70:	80 e0       	ldi	r24, 0x00	; 0
    5a72:	90 e0       	ldi	r25, 0x00	; 0
    5a74:	df 91       	pop	r29
    5a76:	cf 91       	pop	r28
    5a78:	1f 91       	pop	r17
    5a7a:	0f 91       	pop	r16
    5a7c:	ff 90       	pop	r15
    5a7e:	ef 90       	pop	r14
    5a80:	df 90       	pop	r13
    5a82:	cf 90       	pop	r12
    5a84:	bf 90       	pop	r11
    5a86:	af 90       	pop	r10
    5a88:	08 95       	ret

00005a8a <twiIsBusy>:
    5a8a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a8e:	81 70       	andi	r24, 0x01	; 1
    5a90:	08 95       	ret

00005a92 <twiTransmit>:
    5a92:	ff 92       	push	r15
    5a94:	0f 93       	push	r16
    5a96:	1f 93       	push	r17
    5a98:	cf 93       	push	r28
    5a9a:	df 93       	push	r29
    5a9c:	00 97       	sbiw	r24, 0x00	; 0
    5a9e:	d1 f1       	breq	.+116    	; 0x5b14 <twiTransmit+0x82>
    5aa0:	4a 30       	cpi	r20, 0x0A	; 10
    5aa2:	d0 f5       	brcc	.+116    	; 0x5b18 <twiTransmit+0x86>
    5aa4:	f4 2e       	mov	r15, r20
    5aa6:	8b 01       	movw	r16, r22
    5aa8:	ec 01       	movw	r28, r24
    5aaa:	ef df       	rcall	.-34     	; 0x5a8a <twiIsBusy>
    5aac:	81 11       	cpse	r24, r1
    5aae:	36 c0       	rjmp	.+108    	; 0x5b1c <twiTransmit+0x8a>
    5ab0:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <_twiCurrentHandler>
    5ab4:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <_twiCurrentHandler+0x1>
    5ab8:	c8 17       	cp	r28, r24
    5aba:	d9 07       	cpc	r29, r25
    5abc:	41 f0       	breq	.+16     	; 0x5ace <twiTransmit+0x3c>
    5abe:	87 df       	rcall	.-242    	; 0x59ce <_initTwiInterface>
    5ac0:	89 81       	ldd	r24, Y+1	; 0x01
    5ac2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5ac6:	d0 93 5a 17 	sts	0x175A, r29	; 0x80175a <_twiCurrentHandler+0x1>
    5aca:	c0 93 59 17 	sts	0x1759, r28	; 0x801759 <_twiCurrentHandler>
    5ace:	81 e0       	ldi	r24, 0x01	; 1
    5ad0:	8f 0d       	add	r24, r15
    5ad2:	80 93 5b 17 	sts	0x175B, r24	; 0x80175b <_twiMessageLen>
    5ad6:	88 81       	ld	r24, Y
    5ad8:	88 0f       	add	r24, r24
    5ada:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <_twiMessageBuffer>
    5ade:	ff 20       	and	r15, r15
    5ae0:	89 f0       	breq	.+34     	; 0x5b04 <twiTransmit+0x72>
    5ae2:	f8 01       	movw	r30, r16
    5ae4:	ad e5       	ldi	r26, 0x5D	; 93
    5ae6:	b7 e1       	ldi	r27, 0x17	; 23
    5ae8:	4f ef       	ldi	r20, 0xFF	; 255
    5aea:	4f 0d       	add	r20, r15
    5aec:	64 2f       	mov	r22, r20
    5aee:	70 e0       	ldi	r23, 0x00	; 0
    5af0:	cb 01       	movw	r24, r22
    5af2:	01 96       	adiw	r24, 0x01	; 1
    5af4:	b8 01       	movw	r22, r16
    5af6:	68 0f       	add	r22, r24
    5af8:	79 1f       	adc	r23, r25
    5afa:	81 91       	ld	r24, Z+
    5afc:	8d 93       	st	X+, r24
    5afe:	e6 17       	cp	r30, r22
    5b00:	f7 07       	cpc	r31, r23
    5b02:	d9 f7       	brne	.-10     	; 0x5afa <twiTransmit+0x68>
    5b04:	88 ef       	ldi	r24, 0xF8	; 248
    5b06:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b0a:	85 ea       	ldi	r24, 0xA5	; 165
    5b0c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5b10:	84 e0       	ldi	r24, 0x04	; 4
    5b12:	05 c0       	rjmp	.+10     	; 0x5b1e <twiTransmit+0x8c>
    5b14:	86 e0       	ldi	r24, 0x06	; 6
    5b16:	03 c0       	rjmp	.+6      	; 0x5b1e <twiTransmit+0x8c>
    5b18:	87 e0       	ldi	r24, 0x07	; 7
    5b1a:	01 c0       	rjmp	.+2      	; 0x5b1e <twiTransmit+0x8c>
    5b1c:	82 e0       	ldi	r24, 0x02	; 2
    5b1e:	df 91       	pop	r29
    5b20:	cf 91       	pop	r28
    5b22:	1f 91       	pop	r17
    5b24:	0f 91       	pop	r16
    5b26:	ff 90       	pop	r15
    5b28:	08 95       	ret

00005b2a <twiReceive>:
    5b2a:	1f 93       	push	r17
    5b2c:	cf 93       	push	r28
    5b2e:	df 93       	push	r29
    5b30:	00 97       	sbiw	r24, 0x00	; 0
    5b32:	29 f1       	breq	.+74     	; 0x5b7e <twiReceive+0x54>
    5b34:	6b 30       	cpi	r22, 0x0B	; 11
    5b36:	28 f5       	brcc	.+74     	; 0x5b82 <twiReceive+0x58>
    5b38:	16 2f       	mov	r17, r22
    5b3a:	ec 01       	movw	r28, r24
    5b3c:	a6 df       	rcall	.-180    	; 0x5a8a <twiIsBusy>
    5b3e:	81 11       	cpse	r24, r1
    5b40:	22 c0       	rjmp	.+68     	; 0x5b86 <twiReceive+0x5c>
    5b42:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <_twiCurrentHandler>
    5b46:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <_twiCurrentHandler+0x1>
    5b4a:	c8 17       	cp	r28, r24
    5b4c:	d9 07       	cpc	r29, r25
    5b4e:	41 f0       	breq	.+16     	; 0x5b60 <twiReceive+0x36>
    5b50:	3e df       	rcall	.-388    	; 0x59ce <_initTwiInterface>
    5b52:	89 81       	ldd	r24, Y+1	; 0x01
    5b54:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5b58:	d0 93 5a 17 	sts	0x175A, r29	; 0x80175a <_twiCurrentHandler+0x1>
    5b5c:	c0 93 59 17 	sts	0x1759, r28	; 0x801759 <_twiCurrentHandler>
    5b60:	10 93 5b 17 	sts	0x175B, r17	; 0x80175b <_twiMessageLen>
    5b64:	88 81       	ld	r24, Y
    5b66:	88 0f       	add	r24, r24
    5b68:	81 60       	ori	r24, 0x01	; 1
    5b6a:	80 93 5c 17 	sts	0x175C, r24	; 0x80175c <_twiMessageBuffer>
    5b6e:	88 ef       	ldi	r24, 0xF8	; 248
    5b70:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5b74:	85 ea       	ldi	r24, 0xA5	; 165
    5b76:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5b7a:	85 e0       	ldi	r24, 0x05	; 5
    5b7c:	05 c0       	rjmp	.+10     	; 0x5b88 <twiReceive+0x5e>
    5b7e:	86 e0       	ldi	r24, 0x06	; 6
    5b80:	03 c0       	rjmp	.+6      	; 0x5b88 <twiReceive+0x5e>
    5b82:	87 e0       	ldi	r24, 0x07	; 7
    5b84:	01 c0       	rjmp	.+2      	; 0x5b88 <twiReceive+0x5e>
    5b86:	82 e0       	ldi	r24, 0x02	; 2
    5b88:	df 91       	pop	r29
    5b8a:	cf 91       	pop	r28
    5b8c:	1f 91       	pop	r17
    5b8e:	08 95       	ret

00005b90 <__vector_39>:
    5b90:	1f 92       	push	r1
    5b92:	0f 92       	push	r0
    5b94:	0f b6       	in	r0, 0x3f	; 63
    5b96:	0f 92       	push	r0
    5b98:	11 24       	eor	r1, r1
    5b9a:	0b b6       	in	r0, 0x3b	; 59
    5b9c:	0f 92       	push	r0
    5b9e:	2f 93       	push	r18
    5ba0:	3f 93       	push	r19
    5ba2:	4f 93       	push	r20
    5ba4:	5f 93       	push	r21
    5ba6:	6f 93       	push	r22
    5ba8:	7f 93       	push	r23
    5baa:	8f 93       	push	r24
    5bac:	9f 93       	push	r25
    5bae:	af 93       	push	r26
    5bb0:	bf 93       	push	r27
    5bb2:	ef 93       	push	r30
    5bb4:	ff 93       	push	r31
    5bb6:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5bba:	8e 2f       	mov	r24, r30
    5bbc:	90 e0       	ldi	r25, 0x00	; 0
    5bbe:	fc 01       	movw	r30, r24
    5bc0:	38 97       	sbiw	r30, 0x08	; 8
    5bc2:	e1 35       	cpi	r30, 0x51	; 81
    5bc4:	f1 05       	cpc	r31, r1
    5bc6:	08 f0       	brcs	.+2      	; 0x5bca <__vector_39+0x3a>
    5bc8:	75 c0       	rjmp	.+234    	; 0x5cb4 <__vector_39+0x124>
    5bca:	88 27       	eor	r24, r24
    5bcc:	e4 58       	subi	r30, 0x84	; 132
    5bce:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd0:	8f 4f       	sbci	r24, 0xFF	; 255
    5bd2:	39 c2       	rjmp	.+1138   	; 0x6046 <__tablejump2__>
    5bd4:	10 92 58 17 	sts	0x1758, r1	; 0x801758 <_index.1885>
    5bd8:	e0 91 58 17 	lds	r30, 0x1758	; 0x801758 <_index.1885>
    5bdc:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <_twiMessageLen>
    5be0:	e8 17       	cp	r30, r24
    5be2:	70 f4       	brcc	.+28     	; 0x5c00 <__vector_39+0x70>
    5be4:	81 e0       	ldi	r24, 0x01	; 1
    5be6:	8e 0f       	add	r24, r30
    5be8:	80 93 58 17 	sts	0x1758, r24	; 0x801758 <_index.1885>
    5bec:	f0 e0       	ldi	r31, 0x00	; 0
    5bee:	e4 5a       	subi	r30, 0xA4	; 164
    5bf0:	f8 4e       	sbci	r31, 0xE8	; 232
    5bf2:	80 81       	ld	r24, Z
    5bf4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5bf8:	85 e8       	ldi	r24, 0x85	; 133
    5bfa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5bfe:	72 c0       	rjmp	.+228    	; 0x5ce4 <__vector_39+0x154>
    5c00:	84 e9       	ldi	r24, 0x94	; 148
    5c02:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5c06:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <_twiCurrentHandler>
    5c0a:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <_twiCurrentHandler+0x1>
    5c0e:	dc 01       	movw	r26, r24
    5c10:	12 96       	adiw	r26, 0x02	; 2
    5c12:	ed 91       	ld	r30, X+
    5c14:	fc 91       	ld	r31, X
    5c16:	13 97       	sbiw	r26, 0x03	; 3
    5c18:	30 97       	sbiw	r30, 0x00	; 0
    5c1a:	09 f4       	brne	.+2      	; 0x5c1e <__vector_39+0x8e>
    5c1c:	63 c0       	rjmp	.+198    	; 0x5ce4 <__vector_39+0x154>
    5c1e:	20 e0       	ldi	r18, 0x00	; 0
    5c20:	40 e0       	ldi	r20, 0x00	; 0
    5c22:	50 e0       	ldi	r21, 0x00	; 0
    5c24:	64 e0       	ldi	r22, 0x04	; 4
    5c26:	19 95       	eicall
    5c28:	5d c0       	rjmp	.+186    	; 0x5ce4 <__vector_39+0x154>
    5c2a:	e0 91 58 17 	lds	r30, 0x1758	; 0x801758 <_index.1885>
    5c2e:	81 e0       	ldi	r24, 0x01	; 1
    5c30:	8e 0f       	add	r24, r30
    5c32:	80 93 58 17 	sts	0x1758, r24	; 0x801758 <_index.1885>
    5c36:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5c3a:	f0 e0       	ldi	r31, 0x00	; 0
    5c3c:	e4 5a       	subi	r30, 0xA4	; 164
    5c3e:	f8 4e       	sbci	r31, 0xE8	; 232
    5c40:	80 83       	st	Z, r24
    5c42:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5c46:	80 34       	cpi	r24, 0x40	; 64
    5c48:	11 f4       	brne	.+4      	; 0x5c4e <__vector_39+0xbe>
    5c4a:	10 92 58 17 	sts	0x1758, r1	; 0x801758 <_index.1885>
    5c4e:	20 91 58 17 	lds	r18, 0x1758	; 0x801758 <_index.1885>
    5c52:	30 e0       	ldi	r19, 0x00	; 0
    5c54:	80 91 5b 17 	lds	r24, 0x175B	; 0x80175b <_twiMessageLen>
    5c58:	90 e0       	ldi	r25, 0x00	; 0
    5c5a:	01 97       	sbiw	r24, 0x01	; 1
    5c5c:	28 17       	cp	r18, r24
    5c5e:	39 07       	cpc	r19, r25
    5c60:	24 f4       	brge	.+8      	; 0x5c6a <__vector_39+0xda>
    5c62:	85 ec       	ldi	r24, 0xC5	; 197
    5c64:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5c68:	3d c0       	rjmp	.+122    	; 0x5ce4 <__vector_39+0x154>
    5c6a:	85 e8       	ldi	r24, 0x85	; 133
    5c6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5c70:	39 c0       	rjmp	.+114    	; 0x5ce4 <__vector_39+0x154>
    5c72:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5c76:	e0 91 58 17 	lds	r30, 0x1758	; 0x801758 <_index.1885>
    5c7a:	f0 e0       	ldi	r31, 0x00	; 0
    5c7c:	e4 5a       	subi	r30, 0xA4	; 164
    5c7e:	f8 4e       	sbci	r31, 0xE8	; 232
    5c80:	80 83       	st	Z, r24
    5c82:	84 e9       	ldi	r24, 0x94	; 148
    5c84:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5c88:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <_twiCurrentHandler>
    5c8c:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <_twiCurrentHandler+0x1>
    5c90:	dc 01       	movw	r26, r24
    5c92:	12 96       	adiw	r26, 0x02	; 2
    5c94:	ed 91       	ld	r30, X+
    5c96:	fc 91       	ld	r31, X
    5c98:	13 97       	sbiw	r26, 0x03	; 3
    5c9a:	30 97       	sbiw	r30, 0x00	; 0
    5c9c:	19 f1       	breq	.+70     	; 0x5ce4 <__vector_39+0x154>
    5c9e:	20 91 5b 17 	lds	r18, 0x175B	; 0x80175b <_twiMessageLen>
    5ca2:	4c e5       	ldi	r20, 0x5C	; 92
    5ca4:	57 e1       	ldi	r21, 0x17	; 23
    5ca6:	65 e0       	ldi	r22, 0x05	; 5
    5ca8:	19 95       	eicall
    5caa:	1c c0       	rjmp	.+56     	; 0x5ce4 <__vector_39+0x154>
    5cac:	85 ea       	ldi	r24, 0xA5	; 165
    5cae:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5cb2:	18 c0       	rjmp	.+48     	; 0x5ce4 <__vector_39+0x154>
    5cb4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5cb8:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    5cbc:	84 e0       	ldi	r24, 0x04	; 4
    5cbe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5cc2:	80 91 59 17 	lds	r24, 0x1759	; 0x801759 <_twiCurrentHandler>
    5cc6:	90 91 5a 17 	lds	r25, 0x175A	; 0x80175a <_twiCurrentHandler+0x1>
    5cca:	dc 01       	movw	r26, r24
    5ccc:	12 96       	adiw	r26, 0x02	; 2
    5cce:	ed 91       	ld	r30, X+
    5cd0:	fc 91       	ld	r31, X
    5cd2:	13 97       	sbiw	r26, 0x03	; 3
    5cd4:	30 97       	sbiw	r30, 0x00	; 0
    5cd6:	31 f0       	breq	.+12     	; 0x5ce4 <__vector_39+0x154>
    5cd8:	20 e0       	ldi	r18, 0x00	; 0
    5cda:	40 e0       	ldi	r20, 0x00	; 0
    5cdc:	50 e0       	ldi	r21, 0x00	; 0
    5cde:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    5ce2:	19 95       	eicall
    5ce4:	ff 91       	pop	r31
    5ce6:	ef 91       	pop	r30
    5ce8:	bf 91       	pop	r27
    5cea:	af 91       	pop	r26
    5cec:	9f 91       	pop	r25
    5cee:	8f 91       	pop	r24
    5cf0:	7f 91       	pop	r23
    5cf2:	6f 91       	pop	r22
    5cf4:	5f 91       	pop	r21
    5cf6:	4f 91       	pop	r20
    5cf8:	3f 91       	pop	r19
    5cfa:	2f 91       	pop	r18
    5cfc:	0f 90       	pop	r0
    5cfe:	0b be       	out	0x3b, r0	; 59
    5d00:	0f 90       	pop	r0
    5d02:	0f be       	out	0x3f, r0	; 63
    5d04:	0f 90       	pop	r0
    5d06:	1f 90       	pop	r1
    5d08:	18 95       	reti

00005d0a <fifo_init>:
    5d0a:	fc 01       	movw	r30, r24
    5d0c:	41 11       	cpse	r20, r1
    5d0e:	01 c0       	rjmp	.+2      	; 0x5d12 <fifo_init+0x8>
    5d10:	c3 d2       	rcall	.+1414   	; 0x6298 <abort>
    5d12:	84 2f       	mov	r24, r20
    5d14:	90 e0       	ldi	r25, 0x00	; 0
    5d16:	9c 01       	movw	r18, r24
    5d18:	21 50       	subi	r18, 0x01	; 1
    5d1a:	31 09       	sbc	r19, r1
    5d1c:	82 23       	and	r24, r18
    5d1e:	93 23       	and	r25, r19
    5d20:	89 2b       	or	r24, r25
    5d22:	09 f0       	breq	.+2      	; 0x5d26 <fifo_init+0x1c>
    5d24:	b9 d2       	rcall	.+1394   	; 0x6298 <abort>
    5d26:	41 38       	cpi	r20, 0x81	; 129
    5d28:	08 f0       	brcs	.+2      	; 0x5d2c <fifo_init+0x22>
    5d2a:	b6 d2       	rcall	.+1388   	; 0x6298 <abort>
    5d2c:	12 82       	std	Z+2, r1	; 0x02
    5d2e:	13 82       	std	Z+3, r1	; 0x03
    5d30:	44 83       	std	Z+4, r20	; 0x04
    5d32:	44 0f       	add	r20, r20
    5d34:	41 50       	subi	r20, 0x01	; 1
    5d36:	45 83       	std	Z+5, r20	; 0x05
    5d38:	71 83       	std	Z+1, r23	; 0x01
    5d3a:	60 83       	st	Z, r22
    5d3c:	80 e0       	ldi	r24, 0x00	; 0
    5d3e:	90 e0       	ldi	r25, 0x00	; 0
    5d40:	08 95       	ret

00005d42 <__subsf3>:
    5d42:	50 58       	subi	r21, 0x80	; 128

00005d44 <__addsf3>:
    5d44:	bb 27       	eor	r27, r27
    5d46:	aa 27       	eor	r26, r26
    5d48:	0e d0       	rcall	.+28     	; 0x5d66 <__addsf3x>
    5d4a:	e4 c0       	rjmp	.+456    	; 0x5f14 <__fp_round>
    5d4c:	d5 d0       	rcall	.+426    	; 0x5ef8 <__fp_pscA>
    5d4e:	30 f0       	brcs	.+12     	; 0x5d5c <__addsf3+0x18>
    5d50:	da d0       	rcall	.+436    	; 0x5f06 <__fp_pscB>
    5d52:	20 f0       	brcs	.+8      	; 0x5d5c <__addsf3+0x18>
    5d54:	31 f4       	brne	.+12     	; 0x5d62 <__addsf3+0x1e>
    5d56:	9f 3f       	cpi	r25, 0xFF	; 255
    5d58:	11 f4       	brne	.+4      	; 0x5d5e <__addsf3+0x1a>
    5d5a:	1e f4       	brtc	.+6      	; 0x5d62 <__addsf3+0x1e>
    5d5c:	ca c0       	rjmp	.+404    	; 0x5ef2 <__fp_nan>
    5d5e:	0e f4       	brtc	.+2      	; 0x5d62 <__addsf3+0x1e>
    5d60:	e0 95       	com	r30
    5d62:	e7 fb       	bst	r30, 7
    5d64:	c0 c0       	rjmp	.+384    	; 0x5ee6 <__fp_inf>

00005d66 <__addsf3x>:
    5d66:	e9 2f       	mov	r30, r25
    5d68:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__fp_split3>
    5d6c:	78 f3       	brcs	.-34     	; 0x5d4c <__addsf3+0x8>
    5d6e:	ba 17       	cp	r27, r26
    5d70:	62 07       	cpc	r22, r18
    5d72:	73 07       	cpc	r23, r19
    5d74:	84 07       	cpc	r24, r20
    5d76:	95 07       	cpc	r25, r21
    5d78:	20 f0       	brcs	.+8      	; 0x5d82 <__addsf3x+0x1c>
    5d7a:	79 f4       	brne	.+30     	; 0x5d9a <__addsf3x+0x34>
    5d7c:	a6 f5       	brtc	.+104    	; 0x5de6 <__addsf3x+0x80>
    5d7e:	0c 94 0f 1f 	jmp	0x3e1e	; 0x3e1e <__fp_zero>
    5d82:	0e f4       	brtc	.+2      	; 0x5d86 <__addsf3x+0x20>
    5d84:	e0 95       	com	r30
    5d86:	0b 2e       	mov	r0, r27
    5d88:	ba 2f       	mov	r27, r26
    5d8a:	a0 2d       	mov	r26, r0
    5d8c:	0b 01       	movw	r0, r22
    5d8e:	b9 01       	movw	r22, r18
    5d90:	90 01       	movw	r18, r0
    5d92:	0c 01       	movw	r0, r24
    5d94:	ca 01       	movw	r24, r20
    5d96:	a0 01       	movw	r20, r0
    5d98:	11 24       	eor	r1, r1
    5d9a:	ff 27       	eor	r31, r31
    5d9c:	59 1b       	sub	r21, r25
    5d9e:	99 f0       	breq	.+38     	; 0x5dc6 <__addsf3x+0x60>
    5da0:	59 3f       	cpi	r21, 0xF9	; 249
    5da2:	50 f4       	brcc	.+20     	; 0x5db8 <__addsf3x+0x52>
    5da4:	50 3e       	cpi	r21, 0xE0	; 224
    5da6:	68 f1       	brcs	.+90     	; 0x5e02 <__addsf3x+0x9c>
    5da8:	1a 16       	cp	r1, r26
    5daa:	f0 40       	sbci	r31, 0x00	; 0
    5dac:	a2 2f       	mov	r26, r18
    5dae:	23 2f       	mov	r18, r19
    5db0:	34 2f       	mov	r19, r20
    5db2:	44 27       	eor	r20, r20
    5db4:	58 5f       	subi	r21, 0xF8	; 248
    5db6:	f3 cf       	rjmp	.-26     	; 0x5d9e <__addsf3x+0x38>
    5db8:	46 95       	lsr	r20
    5dba:	37 95       	ror	r19
    5dbc:	27 95       	ror	r18
    5dbe:	a7 95       	ror	r26
    5dc0:	f0 40       	sbci	r31, 0x00	; 0
    5dc2:	53 95       	inc	r21
    5dc4:	c9 f7       	brne	.-14     	; 0x5db8 <__addsf3x+0x52>
    5dc6:	7e f4       	brtc	.+30     	; 0x5de6 <__addsf3x+0x80>
    5dc8:	1f 16       	cp	r1, r31
    5dca:	ba 0b       	sbc	r27, r26
    5dcc:	62 0b       	sbc	r22, r18
    5dce:	73 0b       	sbc	r23, r19
    5dd0:	84 0b       	sbc	r24, r20
    5dd2:	ba f0       	brmi	.+46     	; 0x5e02 <__addsf3x+0x9c>
    5dd4:	91 50       	subi	r25, 0x01	; 1
    5dd6:	a1 f0       	breq	.+40     	; 0x5e00 <__addsf3x+0x9a>
    5dd8:	ff 0f       	add	r31, r31
    5dda:	bb 1f       	adc	r27, r27
    5ddc:	66 1f       	adc	r22, r22
    5dde:	77 1f       	adc	r23, r23
    5de0:	88 1f       	adc	r24, r24
    5de2:	c2 f7       	brpl	.-16     	; 0x5dd4 <__addsf3x+0x6e>
    5de4:	0e c0       	rjmp	.+28     	; 0x5e02 <__addsf3x+0x9c>
    5de6:	ba 0f       	add	r27, r26
    5de8:	62 1f       	adc	r22, r18
    5dea:	73 1f       	adc	r23, r19
    5dec:	84 1f       	adc	r24, r20
    5dee:	48 f4       	brcc	.+18     	; 0x5e02 <__addsf3x+0x9c>
    5df0:	87 95       	ror	r24
    5df2:	77 95       	ror	r23
    5df4:	67 95       	ror	r22
    5df6:	b7 95       	ror	r27
    5df8:	f7 95       	ror	r31
    5dfa:	9e 3f       	cpi	r25, 0xFE	; 254
    5dfc:	08 f0       	brcs	.+2      	; 0x5e00 <__addsf3x+0x9a>
    5dfe:	b1 cf       	rjmp	.-158    	; 0x5d62 <__addsf3+0x1e>
    5e00:	93 95       	inc	r25
    5e02:	88 0f       	add	r24, r24
    5e04:	08 f0       	brcs	.+2      	; 0x5e08 <__addsf3x+0xa2>
    5e06:	99 27       	eor	r25, r25
    5e08:	ee 0f       	add	r30, r30
    5e0a:	97 95       	ror	r25
    5e0c:	87 95       	ror	r24
    5e0e:	08 95       	ret

00005e10 <__divsf3>:
    5e10:	0d d0       	rcall	.+26     	; 0x5e2c <__divsf3x>
    5e12:	80 c0       	rjmp	.+256    	; 0x5f14 <__fp_round>
    5e14:	78 d0       	rcall	.+240    	; 0x5f06 <__fp_pscB>
    5e16:	48 f0       	brcs	.+18     	; 0x5e2a <__divsf3+0x1a>
    5e18:	6f d0       	rcall	.+222    	; 0x5ef8 <__fp_pscA>
    5e1a:	38 f0       	brcs	.+14     	; 0x5e2a <__divsf3+0x1a>
    5e1c:	21 f4       	brne	.+8      	; 0x5e26 <__divsf3+0x16>
    5e1e:	5f 3f       	cpi	r21, 0xFF	; 255
    5e20:	21 f0       	breq	.+8      	; 0x5e2a <__divsf3+0x1a>
    5e22:	61 c0       	rjmp	.+194    	; 0x5ee6 <__fp_inf>
    5e24:	51 11       	cpse	r21, r1
    5e26:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_szero>
    5e2a:	63 c0       	rjmp	.+198    	; 0x5ef2 <__fp_nan>

00005e2c <__divsf3x>:
    5e2c:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__fp_split3>
    5e30:	88 f3       	brcs	.-30     	; 0x5e14 <__divsf3+0x4>

00005e32 <__divsf3_pse>:
    5e32:	99 23       	and	r25, r25
    5e34:	b9 f3       	breq	.-18     	; 0x5e24 <__divsf3+0x14>
    5e36:	55 23       	and	r21, r21
    5e38:	a1 f3       	breq	.-24     	; 0x5e22 <__divsf3+0x12>
    5e3a:	95 1b       	sub	r25, r21
    5e3c:	55 0b       	sbc	r21, r21
    5e3e:	bb 27       	eor	r27, r27
    5e40:	aa 27       	eor	r26, r26
    5e42:	62 17       	cp	r22, r18
    5e44:	73 07       	cpc	r23, r19
    5e46:	84 07       	cpc	r24, r20
    5e48:	38 f0       	brcs	.+14     	; 0x5e58 <__divsf3_pse+0x26>
    5e4a:	9f 5f       	subi	r25, 0xFF	; 255
    5e4c:	5f 4f       	sbci	r21, 0xFF	; 255
    5e4e:	22 0f       	add	r18, r18
    5e50:	33 1f       	adc	r19, r19
    5e52:	44 1f       	adc	r20, r20
    5e54:	aa 1f       	adc	r26, r26
    5e56:	a9 f3       	breq	.-22     	; 0x5e42 <__divsf3_pse+0x10>
    5e58:	34 d0       	rcall	.+104    	; 0x5ec2 <__divsf3_pse+0x90>
    5e5a:	0e 2e       	mov	r0, r30
    5e5c:	3a f0       	brmi	.+14     	; 0x5e6c <__divsf3_pse+0x3a>
    5e5e:	e0 e8       	ldi	r30, 0x80	; 128
    5e60:	31 d0       	rcall	.+98     	; 0x5ec4 <__divsf3_pse+0x92>
    5e62:	91 50       	subi	r25, 0x01	; 1
    5e64:	50 40       	sbci	r21, 0x00	; 0
    5e66:	e6 95       	lsr	r30
    5e68:	00 1c       	adc	r0, r0
    5e6a:	ca f7       	brpl	.-14     	; 0x5e5e <__divsf3_pse+0x2c>
    5e6c:	2a d0       	rcall	.+84     	; 0x5ec2 <__divsf3_pse+0x90>
    5e6e:	fe 2f       	mov	r31, r30
    5e70:	28 d0       	rcall	.+80     	; 0x5ec2 <__divsf3_pse+0x90>
    5e72:	66 0f       	add	r22, r22
    5e74:	77 1f       	adc	r23, r23
    5e76:	88 1f       	adc	r24, r24
    5e78:	bb 1f       	adc	r27, r27
    5e7a:	26 17       	cp	r18, r22
    5e7c:	37 07       	cpc	r19, r23
    5e7e:	48 07       	cpc	r20, r24
    5e80:	ab 07       	cpc	r26, r27
    5e82:	b0 e8       	ldi	r27, 0x80	; 128
    5e84:	09 f0       	breq	.+2      	; 0x5e88 <__divsf3_pse+0x56>
    5e86:	bb 0b       	sbc	r27, r27
    5e88:	80 2d       	mov	r24, r0
    5e8a:	bf 01       	movw	r22, r30
    5e8c:	ff 27       	eor	r31, r31
    5e8e:	93 58       	subi	r25, 0x83	; 131
    5e90:	5f 4f       	sbci	r21, 0xFF	; 255
    5e92:	32 f0       	brmi	.+12     	; 0x5ea0 <__divsf3_pse+0x6e>
    5e94:	9e 3f       	cpi	r25, 0xFE	; 254
    5e96:	51 05       	cpc	r21, r1
    5e98:	70 f0       	brcs	.+28     	; 0x5eb6 <__divsf3_pse+0x84>
    5e9a:	25 c0       	rjmp	.+74     	; 0x5ee6 <__fp_inf>
    5e9c:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_szero>
    5ea0:	5f 3f       	cpi	r21, 0xFF	; 255
    5ea2:	e4 f3       	brlt	.-8      	; 0x5e9c <__divsf3_pse+0x6a>
    5ea4:	98 3e       	cpi	r25, 0xE8	; 232
    5ea6:	d4 f3       	brlt	.-12     	; 0x5e9c <__divsf3_pse+0x6a>
    5ea8:	86 95       	lsr	r24
    5eaa:	77 95       	ror	r23
    5eac:	67 95       	ror	r22
    5eae:	b7 95       	ror	r27
    5eb0:	f7 95       	ror	r31
    5eb2:	9f 5f       	subi	r25, 0xFF	; 255
    5eb4:	c9 f7       	brne	.-14     	; 0x5ea8 <__divsf3_pse+0x76>
    5eb6:	88 0f       	add	r24, r24
    5eb8:	91 1d       	adc	r25, r1
    5eba:	96 95       	lsr	r25
    5ebc:	87 95       	ror	r24
    5ebe:	97 f9       	bld	r25, 7
    5ec0:	08 95       	ret
    5ec2:	e1 e0       	ldi	r30, 0x01	; 1
    5ec4:	66 0f       	add	r22, r22
    5ec6:	77 1f       	adc	r23, r23
    5ec8:	88 1f       	adc	r24, r24
    5eca:	bb 1f       	adc	r27, r27
    5ecc:	62 17       	cp	r22, r18
    5ece:	73 07       	cpc	r23, r19
    5ed0:	84 07       	cpc	r24, r20
    5ed2:	ba 07       	cpc	r27, r26
    5ed4:	20 f0       	brcs	.+8      	; 0x5ede <__divsf3_pse+0xac>
    5ed6:	62 1b       	sub	r22, r18
    5ed8:	73 0b       	sbc	r23, r19
    5eda:	84 0b       	sbc	r24, r20
    5edc:	ba 0b       	sbc	r27, r26
    5ede:	ee 1f       	adc	r30, r30
    5ee0:	88 f7       	brcc	.-30     	; 0x5ec4 <__divsf3_pse+0x92>
    5ee2:	e0 95       	com	r30
    5ee4:	08 95       	ret

00005ee6 <__fp_inf>:
    5ee6:	97 f9       	bld	r25, 7
    5ee8:	9f 67       	ori	r25, 0x7F	; 127
    5eea:	80 e8       	ldi	r24, 0x80	; 128
    5eec:	70 e0       	ldi	r23, 0x00	; 0
    5eee:	60 e0       	ldi	r22, 0x00	; 0
    5ef0:	08 95       	ret

00005ef2 <__fp_nan>:
    5ef2:	9f ef       	ldi	r25, 0xFF	; 255
    5ef4:	80 ec       	ldi	r24, 0xC0	; 192
    5ef6:	08 95       	ret

00005ef8 <__fp_pscA>:
    5ef8:	00 24       	eor	r0, r0
    5efa:	0a 94       	dec	r0
    5efc:	16 16       	cp	r1, r22
    5efe:	17 06       	cpc	r1, r23
    5f00:	18 06       	cpc	r1, r24
    5f02:	09 06       	cpc	r0, r25
    5f04:	08 95       	ret

00005f06 <__fp_pscB>:
    5f06:	00 24       	eor	r0, r0
    5f08:	0a 94       	dec	r0
    5f0a:	12 16       	cp	r1, r18
    5f0c:	13 06       	cpc	r1, r19
    5f0e:	14 06       	cpc	r1, r20
    5f10:	05 06       	cpc	r0, r21
    5f12:	08 95       	ret

00005f14 <__fp_round>:
    5f14:	09 2e       	mov	r0, r25
    5f16:	03 94       	inc	r0
    5f18:	00 0c       	add	r0, r0
    5f1a:	11 f4       	brne	.+4      	; 0x5f20 <__fp_round+0xc>
    5f1c:	88 23       	and	r24, r24
    5f1e:	52 f0       	brmi	.+20     	; 0x5f34 <__fp_round+0x20>
    5f20:	bb 0f       	add	r27, r27
    5f22:	40 f4       	brcc	.+16     	; 0x5f34 <__fp_round+0x20>
    5f24:	bf 2b       	or	r27, r31
    5f26:	11 f4       	brne	.+4      	; 0x5f2c <__fp_round+0x18>
    5f28:	60 ff       	sbrs	r22, 0
    5f2a:	04 c0       	rjmp	.+8      	; 0x5f34 <__fp_round+0x20>
    5f2c:	6f 5f       	subi	r22, 0xFF	; 255
    5f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    5f30:	8f 4f       	sbci	r24, 0xFF	; 255
    5f32:	9f 4f       	sbci	r25, 0xFF	; 255
    5f34:	08 95       	ret

00005f36 <__mulsf3>:
    5f36:	0c d0       	rcall	.+24     	; 0x5f50 <__mulsf3x>
    5f38:	ed cf       	rjmp	.-38     	; 0x5f14 <__fp_round>
    5f3a:	de df       	rcall	.-68     	; 0x5ef8 <__fp_pscA>
    5f3c:	28 f0       	brcs	.+10     	; 0x5f48 <__mulsf3+0x12>
    5f3e:	e3 df       	rcall	.-58     	; 0x5f06 <__fp_pscB>
    5f40:	18 f0       	brcs	.+6      	; 0x5f48 <__mulsf3+0x12>
    5f42:	95 23       	and	r25, r21
    5f44:	09 f0       	breq	.+2      	; 0x5f48 <__mulsf3+0x12>
    5f46:	cf cf       	rjmp	.-98     	; 0x5ee6 <__fp_inf>
    5f48:	d4 cf       	rjmp	.-88     	; 0x5ef2 <__fp_nan>
    5f4a:	11 24       	eor	r1, r1
    5f4c:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_szero>

00005f50 <__mulsf3x>:
    5f50:	0e 94 ed 1e 	call	0x3dda	; 0x3dda <__fp_split3>
    5f54:	90 f3       	brcs	.-28     	; 0x5f3a <__mulsf3+0x4>

00005f56 <__mulsf3_pse>:
    5f56:	95 9f       	mul	r25, r21
    5f58:	c1 f3       	breq	.-16     	; 0x5f4a <__mulsf3+0x14>
    5f5a:	95 0f       	add	r25, r21
    5f5c:	50 e0       	ldi	r21, 0x00	; 0
    5f5e:	55 1f       	adc	r21, r21
    5f60:	62 9f       	mul	r22, r18
    5f62:	f0 01       	movw	r30, r0
    5f64:	72 9f       	mul	r23, r18
    5f66:	bb 27       	eor	r27, r27
    5f68:	f0 0d       	add	r31, r0
    5f6a:	b1 1d       	adc	r27, r1
    5f6c:	63 9f       	mul	r22, r19
    5f6e:	aa 27       	eor	r26, r26
    5f70:	f0 0d       	add	r31, r0
    5f72:	b1 1d       	adc	r27, r1
    5f74:	aa 1f       	adc	r26, r26
    5f76:	64 9f       	mul	r22, r20
    5f78:	66 27       	eor	r22, r22
    5f7a:	b0 0d       	add	r27, r0
    5f7c:	a1 1d       	adc	r26, r1
    5f7e:	66 1f       	adc	r22, r22
    5f80:	82 9f       	mul	r24, r18
    5f82:	22 27       	eor	r18, r18
    5f84:	b0 0d       	add	r27, r0
    5f86:	a1 1d       	adc	r26, r1
    5f88:	62 1f       	adc	r22, r18
    5f8a:	73 9f       	mul	r23, r19
    5f8c:	b0 0d       	add	r27, r0
    5f8e:	a1 1d       	adc	r26, r1
    5f90:	62 1f       	adc	r22, r18
    5f92:	83 9f       	mul	r24, r19
    5f94:	a0 0d       	add	r26, r0
    5f96:	61 1d       	adc	r22, r1
    5f98:	22 1f       	adc	r18, r18
    5f9a:	74 9f       	mul	r23, r20
    5f9c:	33 27       	eor	r19, r19
    5f9e:	a0 0d       	add	r26, r0
    5fa0:	61 1d       	adc	r22, r1
    5fa2:	23 1f       	adc	r18, r19
    5fa4:	84 9f       	mul	r24, r20
    5fa6:	60 0d       	add	r22, r0
    5fa8:	21 1d       	adc	r18, r1
    5faa:	82 2f       	mov	r24, r18
    5fac:	76 2f       	mov	r23, r22
    5fae:	6a 2f       	mov	r22, r26
    5fb0:	11 24       	eor	r1, r1
    5fb2:	9f 57       	subi	r25, 0x7F	; 127
    5fb4:	50 40       	sbci	r21, 0x00	; 0
    5fb6:	92 f0       	brmi	.+36     	; 0x5fdc <__mulsf3_pse+0x86>
    5fb8:	e9 f0       	breq	.+58     	; 0x5ff4 <__mulsf3_pse+0x9e>
    5fba:	88 23       	and	r24, r24
    5fbc:	4a f0       	brmi	.+18     	; 0x5fd0 <__mulsf3_pse+0x7a>
    5fbe:	ee 0f       	add	r30, r30
    5fc0:	ff 1f       	adc	r31, r31
    5fc2:	bb 1f       	adc	r27, r27
    5fc4:	66 1f       	adc	r22, r22
    5fc6:	77 1f       	adc	r23, r23
    5fc8:	88 1f       	adc	r24, r24
    5fca:	91 50       	subi	r25, 0x01	; 1
    5fcc:	50 40       	sbci	r21, 0x00	; 0
    5fce:	a9 f7       	brne	.-22     	; 0x5fba <__mulsf3_pse+0x64>
    5fd0:	9e 3f       	cpi	r25, 0xFE	; 254
    5fd2:	51 05       	cpc	r21, r1
    5fd4:	78 f0       	brcs	.+30     	; 0x5ff4 <__mulsf3_pse+0x9e>
    5fd6:	87 cf       	rjmp	.-242    	; 0x5ee6 <__fp_inf>
    5fd8:	0c 94 10 1f 	jmp	0x3e20	; 0x3e20 <__fp_szero>
    5fdc:	5f 3f       	cpi	r21, 0xFF	; 255
    5fde:	e4 f3       	brlt	.-8      	; 0x5fd8 <__mulsf3_pse+0x82>
    5fe0:	98 3e       	cpi	r25, 0xE8	; 232
    5fe2:	d4 f3       	brlt	.-12     	; 0x5fd8 <__mulsf3_pse+0x82>
    5fe4:	86 95       	lsr	r24
    5fe6:	77 95       	ror	r23
    5fe8:	67 95       	ror	r22
    5fea:	b7 95       	ror	r27
    5fec:	f7 95       	ror	r31
    5fee:	e7 95       	ror	r30
    5ff0:	9f 5f       	subi	r25, 0xFF	; 255
    5ff2:	c1 f7       	brne	.-16     	; 0x5fe4 <__mulsf3_pse+0x8e>
    5ff4:	fe 2b       	or	r31, r30
    5ff6:	88 0f       	add	r24, r24
    5ff8:	91 1d       	adc	r25, r1
    5ffa:	96 95       	lsr	r25
    5ffc:	87 95       	ror	r24
    5ffe:	97 f9       	bld	r25, 7
    6000:	08 95       	ret

00006002 <__udivmodsi4>:
    6002:	a1 e2       	ldi	r26, 0x21	; 33
    6004:	1a 2e       	mov	r1, r26
    6006:	aa 1b       	sub	r26, r26
    6008:	bb 1b       	sub	r27, r27
    600a:	fd 01       	movw	r30, r26
    600c:	0d c0       	rjmp	.+26     	; 0x6028 <__udivmodsi4_ep>

0000600e <__udivmodsi4_loop>:
    600e:	aa 1f       	adc	r26, r26
    6010:	bb 1f       	adc	r27, r27
    6012:	ee 1f       	adc	r30, r30
    6014:	ff 1f       	adc	r31, r31
    6016:	a2 17       	cp	r26, r18
    6018:	b3 07       	cpc	r27, r19
    601a:	e4 07       	cpc	r30, r20
    601c:	f5 07       	cpc	r31, r21
    601e:	20 f0       	brcs	.+8      	; 0x6028 <__udivmodsi4_ep>
    6020:	a2 1b       	sub	r26, r18
    6022:	b3 0b       	sbc	r27, r19
    6024:	e4 0b       	sbc	r30, r20
    6026:	f5 0b       	sbc	r31, r21

00006028 <__udivmodsi4_ep>:
    6028:	66 1f       	adc	r22, r22
    602a:	77 1f       	adc	r23, r23
    602c:	88 1f       	adc	r24, r24
    602e:	99 1f       	adc	r25, r25
    6030:	1a 94       	dec	r1
    6032:	69 f7       	brne	.-38     	; 0x600e <__udivmodsi4_loop>
    6034:	60 95       	com	r22
    6036:	70 95       	com	r23
    6038:	80 95       	com	r24
    603a:	90 95       	com	r25
    603c:	9b 01       	movw	r18, r22
    603e:	ac 01       	movw	r20, r24
    6040:	bd 01       	movw	r22, r26
    6042:	cf 01       	movw	r24, r30
    6044:	08 95       	ret

00006046 <__tablejump2__>:
    6046:	ee 0f       	add	r30, r30
    6048:	ff 1f       	adc	r31, r31
    604a:	88 1f       	adc	r24, r24
    604c:	8b bf       	out	0x3b, r24	; 59
    604e:	07 90       	elpm	r0, Z+
    6050:	f6 91       	elpm	r31, Z
    6052:	e0 2d       	mov	r30, r0
    6054:	19 94       	eijmp

00006056 <malloc>:
    6056:	0f 93       	push	r16
    6058:	1f 93       	push	r17
    605a:	cf 93       	push	r28
    605c:	df 93       	push	r29
    605e:	82 30       	cpi	r24, 0x02	; 2
    6060:	91 05       	cpc	r25, r1
    6062:	10 f4       	brcc	.+4      	; 0x6068 <malloc+0x12>
    6064:	82 e0       	ldi	r24, 0x02	; 2
    6066:	90 e0       	ldi	r25, 0x00	; 0
    6068:	e0 91 8d 17 	lds	r30, 0x178D	; 0x80178d <__flp>
    606c:	f0 91 8e 17 	lds	r31, 0x178E	; 0x80178e <__flp+0x1>
    6070:	20 e0       	ldi	r18, 0x00	; 0
    6072:	30 e0       	ldi	r19, 0x00	; 0
    6074:	a0 e0       	ldi	r26, 0x00	; 0
    6076:	b0 e0       	ldi	r27, 0x00	; 0
    6078:	30 97       	sbiw	r30, 0x00	; 0
    607a:	19 f1       	breq	.+70     	; 0x60c2 <malloc+0x6c>
    607c:	40 81       	ld	r20, Z
    607e:	51 81       	ldd	r21, Z+1	; 0x01
    6080:	02 81       	ldd	r16, Z+2	; 0x02
    6082:	13 81       	ldd	r17, Z+3	; 0x03
    6084:	48 17       	cp	r20, r24
    6086:	59 07       	cpc	r21, r25
    6088:	c8 f0       	brcs	.+50     	; 0x60bc <malloc+0x66>
    608a:	84 17       	cp	r24, r20
    608c:	95 07       	cpc	r25, r21
    608e:	69 f4       	brne	.+26     	; 0x60aa <malloc+0x54>
    6090:	10 97       	sbiw	r26, 0x00	; 0
    6092:	31 f0       	breq	.+12     	; 0x60a0 <malloc+0x4a>
    6094:	12 96       	adiw	r26, 0x02	; 2
    6096:	0c 93       	st	X, r16
    6098:	12 97       	sbiw	r26, 0x02	; 2
    609a:	13 96       	adiw	r26, 0x03	; 3
    609c:	1c 93       	st	X, r17
    609e:	27 c0       	rjmp	.+78     	; 0x60ee <malloc+0x98>
    60a0:	00 93 8d 17 	sts	0x178D, r16	; 0x80178d <__flp>
    60a4:	10 93 8e 17 	sts	0x178E, r17	; 0x80178e <__flp+0x1>
    60a8:	22 c0       	rjmp	.+68     	; 0x60ee <malloc+0x98>
    60aa:	21 15       	cp	r18, r1
    60ac:	31 05       	cpc	r19, r1
    60ae:	19 f0       	breq	.+6      	; 0x60b6 <malloc+0x60>
    60b0:	42 17       	cp	r20, r18
    60b2:	53 07       	cpc	r21, r19
    60b4:	18 f4       	brcc	.+6      	; 0x60bc <malloc+0x66>
    60b6:	9a 01       	movw	r18, r20
    60b8:	bd 01       	movw	r22, r26
    60ba:	ef 01       	movw	r28, r30
    60bc:	df 01       	movw	r26, r30
    60be:	f8 01       	movw	r30, r16
    60c0:	db cf       	rjmp	.-74     	; 0x6078 <malloc+0x22>
    60c2:	21 15       	cp	r18, r1
    60c4:	31 05       	cpc	r19, r1
    60c6:	f9 f0       	breq	.+62     	; 0x6106 <malloc+0xb0>
    60c8:	28 1b       	sub	r18, r24
    60ca:	39 0b       	sbc	r19, r25
    60cc:	24 30       	cpi	r18, 0x04	; 4
    60ce:	31 05       	cpc	r19, r1
    60d0:	80 f4       	brcc	.+32     	; 0x60f2 <malloc+0x9c>
    60d2:	8a 81       	ldd	r24, Y+2	; 0x02
    60d4:	9b 81       	ldd	r25, Y+3	; 0x03
    60d6:	61 15       	cp	r22, r1
    60d8:	71 05       	cpc	r23, r1
    60da:	21 f0       	breq	.+8      	; 0x60e4 <malloc+0x8e>
    60dc:	fb 01       	movw	r30, r22
    60de:	93 83       	std	Z+3, r25	; 0x03
    60e0:	82 83       	std	Z+2, r24	; 0x02
    60e2:	04 c0       	rjmp	.+8      	; 0x60ec <malloc+0x96>
    60e4:	90 93 8e 17 	sts	0x178E, r25	; 0x80178e <__flp+0x1>
    60e8:	80 93 8d 17 	sts	0x178D, r24	; 0x80178d <__flp>
    60ec:	fe 01       	movw	r30, r28
    60ee:	32 96       	adiw	r30, 0x02	; 2
    60f0:	44 c0       	rjmp	.+136    	; 0x617a <malloc+0x124>
    60f2:	fe 01       	movw	r30, r28
    60f4:	e2 0f       	add	r30, r18
    60f6:	f3 1f       	adc	r31, r19
    60f8:	81 93       	st	Z+, r24
    60fa:	91 93       	st	Z+, r25
    60fc:	22 50       	subi	r18, 0x02	; 2
    60fe:	31 09       	sbc	r19, r1
    6100:	39 83       	std	Y+1, r19	; 0x01
    6102:	28 83       	st	Y, r18
    6104:	3a c0       	rjmp	.+116    	; 0x617a <malloc+0x124>
    6106:	20 91 8b 17 	lds	r18, 0x178B	; 0x80178b <__brkval>
    610a:	30 91 8c 17 	lds	r19, 0x178C	; 0x80178c <__brkval+0x1>
    610e:	23 2b       	or	r18, r19
    6110:	41 f4       	brne	.+16     	; 0x6122 <malloc+0xcc>
    6112:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    6116:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    611a:	30 93 8c 17 	sts	0x178C, r19	; 0x80178c <__brkval+0x1>
    611e:	20 93 8b 17 	sts	0x178B, r18	; 0x80178b <__brkval>
    6122:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    6126:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    612a:	21 15       	cp	r18, r1
    612c:	31 05       	cpc	r19, r1
    612e:	41 f4       	brne	.+16     	; 0x6140 <malloc+0xea>
    6130:	2d b7       	in	r18, 0x3d	; 61
    6132:	3e b7       	in	r19, 0x3e	; 62
    6134:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    6138:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    613c:	24 1b       	sub	r18, r20
    613e:	35 0b       	sbc	r19, r21
    6140:	e0 91 8b 17 	lds	r30, 0x178B	; 0x80178b <__brkval>
    6144:	f0 91 8c 17 	lds	r31, 0x178C	; 0x80178c <__brkval+0x1>
    6148:	e2 17       	cp	r30, r18
    614a:	f3 07       	cpc	r31, r19
    614c:	a0 f4       	brcc	.+40     	; 0x6176 <malloc+0x120>
    614e:	2e 1b       	sub	r18, r30
    6150:	3f 0b       	sbc	r19, r31
    6152:	28 17       	cp	r18, r24
    6154:	39 07       	cpc	r19, r25
    6156:	78 f0       	brcs	.+30     	; 0x6176 <malloc+0x120>
    6158:	ac 01       	movw	r20, r24
    615a:	4e 5f       	subi	r20, 0xFE	; 254
    615c:	5f 4f       	sbci	r21, 0xFF	; 255
    615e:	24 17       	cp	r18, r20
    6160:	35 07       	cpc	r19, r21
    6162:	48 f0       	brcs	.+18     	; 0x6176 <malloc+0x120>
    6164:	4e 0f       	add	r20, r30
    6166:	5f 1f       	adc	r21, r31
    6168:	50 93 8c 17 	sts	0x178C, r21	; 0x80178c <__brkval+0x1>
    616c:	40 93 8b 17 	sts	0x178B, r20	; 0x80178b <__brkval>
    6170:	81 93       	st	Z+, r24
    6172:	91 93       	st	Z+, r25
    6174:	02 c0       	rjmp	.+4      	; 0x617a <malloc+0x124>
    6176:	e0 e0       	ldi	r30, 0x00	; 0
    6178:	f0 e0       	ldi	r31, 0x00	; 0
    617a:	cf 01       	movw	r24, r30
    617c:	df 91       	pop	r29
    617e:	cf 91       	pop	r28
    6180:	1f 91       	pop	r17
    6182:	0f 91       	pop	r16
    6184:	08 95       	ret

00006186 <free>:
    6186:	cf 93       	push	r28
    6188:	df 93       	push	r29
    618a:	00 97       	sbiw	r24, 0x00	; 0
    618c:	09 f4       	brne	.+2      	; 0x6190 <free+0xa>
    618e:	81 c0       	rjmp	.+258    	; 0x6292 <free+0x10c>
    6190:	fc 01       	movw	r30, r24
    6192:	32 97       	sbiw	r30, 0x02	; 2
    6194:	13 82       	std	Z+3, r1	; 0x03
    6196:	12 82       	std	Z+2, r1	; 0x02
    6198:	a0 91 8d 17 	lds	r26, 0x178D	; 0x80178d <__flp>
    619c:	b0 91 8e 17 	lds	r27, 0x178E	; 0x80178e <__flp+0x1>
    61a0:	10 97       	sbiw	r26, 0x00	; 0
    61a2:	81 f4       	brne	.+32     	; 0x61c4 <free+0x3e>
    61a4:	20 81       	ld	r18, Z
    61a6:	31 81       	ldd	r19, Z+1	; 0x01
    61a8:	82 0f       	add	r24, r18
    61aa:	93 1f       	adc	r25, r19
    61ac:	20 91 8b 17 	lds	r18, 0x178B	; 0x80178b <__brkval>
    61b0:	30 91 8c 17 	lds	r19, 0x178C	; 0x80178c <__brkval+0x1>
    61b4:	28 17       	cp	r18, r24
    61b6:	39 07       	cpc	r19, r25
    61b8:	51 f5       	brne	.+84     	; 0x620e <free+0x88>
    61ba:	f0 93 8c 17 	sts	0x178C, r31	; 0x80178c <__brkval+0x1>
    61be:	e0 93 8b 17 	sts	0x178B, r30	; 0x80178b <__brkval>
    61c2:	67 c0       	rjmp	.+206    	; 0x6292 <free+0x10c>
    61c4:	ed 01       	movw	r28, r26
    61c6:	20 e0       	ldi	r18, 0x00	; 0
    61c8:	30 e0       	ldi	r19, 0x00	; 0
    61ca:	ce 17       	cp	r28, r30
    61cc:	df 07       	cpc	r29, r31
    61ce:	40 f4       	brcc	.+16     	; 0x61e0 <free+0x5a>
    61d0:	4a 81       	ldd	r20, Y+2	; 0x02
    61d2:	5b 81       	ldd	r21, Y+3	; 0x03
    61d4:	9e 01       	movw	r18, r28
    61d6:	41 15       	cp	r20, r1
    61d8:	51 05       	cpc	r21, r1
    61da:	f1 f0       	breq	.+60     	; 0x6218 <free+0x92>
    61dc:	ea 01       	movw	r28, r20
    61de:	f5 cf       	rjmp	.-22     	; 0x61ca <free+0x44>
    61e0:	d3 83       	std	Z+3, r29	; 0x03
    61e2:	c2 83       	std	Z+2, r28	; 0x02
    61e4:	40 81       	ld	r20, Z
    61e6:	51 81       	ldd	r21, Z+1	; 0x01
    61e8:	84 0f       	add	r24, r20
    61ea:	95 1f       	adc	r25, r21
    61ec:	c8 17       	cp	r28, r24
    61ee:	d9 07       	cpc	r29, r25
    61f0:	59 f4       	brne	.+22     	; 0x6208 <free+0x82>
    61f2:	88 81       	ld	r24, Y
    61f4:	99 81       	ldd	r25, Y+1	; 0x01
    61f6:	84 0f       	add	r24, r20
    61f8:	95 1f       	adc	r25, r21
    61fa:	02 96       	adiw	r24, 0x02	; 2
    61fc:	91 83       	std	Z+1, r25	; 0x01
    61fe:	80 83       	st	Z, r24
    6200:	8a 81       	ldd	r24, Y+2	; 0x02
    6202:	9b 81       	ldd	r25, Y+3	; 0x03
    6204:	93 83       	std	Z+3, r25	; 0x03
    6206:	82 83       	std	Z+2, r24	; 0x02
    6208:	21 15       	cp	r18, r1
    620a:	31 05       	cpc	r19, r1
    620c:	29 f4       	brne	.+10     	; 0x6218 <free+0x92>
    620e:	f0 93 8e 17 	sts	0x178E, r31	; 0x80178e <__flp+0x1>
    6212:	e0 93 8d 17 	sts	0x178D, r30	; 0x80178d <__flp>
    6216:	3d c0       	rjmp	.+122    	; 0x6292 <free+0x10c>
    6218:	e9 01       	movw	r28, r18
    621a:	fb 83       	std	Y+3, r31	; 0x03
    621c:	ea 83       	std	Y+2, r30	; 0x02
    621e:	49 91       	ld	r20, Y+
    6220:	59 91       	ld	r21, Y+
    6222:	c4 0f       	add	r28, r20
    6224:	d5 1f       	adc	r29, r21
    6226:	ec 17       	cp	r30, r28
    6228:	fd 07       	cpc	r31, r29
    622a:	61 f4       	brne	.+24     	; 0x6244 <free+0xbe>
    622c:	80 81       	ld	r24, Z
    622e:	91 81       	ldd	r25, Z+1	; 0x01
    6230:	84 0f       	add	r24, r20
    6232:	95 1f       	adc	r25, r21
    6234:	02 96       	adiw	r24, 0x02	; 2
    6236:	e9 01       	movw	r28, r18
    6238:	99 83       	std	Y+1, r25	; 0x01
    623a:	88 83       	st	Y, r24
    623c:	82 81       	ldd	r24, Z+2	; 0x02
    623e:	93 81       	ldd	r25, Z+3	; 0x03
    6240:	9b 83       	std	Y+3, r25	; 0x03
    6242:	8a 83       	std	Y+2, r24	; 0x02
    6244:	e0 e0       	ldi	r30, 0x00	; 0
    6246:	f0 e0       	ldi	r31, 0x00	; 0
    6248:	12 96       	adiw	r26, 0x02	; 2
    624a:	8d 91       	ld	r24, X+
    624c:	9c 91       	ld	r25, X
    624e:	13 97       	sbiw	r26, 0x03	; 3
    6250:	00 97       	sbiw	r24, 0x00	; 0
    6252:	19 f0       	breq	.+6      	; 0x625a <free+0xd4>
    6254:	fd 01       	movw	r30, r26
    6256:	dc 01       	movw	r26, r24
    6258:	f7 cf       	rjmp	.-18     	; 0x6248 <free+0xc2>
    625a:	8d 91       	ld	r24, X+
    625c:	9c 91       	ld	r25, X
    625e:	11 97       	sbiw	r26, 0x01	; 1
    6260:	9d 01       	movw	r18, r26
    6262:	2e 5f       	subi	r18, 0xFE	; 254
    6264:	3f 4f       	sbci	r19, 0xFF	; 255
    6266:	82 0f       	add	r24, r18
    6268:	93 1f       	adc	r25, r19
    626a:	20 91 8b 17 	lds	r18, 0x178B	; 0x80178b <__brkval>
    626e:	30 91 8c 17 	lds	r19, 0x178C	; 0x80178c <__brkval+0x1>
    6272:	28 17       	cp	r18, r24
    6274:	39 07       	cpc	r19, r25
    6276:	69 f4       	brne	.+26     	; 0x6292 <free+0x10c>
    6278:	30 97       	sbiw	r30, 0x00	; 0
    627a:	29 f4       	brne	.+10     	; 0x6286 <free+0x100>
    627c:	10 92 8e 17 	sts	0x178E, r1	; 0x80178e <__flp+0x1>
    6280:	10 92 8d 17 	sts	0x178D, r1	; 0x80178d <__flp>
    6284:	02 c0       	rjmp	.+4      	; 0x628a <free+0x104>
    6286:	13 82       	std	Z+3, r1	; 0x03
    6288:	12 82       	std	Z+2, r1	; 0x02
    628a:	b0 93 8c 17 	sts	0x178C, r27	; 0x80178c <__brkval+0x1>
    628e:	a0 93 8b 17 	sts	0x178B, r26	; 0x80178b <__brkval>
    6292:	df 91       	pop	r29
    6294:	cf 91       	pop	r28
    6296:	08 95       	ret

00006298 <abort>:
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	90 e0       	ldi	r25, 0x00	; 0
    629c:	f8 94       	cli
    629e:	87 c3       	rjmp	.+1806   	; 0x69ae <_exit>

000062a0 <memcpy>:
    62a0:	fb 01       	movw	r30, r22
    62a2:	dc 01       	movw	r26, r24
    62a4:	02 c0       	rjmp	.+4      	; 0x62aa <memcpy+0xa>
    62a6:	01 90       	ld	r0, Z+
    62a8:	0d 92       	st	X+, r0
    62aa:	41 50       	subi	r20, 0x01	; 1
    62ac:	50 40       	sbci	r21, 0x00	; 0
    62ae:	d8 f7       	brcc	.-10     	; 0x62a6 <memcpy+0x6>
    62b0:	08 95       	ret

000062b2 <memset>:
    62b2:	dc 01       	movw	r26, r24
    62b4:	01 c0       	rjmp	.+2      	; 0x62b8 <memset+0x6>
    62b6:	6d 93       	st	X+, r22
    62b8:	41 50       	subi	r20, 0x01	; 1
    62ba:	50 40       	sbci	r21, 0x00	; 0
    62bc:	e0 f7       	brcc	.-8      	; 0x62b6 <memset+0x4>
    62be:	08 95       	ret

000062c0 <strcasestr>:
    62c0:	fb 01       	movw	r30, r22
    62c2:	51 91       	ld	r21, Z+
    62c4:	55 23       	and	r21, r21
    62c6:	b1 f0       	breq	.+44     	; 0x62f4 <strcasestr+0x34>
    62c8:	bf 01       	movw	r22, r30
    62ca:	dc 01       	movw	r26, r24
    62cc:	05 2e       	mov	r0, r21
    62ce:	4d 91       	ld	r20, X+
    62d0:	44 23       	and	r20, r20
    62d2:	69 f0       	breq	.+26     	; 0x62ee <strcasestr+0x2e>
    62d4:	10 d0       	rcall	.+32     	; 0x62f6 <strcasestr+0x36>
    62d6:	d9 f7       	brne	.-10     	; 0x62ce <strcasestr+0xe>
    62d8:	cd 01       	movw	r24, r26
    62da:	01 90       	ld	r0, Z+
    62dc:	00 20       	and	r0, r0
    62de:	49 f0       	breq	.+18     	; 0x62f2 <strcasestr+0x32>
    62e0:	4d 91       	ld	r20, X+
    62e2:	41 11       	cpse	r20, r1
    62e4:	08 d0       	rcall	.+16     	; 0x62f6 <strcasestr+0x36>
    62e6:	c9 f3       	breq	.-14     	; 0x62da <strcasestr+0x1a>
    62e8:	fb 01       	movw	r30, r22
    62ea:	41 11       	cpse	r20, r1
    62ec:	ee cf       	rjmp	.-36     	; 0x62ca <strcasestr+0xa>
    62ee:	81 e0       	ldi	r24, 0x01	; 1
    62f0:	90 e0       	ldi	r25, 0x00	; 0
    62f2:	01 97       	sbiw	r24, 0x01	; 1
    62f4:	08 95       	ret
    62f6:	40 25       	eor	r20, r0
    62f8:	39 f0       	breq	.+14     	; 0x6308 <strcasestr+0x48>
    62fa:	40 32       	cpi	r20, 0x20	; 32
    62fc:	29 f4       	brne	.+10     	; 0x6308 <strcasestr+0x48>
    62fe:	40 29       	or	r20, r0
    6300:	4b 57       	subi	r20, 0x7B	; 123
    6302:	46 5e       	subi	r20, 0xE6	; 230
    6304:	08 f0       	brcs	.+2      	; 0x6308 <strcasestr+0x48>
    6306:	18 94       	sez
    6308:	08 95       	ret

0000630a <strcat>:
    630a:	fb 01       	movw	r30, r22
    630c:	dc 01       	movw	r26, r24
    630e:	0d 90       	ld	r0, X+
    6310:	00 20       	and	r0, r0
    6312:	e9 f7       	brne	.-6      	; 0x630e <strcat+0x4>
    6314:	11 97       	sbiw	r26, 0x01	; 1
    6316:	01 90       	ld	r0, Z+
    6318:	0d 92       	st	X+, r0
    631a:	00 20       	and	r0, r0
    631c:	e1 f7       	brne	.-8      	; 0x6316 <strcat+0xc>
    631e:	08 95       	ret

00006320 <strcpy>:
    6320:	fb 01       	movw	r30, r22
    6322:	dc 01       	movw	r26, r24
    6324:	01 90       	ld	r0, Z+
    6326:	0d 92       	st	X+, r0
    6328:	00 20       	and	r0, r0
    632a:	e1 f7       	brne	.-8      	; 0x6324 <strcpy+0x4>
    632c:	08 95       	ret

0000632e <strncasecmp>:
    632e:	fb 01       	movw	r30, r22
    6330:	dc 01       	movw	r26, r24
    6332:	41 50       	subi	r20, 0x01	; 1
    6334:	50 40       	sbci	r21, 0x00	; 0
    6336:	88 f0       	brcs	.+34     	; 0x635a <strncasecmp+0x2c>
    6338:	8d 91       	ld	r24, X+
    633a:	81 34       	cpi	r24, 0x41	; 65
    633c:	1c f0       	brlt	.+6      	; 0x6344 <strncasecmp+0x16>
    633e:	8b 35       	cpi	r24, 0x5B	; 91
    6340:	0c f4       	brge	.+2      	; 0x6344 <strncasecmp+0x16>
    6342:	80 5e       	subi	r24, 0xE0	; 224
    6344:	61 91       	ld	r22, Z+
    6346:	61 34       	cpi	r22, 0x41	; 65
    6348:	1c f0       	brlt	.+6      	; 0x6350 <strncasecmp+0x22>
    634a:	6b 35       	cpi	r22, 0x5B	; 91
    634c:	0c f4       	brge	.+2      	; 0x6350 <strncasecmp+0x22>
    634e:	60 5e       	subi	r22, 0xE0	; 224
    6350:	86 1b       	sub	r24, r22
    6352:	61 11       	cpse	r22, r1
    6354:	71 f3       	breq	.-36     	; 0x6332 <strncasecmp+0x4>
    6356:	99 0b       	sbc	r25, r25
    6358:	08 95       	ret
    635a:	88 1b       	sub	r24, r24
    635c:	fc cf       	rjmp	.-8      	; 0x6356 <strncasecmp+0x28>

0000635e <strupr>:
    635e:	dc 01       	movw	r26, r24
    6360:	6c 91       	ld	r22, X
    6362:	61 56       	subi	r22, 0x61	; 97
    6364:	6a 31       	cpi	r22, 0x1A	; 26
    6366:	08 f0       	brcs	.+2      	; 0x636a <strupr+0xc>
    6368:	60 5e       	subi	r22, 0xE0	; 224
    636a:	6f 5b       	subi	r22, 0xBF	; 191
    636c:	6d 93       	st	X+, r22
    636e:	c1 f7       	brne	.-16     	; 0x6360 <strupr+0x2>
    6370:	08 95       	ret

00006372 <printf>:
    6372:	cf 93       	push	r28
    6374:	df 93       	push	r29
    6376:	cd b7       	in	r28, 0x3d	; 61
    6378:	de b7       	in	r29, 0x3e	; 62
    637a:	ae 01       	movw	r20, r28
    637c:	4a 5f       	subi	r20, 0xFA	; 250
    637e:	5f 4f       	sbci	r21, 0xFF	; 255
    6380:	fa 01       	movw	r30, r20
    6382:	61 91       	ld	r22, Z+
    6384:	71 91       	ld	r23, Z+
    6386:	af 01       	movw	r20, r30
    6388:	80 91 91 17 	lds	r24, 0x1791	; 0x801791 <__iob+0x2>
    638c:	90 91 92 17 	lds	r25, 0x1792	; 0x801792 <__iob+0x3>
    6390:	61 d0       	rcall	.+194    	; 0x6454 <vfprintf>
    6392:	df 91       	pop	r29
    6394:	cf 91       	pop	r28
    6396:	08 95       	ret

00006398 <puts>:
    6398:	0f 93       	push	r16
    639a:	1f 93       	push	r17
    639c:	cf 93       	push	r28
    639e:	df 93       	push	r29
    63a0:	e0 91 91 17 	lds	r30, 0x1791	; 0x801791 <__iob+0x2>
    63a4:	f0 91 92 17 	lds	r31, 0x1792	; 0x801792 <__iob+0x3>
    63a8:	23 81       	ldd	r18, Z+3	; 0x03
    63aa:	21 ff       	sbrs	r18, 1
    63ac:	1b c0       	rjmp	.+54     	; 0x63e4 <puts+0x4c>
    63ae:	8c 01       	movw	r16, r24
    63b0:	d0 e0       	ldi	r29, 0x00	; 0
    63b2:	c0 e0       	ldi	r28, 0x00	; 0
    63b4:	f8 01       	movw	r30, r16
    63b6:	81 91       	ld	r24, Z+
    63b8:	8f 01       	movw	r16, r30
    63ba:	60 91 91 17 	lds	r22, 0x1791	; 0x801791 <__iob+0x2>
    63be:	70 91 92 17 	lds	r23, 0x1792	; 0x801792 <__iob+0x3>
    63c2:	db 01       	movw	r26, r22
    63c4:	18 96       	adiw	r26, 0x08	; 8
    63c6:	ed 91       	ld	r30, X+
    63c8:	fc 91       	ld	r31, X
    63ca:	19 97       	sbiw	r26, 0x09	; 9
    63cc:	88 23       	and	r24, r24
    63ce:	31 f0       	breq	.+12     	; 0x63dc <puts+0x44>
    63d0:	19 95       	eicall
    63d2:	89 2b       	or	r24, r25
    63d4:	79 f3       	breq	.-34     	; 0x63b4 <puts+0x1c>
    63d6:	df ef       	ldi	r29, 0xFF	; 255
    63d8:	cf ef       	ldi	r28, 0xFF	; 255
    63da:	ec cf       	rjmp	.-40     	; 0x63b4 <puts+0x1c>
    63dc:	8a e0       	ldi	r24, 0x0A	; 10
    63de:	19 95       	eicall
    63e0:	89 2b       	or	r24, r25
    63e2:	19 f0       	breq	.+6      	; 0x63ea <puts+0x52>
    63e4:	8f ef       	ldi	r24, 0xFF	; 255
    63e6:	9f ef       	ldi	r25, 0xFF	; 255
    63e8:	02 c0       	rjmp	.+4      	; 0x63ee <puts+0x56>
    63ea:	8d 2f       	mov	r24, r29
    63ec:	9c 2f       	mov	r25, r28
    63ee:	df 91       	pop	r29
    63f0:	cf 91       	pop	r28
    63f2:	1f 91       	pop	r17
    63f4:	0f 91       	pop	r16
    63f6:	08 95       	ret

000063f8 <sprintf>:
    63f8:	0f 93       	push	r16
    63fa:	1f 93       	push	r17
    63fc:	cf 93       	push	r28
    63fe:	df 93       	push	r29
    6400:	cd b7       	in	r28, 0x3d	; 61
    6402:	de b7       	in	r29, 0x3e	; 62
    6404:	2e 97       	sbiw	r28, 0x0e	; 14
    6406:	0f b6       	in	r0, 0x3f	; 63
    6408:	f8 94       	cli
    640a:	de bf       	out	0x3e, r29	; 62
    640c:	0f be       	out	0x3f, r0	; 63
    640e:	cd bf       	out	0x3d, r28	; 61
    6410:	0e 89       	ldd	r16, Y+22	; 0x16
    6412:	1f 89       	ldd	r17, Y+23	; 0x17
    6414:	86 e0       	ldi	r24, 0x06	; 6
    6416:	8c 83       	std	Y+4, r24	; 0x04
    6418:	1a 83       	std	Y+2, r17	; 0x02
    641a:	09 83       	std	Y+1, r16	; 0x01
    641c:	8f ef       	ldi	r24, 0xFF	; 255
    641e:	9f e7       	ldi	r25, 0x7F	; 127
    6420:	9e 83       	std	Y+6, r25	; 0x06
    6422:	8d 83       	std	Y+5, r24	; 0x05
    6424:	ae 01       	movw	r20, r28
    6426:	46 5e       	subi	r20, 0xE6	; 230
    6428:	5f 4f       	sbci	r21, 0xFF	; 255
    642a:	68 8d       	ldd	r22, Y+24	; 0x18
    642c:	79 8d       	ldd	r23, Y+25	; 0x19
    642e:	ce 01       	movw	r24, r28
    6430:	01 96       	adiw	r24, 0x01	; 1
    6432:	10 d0       	rcall	.+32     	; 0x6454 <vfprintf>
    6434:	ef 81       	ldd	r30, Y+7	; 0x07
    6436:	f8 85       	ldd	r31, Y+8	; 0x08
    6438:	e0 0f       	add	r30, r16
    643a:	f1 1f       	adc	r31, r17
    643c:	10 82       	st	Z, r1
    643e:	2e 96       	adiw	r28, 0x0e	; 14
    6440:	0f b6       	in	r0, 0x3f	; 63
    6442:	f8 94       	cli
    6444:	de bf       	out	0x3e, r29	; 62
    6446:	0f be       	out	0x3f, r0	; 63
    6448:	cd bf       	out	0x3d, r28	; 61
    644a:	df 91       	pop	r29
    644c:	cf 91       	pop	r28
    644e:	1f 91       	pop	r17
    6450:	0f 91       	pop	r16
    6452:	08 95       	ret

00006454 <vfprintf>:
    6454:	2f 92       	push	r2
    6456:	3f 92       	push	r3
    6458:	4f 92       	push	r4
    645a:	5f 92       	push	r5
    645c:	6f 92       	push	r6
    645e:	7f 92       	push	r7
    6460:	8f 92       	push	r8
    6462:	9f 92       	push	r9
    6464:	af 92       	push	r10
    6466:	bf 92       	push	r11
    6468:	cf 92       	push	r12
    646a:	df 92       	push	r13
    646c:	ef 92       	push	r14
    646e:	ff 92       	push	r15
    6470:	0f 93       	push	r16
    6472:	1f 93       	push	r17
    6474:	cf 93       	push	r28
    6476:	df 93       	push	r29
    6478:	cd b7       	in	r28, 0x3d	; 61
    647a:	de b7       	in	r29, 0x3e	; 62
    647c:	2b 97       	sbiw	r28, 0x0b	; 11
    647e:	0f b6       	in	r0, 0x3f	; 63
    6480:	f8 94       	cli
    6482:	de bf       	out	0x3e, r29	; 62
    6484:	0f be       	out	0x3f, r0	; 63
    6486:	cd bf       	out	0x3d, r28	; 61
    6488:	6c 01       	movw	r12, r24
    648a:	7b 01       	movw	r14, r22
    648c:	8a 01       	movw	r16, r20
    648e:	fc 01       	movw	r30, r24
    6490:	17 82       	std	Z+7, r1	; 0x07
    6492:	16 82       	std	Z+6, r1	; 0x06
    6494:	83 81       	ldd	r24, Z+3	; 0x03
    6496:	81 ff       	sbrs	r24, 1
    6498:	bf c1       	rjmp	.+894    	; 0x6818 <vfprintf+0x3c4>
    649a:	ce 01       	movw	r24, r28
    649c:	01 96       	adiw	r24, 0x01	; 1
    649e:	3c 01       	movw	r6, r24
    64a0:	f6 01       	movw	r30, r12
    64a2:	93 81       	ldd	r25, Z+3	; 0x03
    64a4:	f7 01       	movw	r30, r14
    64a6:	93 fd       	sbrc	r25, 3
    64a8:	85 91       	lpm	r24, Z+
    64aa:	93 ff       	sbrs	r25, 3
    64ac:	81 91       	ld	r24, Z+
    64ae:	7f 01       	movw	r14, r30
    64b0:	88 23       	and	r24, r24
    64b2:	09 f4       	brne	.+2      	; 0x64b6 <vfprintf+0x62>
    64b4:	ad c1       	rjmp	.+858    	; 0x6810 <vfprintf+0x3bc>
    64b6:	85 32       	cpi	r24, 0x25	; 37
    64b8:	39 f4       	brne	.+14     	; 0x64c8 <vfprintf+0x74>
    64ba:	93 fd       	sbrc	r25, 3
    64bc:	85 91       	lpm	r24, Z+
    64be:	93 ff       	sbrs	r25, 3
    64c0:	81 91       	ld	r24, Z+
    64c2:	7f 01       	movw	r14, r30
    64c4:	85 32       	cpi	r24, 0x25	; 37
    64c6:	21 f4       	brne	.+8      	; 0x64d0 <vfprintf+0x7c>
    64c8:	b6 01       	movw	r22, r12
    64ca:	90 e0       	ldi	r25, 0x00	; 0
    64cc:	d6 d1       	rcall	.+940    	; 0x687a <fputc>
    64ce:	e8 cf       	rjmp	.-48     	; 0x64a0 <vfprintf+0x4c>
    64d0:	91 2c       	mov	r9, r1
    64d2:	21 2c       	mov	r2, r1
    64d4:	31 2c       	mov	r3, r1
    64d6:	ff e1       	ldi	r31, 0x1F	; 31
    64d8:	f3 15       	cp	r31, r3
    64da:	d8 f0       	brcs	.+54     	; 0x6512 <vfprintf+0xbe>
    64dc:	8b 32       	cpi	r24, 0x2B	; 43
    64de:	79 f0       	breq	.+30     	; 0x64fe <vfprintf+0xaa>
    64e0:	38 f4       	brcc	.+14     	; 0x64f0 <vfprintf+0x9c>
    64e2:	80 32       	cpi	r24, 0x20	; 32
    64e4:	79 f0       	breq	.+30     	; 0x6504 <vfprintf+0xb0>
    64e6:	83 32       	cpi	r24, 0x23	; 35
    64e8:	a1 f4       	brne	.+40     	; 0x6512 <vfprintf+0xbe>
    64ea:	23 2d       	mov	r18, r3
    64ec:	20 61       	ori	r18, 0x10	; 16
    64ee:	1d c0       	rjmp	.+58     	; 0x652a <vfprintf+0xd6>
    64f0:	8d 32       	cpi	r24, 0x2D	; 45
    64f2:	61 f0       	breq	.+24     	; 0x650c <vfprintf+0xb8>
    64f4:	80 33       	cpi	r24, 0x30	; 48
    64f6:	69 f4       	brne	.+26     	; 0x6512 <vfprintf+0xbe>
    64f8:	23 2d       	mov	r18, r3
    64fa:	21 60       	ori	r18, 0x01	; 1
    64fc:	16 c0       	rjmp	.+44     	; 0x652a <vfprintf+0xd6>
    64fe:	83 2d       	mov	r24, r3
    6500:	82 60       	ori	r24, 0x02	; 2
    6502:	38 2e       	mov	r3, r24
    6504:	e3 2d       	mov	r30, r3
    6506:	e4 60       	ori	r30, 0x04	; 4
    6508:	3e 2e       	mov	r3, r30
    650a:	2a c0       	rjmp	.+84     	; 0x6560 <vfprintf+0x10c>
    650c:	f3 2d       	mov	r31, r3
    650e:	f8 60       	ori	r31, 0x08	; 8
    6510:	1d c0       	rjmp	.+58     	; 0x654c <vfprintf+0xf8>
    6512:	37 fc       	sbrc	r3, 7
    6514:	2d c0       	rjmp	.+90     	; 0x6570 <vfprintf+0x11c>
    6516:	20 ed       	ldi	r18, 0xD0	; 208
    6518:	28 0f       	add	r18, r24
    651a:	2a 30       	cpi	r18, 0x0A	; 10
    651c:	40 f0       	brcs	.+16     	; 0x652e <vfprintf+0xda>
    651e:	8e 32       	cpi	r24, 0x2E	; 46
    6520:	b9 f4       	brne	.+46     	; 0x6550 <vfprintf+0xfc>
    6522:	36 fc       	sbrc	r3, 6
    6524:	75 c1       	rjmp	.+746    	; 0x6810 <vfprintf+0x3bc>
    6526:	23 2d       	mov	r18, r3
    6528:	20 64       	ori	r18, 0x40	; 64
    652a:	32 2e       	mov	r3, r18
    652c:	19 c0       	rjmp	.+50     	; 0x6560 <vfprintf+0x10c>
    652e:	36 fe       	sbrs	r3, 6
    6530:	06 c0       	rjmp	.+12     	; 0x653e <vfprintf+0xea>
    6532:	8a e0       	ldi	r24, 0x0A	; 10
    6534:	98 9e       	mul	r9, r24
    6536:	20 0d       	add	r18, r0
    6538:	11 24       	eor	r1, r1
    653a:	92 2e       	mov	r9, r18
    653c:	11 c0       	rjmp	.+34     	; 0x6560 <vfprintf+0x10c>
    653e:	ea e0       	ldi	r30, 0x0A	; 10
    6540:	2e 9e       	mul	r2, r30
    6542:	20 0d       	add	r18, r0
    6544:	11 24       	eor	r1, r1
    6546:	22 2e       	mov	r2, r18
    6548:	f3 2d       	mov	r31, r3
    654a:	f0 62       	ori	r31, 0x20	; 32
    654c:	3f 2e       	mov	r3, r31
    654e:	08 c0       	rjmp	.+16     	; 0x6560 <vfprintf+0x10c>
    6550:	8c 36       	cpi	r24, 0x6C	; 108
    6552:	21 f4       	brne	.+8      	; 0x655c <vfprintf+0x108>
    6554:	83 2d       	mov	r24, r3
    6556:	80 68       	ori	r24, 0x80	; 128
    6558:	38 2e       	mov	r3, r24
    655a:	02 c0       	rjmp	.+4      	; 0x6560 <vfprintf+0x10c>
    655c:	88 36       	cpi	r24, 0x68	; 104
    655e:	41 f4       	brne	.+16     	; 0x6570 <vfprintf+0x11c>
    6560:	f7 01       	movw	r30, r14
    6562:	93 fd       	sbrc	r25, 3
    6564:	85 91       	lpm	r24, Z+
    6566:	93 ff       	sbrs	r25, 3
    6568:	81 91       	ld	r24, Z+
    656a:	7f 01       	movw	r14, r30
    656c:	81 11       	cpse	r24, r1
    656e:	b3 cf       	rjmp	.-154    	; 0x64d6 <vfprintf+0x82>
    6570:	98 2f       	mov	r25, r24
    6572:	9f 7d       	andi	r25, 0xDF	; 223
    6574:	95 54       	subi	r25, 0x45	; 69
    6576:	93 30       	cpi	r25, 0x03	; 3
    6578:	28 f4       	brcc	.+10     	; 0x6584 <vfprintf+0x130>
    657a:	0c 5f       	subi	r16, 0xFC	; 252
    657c:	1f 4f       	sbci	r17, 0xFF	; 255
    657e:	9f e3       	ldi	r25, 0x3F	; 63
    6580:	99 83       	std	Y+1, r25	; 0x01
    6582:	0d c0       	rjmp	.+26     	; 0x659e <vfprintf+0x14a>
    6584:	83 36       	cpi	r24, 0x63	; 99
    6586:	31 f0       	breq	.+12     	; 0x6594 <vfprintf+0x140>
    6588:	83 37       	cpi	r24, 0x73	; 115
    658a:	71 f0       	breq	.+28     	; 0x65a8 <vfprintf+0x154>
    658c:	83 35       	cpi	r24, 0x53	; 83
    658e:	09 f0       	breq	.+2      	; 0x6592 <vfprintf+0x13e>
    6590:	55 c0       	rjmp	.+170    	; 0x663c <vfprintf+0x1e8>
    6592:	20 c0       	rjmp	.+64     	; 0x65d4 <vfprintf+0x180>
    6594:	f8 01       	movw	r30, r16
    6596:	80 81       	ld	r24, Z
    6598:	89 83       	std	Y+1, r24	; 0x01
    659a:	0e 5f       	subi	r16, 0xFE	; 254
    659c:	1f 4f       	sbci	r17, 0xFF	; 255
    659e:	88 24       	eor	r8, r8
    65a0:	83 94       	inc	r8
    65a2:	91 2c       	mov	r9, r1
    65a4:	53 01       	movw	r10, r6
    65a6:	12 c0       	rjmp	.+36     	; 0x65cc <vfprintf+0x178>
    65a8:	28 01       	movw	r4, r16
    65aa:	f2 e0       	ldi	r31, 0x02	; 2
    65ac:	4f 0e       	add	r4, r31
    65ae:	51 1c       	adc	r5, r1
    65b0:	f8 01       	movw	r30, r16
    65b2:	a0 80       	ld	r10, Z
    65b4:	b1 80       	ldd	r11, Z+1	; 0x01
    65b6:	36 fe       	sbrs	r3, 6
    65b8:	03 c0       	rjmp	.+6      	; 0x65c0 <vfprintf+0x16c>
    65ba:	69 2d       	mov	r22, r9
    65bc:	70 e0       	ldi	r23, 0x00	; 0
    65be:	02 c0       	rjmp	.+4      	; 0x65c4 <vfprintf+0x170>
    65c0:	6f ef       	ldi	r22, 0xFF	; 255
    65c2:	7f ef       	ldi	r23, 0xFF	; 255
    65c4:	c5 01       	movw	r24, r10
    65c6:	4e d1       	rcall	.+668    	; 0x6864 <strnlen>
    65c8:	4c 01       	movw	r8, r24
    65ca:	82 01       	movw	r16, r4
    65cc:	f3 2d       	mov	r31, r3
    65ce:	ff 77       	andi	r31, 0x7F	; 127
    65d0:	3f 2e       	mov	r3, r31
    65d2:	15 c0       	rjmp	.+42     	; 0x65fe <vfprintf+0x1aa>
    65d4:	28 01       	movw	r4, r16
    65d6:	22 e0       	ldi	r18, 0x02	; 2
    65d8:	42 0e       	add	r4, r18
    65da:	51 1c       	adc	r5, r1
    65dc:	f8 01       	movw	r30, r16
    65de:	a0 80       	ld	r10, Z
    65e0:	b1 80       	ldd	r11, Z+1	; 0x01
    65e2:	36 fe       	sbrs	r3, 6
    65e4:	03 c0       	rjmp	.+6      	; 0x65ec <vfprintf+0x198>
    65e6:	69 2d       	mov	r22, r9
    65e8:	70 e0       	ldi	r23, 0x00	; 0
    65ea:	02 c0       	rjmp	.+4      	; 0x65f0 <vfprintf+0x19c>
    65ec:	6f ef       	ldi	r22, 0xFF	; 255
    65ee:	7f ef       	ldi	r23, 0xFF	; 255
    65f0:	c5 01       	movw	r24, r10
    65f2:	2d d1       	rcall	.+602    	; 0x684e <strnlen_P>
    65f4:	4c 01       	movw	r8, r24
    65f6:	f3 2d       	mov	r31, r3
    65f8:	f0 68       	ori	r31, 0x80	; 128
    65fa:	3f 2e       	mov	r3, r31
    65fc:	82 01       	movw	r16, r4
    65fe:	33 fc       	sbrc	r3, 3
    6600:	19 c0       	rjmp	.+50     	; 0x6634 <vfprintf+0x1e0>
    6602:	82 2d       	mov	r24, r2
    6604:	90 e0       	ldi	r25, 0x00	; 0
    6606:	88 16       	cp	r8, r24
    6608:	99 06       	cpc	r9, r25
    660a:	a0 f4       	brcc	.+40     	; 0x6634 <vfprintf+0x1e0>
    660c:	b6 01       	movw	r22, r12
    660e:	80 e2       	ldi	r24, 0x20	; 32
    6610:	90 e0       	ldi	r25, 0x00	; 0
    6612:	33 d1       	rcall	.+614    	; 0x687a <fputc>
    6614:	2a 94       	dec	r2
    6616:	f5 cf       	rjmp	.-22     	; 0x6602 <vfprintf+0x1ae>
    6618:	f5 01       	movw	r30, r10
    661a:	37 fc       	sbrc	r3, 7
    661c:	85 91       	lpm	r24, Z+
    661e:	37 fe       	sbrs	r3, 7
    6620:	81 91       	ld	r24, Z+
    6622:	5f 01       	movw	r10, r30
    6624:	b6 01       	movw	r22, r12
    6626:	90 e0       	ldi	r25, 0x00	; 0
    6628:	28 d1       	rcall	.+592    	; 0x687a <fputc>
    662a:	21 10       	cpse	r2, r1
    662c:	2a 94       	dec	r2
    662e:	21 e0       	ldi	r18, 0x01	; 1
    6630:	82 1a       	sub	r8, r18
    6632:	91 08       	sbc	r9, r1
    6634:	81 14       	cp	r8, r1
    6636:	91 04       	cpc	r9, r1
    6638:	79 f7       	brne	.-34     	; 0x6618 <vfprintf+0x1c4>
    663a:	e1 c0       	rjmp	.+450    	; 0x67fe <vfprintf+0x3aa>
    663c:	84 36       	cpi	r24, 0x64	; 100
    663e:	11 f0       	breq	.+4      	; 0x6644 <vfprintf+0x1f0>
    6640:	89 36       	cpi	r24, 0x69	; 105
    6642:	39 f5       	brne	.+78     	; 0x6692 <vfprintf+0x23e>
    6644:	f8 01       	movw	r30, r16
    6646:	37 fe       	sbrs	r3, 7
    6648:	07 c0       	rjmp	.+14     	; 0x6658 <vfprintf+0x204>
    664a:	60 81       	ld	r22, Z
    664c:	71 81       	ldd	r23, Z+1	; 0x01
    664e:	82 81       	ldd	r24, Z+2	; 0x02
    6650:	93 81       	ldd	r25, Z+3	; 0x03
    6652:	0c 5f       	subi	r16, 0xFC	; 252
    6654:	1f 4f       	sbci	r17, 0xFF	; 255
    6656:	08 c0       	rjmp	.+16     	; 0x6668 <vfprintf+0x214>
    6658:	60 81       	ld	r22, Z
    665a:	71 81       	ldd	r23, Z+1	; 0x01
    665c:	07 2e       	mov	r0, r23
    665e:	00 0c       	add	r0, r0
    6660:	88 0b       	sbc	r24, r24
    6662:	99 0b       	sbc	r25, r25
    6664:	0e 5f       	subi	r16, 0xFE	; 254
    6666:	1f 4f       	sbci	r17, 0xFF	; 255
    6668:	f3 2d       	mov	r31, r3
    666a:	ff 76       	andi	r31, 0x6F	; 111
    666c:	3f 2e       	mov	r3, r31
    666e:	97 ff       	sbrs	r25, 7
    6670:	09 c0       	rjmp	.+18     	; 0x6684 <vfprintf+0x230>
    6672:	90 95       	com	r25
    6674:	80 95       	com	r24
    6676:	70 95       	com	r23
    6678:	61 95       	neg	r22
    667a:	7f 4f       	sbci	r23, 0xFF	; 255
    667c:	8f 4f       	sbci	r24, 0xFF	; 255
    667e:	9f 4f       	sbci	r25, 0xFF	; 255
    6680:	f0 68       	ori	r31, 0x80	; 128
    6682:	3f 2e       	mov	r3, r31
    6684:	2a e0       	ldi	r18, 0x0A	; 10
    6686:	30 e0       	ldi	r19, 0x00	; 0
    6688:	a3 01       	movw	r20, r6
    668a:	33 d1       	rcall	.+614    	; 0x68f2 <__ultoa_invert>
    668c:	88 2e       	mov	r8, r24
    668e:	86 18       	sub	r8, r6
    6690:	44 c0       	rjmp	.+136    	; 0x671a <vfprintf+0x2c6>
    6692:	85 37       	cpi	r24, 0x75	; 117
    6694:	31 f4       	brne	.+12     	; 0x66a2 <vfprintf+0x24e>
    6696:	23 2d       	mov	r18, r3
    6698:	2f 7e       	andi	r18, 0xEF	; 239
    669a:	b2 2e       	mov	r11, r18
    669c:	2a e0       	ldi	r18, 0x0A	; 10
    669e:	30 e0       	ldi	r19, 0x00	; 0
    66a0:	25 c0       	rjmp	.+74     	; 0x66ec <vfprintf+0x298>
    66a2:	93 2d       	mov	r25, r3
    66a4:	99 7f       	andi	r25, 0xF9	; 249
    66a6:	b9 2e       	mov	r11, r25
    66a8:	8f 36       	cpi	r24, 0x6F	; 111
    66aa:	c1 f0       	breq	.+48     	; 0x66dc <vfprintf+0x288>
    66ac:	18 f4       	brcc	.+6      	; 0x66b4 <vfprintf+0x260>
    66ae:	88 35       	cpi	r24, 0x58	; 88
    66b0:	79 f0       	breq	.+30     	; 0x66d0 <vfprintf+0x27c>
    66b2:	ae c0       	rjmp	.+348    	; 0x6810 <vfprintf+0x3bc>
    66b4:	80 37       	cpi	r24, 0x70	; 112
    66b6:	19 f0       	breq	.+6      	; 0x66be <vfprintf+0x26a>
    66b8:	88 37       	cpi	r24, 0x78	; 120
    66ba:	21 f0       	breq	.+8      	; 0x66c4 <vfprintf+0x270>
    66bc:	a9 c0       	rjmp	.+338    	; 0x6810 <vfprintf+0x3bc>
    66be:	e9 2f       	mov	r30, r25
    66c0:	e0 61       	ori	r30, 0x10	; 16
    66c2:	be 2e       	mov	r11, r30
    66c4:	b4 fe       	sbrs	r11, 4
    66c6:	0d c0       	rjmp	.+26     	; 0x66e2 <vfprintf+0x28e>
    66c8:	fb 2d       	mov	r31, r11
    66ca:	f4 60       	ori	r31, 0x04	; 4
    66cc:	bf 2e       	mov	r11, r31
    66ce:	09 c0       	rjmp	.+18     	; 0x66e2 <vfprintf+0x28e>
    66d0:	34 fe       	sbrs	r3, 4
    66d2:	0a c0       	rjmp	.+20     	; 0x66e8 <vfprintf+0x294>
    66d4:	29 2f       	mov	r18, r25
    66d6:	26 60       	ori	r18, 0x06	; 6
    66d8:	b2 2e       	mov	r11, r18
    66da:	06 c0       	rjmp	.+12     	; 0x66e8 <vfprintf+0x294>
    66dc:	28 e0       	ldi	r18, 0x08	; 8
    66de:	30 e0       	ldi	r19, 0x00	; 0
    66e0:	05 c0       	rjmp	.+10     	; 0x66ec <vfprintf+0x298>
    66e2:	20 e1       	ldi	r18, 0x10	; 16
    66e4:	30 e0       	ldi	r19, 0x00	; 0
    66e6:	02 c0       	rjmp	.+4      	; 0x66ec <vfprintf+0x298>
    66e8:	20 e1       	ldi	r18, 0x10	; 16
    66ea:	32 e0       	ldi	r19, 0x02	; 2
    66ec:	f8 01       	movw	r30, r16
    66ee:	b7 fe       	sbrs	r11, 7
    66f0:	07 c0       	rjmp	.+14     	; 0x6700 <vfprintf+0x2ac>
    66f2:	60 81       	ld	r22, Z
    66f4:	71 81       	ldd	r23, Z+1	; 0x01
    66f6:	82 81       	ldd	r24, Z+2	; 0x02
    66f8:	93 81       	ldd	r25, Z+3	; 0x03
    66fa:	0c 5f       	subi	r16, 0xFC	; 252
    66fc:	1f 4f       	sbci	r17, 0xFF	; 255
    66fe:	06 c0       	rjmp	.+12     	; 0x670c <vfprintf+0x2b8>
    6700:	60 81       	ld	r22, Z
    6702:	71 81       	ldd	r23, Z+1	; 0x01
    6704:	80 e0       	ldi	r24, 0x00	; 0
    6706:	90 e0       	ldi	r25, 0x00	; 0
    6708:	0e 5f       	subi	r16, 0xFE	; 254
    670a:	1f 4f       	sbci	r17, 0xFF	; 255
    670c:	a3 01       	movw	r20, r6
    670e:	f1 d0       	rcall	.+482    	; 0x68f2 <__ultoa_invert>
    6710:	88 2e       	mov	r8, r24
    6712:	86 18       	sub	r8, r6
    6714:	fb 2d       	mov	r31, r11
    6716:	ff 77       	andi	r31, 0x7F	; 127
    6718:	3f 2e       	mov	r3, r31
    671a:	36 fe       	sbrs	r3, 6
    671c:	0d c0       	rjmp	.+26     	; 0x6738 <vfprintf+0x2e4>
    671e:	23 2d       	mov	r18, r3
    6720:	2e 7f       	andi	r18, 0xFE	; 254
    6722:	a2 2e       	mov	r10, r18
    6724:	89 14       	cp	r8, r9
    6726:	58 f4       	brcc	.+22     	; 0x673e <vfprintf+0x2ea>
    6728:	34 fe       	sbrs	r3, 4
    672a:	0b c0       	rjmp	.+22     	; 0x6742 <vfprintf+0x2ee>
    672c:	32 fc       	sbrc	r3, 2
    672e:	09 c0       	rjmp	.+18     	; 0x6742 <vfprintf+0x2ee>
    6730:	83 2d       	mov	r24, r3
    6732:	8e 7e       	andi	r24, 0xEE	; 238
    6734:	a8 2e       	mov	r10, r24
    6736:	05 c0       	rjmp	.+10     	; 0x6742 <vfprintf+0x2ee>
    6738:	b8 2c       	mov	r11, r8
    673a:	a3 2c       	mov	r10, r3
    673c:	03 c0       	rjmp	.+6      	; 0x6744 <vfprintf+0x2f0>
    673e:	b8 2c       	mov	r11, r8
    6740:	01 c0       	rjmp	.+2      	; 0x6744 <vfprintf+0x2f0>
    6742:	b9 2c       	mov	r11, r9
    6744:	a4 fe       	sbrs	r10, 4
    6746:	0f c0       	rjmp	.+30     	; 0x6766 <vfprintf+0x312>
    6748:	fe 01       	movw	r30, r28
    674a:	e8 0d       	add	r30, r8
    674c:	f1 1d       	adc	r31, r1
    674e:	80 81       	ld	r24, Z
    6750:	80 33       	cpi	r24, 0x30	; 48
    6752:	21 f4       	brne	.+8      	; 0x675c <vfprintf+0x308>
    6754:	9a 2d       	mov	r25, r10
    6756:	99 7e       	andi	r25, 0xE9	; 233
    6758:	a9 2e       	mov	r10, r25
    675a:	09 c0       	rjmp	.+18     	; 0x676e <vfprintf+0x31a>
    675c:	a2 fe       	sbrs	r10, 2
    675e:	06 c0       	rjmp	.+12     	; 0x676c <vfprintf+0x318>
    6760:	b3 94       	inc	r11
    6762:	b3 94       	inc	r11
    6764:	04 c0       	rjmp	.+8      	; 0x676e <vfprintf+0x31a>
    6766:	8a 2d       	mov	r24, r10
    6768:	86 78       	andi	r24, 0x86	; 134
    676a:	09 f0       	breq	.+2      	; 0x676e <vfprintf+0x31a>
    676c:	b3 94       	inc	r11
    676e:	a3 fc       	sbrc	r10, 3
    6770:	10 c0       	rjmp	.+32     	; 0x6792 <vfprintf+0x33e>
    6772:	a0 fe       	sbrs	r10, 0
    6774:	06 c0       	rjmp	.+12     	; 0x6782 <vfprintf+0x32e>
    6776:	b2 14       	cp	r11, r2
    6778:	80 f4       	brcc	.+32     	; 0x679a <vfprintf+0x346>
    677a:	28 0c       	add	r2, r8
    677c:	92 2c       	mov	r9, r2
    677e:	9b 18       	sub	r9, r11
    6780:	0d c0       	rjmp	.+26     	; 0x679c <vfprintf+0x348>
    6782:	b2 14       	cp	r11, r2
    6784:	58 f4       	brcc	.+22     	; 0x679c <vfprintf+0x348>
    6786:	b6 01       	movw	r22, r12
    6788:	80 e2       	ldi	r24, 0x20	; 32
    678a:	90 e0       	ldi	r25, 0x00	; 0
    678c:	76 d0       	rcall	.+236    	; 0x687a <fputc>
    678e:	b3 94       	inc	r11
    6790:	f8 cf       	rjmp	.-16     	; 0x6782 <vfprintf+0x32e>
    6792:	b2 14       	cp	r11, r2
    6794:	18 f4       	brcc	.+6      	; 0x679c <vfprintf+0x348>
    6796:	2b 18       	sub	r2, r11
    6798:	02 c0       	rjmp	.+4      	; 0x679e <vfprintf+0x34a>
    679a:	98 2c       	mov	r9, r8
    679c:	21 2c       	mov	r2, r1
    679e:	a4 fe       	sbrs	r10, 4
    67a0:	0f c0       	rjmp	.+30     	; 0x67c0 <vfprintf+0x36c>
    67a2:	b6 01       	movw	r22, r12
    67a4:	80 e3       	ldi	r24, 0x30	; 48
    67a6:	90 e0       	ldi	r25, 0x00	; 0
    67a8:	68 d0       	rcall	.+208    	; 0x687a <fputc>
    67aa:	a2 fe       	sbrs	r10, 2
    67ac:	16 c0       	rjmp	.+44     	; 0x67da <vfprintf+0x386>
    67ae:	a1 fc       	sbrc	r10, 1
    67b0:	03 c0       	rjmp	.+6      	; 0x67b8 <vfprintf+0x364>
    67b2:	88 e7       	ldi	r24, 0x78	; 120
    67b4:	90 e0       	ldi	r25, 0x00	; 0
    67b6:	02 c0       	rjmp	.+4      	; 0x67bc <vfprintf+0x368>
    67b8:	88 e5       	ldi	r24, 0x58	; 88
    67ba:	90 e0       	ldi	r25, 0x00	; 0
    67bc:	b6 01       	movw	r22, r12
    67be:	0c c0       	rjmp	.+24     	; 0x67d8 <vfprintf+0x384>
    67c0:	8a 2d       	mov	r24, r10
    67c2:	86 78       	andi	r24, 0x86	; 134
    67c4:	51 f0       	breq	.+20     	; 0x67da <vfprintf+0x386>
    67c6:	a1 fe       	sbrs	r10, 1
    67c8:	02 c0       	rjmp	.+4      	; 0x67ce <vfprintf+0x37a>
    67ca:	8b e2       	ldi	r24, 0x2B	; 43
    67cc:	01 c0       	rjmp	.+2      	; 0x67d0 <vfprintf+0x37c>
    67ce:	80 e2       	ldi	r24, 0x20	; 32
    67d0:	a7 fc       	sbrc	r10, 7
    67d2:	8d e2       	ldi	r24, 0x2D	; 45
    67d4:	b6 01       	movw	r22, r12
    67d6:	90 e0       	ldi	r25, 0x00	; 0
    67d8:	50 d0       	rcall	.+160    	; 0x687a <fputc>
    67da:	89 14       	cp	r8, r9
    67dc:	30 f4       	brcc	.+12     	; 0x67ea <vfprintf+0x396>
    67de:	b6 01       	movw	r22, r12
    67e0:	80 e3       	ldi	r24, 0x30	; 48
    67e2:	90 e0       	ldi	r25, 0x00	; 0
    67e4:	4a d0       	rcall	.+148    	; 0x687a <fputc>
    67e6:	9a 94       	dec	r9
    67e8:	f8 cf       	rjmp	.-16     	; 0x67da <vfprintf+0x386>
    67ea:	8a 94       	dec	r8
    67ec:	f3 01       	movw	r30, r6
    67ee:	e8 0d       	add	r30, r8
    67f0:	f1 1d       	adc	r31, r1
    67f2:	80 81       	ld	r24, Z
    67f4:	b6 01       	movw	r22, r12
    67f6:	90 e0       	ldi	r25, 0x00	; 0
    67f8:	40 d0       	rcall	.+128    	; 0x687a <fputc>
    67fa:	81 10       	cpse	r8, r1
    67fc:	f6 cf       	rjmp	.-20     	; 0x67ea <vfprintf+0x396>
    67fe:	22 20       	and	r2, r2
    6800:	09 f4       	brne	.+2      	; 0x6804 <vfprintf+0x3b0>
    6802:	4e ce       	rjmp	.-868    	; 0x64a0 <vfprintf+0x4c>
    6804:	b6 01       	movw	r22, r12
    6806:	80 e2       	ldi	r24, 0x20	; 32
    6808:	90 e0       	ldi	r25, 0x00	; 0
    680a:	37 d0       	rcall	.+110    	; 0x687a <fputc>
    680c:	2a 94       	dec	r2
    680e:	f7 cf       	rjmp	.-18     	; 0x67fe <vfprintf+0x3aa>
    6810:	f6 01       	movw	r30, r12
    6812:	86 81       	ldd	r24, Z+6	; 0x06
    6814:	97 81       	ldd	r25, Z+7	; 0x07
    6816:	02 c0       	rjmp	.+4      	; 0x681c <vfprintf+0x3c8>
    6818:	8f ef       	ldi	r24, 0xFF	; 255
    681a:	9f ef       	ldi	r25, 0xFF	; 255
    681c:	2b 96       	adiw	r28, 0x0b	; 11
    681e:	0f b6       	in	r0, 0x3f	; 63
    6820:	f8 94       	cli
    6822:	de bf       	out	0x3e, r29	; 62
    6824:	0f be       	out	0x3f, r0	; 63
    6826:	cd bf       	out	0x3d, r28	; 61
    6828:	df 91       	pop	r29
    682a:	cf 91       	pop	r28
    682c:	1f 91       	pop	r17
    682e:	0f 91       	pop	r16
    6830:	ff 90       	pop	r15
    6832:	ef 90       	pop	r14
    6834:	df 90       	pop	r13
    6836:	cf 90       	pop	r12
    6838:	bf 90       	pop	r11
    683a:	af 90       	pop	r10
    683c:	9f 90       	pop	r9
    683e:	8f 90       	pop	r8
    6840:	7f 90       	pop	r7
    6842:	6f 90       	pop	r6
    6844:	5f 90       	pop	r5
    6846:	4f 90       	pop	r4
    6848:	3f 90       	pop	r3
    684a:	2f 90       	pop	r2
    684c:	08 95       	ret

0000684e <strnlen_P>:
    684e:	fc 01       	movw	r30, r24
    6850:	05 90       	lpm	r0, Z+
    6852:	61 50       	subi	r22, 0x01	; 1
    6854:	70 40       	sbci	r23, 0x00	; 0
    6856:	01 10       	cpse	r0, r1
    6858:	d8 f7       	brcc	.-10     	; 0x6850 <strnlen_P+0x2>
    685a:	80 95       	com	r24
    685c:	90 95       	com	r25
    685e:	8e 0f       	add	r24, r30
    6860:	9f 1f       	adc	r25, r31
    6862:	08 95       	ret

00006864 <strnlen>:
    6864:	fc 01       	movw	r30, r24
    6866:	61 50       	subi	r22, 0x01	; 1
    6868:	70 40       	sbci	r23, 0x00	; 0
    686a:	01 90       	ld	r0, Z+
    686c:	01 10       	cpse	r0, r1
    686e:	d8 f7       	brcc	.-10     	; 0x6866 <strnlen+0x2>
    6870:	80 95       	com	r24
    6872:	90 95       	com	r25
    6874:	8e 0f       	add	r24, r30
    6876:	9f 1f       	adc	r25, r31
    6878:	08 95       	ret

0000687a <fputc>:
    687a:	0f 93       	push	r16
    687c:	1f 93       	push	r17
    687e:	cf 93       	push	r28
    6880:	df 93       	push	r29
    6882:	fb 01       	movw	r30, r22
    6884:	23 81       	ldd	r18, Z+3	; 0x03
    6886:	21 fd       	sbrc	r18, 1
    6888:	03 c0       	rjmp	.+6      	; 0x6890 <fputc+0x16>
    688a:	8f ef       	ldi	r24, 0xFF	; 255
    688c:	9f ef       	ldi	r25, 0xFF	; 255
    688e:	2c c0       	rjmp	.+88     	; 0x68e8 <fputc+0x6e>
    6890:	22 ff       	sbrs	r18, 2
    6892:	16 c0       	rjmp	.+44     	; 0x68c0 <fputc+0x46>
    6894:	46 81       	ldd	r20, Z+6	; 0x06
    6896:	57 81       	ldd	r21, Z+7	; 0x07
    6898:	24 81       	ldd	r18, Z+4	; 0x04
    689a:	35 81       	ldd	r19, Z+5	; 0x05
    689c:	42 17       	cp	r20, r18
    689e:	53 07       	cpc	r21, r19
    68a0:	44 f4       	brge	.+16     	; 0x68b2 <fputc+0x38>
    68a2:	a0 81       	ld	r26, Z
    68a4:	b1 81       	ldd	r27, Z+1	; 0x01
    68a6:	9d 01       	movw	r18, r26
    68a8:	2f 5f       	subi	r18, 0xFF	; 255
    68aa:	3f 4f       	sbci	r19, 0xFF	; 255
    68ac:	31 83       	std	Z+1, r19	; 0x01
    68ae:	20 83       	st	Z, r18
    68b0:	8c 93       	st	X, r24
    68b2:	26 81       	ldd	r18, Z+6	; 0x06
    68b4:	37 81       	ldd	r19, Z+7	; 0x07
    68b6:	2f 5f       	subi	r18, 0xFF	; 255
    68b8:	3f 4f       	sbci	r19, 0xFF	; 255
    68ba:	37 83       	std	Z+7, r19	; 0x07
    68bc:	26 83       	std	Z+6, r18	; 0x06
    68be:	14 c0       	rjmp	.+40     	; 0x68e8 <fputc+0x6e>
    68c0:	8b 01       	movw	r16, r22
    68c2:	ec 01       	movw	r28, r24
    68c4:	fb 01       	movw	r30, r22
    68c6:	00 84       	ldd	r0, Z+8	; 0x08
    68c8:	f1 85       	ldd	r31, Z+9	; 0x09
    68ca:	e0 2d       	mov	r30, r0
    68cc:	19 95       	eicall
    68ce:	89 2b       	or	r24, r25
    68d0:	e1 f6       	brne	.-72     	; 0x688a <fputc+0x10>
    68d2:	d8 01       	movw	r26, r16
    68d4:	16 96       	adiw	r26, 0x06	; 6
    68d6:	8d 91       	ld	r24, X+
    68d8:	9c 91       	ld	r25, X
    68da:	17 97       	sbiw	r26, 0x07	; 7
    68dc:	01 96       	adiw	r24, 0x01	; 1
    68de:	17 96       	adiw	r26, 0x07	; 7
    68e0:	9c 93       	st	X, r25
    68e2:	8e 93       	st	-X, r24
    68e4:	16 97       	sbiw	r26, 0x06	; 6
    68e6:	ce 01       	movw	r24, r28
    68e8:	df 91       	pop	r29
    68ea:	cf 91       	pop	r28
    68ec:	1f 91       	pop	r17
    68ee:	0f 91       	pop	r16
    68f0:	08 95       	ret

000068f2 <__ultoa_invert>:
    68f2:	fa 01       	movw	r30, r20
    68f4:	aa 27       	eor	r26, r26
    68f6:	28 30       	cpi	r18, 0x08	; 8
    68f8:	51 f1       	breq	.+84     	; 0x694e <__ultoa_invert+0x5c>
    68fa:	20 31       	cpi	r18, 0x10	; 16
    68fc:	81 f1       	breq	.+96     	; 0x695e <__ultoa_invert+0x6c>
    68fe:	e8 94       	clt
    6900:	6f 93       	push	r22
    6902:	6e 7f       	andi	r22, 0xFE	; 254
    6904:	6e 5f       	subi	r22, 0xFE	; 254
    6906:	7f 4f       	sbci	r23, 0xFF	; 255
    6908:	8f 4f       	sbci	r24, 0xFF	; 255
    690a:	9f 4f       	sbci	r25, 0xFF	; 255
    690c:	af 4f       	sbci	r26, 0xFF	; 255
    690e:	b1 e0       	ldi	r27, 0x01	; 1
    6910:	3e d0       	rcall	.+124    	; 0x698e <__ultoa_invert+0x9c>
    6912:	b4 e0       	ldi	r27, 0x04	; 4
    6914:	3c d0       	rcall	.+120    	; 0x698e <__ultoa_invert+0x9c>
    6916:	67 0f       	add	r22, r23
    6918:	78 1f       	adc	r23, r24
    691a:	89 1f       	adc	r24, r25
    691c:	9a 1f       	adc	r25, r26
    691e:	a1 1d       	adc	r26, r1
    6920:	68 0f       	add	r22, r24
    6922:	79 1f       	adc	r23, r25
    6924:	8a 1f       	adc	r24, r26
    6926:	91 1d       	adc	r25, r1
    6928:	a1 1d       	adc	r26, r1
    692a:	6a 0f       	add	r22, r26
    692c:	71 1d       	adc	r23, r1
    692e:	81 1d       	adc	r24, r1
    6930:	91 1d       	adc	r25, r1
    6932:	a1 1d       	adc	r26, r1
    6934:	20 d0       	rcall	.+64     	; 0x6976 <__ultoa_invert+0x84>
    6936:	09 f4       	brne	.+2      	; 0x693a <__ultoa_invert+0x48>
    6938:	68 94       	set
    693a:	3f 91       	pop	r19
    693c:	2a e0       	ldi	r18, 0x0A	; 10
    693e:	26 9f       	mul	r18, r22
    6940:	11 24       	eor	r1, r1
    6942:	30 19       	sub	r19, r0
    6944:	30 5d       	subi	r19, 0xD0	; 208
    6946:	31 93       	st	Z+, r19
    6948:	de f6       	brtc	.-74     	; 0x6900 <__ultoa_invert+0xe>
    694a:	cf 01       	movw	r24, r30
    694c:	08 95       	ret
    694e:	46 2f       	mov	r20, r22
    6950:	47 70       	andi	r20, 0x07	; 7
    6952:	40 5d       	subi	r20, 0xD0	; 208
    6954:	41 93       	st	Z+, r20
    6956:	b3 e0       	ldi	r27, 0x03	; 3
    6958:	0f d0       	rcall	.+30     	; 0x6978 <__ultoa_invert+0x86>
    695a:	c9 f7       	brne	.-14     	; 0x694e <__ultoa_invert+0x5c>
    695c:	f6 cf       	rjmp	.-20     	; 0x694a <__ultoa_invert+0x58>
    695e:	46 2f       	mov	r20, r22
    6960:	4f 70       	andi	r20, 0x0F	; 15
    6962:	40 5d       	subi	r20, 0xD0	; 208
    6964:	4a 33       	cpi	r20, 0x3A	; 58
    6966:	18 f0       	brcs	.+6      	; 0x696e <__ultoa_invert+0x7c>
    6968:	49 5d       	subi	r20, 0xD9	; 217
    696a:	31 fd       	sbrc	r19, 1
    696c:	40 52       	subi	r20, 0x20	; 32
    696e:	41 93       	st	Z+, r20
    6970:	02 d0       	rcall	.+4      	; 0x6976 <__ultoa_invert+0x84>
    6972:	a9 f7       	brne	.-22     	; 0x695e <__ultoa_invert+0x6c>
    6974:	ea cf       	rjmp	.-44     	; 0x694a <__ultoa_invert+0x58>
    6976:	b4 e0       	ldi	r27, 0x04	; 4
    6978:	a6 95       	lsr	r26
    697a:	97 95       	ror	r25
    697c:	87 95       	ror	r24
    697e:	77 95       	ror	r23
    6980:	67 95       	ror	r22
    6982:	ba 95       	dec	r27
    6984:	c9 f7       	brne	.-14     	; 0x6978 <__ultoa_invert+0x86>
    6986:	00 97       	sbiw	r24, 0x00	; 0
    6988:	61 05       	cpc	r22, r1
    698a:	71 05       	cpc	r23, r1
    698c:	08 95       	ret
    698e:	9b 01       	movw	r18, r22
    6990:	ac 01       	movw	r20, r24
    6992:	0a 2e       	mov	r0, r26
    6994:	06 94       	lsr	r0
    6996:	57 95       	ror	r21
    6998:	47 95       	ror	r20
    699a:	37 95       	ror	r19
    699c:	27 95       	ror	r18
    699e:	ba 95       	dec	r27
    69a0:	c9 f7       	brne	.-14     	; 0x6994 <__ultoa_invert+0xa2>
    69a2:	62 0f       	add	r22, r18
    69a4:	73 1f       	adc	r23, r19
    69a6:	84 1f       	adc	r24, r20
    69a8:	95 1f       	adc	r25, r21
    69aa:	a0 1d       	adc	r26, r0
    69ac:	08 95       	ret

000069ae <_exit>:
    69ae:	f8 94       	cli

000069b0 <__stop_program>:
    69b0:	ff cf       	rjmp	.-2      	; 0x69b0 <__stop_program>
