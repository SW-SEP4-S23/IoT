
Firmware0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000005be  00800200  00006a62  00006af6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006a62  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001038  008007be  008007be  000070b4  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000070b4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00007110  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000be8  00000000  00000000  00007150  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000f4cf  00000000  00000000  00007d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f5a  00000000  00000000  00017207  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000077e3  00000000  00000000  0001b161  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002700  00000000  00000000  00022944  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000046da  00000000  00000000  00025044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000cb94  00000000  00000000  0002971e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c28  00000000  00000000  000362b2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	32 c5       	rjmp	.+2660   	; 0xa96 <__vector_12>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	0c 94 08 20 	jmp	0x4010	; 0x4010 <__vector_21>
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	0c 94 d4 2a 	jmp	0x55a8	; 0x55a8 <__vector_24>
      64:	0c 94 87 27 	jmp	0x4f0e	; 0x4f0e <__vector_25>
      68:	0c 94 d9 27 	jmp	0x4fb2	; 0x4fb2 <__vector_26>
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 1d 28 	jmp	0x503a	; 0x503a <__vector_36>
      94:	0c 94 6f 28 	jmp	0x50de	; 0x50de <__vector_37>
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 03 2e 	jmp	0x5c06	; 0x5c06 <__vector_39>
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 b3 28 	jmp	0x5166	; 0x5166 <__vector_51>
      d0:	0c 94 05 29 	jmp	0x520a	; 0x520a <__vector_52>
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 49 29 	jmp	0x5292	; 0x5292 <__vector_54>
      dc:	0c 94 9b 29 	jmp	0x5336	; 0x5336 <__vector_55>
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	be 01       	movw	r22, r28
      e6:	be 01       	movw	r22, r28
      e8:	be 01       	movw	r22, r28
      ea:	f8 01       	movw	r30, r16
      ec:	00 02       	muls	r16, r16
      ee:	16 02       	muls	r17, r22
      f0:	be 01       	movw	r22, r28
      f2:	be 01       	movw	r22, r28
      f4:	f8 01       	movw	r30, r16
      f6:	00 02       	muls	r16, r16
      f8:	25 2e       	mov	r2, r21
      fa:	95 2e       	mov	r9, r21
      fc:	95 2e       	mov	r9, r21
      fe:	95 2e       	mov	r9, r21
     100:	95 2e       	mov	r9, r21
     102:	95 2e       	mov	r9, r21
     104:	95 2e       	mov	r9, r21
     106:	95 2e       	mov	r9, r21
     108:	25 2e       	mov	r2, r21
     10a:	95 2e       	mov	r9, r21
     10c:	95 2e       	mov	r9, r21
     10e:	95 2e       	mov	r9, r21
     110:	95 2e       	mov	r9, r21
     112:	95 2e       	mov	r9, r21
     114:	95 2e       	mov	r9, r21
     116:	95 2e       	mov	r9, r21
     118:	27 2e       	mov	r2, r23
     11a:	95 2e       	mov	r9, r21
     11c:	95 2e       	mov	r9, r21
     11e:	95 2e       	mov	r9, r21
     120:	95 2e       	mov	r9, r21
     122:	95 2e       	mov	r9, r21
     124:	95 2e       	mov	r9, r21
     126:	95 2e       	mov	r9, r21
     128:	95 2e       	mov	r9, r21
     12a:	95 2e       	mov	r9, r21
     12c:	95 2e       	mov	r9, r21
     12e:	95 2e       	mov	r9, r21
     130:	95 2e       	mov	r9, r21
     132:	95 2e       	mov	r9, r21
     134:	95 2e       	mov	r9, r21
     136:	95 2e       	mov	r9, r21
     138:	27 2e       	mov	r2, r23
     13a:	95 2e       	mov	r9, r21
     13c:	95 2e       	mov	r9, r21
     13e:	95 2e       	mov	r9, r21
     140:	95 2e       	mov	r9, r21
     142:	95 2e       	mov	r9, r21
     144:	95 2e       	mov	r9, r21
     146:	95 2e       	mov	r9, r21
     148:	95 2e       	mov	r9, r21
     14a:	95 2e       	mov	r9, r21
     14c:	95 2e       	mov	r9, r21
     14e:	95 2e       	mov	r9, r21
     150:	95 2e       	mov	r9, r21
     152:	95 2e       	mov	r9, r21
     154:	95 2e       	mov	r9, r21
     156:	95 2e       	mov	r9, r21
     158:	91 2e       	mov	r9, r17
     15a:	95 2e       	mov	r9, r21
     15c:	95 2e       	mov	r9, r21
     15e:	95 2e       	mov	r9, r21
     160:	95 2e       	mov	r9, r21
     162:	95 2e       	mov	r9, r21
     164:	95 2e       	mov	r9, r21
     166:	95 2e       	mov	r9, r21
     168:	5c 2e       	mov	r5, r28
     16a:	95 2e       	mov	r9, r21
     16c:	95 2e       	mov	r9, r21
     16e:	95 2e       	mov	r9, r21
     170:	95 2e       	mov	r9, r21
     172:	95 2e       	mov	r9, r21
     174:	95 2e       	mov	r9, r21
     176:	95 2e       	mov	r9, r21
     178:	95 2e       	mov	r9, r21
     17a:	95 2e       	mov	r9, r21
     17c:	95 2e       	mov	r9, r21
     17e:	95 2e       	mov	r9, r21
     180:	95 2e       	mov	r9, r21
     182:	95 2e       	mov	r9, r21
     184:	95 2e       	mov	r9, r21
     186:	95 2e       	mov	r9, r21
     188:	50 2e       	mov	r5, r16
     18a:	95 2e       	mov	r9, r21
     18c:	95 2e       	mov	r9, r21
     18e:	95 2e       	mov	r9, r21
     190:	95 2e       	mov	r9, r21
     192:	95 2e       	mov	r9, r21
     194:	95 2e       	mov	r9, r21
     196:	95 2e       	mov	r9, r21
     198:	74 2e       	mov	r7, r20

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	0b e9       	ldi	r16, 0x9B	; 155
     19c:	15 e1       	ldi	r17, 0x15	; 21
     19e:	0f 2e       	mov	r0, r31
     1a0:	fb ec       	ldi	r31, 0xCB	; 203
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f5 e1       	ldi	r31, 0x15	; 21
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	25 d3       	rcall	.+1610   	; 0x816 <uxListRemove>
     1cc:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 8e 15 	sts	0x158E, r24	; 0x80158e <uxCurrentNumberOfTasks>
     1d6:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 9a 15 	sts	0x159A, r24	; 0x80159a <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	8a d2       	rcall	.+1300   	; 0x6fe <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	88 d2       	rcall	.+1296   	; 0x6fe <vPortFree>
     1ee:	80 91 9a 15 	lds	r24, 0x159A	; 0x80159a <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	85 d3       	rcall	.+1802   	; 0x90a <vPortYield>
     200:	0e 94 c7 18 	call	0x318e	; 0x318e <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 45 16 	lds	r30, 0x1645	; 0x801645 <pxCurrentTimerList>
     232:	f0 91 46 16 	lds	r31, 0x1646	; 0x801646 <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	0e c1       	rjmp	.+540    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 30 18 	call	0x3060	; 0x3060 <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	64 c0       	rjmp	.+200    	; 0x32e <prvTimerTask+0x128>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     27e:	e0 91 45 16 	lds	r30, 0x1645	; 0x801645 <pxCurrentTimerList>
     282:	f0 91 46 16 	lds	r31, 0x1646	; 0x801646 <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	be d2       	rcall	.+1404   	; 0x816 <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	86 89       	ldd	r24, Z+22	; 0x16
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	56 96       	adiw	r26, 0x16	; 22
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9e c0       	rjmp	.+316    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <xTimerQueue>
     31c:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <xTimerQueue+0x1>
     320:	51 d7       	rcall	.+3746   	; 0x11c4 <vQueueWaitForMessageRestricted>
     322:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     326:	81 11       	cpse	r24, r1
     328:	8a c0       	rjmp	.+276    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     32a:	ef d2       	rcall	.+1502   	; 0x90a <vPortYield>
     32c:	88 c0       	rjmp	.+272    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     32e:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     332:	85 c0       	rjmp	.+266    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	88 23       	and	r24, r24
     338:	0c f4       	brge	.+2      	; 0x33c <prvTimerTask+0x136>
     33a:	81 c0       	rjmp	.+258    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     33c:	4e 80       	ldd	r4, Y+6	; 0x06
     33e:	5f 80       	ldd	r5, Y+7	; 0x07
     340:	d2 01       	movw	r26, r4
     342:	1c 96       	adiw	r26, 0x0c	; 12
     344:	8d 91       	ld	r24, X+
     346:	9c 91       	ld	r25, X
     348:	1d 97       	sbiw	r26, 0x0d	; 13
     34a:	89 2b       	or	r24, r25
     34c:	19 f0       	breq	.+6      	; 0x354 <prvTimerTask+0x14e>
     34e:	c2 01       	movw	r24, r4
     350:	02 96       	adiw	r24, 0x02	; 2
     352:	61 d2       	rcall	.+1218   	; 0x816 <uxListRemove>
     354:	ce 01       	movw	r24, r28
     356:	08 96       	adiw	r24, 0x08	; 8
     358:	0e 94 30 18 	call	0x3060	; 0x3060 <prvSampleTimeNow>
     35c:	8b 01       	movw	r16, r22
     35e:	9c 01       	movw	r18, r24
     360:	e9 81       	ldd	r30, Y+1	; 0x01
     362:	0e 2e       	mov	r0, r30
     364:	00 0c       	add	r0, r0
     366:	ff 0b       	sbc	r31, r31
     368:	ea 30       	cpi	r30, 0x0A	; 10
     36a:	f1 05       	cpc	r31, r1
     36c:	08 f0       	brcs	.+2      	; 0x370 <prvTimerTask+0x16a>
     36e:	67 c0       	rjmp	.+206    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     370:	88 27       	eor	r24, r24
     372:	ee 58       	subi	r30, 0x8E	; 142
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	8f 4f       	sbci	r24, 0xFF	; 255
     378:	0c 94 5e 30 	jmp	0x60bc	; 0x60bc <__tablejump2__>
     37c:	f2 01       	movw	r30, r4
     37e:	86 89       	ldd	r24, Z+22	; 0x16
     380:	81 60       	ori	r24, 0x01	; 1
     382:	86 8b       	std	Z+22, r24	; 0x16
     384:	ca 80       	ldd	r12, Y+2	; 0x02
     386:	db 80       	ldd	r13, Y+3	; 0x03
     388:	ec 80       	ldd	r14, Y+4	; 0x04
     38a:	fd 80       	ldd	r15, Y+5	; 0x05
     38c:	46 85       	ldd	r20, Z+14	; 0x0e
     38e:	57 85       	ldd	r21, Z+15	; 0x0f
     390:	60 89       	ldd	r22, Z+16	; 0x10
     392:	71 89       	ldd	r23, Z+17	; 0x11
     394:	4c 0d       	add	r20, r12
     396:	5d 1d       	adc	r21, r13
     398:	6e 1d       	adc	r22, r14
     39a:	7f 1d       	adc	r23, r15
     39c:	c2 01       	movw	r24, r4
     39e:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <prvInsertTimerInActiveList>
     3a2:	88 23       	and	r24, r24
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <prvTimerTask+0x1a2>
     3a6:	4b c0       	rjmp	.+150    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3a8:	d2 01       	movw	r26, r4
     3aa:	54 96       	adiw	r26, 0x14	; 20
     3ac:	ed 91       	ld	r30, X+
     3ae:	fc 91       	ld	r31, X
     3b0:	55 97       	sbiw	r26, 0x15	; 21
     3b2:	c2 01       	movw	r24, r4
     3b4:	19 95       	eicall
     3b6:	f2 01       	movw	r30, r4
     3b8:	86 89       	ldd	r24, Z+22	; 0x16
     3ba:	82 ff       	sbrs	r24, 2
     3bc:	40 c0       	rjmp	.+128    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3be:	4a 81       	ldd	r20, Y+2	; 0x02
     3c0:	5b 81       	ldd	r21, Y+3	; 0x03
     3c2:	6c 81       	ldd	r22, Y+4	; 0x04
     3c4:	7d 81       	ldd	r23, Y+5	; 0x05
     3c6:	86 85       	ldd	r24, Z+14	; 0x0e
     3c8:	97 85       	ldd	r25, Z+15	; 0x0f
     3ca:	a0 89       	ldd	r26, Z+16	; 0x10
     3cc:	b1 89       	ldd	r27, Z+17	; 0x11
     3ce:	9a 01       	movw	r18, r20
     3d0:	ab 01       	movw	r20, r22
     3d2:	28 0f       	add	r18, r24
     3d4:	39 1f       	adc	r19, r25
     3d6:	4a 1f       	adc	r20, r26
     3d8:	5b 1f       	adc	r21, r27
     3da:	c8 2c       	mov	r12, r8
     3dc:	d9 2c       	mov	r13, r9
     3de:	ea 2c       	mov	r14, r10
     3e0:	fb 2c       	mov	r15, r11
     3e2:	00 e0       	ldi	r16, 0x00	; 0
     3e4:	10 e0       	ldi	r17, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	c2 01       	movw	r24, r4
     3ea:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <xTimerGenericCommand>
     3ee:	27 c0       	rjmp	.+78     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3f0:	d2 01       	movw	r26, r4
     3f2:	56 96       	adiw	r26, 0x16	; 22
     3f4:	8c 91       	ld	r24, X
     3f6:	56 97       	sbiw	r26, 0x16	; 22
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	56 96       	adiw	r26, 0x16	; 22
     3fc:	8c 93       	st	X, r24
     3fe:	1f c0       	rjmp	.+62     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     400:	f2 01       	movw	r30, r4
     402:	86 89       	ldd	r24, Z+22	; 0x16
     404:	81 60       	ori	r24, 0x01	; 1
     406:	86 8b       	std	Z+22, r24	; 0x16
     408:	4a 81       	ldd	r20, Y+2	; 0x02
     40a:	5b 81       	ldd	r21, Y+3	; 0x03
     40c:	6c 81       	ldd	r22, Y+4	; 0x04
     40e:	7d 81       	ldd	r23, Y+5	; 0x05
     410:	46 87       	std	Z+14, r20	; 0x0e
     412:	57 87       	std	Z+15, r21	; 0x0f
     414:	60 8b       	std	Z+16, r22	; 0x10
     416:	71 8b       	std	Z+17, r23	; 0x11
     418:	40 0f       	add	r20, r16
     41a:	51 1f       	adc	r21, r17
     41c:	62 1f       	adc	r22, r18
     41e:	73 1f       	adc	r23, r19
     420:	68 01       	movw	r12, r16
     422:	79 01       	movw	r14, r18
     424:	c2 01       	movw	r24, r4
     426:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <prvInsertTimerInActiveList>
     42a:	09 c0       	rjmp	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42c:	f2 01       	movw	r30, r4
     42e:	86 89       	ldd	r24, Z+22	; 0x16
     430:	81 fd       	sbrc	r24, 1
     432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     434:	c2 01       	movw	r24, r4
     436:	63 d1       	rcall	.+710    	; 0x6fe <vPortFree>
     438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43a:	8e 7f       	andi	r24, 0xFE	; 254
     43c:	86 8b       	std	Z+22, r24	; 0x16
     43e:	28 2d       	mov	r18, r8
     440:	39 2d       	mov	r19, r9
     442:	4a 2d       	mov	r20, r10
     444:	5b 2d       	mov	r21, r11
     446:	66 2d       	mov	r22, r6
     448:	77 2d       	mov	r23, r7
     44a:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <xTimerQueue>
     44e:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <xTimerQueue+0x1>
     452:	51 d5       	rcall	.+2722   	; 0xef6 <xQueueReceive>
     454:	81 11       	cpse	r24, r1
     456:	6e cf       	rjmp	.-292    	; 0x334 <prvTimerTask+0x12e>
     458:	ea ce       	rjmp	.-556    	; 0x22e <prvTimerTask+0x28>
     45a:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskSuspendAll>
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	0e 94 30 18 	call	0x3060	; 0x3060 <prvSampleTimeNow>
     466:	6b 87       	std	Y+11, r22	; 0x0b
     468:	7c 87       	std	Y+12, r23	; 0x0c
     46a:	8d 87       	std	Y+13, r24	; 0x0d
     46c:	9e 87       	std	Y+14, r25	; 0x0e
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	81 11       	cpse	r24, r1
     472:	5d cf       	rjmp	.-326    	; 0x32e <prvTimerTask+0x128>
     474:	e0 91 43 16 	lds	r30, 0x1643	; 0x801643 <pxOverflowTimerList>
     478:	f0 91 44 16 	lds	r31, 0x1644	; 0x801644 <pxOverflowTimerList+0x1>
     47c:	80 81       	ld	r24, Z
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	81 11       	cpse	r24, r1
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	28 2c       	mov	r2, r8
     486:	39 2c       	mov	r3, r9
     488:	4a 2c       	mov	r4, r10
     48a:	5b 2c       	mov	r5, r11
     48c:	3b cf       	rjmp	.-394    	; 0x304 <prvTimerTask+0xfe>

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	d1 e2       	ldi	r29, 0x21	; 33
     496:	de bf       	out	0x3e, r29	; 62
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	17 e0       	ldi	r17, 0x07	; 7
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b2 e0       	ldi	r27, 0x02	; 2
     4a4:	e2 e6       	ldi	r30, 0x62	; 98
     4a6:	fa e6       	ldi	r31, 0x6A	; 106
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	ae 3b       	cpi	r26, 0xBE	; 190
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	27 e1       	ldi	r18, 0x17	; 23
     4ba:	ae eb       	ldi	r26, 0xBE	; 190
     4bc:	b7 e0       	ldi	r27, 0x07	; 7
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a6 3f       	cpi	r26, 0xF6	; 246
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 d1 1d 	call	0x3ba2	; 0x3ba2 <main>
     4cc:	0c 94 2f 35 	jmp	0x6a5e	; 0x6a5e <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <trace_init>:
 #include <avr/io.h>
 #include <FreeRTOSConfig.h>
 #include "FreeRTOSTraceDriver.h"

 void trace_init(void)
 {
     4d2:	08 95       	ret

000004d4 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     4da:	ea ec       	ldi	r30, 0xCA	; 202
     4dc:	f7 e0       	ldi	r31, 0x07	; 7
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <prvInsertBlockIntoFreeList+0xe>
     4e0:	f9 01       	movw	r30, r18
     4e2:	20 81       	ld	r18, Z
     4e4:	31 81       	ldd	r19, Z+1	; 0x01
     4e6:	2a 17       	cp	r18, r26
     4e8:	3b 07       	cpc	r19, r27
     4ea:	d0 f3       	brcs	.-12     	; 0x4e0 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	af 01       	movw	r20, r30
     4f2:	48 0f       	add	r20, r24
     4f4:	59 1f       	adc	r21, r25
     4f6:	a4 17       	cp	r26, r20
     4f8:	b5 07       	cpc	r27, r21
     4fa:	49 f4       	brne	.+18     	; 0x50e <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     4fc:	12 96       	adiw	r26, 0x02	; 2
     4fe:	4d 91       	ld	r20, X+
     500:	5c 91       	ld	r21, X
     502:	13 97       	sbiw	r26, 0x03	; 3
     504:	84 0f       	add	r24, r20
     506:	95 1f       	adc	r25, r21
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	82 83       	std	Z+2, r24	; 0x02
     50c:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     50e:	12 96       	adiw	r26, 0x02	; 2
     510:	8d 91       	ld	r24, X+
     512:	9c 91       	ld	r25, X
     514:	13 97       	sbiw	r26, 0x03	; 3
     516:	ed 01       	movw	r28, r26
     518:	c8 0f       	add	r28, r24
     51a:	d9 1f       	adc	r29, r25
     51c:	2c 17       	cp	r18, r28
     51e:	3d 07       	cpc	r19, r29
     520:	d9 f4       	brne	.+54     	; 0x558 <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     522:	20 91 c8 07 	lds	r18, 0x07C8	; 0x8007c8 <pxEnd>
     526:	30 91 c9 07 	lds	r19, 0x07C9	; 0x8007c9 <pxEnd+0x1>
     52a:	c2 17       	cp	r28, r18
     52c:	d3 07       	cpc	r29, r19
     52e:	81 f0       	breq	.+32     	; 0x550 <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     530:	2a 81       	ldd	r18, Y+2	; 0x02
     532:	3b 81       	ldd	r19, Y+3	; 0x03
     534:	82 0f       	add	r24, r18
     536:	93 1f       	adc	r25, r19
     538:	13 96       	adiw	r26, 0x03	; 3
     53a:	9c 93       	st	X, r25
     53c:	8e 93       	st	-X, r24
     53e:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     540:	c0 81       	ld	r28, Z
     542:	d1 81       	ldd	r29, Z+1	; 0x01
     544:	88 81       	ld	r24, Y
     546:	99 81       	ldd	r25, Y+1	; 0x01
     548:	11 96       	adiw	r26, 0x01	; 1
     54a:	9c 93       	st	X, r25
     54c:	8e 93       	st	-X, r24
     54e:	07 c0       	rjmp	.+14     	; 0x55e <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     550:	11 96       	adiw	r26, 0x01	; 1
     552:	dc 93       	st	X, r29
     554:	ce 93       	st	-X, r28
     556:	03 c0       	rjmp	.+6      	; 0x55e <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     558:	11 96       	adiw	r26, 0x01	; 1
     55a:	3c 93       	st	X, r19
     55c:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     55e:	ae 17       	cp	r26, r30
     560:	bf 07       	cpc	r27, r31
     562:	11 f0       	breq	.+4      	; 0x568 <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     564:	b1 83       	std	Z+1, r27	; 0x01
     566:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     580:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     584:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <pxEnd>
     588:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <pxEnd+0x1>
     58c:	89 2b       	or	r24, r25
     58e:	41 f5       	brne	.+80     	; 0x5e0 <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     590:	ea ec       	ldi	r30, 0xCA	; 202
     592:	f7 e0       	ldi	r31, 0x07	; 7
     594:	ae ec       	ldi	r26, 0xCE	; 206
     596:	b7 e0       	ldi	r27, 0x07	; 7
     598:	b1 83       	std	Z+1, r27	; 0x01
     59a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     59c:	13 82       	std	Z+3, r1	; 0x03
     59e:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     5a0:	e6 e7       	ldi	r30, 0x76	; 118
     5a2:	f5 e1       	ldi	r31, 0x15	; 21
     5a4:	f0 93 c9 07 	sts	0x07C9, r31	; 0x8007c9 <pxEnd+0x1>
     5a8:	e0 93 c8 07 	sts	0x07C8, r30	; 0x8007c8 <pxEnd>
    pxEnd->xBlockSize = 0;
     5ac:	13 82       	std	Z+3, r1	; 0x03
     5ae:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     5b0:	11 82       	std	Z+1, r1	; 0x01
     5b2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     5b4:	88 ea       	ldi	r24, 0xA8	; 168
     5b6:	9d e0       	ldi	r25, 0x0D	; 13
     5b8:	13 96       	adiw	r26, 0x03	; 3
     5ba:	9c 93       	st	X, r25
     5bc:	8e 93       	st	-X, r24
     5be:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     5c0:	ed 93       	st	X+, r30
     5c2:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5c4:	90 93 c5 07 	sts	0x07C5, r25	; 0x8007c5 <xMinimumEverFreeBytesRemaining+0x1>
     5c8:	80 93 c4 07 	sts	0x07C4, r24	; 0x8007c4 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5cc:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <xFreeBytesRemaining+0x1>
     5d0:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e8       	ldi	r25, 0x80	; 128
     5d8:	90 93 bf 07 	sts	0x07BF, r25	; 0x8007bf <__data_end+0x1>
     5dc:	80 93 be 07 	sts	0x07BE, r24	; 0x8007be <__data_end>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     5e0:	e0 90 be 07 	lds	r14, 0x07BE	; 0x8007be <__data_end>
     5e4:	f0 90 bf 07 	lds	r15, 0x07BF	; 0x8007bf <__data_end+0x1>
     5e8:	c7 01       	movw	r24, r14
     5ea:	8c 23       	and	r24, r28
     5ec:	9d 23       	and	r25, r29
     5ee:	89 2b       	or	r24, r25
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <pvPortMalloc+0x86>
     5f2:	75 c0       	rjmp	.+234    	; 0x6de <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5f4:	20 97       	sbiw	r28, 0x00	; 0
     5f6:	09 f4       	brne	.+2      	; 0x5fa <pvPortMalloc+0x8c>
     5f8:	75 c0       	rjmp	.+234    	; 0x6e4 <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     5fa:	9e 01       	movw	r18, r28
     5fc:	2c 5f       	subi	r18, 0xFC	; 252
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     600:	c2 17       	cp	r28, r18
     602:	d3 07       	cpc	r29, r19
     604:	08 f0       	brcs	.+2      	; 0x608 <pvPortMalloc+0x9a>
     606:	6e c0       	rjmp	.+220    	; 0x6e4 <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     608:	21 15       	cp	r18, r1
     60a:	31 05       	cpc	r19, r1
     60c:	09 f4       	brne	.+2      	; 0x610 <pvPortMalloc+0xa2>
     60e:	67 c0       	rjmp	.+206    	; 0x6de <pvPortMalloc+0x170>
     610:	00 91 c6 07 	lds	r16, 0x07C6	; 0x8007c6 <xFreeBytesRemaining>
     614:	10 91 c7 07 	lds	r17, 0x07C7	; 0x8007c7 <xFreeBytesRemaining+0x1>
     618:	02 17       	cp	r16, r18
     61a:	13 07       	cpc	r17, r19
     61c:	08 f4       	brcc	.+2      	; 0x620 <pvPortMalloc+0xb2>
     61e:	5f c0       	rjmp	.+190    	; 0x6de <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     620:	c0 91 ca 07 	lds	r28, 0x07CA	; 0x8007ca <xStart>
     624:	d0 91 cb 07 	lds	r29, 0x07CB	; 0x8007cb <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     628:	ea ec       	ldi	r30, 0xCA	; 202
     62a:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     62c:	02 c0       	rjmp	.+4      	; 0x632 <pvPortMalloc+0xc4>
     62e:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
     630:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	9b 81       	ldd	r25, Y+3	; 0x03
     636:	82 17       	cp	r24, r18
     638:	93 07       	cpc	r25, r19
     63a:	20 f4       	brcc	.+8      	; 0x644 <pvPortMalloc+0xd6>
     63c:	88 81       	ld	r24, Y
     63e:	99 81       	ldd	r25, Y+1	; 0x01
     640:	00 97       	sbiw	r24, 0x00	; 0
     642:	a9 f7       	brne	.-22     	; 0x62e <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     644:	80 91 c8 07 	lds	r24, 0x07C8	; 0x8007c8 <pxEnd>
     648:	90 91 c9 07 	lds	r25, 0x07C9	; 0x8007c9 <pxEnd+0x1>
     64c:	c8 17       	cp	r28, r24
     64e:	d9 07       	cpc	r29, r25
     650:	09 f4       	brne	.+2      	; 0x654 <pvPortMalloc+0xe6>
     652:	45 c0       	rjmp	.+138    	; 0x6de <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     654:	c0 80       	ld	r12, Z
     656:	d1 80       	ldd	r13, Z+1	; 0x01
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	c8 0e       	add	r12, r24
     65c:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     65e:	88 81       	ld	r24, Y
     660:	99 81       	ldd	r25, Y+1	; 0x01
     662:	91 83       	std	Z+1, r25	; 0x01
     664:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     666:	4a 81       	ldd	r20, Y+2	; 0x02
     668:	5b 81       	ldd	r21, Y+3	; 0x03
     66a:	42 1b       	sub	r20, r18
     66c:	53 0b       	sbc	r21, r19
     66e:	49 30       	cpi	r20, 0x09	; 9
     670:	51 05       	cpc	r21, r1
     672:	48 f0       	brcs	.+18     	; 0x686 <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     674:	ce 01       	movw	r24, r28
     676:	82 0f       	add	r24, r18
     678:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     67a:	fc 01       	movw	r30, r24
     67c:	53 83       	std	Z+3, r21	; 0x03
     67e:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     680:	3b 83       	std	Y+3, r19	; 0x03
     682:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     684:	27 df       	rcall	.-434    	; 0x4d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	9b 81       	ldd	r25, Y+3	; 0x03
     68a:	08 1b       	sub	r16, r24
     68c:	19 0b       	sbc	r17, r25
     68e:	10 93 c7 07 	sts	0x07C7, r17	; 0x8007c7 <xFreeBytesRemaining+0x1>
     692:	00 93 c6 07 	sts	0x07C6, r16	; 0x8007c6 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     696:	20 91 c4 07 	lds	r18, 0x07C4	; 0x8007c4 <xMinimumEverFreeBytesRemaining>
     69a:	30 91 c5 07 	lds	r19, 0x07C5	; 0x8007c5 <xMinimumEverFreeBytesRemaining+0x1>
     69e:	02 17       	cp	r16, r18
     6a0:	13 07       	cpc	r17, r19
     6a2:	20 f4       	brcc	.+8      	; 0x6ac <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6a4:	10 93 c5 07 	sts	0x07C5, r17	; 0x8007c5 <xMinimumEverFreeBytesRemaining+0x1>
     6a8:	00 93 c4 07 	sts	0x07C4, r16	; 0x8007c4 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     6ac:	e8 2a       	or	r14, r24
     6ae:	f9 2a       	or	r15, r25
     6b0:	fb 82       	std	Y+3, r15	; 0x03
     6b2:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     6b4:	19 82       	std	Y+1, r1	; 0x01
     6b6:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     6b8:	80 91 c2 07 	lds	r24, 0x07C2	; 0x8007c2 <xNumberOfSuccessfulAllocations>
     6bc:	90 91 c3 07 	lds	r25, 0x07C3	; 0x8007c3 <xNumberOfSuccessfulAllocations+0x1>
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	90 93 c3 07 	sts	0x07C3, r25	; 0x8007c3 <xNumberOfSuccessfulAllocations+0x1>
     6c6:	80 93 c2 07 	sts	0x07C2, r24	; 0x8007c2 <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6ca:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     6ce:	c1 14       	cp	r12, r1
     6d0:	d1 04       	cpc	r13, r1
     6d2:	59 f4       	brne	.+22     	; 0x6ea <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     6d4:	0e 94 cd 18 	call	0x319a	; 0x319a <vApplicationMallocFailedHook>
     6d8:	c1 2c       	mov	r12, r1
     6da:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
     6dc:	06 c0       	rjmp	.+12     	; 0x6ea <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6de:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     6e2:	f8 cf       	rjmp	.-16     	; 0x6d4 <pvPortMalloc+0x166>
     6e4:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     6e8:	f5 cf       	rjmp	.-22     	; 0x6d4 <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     6ea:	c6 01       	movw	r24, r12
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	08 95       	ret

000006fe <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	99 f1       	breq	.+102    	; 0x76c <vPortFree+0x6e>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     706:	fc 01       	movw	r30, r24
     708:	34 97       	sbiw	r30, 0x04	; 4
     70a:	22 81       	ldd	r18, Z+2	; 0x02
     70c:	33 81       	ldd	r19, Z+3	; 0x03
     70e:	40 91 be 07 	lds	r20, 0x07BE	; 0x8007be <__data_end>
     712:	50 91 bf 07 	lds	r21, 0x07BF	; 0x8007bf <__data_end+0x1>
     716:	b9 01       	movw	r22, r18
     718:	64 23       	and	r22, r20
     71a:	75 23       	and	r23, r21
     71c:	67 2b       	or	r22, r23
     71e:	31 f1       	breq	.+76     	; 0x76c <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     720:	60 81       	ld	r22, Z
     722:	71 81       	ldd	r23, Z+1	; 0x01
     724:	67 2b       	or	r22, r23
     726:	11 f5       	brne	.+68     	; 0x76c <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     728:	ef 01       	movw	r28, r30
     72a:	40 95       	com	r20
     72c:	50 95       	com	r21
     72e:	24 23       	and	r18, r20
     730:	35 23       	and	r19, r21
     732:	33 83       	std	Z+3, r19	; 0x03
     734:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
     736:	0e 94 52 0e 	call	0x1ca4	; 0x1ca4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     73a:	20 91 c6 07 	lds	r18, 0x07C6	; 0x8007c6 <xFreeBytesRemaining>
     73e:	30 91 c7 07 	lds	r19, 0x07C7	; 0x8007c7 <xFreeBytesRemaining+0x1>
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	9b 81       	ldd	r25, Y+3	; 0x03
     746:	82 0f       	add	r24, r18
     748:	93 1f       	adc	r25, r19
     74a:	90 93 c7 07 	sts	0x07C7, r25	; 0x8007c7 <xFreeBytesRemaining+0x1>
     74e:	80 93 c6 07 	sts	0x07C6, r24	; 0x8007c6 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     752:	ce 01       	movw	r24, r28
     754:	bf de       	rcall	.-642    	; 0x4d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     756:	80 91 c0 07 	lds	r24, 0x07C0	; 0x8007c0 <xNumberOfSuccessfulFrees>
     75a:	90 91 c1 07 	lds	r25, 0x07C1	; 0x8007c1 <xNumberOfSuccessfulFrees+0x1>
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	90 93 c1 07 	sts	0x07C1, r25	; 0x8007c1 <xNumberOfSuccessfulFrees+0x1>
     764:	80 93 c0 07 	sts	0x07C0, r24	; 0x8007c0 <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     768:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     772:	fc 01       	movw	r30, r24
     774:	03 96       	adiw	r24, 0x03	; 3
     776:	92 83       	std	Z+2, r25	; 0x02
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	4f ef       	ldi	r20, 0xFF	; 255
     77c:	5f ef       	ldi	r21, 0xFF	; 255
     77e:	ba 01       	movw	r22, r20
     780:	43 83       	std	Z+3, r20	; 0x03
     782:	54 83       	std	Z+4, r21	; 0x04
     784:	65 83       	std	Z+5, r22	; 0x05
     786:	76 83       	std	Z+6, r23	; 0x06
     788:	90 87       	std	Z+8, r25	; 0x08
     78a:	87 83       	std	Z+7, r24	; 0x07
     78c:	92 87       	std	Z+10, r25	; 0x0a
     78e:	81 87       	std	Z+9, r24	; 0x09
     790:	10 82       	st	Z, r1
     792:	08 95       	ret

00000794 <vListInitialiseItem>:
     794:	fc 01       	movw	r30, r24
     796:	13 86       	std	Z+11, r1	; 0x0b
     798:	12 86       	std	Z+10, r1	; 0x0a
     79a:	08 95       	ret

0000079c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7a6:	08 81       	ld	r16, Y
     7a8:	19 81       	ldd	r17, Y+1	; 0x01
     7aa:	2a 81       	ldd	r18, Y+2	; 0x02
     7ac:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7ae:	0f 3f       	cpi	r16, 0xFF	; 255
     7b0:	4f ef       	ldi	r20, 0xFF	; 255
     7b2:	14 07       	cpc	r17, r20
     7b4:	24 07       	cpc	r18, r20
     7b6:	34 07       	cpc	r19, r20
     7b8:	21 f4       	brne	.+8      	; 0x7c2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7ba:	fc 01       	movw	r30, r24
     7bc:	a1 85       	ldd	r26, Z+9	; 0x09
     7be:	b2 85       	ldd	r27, Z+10	; 0x0a
     7c0:	11 c0       	rjmp	.+34     	; 0x7e4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7c2:	dc 01       	movw	r26, r24
     7c4:	13 96       	adiw	r26, 0x03	; 3
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <vListInsert+0x2e>
     7c8:	df 01       	movw	r26, r30
     7ca:	14 96       	adiw	r26, 0x04	; 4
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	15 97       	sbiw	r26, 0x05	; 5
     7d2:	40 81       	ld	r20, Z
     7d4:	51 81       	ldd	r21, Z+1	; 0x01
     7d6:	62 81       	ldd	r22, Z+2	; 0x02
     7d8:	73 81       	ldd	r23, Z+3	; 0x03
     7da:	04 17       	cp	r16, r20
     7dc:	15 07       	cpc	r17, r21
     7de:	26 07       	cpc	r18, r22
     7e0:	37 07       	cpc	r19, r23
     7e2:	90 f7       	brcc	.-28     	; 0x7c8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7e4:	14 96       	adiw	r26, 0x04	; 4
     7e6:	ed 91       	ld	r30, X+
     7e8:	fc 91       	ld	r31, X
     7ea:	15 97       	sbiw	r26, 0x05	; 5
     7ec:	fd 83       	std	Y+5, r31	; 0x05
     7ee:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7f0:	d7 83       	std	Z+7, r29	; 0x07
     7f2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     7f4:	bf 83       	std	Y+7, r27	; 0x07
     7f6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     7f8:	15 96       	adiw	r26, 0x05	; 5
     7fa:	dc 93       	st	X, r29
     7fc:	ce 93       	st	-X, r28
     7fe:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     800:	9b 87       	std	Y+11, r25	; 0x0b
     802:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     804:	fc 01       	movw	r30, r24
     806:	20 81       	ld	r18, Z
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	20 83       	st	Z, r18
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     81c:	a2 85       	ldd	r26, Z+10	; 0x0a
     81e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     820:	c4 81       	ldd	r28, Z+4	; 0x04
     822:	d5 81       	ldd	r29, Z+5	; 0x05
     824:	86 81       	ldd	r24, Z+6	; 0x06
     826:	97 81       	ldd	r25, Z+7	; 0x07
     828:	9f 83       	std	Y+7, r25	; 0x07
     82a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     82c:	c6 81       	ldd	r28, Z+6	; 0x06
     82e:	d7 81       	ldd	r29, Z+7	; 0x07
     830:	84 81       	ldd	r24, Z+4	; 0x04
     832:	95 81       	ldd	r25, Z+5	; 0x05
     834:	9d 83       	std	Y+5, r25	; 0x05
     836:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     838:	11 96       	adiw	r26, 0x01	; 1
     83a:	8d 91       	ld	r24, X+
     83c:	9c 91       	ld	r25, X
     83e:	12 97       	sbiw	r26, 0x02	; 2
     840:	e8 17       	cp	r30, r24
     842:	f9 07       	cpc	r31, r25
     844:	31 f4       	brne	.+12     	; 0x852 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     846:	86 81       	ldd	r24, Z+6	; 0x06
     848:	97 81       	ldd	r25, Z+7	; 0x07
     84a:	12 96       	adiw	r26, 0x02	; 2
     84c:	9c 93       	st	X, r25
     84e:	8e 93       	st	-X, r24
     850:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     852:	13 86       	std	Z+11, r1	; 0x0b
     854:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     856:	8c 91       	ld	r24, X
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     85c:	8c 91       	ld	r24, X
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     864:	fc 01       	movw	r30, r24
     866:	60 83       	st	Z, r22
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	70 83       	st	Z, r23
     86c:	31 97       	sbiw	r30, 0x01	; 1
     86e:	10 82       	st	Z, r1
     870:	31 97       	sbiw	r30, 0x01	; 1
     872:	10 82       	st	Z, r1
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	20 e8       	ldi	r18, 0x80	; 128
     878:	20 83       	st	Z, r18
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	10 82       	st	Z, r1
     87e:	31 97       	sbiw	r30, 0x01	; 1
     880:	10 82       	st	Z, r1
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	10 82       	st	Z, r1
     886:	77 97       	sbiw	r30, 0x17	; 23
     888:	40 83       	st	Z, r20
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	50 83       	st	Z, r21
     88e:	86 97       	sbiw	r24, 0x26	; 38
     890:	08 95       	ret

00000892 <xPortStartScheduler>:
     892:	a8 95       	wdr
     894:	90 ec       	ldi	r25, 0xC0	; 192
     896:	88 e1       	ldi	r24, 0x18	; 24
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	a8 95       	wdr
     89e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     8a8:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
     8ac:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
     8b0:	cd 91       	ld	r28, X+
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	dd 91       	ld	r29, X+
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	ff 91       	pop	r31
     8ba:	ef 91       	pop	r30
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	bf 91       	pop	r27
     8c2:	af 91       	pop	r26
     8c4:	9f 91       	pop	r25
     8c6:	8f 91       	pop	r24
     8c8:	7f 91       	pop	r23
     8ca:	6f 91       	pop	r22
     8cc:	5f 91       	pop	r21
     8ce:	4f 91       	pop	r20
     8d0:	3f 91       	pop	r19
     8d2:	2f 91       	pop	r18
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	8f 90       	pop	r8
     8e8:	7f 90       	pop	r7
     8ea:	6f 90       	pop	r6
     8ec:	5f 90       	pop	r5
     8ee:	4f 90       	pop	r4
     8f0:	3f 90       	pop	r3
     8f2:	2f 90       	pop	r2
     8f4:	1f 90       	pop	r1
     8f6:	0f 90       	pop	r0
     8f8:	0c be       	out	0x3c, r0	; 60
     8fa:	0f 90       	pop	r0
     8fc:	0b be       	out	0x3b, r0	; 59
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	08 95       	ret
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	08 95       	ret

0000090a <vPortYield>:
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	0f 92       	push	r0
     912:	0b b6       	in	r0, 0x3b	; 59
     914:	0f 92       	push	r0
     916:	0c b6       	in	r0, 0x3c	; 60
     918:	0f 92       	push	r0
     91a:	1f 92       	push	r1
     91c:	11 24       	eor	r1, r1
     91e:	2f 92       	push	r2
     920:	3f 92       	push	r3
     922:	4f 92       	push	r4
     924:	5f 92       	push	r5
     926:	6f 92       	push	r6
     928:	7f 92       	push	r7
     92a:	8f 92       	push	r8
     92c:	9f 92       	push	r9
     92e:	af 92       	push	r10
     930:	bf 92       	push	r11
     932:	cf 92       	push	r12
     934:	df 92       	push	r13
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	4f 93       	push	r20
     944:	5f 93       	push	r21
     946:	6f 93       	push	r22
     948:	7f 93       	push	r23
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	ef 93       	push	r30
     958:	ff 93       	push	r31
     95a:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
     95e:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
     962:	0d b6       	in	r0, 0x3d	; 61
     964:	0d 92       	st	X+, r0
     966:	0e b6       	in	r0, 0x3e	; 62
     968:	0d 92       	st	X+, r0
     96a:	0e 94 ff 10 	call	0x21fe	; 0x21fe <vTaskSwitchContext>
     96e:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
     972:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
     976:	cd 91       	ld	r28, X+
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	dd 91       	ld	r29, X+
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	bf 90       	pop	r11
     9a8:	af 90       	pop	r10
     9aa:	9f 90       	pop	r9
     9ac:	8f 90       	pop	r8
     9ae:	7f 90       	pop	r7
     9b0:	6f 90       	pop	r6
     9b2:	5f 90       	pop	r5
     9b4:	4f 90       	pop	r4
     9b6:	3f 90       	pop	r3
     9b8:	2f 90       	pop	r2
     9ba:	1f 90       	pop	r1
     9bc:	0f 90       	pop	r0
     9be:	0c be       	out	0x3c, r0	; 60
     9c0:	0f 90       	pop	r0
     9c2:	0b be       	out	0x3b, r0	; 59
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0
     9ca:	08 95       	ret

000009cc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	0f 92       	push	r0
     9d4:	0b b6       	in	r0, 0x3b	; 59
     9d6:	0f 92       	push	r0
     9d8:	0c b6       	in	r0, 0x3c	; 60
     9da:	0f 92       	push	r0
     9dc:	1f 92       	push	r1
     9de:	11 24       	eor	r1, r1
     9e0:	2f 92       	push	r2
     9e2:	3f 92       	push	r3
     9e4:	4f 92       	push	r4
     9e6:	5f 92       	push	r5
     9e8:	6f 92       	push	r6
     9ea:	7f 92       	push	r7
     9ec:	8f 92       	push	r8
     9ee:	9f 92       	push	r9
     9f0:	af 92       	push	r10
     9f2:	bf 92       	push	r11
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	2f 93       	push	r18
     a02:	3f 93       	push	r19
     a04:	4f 93       	push	r20
     a06:	5f 93       	push	r21
     a08:	6f 93       	push	r22
     a0a:	7f 93       	push	r23
     a0c:	8f 93       	push	r24
     a0e:	9f 93       	push	r25
     a10:	af 93       	push	r26
     a12:	bf 93       	push	r27
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ef 93       	push	r30
     a1a:	ff 93       	push	r31
     a1c:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
     a20:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
     a24:	0d b6       	in	r0, 0x3d	; 61
     a26:	0d 92       	st	X+, r0
     a28:	0e b6       	in	r0, 0x3e	; 62
     a2a:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a2c:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a2e:	0e 94 66 0e 	call	0x1ccc	; 0x1ccc <xTaskIncrementTick>
     a32:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a34:	0e 94 ff 10 	call	0x21fe	; 0x21fe <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     a38:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
     a3c:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
     a40:	cd 91       	ld	r28, X+
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	dd 91       	ld	r29, X+
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	ff 91       	pop	r31
     a4a:	ef 91       	pop	r30
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	7f 90       	pop	r7
     a7a:	6f 90       	pop	r6
     a7c:	5f 90       	pop	r5
     a7e:	4f 90       	pop	r4
     a80:	3f 90       	pop	r3
     a82:	2f 90       	pop	r2
     a84:	1f 90       	pop	r1
     a86:	0f 90       	pop	r0
     a88:	0c be       	out	0x3c, r0	; 60
     a8a:	0f 90       	pop	r0
     a8c:	0b be       	out	0x3b, r0	; 59
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     a94:	08 95       	ret

00000a96 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     a96:	9a df       	rcall	.-204    	; 0x9cc <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     a98:	18 95       	reti

00000a9a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	0f 92       	push	r0
     aa0:	fc 01       	movw	r30, r24
     aa2:	96 8d       	ldd	r25, Z+30	; 0x1e
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	91 11       	cpse	r25, r1
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret

00000ab0 <prvCopyDataToQueue>:
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	ec 01       	movw	r28, r24
     aba:	04 2f       	mov	r16, r20
     abc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     abe:	48 a1       	ldd	r20, Y+32	; 0x20
     ac0:	41 11       	cpse	r20, r1
     ac2:	0c c0       	rjmp	.+24     	; 0xadc <prvCopyDataToQueue+0x2c>
     ac4:	88 81       	ld	r24, Y
     ac6:	99 81       	ldd	r25, Y+1	; 0x01
     ac8:	89 2b       	or	r24, r25
     aca:	09 f0       	breq	.+2      	; 0xace <prvCopyDataToQueue+0x1e>
     acc:	42 c0       	rjmp	.+132    	; 0xb52 <prvCopyDataToQueue+0xa2>
     ace:	8c 81       	ldd	r24, Y+4	; 0x04
     ad0:	9d 81       	ldd	r25, Y+5	; 0x05
     ad2:	0e 94 97 13 	call	0x272e	; 0x272e <xTaskPriorityDisinherit>
     ad6:	1d 82       	std	Y+5, r1	; 0x05
     ad8:	1c 82       	std	Y+4, r1	; 0x04
     ada:	42 c0       	rjmp	.+132    	; 0xb60 <prvCopyDataToQueue+0xb0>
     adc:	01 11       	cpse	r16, r1
     ade:	17 c0       	rjmp	.+46     	; 0xb0e <prvCopyDataToQueue+0x5e>
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	8a 81       	ldd	r24, Y+2	; 0x02
     ae4:	9b 81       	ldd	r25, Y+3	; 0x03
     ae6:	0e 94 8b 31 	call	0x6316	; 0x6316 <memcpy>
     aea:	28 a1       	ldd	r18, Y+32	; 0x20
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	9b 81       	ldd	r25, Y+3	; 0x03
     af0:	82 0f       	add	r24, r18
     af2:	91 1d       	adc	r25, r1
     af4:	9b 83       	std	Y+3, r25	; 0x03
     af6:	8a 83       	std	Y+2, r24	; 0x02
     af8:	2c 81       	ldd	r18, Y+4	; 0x04
     afa:	3d 81       	ldd	r19, Y+5	; 0x05
     afc:	82 17       	cp	r24, r18
     afe:	93 07       	cpc	r25, r19
     b00:	50 f1       	brcs	.+84     	; 0xb56 <prvCopyDataToQueue+0xa6>
     b02:	88 81       	ld	r24, Y
     b04:	99 81       	ldd	r25, Y+1	; 0x01
     b06:	9b 83       	std	Y+3, r25	; 0x03
     b08:	8a 83       	std	Y+2, r24	; 0x02
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	29 c0       	rjmp	.+82     	; 0xb60 <prvCopyDataToQueue+0xb0>
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	8e 81       	ldd	r24, Y+6	; 0x06
     b12:	9f 81       	ldd	r25, Y+7	; 0x07
     b14:	0e 94 8b 31 	call	0x6316	; 0x6316 <memcpy>
     b18:	88 a1       	ldd	r24, Y+32	; 0x20
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	91 95       	neg	r25
     b1e:	81 95       	neg	r24
     b20:	91 09       	sbc	r25, r1
     b22:	2e 81       	ldd	r18, Y+6	; 0x06
     b24:	3f 81       	ldd	r19, Y+7	; 0x07
     b26:	28 0f       	add	r18, r24
     b28:	39 1f       	adc	r19, r25
     b2a:	3f 83       	std	Y+7, r19	; 0x07
     b2c:	2e 83       	std	Y+6, r18	; 0x06
     b2e:	48 81       	ld	r20, Y
     b30:	59 81       	ldd	r21, Y+1	; 0x01
     b32:	24 17       	cp	r18, r20
     b34:	35 07       	cpc	r19, r21
     b36:	30 f4       	brcc	.+12     	; 0xb44 <prvCopyDataToQueue+0x94>
     b38:	2c 81       	ldd	r18, Y+4	; 0x04
     b3a:	3d 81       	ldd	r19, Y+5	; 0x05
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	9f 83       	std	Y+7, r25	; 0x07
     b42:	8e 83       	std	Y+6, r24	; 0x06
     b44:	02 30       	cpi	r16, 0x02	; 2
     b46:	49 f4       	brne	.+18     	; 0xb5a <prvCopyDataToQueue+0xaa>
     b48:	11 23       	and	r17, r17
     b4a:	49 f0       	breq	.+18     	; 0xb5e <prvCopyDataToQueue+0xae>
     b4c:	11 50       	subi	r17, 0x01	; 1
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	07 c0       	rjmp	.+14     	; 0xb60 <prvCopyDataToQueue+0xb0>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <prvCopyDataToQueue+0xb0>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <prvCopyDataToQueue+0xb0>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <prvCopyDataToQueue+0xb0>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	1f 5f       	subi	r17, 0xFF	; 255
     b62:	1e 8f       	std	Y+30, r17	; 0x1e
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	08 95       	ret

00000b6e <prvCopyDataFromQueue>:
     b6e:	fc 01       	movw	r30, r24
     b70:	40 a1       	ldd	r20, Z+32	; 0x20
     b72:	44 23       	and	r20, r20
     b74:	a9 f0       	breq	.+42     	; 0xba0 <prvCopyDataFromQueue+0x32>
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	26 81       	ldd	r18, Z+6	; 0x06
     b7a:	37 81       	ldd	r19, Z+7	; 0x07
     b7c:	24 0f       	add	r18, r20
     b7e:	35 1f       	adc	r19, r21
     b80:	37 83       	std	Z+7, r19	; 0x07
     b82:	26 83       	std	Z+6, r18	; 0x06
     b84:	84 81       	ldd	r24, Z+4	; 0x04
     b86:	95 81       	ldd	r25, Z+5	; 0x05
     b88:	28 17       	cp	r18, r24
     b8a:	39 07       	cpc	r19, r25
     b8c:	20 f0       	brcs	.+8      	; 0xb96 <prvCopyDataFromQueue+0x28>
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
     b92:	97 83       	std	Z+7, r25	; 0x07
     b94:	86 83       	std	Z+6, r24	; 0x06
     b96:	cb 01       	movw	r24, r22
     b98:	66 81       	ldd	r22, Z+6	; 0x06
     b9a:	77 81       	ldd	r23, Z+7	; 0x07
     b9c:	0c 94 8b 31 	jmp	0x6316	; 0x6316 <memcpy>
     ba0:	08 95       	ret

00000ba2 <prvUnlockQueue>:
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	8c 01       	movw	r16, r24
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	0f 92       	push	r0
     bb4:	fc 01       	movw	r30, r24
     bb6:	c2 a1       	ldd	r28, Z+34	; 0x22
     bb8:	1c 16       	cp	r1, r28
     bba:	ac f4       	brge	.+42     	; 0xbe6 <prvUnlockQueue+0x44>
     bbc:	83 89       	ldd	r24, Z+19	; 0x13
     bbe:	81 11       	cpse	r24, r1
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <prvUnlockQueue+0x2c>
     bc2:	11 c0       	rjmp	.+34     	; 0xbe6 <prvUnlockQueue+0x44>
     bc4:	f8 01       	movw	r30, r16
     bc6:	83 89       	ldd	r24, Z+19	; 0x13
     bc8:	81 11       	cpse	r24, r1
     bca:	05 c0       	rjmp	.+10     	; 0xbd6 <prvUnlockQueue+0x34>
     bcc:	0c c0       	rjmp	.+24     	; 0xbe6 <prvUnlockQueue+0x44>
     bce:	78 01       	movw	r14, r16
     bd0:	f3 e1       	ldi	r31, 0x13	; 19
     bd2:	ef 0e       	add	r14, r31
     bd4:	f1 1c       	adc	r15, r1
     bd6:	c7 01       	movw	r24, r14
     bd8:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     bdc:	81 11       	cpse	r24, r1
     bde:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <vTaskMissedYield>
     be2:	c1 50       	subi	r28, 0x01	; 1
     be4:	79 f7       	brne	.-34     	; 0xbc4 <prvUnlockQueue+0x22>
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	f8 01       	movw	r30, r16
     bea:	82 a3       	std	Z+34, r24	; 0x22
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	0f 92       	push	r0
     bf6:	c1 a1       	ldd	r28, Z+33	; 0x21
     bf8:	1c 16       	cp	r1, r28
     bfa:	ac f4       	brge	.+42     	; 0xc26 <prvUnlockQueue+0x84>
     bfc:	80 85       	ldd	r24, Z+8	; 0x08
     bfe:	81 11       	cpse	r24, r1
     c00:	06 c0       	rjmp	.+12     	; 0xc0e <prvUnlockQueue+0x6c>
     c02:	11 c0       	rjmp	.+34     	; 0xc26 <prvUnlockQueue+0x84>
     c04:	f8 01       	movw	r30, r16
     c06:	80 85       	ldd	r24, Z+8	; 0x08
     c08:	81 11       	cpse	r24, r1
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <prvUnlockQueue+0x74>
     c0c:	0c c0       	rjmp	.+24     	; 0xc26 <prvUnlockQueue+0x84>
     c0e:	78 01       	movw	r14, r16
     c10:	f8 e0       	ldi	r31, 0x08	; 8
     c12:	ef 0e       	add	r14, r31
     c14:	f1 1c       	adc	r15, r1
     c16:	c7 01       	movw	r24, r14
     c18:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     c1c:	81 11       	cpse	r24, r1
     c1e:	0e 94 f9 12 	call	0x25f2	; 0x25f2 <vTaskMissedYield>
     c22:	c1 50       	subi	r28, 0x01	; 1
     c24:	79 f7       	brne	.-34     	; 0xc04 <prvUnlockQueue+0x62>
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	f8 01       	movw	r30, r16
     c2a:	81 a3       	std	Z+33, r24	; 0x21
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	08 95       	ret

00000c3c <xQueueGenericReset>:
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	0f 92       	push	r0
     c48:	e8 81       	ld	r30, Y
     c4a:	f9 81       	ldd	r31, Y+1	; 0x01
     c4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c4e:	28 a1       	ldd	r18, Y+32	; 0x20
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	82 9f       	mul	r24, r18
     c56:	a0 01       	movw	r20, r0
     c58:	83 9f       	mul	r24, r19
     c5a:	50 0d       	add	r21, r0
     c5c:	92 9f       	mul	r25, r18
     c5e:	50 0d       	add	r21, r0
     c60:	11 24       	eor	r1, r1
     c62:	4e 0f       	add	r20, r30
     c64:	5f 1f       	adc	r21, r31
     c66:	5d 83       	std	Y+5, r21	; 0x05
     c68:	4c 83       	std	Y+4, r20	; 0x04
     c6a:	1e 8e       	std	Y+30, r1	; 0x1e
     c6c:	fb 83       	std	Y+3, r31	; 0x03
     c6e:	ea 83       	std	Y+2, r30	; 0x02
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	82 9f       	mul	r24, r18
     c74:	a0 01       	movw	r20, r0
     c76:	83 9f       	mul	r24, r19
     c78:	50 0d       	add	r21, r0
     c7a:	92 9f       	mul	r25, r18
     c7c:	50 0d       	add	r21, r0
     c7e:	11 24       	eor	r1, r1
     c80:	cf 01       	movw	r24, r30
     c82:	84 0f       	add	r24, r20
     c84:	95 1f       	adc	r25, r21
     c86:	9f 83       	std	Y+7, r25	; 0x07
     c88:	8e 83       	std	Y+6, r24	; 0x06
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	89 a3       	std	Y+33, r24	; 0x21
     c8e:	8a a3       	std	Y+34, r24	; 0x22
     c90:	61 11       	cpse	r22, r1
     c92:	0b c0       	rjmp	.+22     	; 0xcaa <xQueueGenericReset+0x6e>
     c94:	88 85       	ldd	r24, Y+8	; 0x08
     c96:	88 23       	and	r24, r24
     c98:	71 f0       	breq	.+28     	; 0xcb6 <xQueueGenericReset+0x7a>
     c9a:	ce 01       	movw	r24, r28
     c9c:	08 96       	adiw	r24, 0x08	; 8
     c9e:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     ca2:	88 23       	and	r24, r24
     ca4:	41 f0       	breq	.+16     	; 0xcb6 <xQueueGenericReset+0x7a>
     ca6:	31 de       	rcall	.-926    	; 0x90a <vPortYield>
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <xQueueGenericReset+0x7a>
     caa:	ce 01       	movw	r24, r28
     cac:	08 96       	adiw	r24, 0x08	; 8
     cae:	61 dd       	rcall	.-1342   	; 0x772 <vListInitialise>
     cb0:	ce 01       	movw	r24, r28
     cb2:	43 96       	adiw	r24, 0x13	; 19
     cb4:	5e dd       	rcall	.-1348   	; 0x772 <vListInitialise>
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <xQueueGenericCreate>:
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	08 2f       	mov	r16, r24
     ccc:	16 2f       	mov	r17, r22
     cce:	86 9f       	mul	r24, r22
     cd0:	c0 01       	movw	r24, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	83 96       	adiw	r24, 0x23	; 35
     cd6:	4b dc       	rcall	.-1898   	; 0x56e <pvPortMalloc>
     cd8:	ec 01       	movw	r28, r24
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	69 f0       	breq	.+26     	; 0xcf8 <xQueueGenericCreate+0x36>
     cde:	11 11       	cpse	r17, r1
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <xQueueGenericCreate+0x26>
     ce2:	99 83       	std	Y+1, r25	; 0x01
     ce4:	88 83       	st	Y, r24
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <xQueueGenericCreate+0x2c>
     ce8:	83 96       	adiw	r24, 0x23	; 35
     cea:	99 83       	std	Y+1, r25	; 0x01
     cec:	88 83       	st	Y, r24
     cee:	0f 8f       	std	Y+31, r16	; 0x1f
     cf0:	18 a3       	std	Y+32, r17	; 0x20
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	ce 01       	movw	r24, r28
     cf6:	a2 df       	rcall	.-188    	; 0xc3c <xQueueGenericReset>
     cf8:	ce 01       	movw	r24, r28
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <xQueueGenericSend>:
     d04:	9f 92       	push	r9
     d06:	af 92       	push	r10
     d08:	bf 92       	push	r11
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	29 97       	sbiw	r28, 0x09	; 9
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	7c 01       	movw	r14, r24
     d2c:	5b 01       	movw	r10, r22
     d2e:	2e 83       	std	Y+6, r18	; 0x06
     d30:	3f 83       	std	Y+7, r19	; 0x07
     d32:	48 87       	std	Y+8, r20	; 0x08
     d34:	59 87       	std	Y+9, r21	; 0x09
     d36:	10 e0       	ldi	r17, 0x00	; 0
     d38:	99 24       	eor	r9, r9
     d3a:	93 94       	inc	r9
     d3c:	6c 01       	movw	r12, r24
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	c8 0e       	add	r12, r24
     d42:	d1 1c       	adc	r13, r1
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	0f 92       	push	r0
     d4a:	f7 01       	movw	r30, r14
     d4c:	96 8d       	ldd	r25, Z+30	; 0x1e
     d4e:	87 8d       	ldd	r24, Z+31	; 0x1f
     d50:	98 17       	cp	r25, r24
     d52:	10 f0       	brcs	.+4      	; 0xd58 <xQueueGenericSend+0x54>
     d54:	02 30       	cpi	r16, 0x02	; 2
     d56:	b1 f4       	brne	.+44     	; 0xd84 <xQueueGenericSend+0x80>
     d58:	40 2f       	mov	r20, r16
     d5a:	b5 01       	movw	r22, r10
     d5c:	c7 01       	movw	r24, r14
     d5e:	a8 de       	rcall	.-688    	; 0xab0 <prvCopyDataToQueue>
     d60:	f7 01       	movw	r30, r14
     d62:	93 89       	ldd	r25, Z+19	; 0x13
     d64:	99 23       	and	r25, r25
     d66:	41 f0       	breq	.+16     	; 0xd78 <xQueueGenericSend+0x74>
     d68:	c7 01       	movw	r24, r14
     d6a:	43 96       	adiw	r24, 0x13	; 19
     d6c:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     d70:	88 23       	and	r24, r24
     d72:	21 f0       	breq	.+8      	; 0xd7c <xQueueGenericSend+0x78>
     d74:	ca dd       	rcall	.-1132   	; 0x90a <vPortYield>
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <xQueueGenericSend+0x78>
     d78:	81 11       	cpse	r24, r1
     d7a:	c7 dd       	rcall	.-1138   	; 0x90a <vPortYield>
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	51 c0       	rjmp	.+162    	; 0xe26 <xQueueGenericSend+0x122>
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	9f 81       	ldd	r25, Y+7	; 0x07
     d88:	a8 85       	ldd	r26, Y+8	; 0x08
     d8a:	b9 85       	ldd	r27, Y+9	; 0x09
     d8c:	89 2b       	or	r24, r25
     d8e:	8a 2b       	or	r24, r26
     d90:	8b 2b       	or	r24, r27
     d92:	21 f4       	brne	.+8      	; 0xd9c <xQueueGenericSend+0x98>
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	45 c0       	rjmp	.+138    	; 0xe26 <xQueueGenericSend+0x122>
     d9c:	11 11       	cpse	r17, r1
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <xQueueGenericSend+0xa6>
     da0:	ce 01       	movw	r24, r28
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	0e 94 8f 12 	call	0x251e	; 0x251e <vTaskInternalSetTimeOutState>
     da8:	19 2d       	mov	r17, r9
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	7a d7       	rcall	.+3828   	; 0x1ca4 <vTaskSuspendAll>
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	0f 92       	push	r0
     db6:	f7 01       	movw	r30, r14
     db8:	81 a1       	ldd	r24, Z+33	; 0x21
     dba:	8f 3f       	cpi	r24, 0xFF	; 255
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <xQueueGenericSend+0xbc>
     dbe:	11 a2       	std	Z+33, r1	; 0x21
     dc0:	f7 01       	movw	r30, r14
     dc2:	82 a1       	ldd	r24, Z+34	; 0x22
     dc4:	8f 3f       	cpi	r24, 0xFF	; 255
     dc6:	09 f4       	brne	.+2      	; 0xdca <xQueueGenericSend+0xc6>
     dc8:	12 a2       	std	Z+34, r1	; 0x22
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	be 01       	movw	r22, r28
     dd0:	6a 5f       	subi	r22, 0xFA	; 250
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	ce 01       	movw	r24, r28
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	0e 94 a0 12 	call	0x2540	; 0x2540 <xTaskCheckForTimeOut>
     ddc:	81 11       	cpse	r24, r1
     dde:	1e c0       	rjmp	.+60     	; 0xe1c <xQueueGenericSend+0x118>
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	0f 92       	push	r0
     de6:	f7 01       	movw	r30, r14
     de8:	96 8d       	ldd	r25, Z+30	; 0x1e
     dea:	87 8d       	ldd	r24, Z+31	; 0x1f
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	98 13       	cpse	r25, r24
     df2:	0f c0       	rjmp	.+30     	; 0xe12 <xQueueGenericSend+0x10e>
     df4:	4e 81       	ldd	r20, Y+6	; 0x06
     df6:	5f 81       	ldd	r21, Y+7	; 0x07
     df8:	68 85       	ldd	r22, Y+8	; 0x08
     dfa:	79 85       	ldd	r23, Y+9	; 0x09
     dfc:	c6 01       	movw	r24, r12
     dfe:	0e 94 70 11 	call	0x22e0	; 0x22e0 <vTaskPlaceOnEventList>
     e02:	c7 01       	movw	r24, r14
     e04:	ce de       	rcall	.-612    	; 0xba2 <prvUnlockQueue>
     e06:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     e0a:	81 11       	cpse	r24, r1
     e0c:	9b cf       	rjmp	.-202    	; 0xd44 <xQueueGenericSend+0x40>
     e0e:	7d dd       	rcall	.-1286   	; 0x90a <vPortYield>
     e10:	99 cf       	rjmp	.-206    	; 0xd44 <xQueueGenericSend+0x40>
     e12:	c7 01       	movw	r24, r14
     e14:	c6 de       	rcall	.-628    	; 0xba2 <prvUnlockQueue>
     e16:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     e1a:	94 cf       	rjmp	.-216    	; 0xd44 <xQueueGenericSend+0x40>
     e1c:	c7 01       	movw	r24, r14
     e1e:	c1 de       	rcall	.-638    	; 0xba2 <prvUnlockQueue>
     e20:	0e 94 96 0f 	call	0x1f2c	; 0x1f2c <xTaskResumeAll>
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	29 96       	adiw	r28, 0x09	; 9
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	cf 90       	pop	r12
     e42:	bf 90       	pop	r11
     e44:	af 90       	pop	r10
     e46:	9f 90       	pop	r9
     e48:	08 95       	ret

00000e4a <xQueueCreateMutex>:
     e4a:	0f 93       	push	r16
     e4c:	cf 93       	push	r28
     e4e:	df 93       	push	r29
     e50:	48 2f       	mov	r20, r24
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	81 e0       	ldi	r24, 0x01	; 1
     e56:	35 df       	rcall	.-406    	; 0xcc2 <xQueueGenericCreate>
     e58:	ec 01       	movw	r28, r24
     e5a:	00 97       	sbiw	r24, 0x00	; 0
     e5c:	61 f0       	breq	.+24     	; 0xe76 <xQueueCreateMutex+0x2c>
     e5e:	1d 82       	std	Y+5, r1	; 0x05
     e60:	1c 82       	std	Y+4, r1	; 0x04
     e62:	19 82       	std	Y+1, r1	; 0x01
     e64:	18 82       	st	Y, r1
     e66:	1e 82       	std	Y+6, r1	; 0x06
     e68:	00 e0       	ldi	r16, 0x00	; 0
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	a9 01       	movw	r20, r18
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	70 e0       	ldi	r23, 0x00	; 0
     e74:	47 df       	rcall	.-370    	; 0xd04 <xQueueGenericSend>
     e76:	ce 01       	movw	r24, r28
     e78:	df 91       	pop	r29
     e7a:	cf 91       	pop	r28
     e7c:	0f 91       	pop	r16
     e7e:	08 95       	ret

00000e80 <xQueueGenericSendFromISR>:
     e80:	ef 92       	push	r14
     e82:	ff 92       	push	r15
     e84:	0f 93       	push	r16
     e86:	1f 93       	push	r17
     e88:	cf 93       	push	r28
     e8a:	df 93       	push	r29
     e8c:	8a 01       	movw	r16, r20
     e8e:	fc 01       	movw	r30, r24
     e90:	56 8d       	ldd	r21, Z+30	; 0x1e
     e92:	37 8d       	ldd	r19, Z+31	; 0x1f
     e94:	53 17       	cp	r21, r19
     e96:	10 f0       	brcs	.+4      	; 0xe9c <xQueueGenericSendFromISR+0x1c>
     e98:	22 30       	cpi	r18, 0x02	; 2
     e9a:	f9 f4       	brne	.+62     	; 0xeda <xQueueGenericSendFromISR+0x5a>
     e9c:	42 2f       	mov	r20, r18
     e9e:	78 01       	movw	r14, r16
     ea0:	ec 01       	movw	r28, r24
     ea2:	1a a1       	ldd	r17, Y+34	; 0x22
     ea4:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea6:	ce 01       	movw	r24, r28
     ea8:	03 de       	rcall	.-1018   	; 0xab0 <prvCopyDataToQueue>
     eaa:	1f 3f       	cpi	r17, 0xFF	; 255
     eac:	81 f4       	brne	.+32     	; 0xece <xQueueGenericSendFromISR+0x4e>
     eae:	8b 89       	ldd	r24, Y+19	; 0x13
     eb0:	88 23       	and	r24, r24
     eb2:	a9 f0       	breq	.+42     	; 0xede <xQueueGenericSendFromISR+0x5e>
     eb4:	ce 01       	movw	r24, r28
     eb6:	43 96       	adiw	r24, 0x13	; 19
     eb8:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     ebc:	88 23       	and	r24, r24
     ebe:	89 f0       	breq	.+34     	; 0xee2 <xQueueGenericSendFromISR+0x62>
     ec0:	e1 14       	cp	r14, r1
     ec2:	f1 04       	cpc	r15, r1
     ec4:	81 f0       	breq	.+32     	; 0xee6 <xQueueGenericSendFromISR+0x66>
     ec6:	81 e0       	ldi	r24, 0x01	; 1
     ec8:	f7 01       	movw	r30, r14
     eca:	80 83       	st	Z, r24
     ecc:	0d c0       	rjmp	.+26     	; 0xee8 <xQueueGenericSendFromISR+0x68>
     ece:	ff 24       	eor	r15, r15
     ed0:	f3 94       	inc	r15
     ed2:	f1 0e       	add	r15, r17
     ed4:	fa a2       	std	Y+34, r15	; 0x22
     ed6:	81 e0       	ldi	r24, 0x01	; 1
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <xQueueGenericSendFromISR+0x68>
     eda:	80 e0       	ldi	r24, 0x00	; 0
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <xQueueGenericSendFromISR+0x68>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <xQueueGenericSendFromISR+0x68>
     ee2:	81 e0       	ldi	r24, 0x01	; 1
     ee4:	01 c0       	rjmp	.+2      	; 0xee8 <xQueueGenericSendFromISR+0x68>
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	df 91       	pop	r29
     eea:	cf 91       	pop	r28
     eec:	1f 91       	pop	r17
     eee:	0f 91       	pop	r16
     ef0:	ff 90       	pop	r15
     ef2:	ef 90       	pop	r14
     ef4:	08 95       	ret

00000ef6 <xQueueReceive>:
     ef6:	9f 92       	push	r9
     ef8:	af 92       	push	r10
     efa:	bf 92       	push	r11
     efc:	cf 92       	push	r12
     efe:	df 92       	push	r13
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
     f0c:	cd b7       	in	r28, 0x3d	; 61
     f0e:	de b7       	in	r29, 0x3e	; 62
     f10:	29 97       	sbiw	r28, 0x09	; 9
     f12:	0f b6       	in	r0, 0x3f	; 63
     f14:	f8 94       	cli
     f16:	de bf       	out	0x3e, r29	; 62
     f18:	0f be       	out	0x3f, r0	; 63
     f1a:	cd bf       	out	0x3d, r28	; 61
     f1c:	8c 01       	movw	r16, r24
     f1e:	5b 01       	movw	r10, r22
     f20:	2e 83       	std	Y+6, r18	; 0x06
     f22:	3f 83       	std	Y+7, r19	; 0x07
     f24:	48 87       	std	Y+8, r20	; 0x08
     f26:	59 87       	std	Y+9, r21	; 0x09
     f28:	e1 2c       	mov	r14, r1
     f2a:	99 24       	eor	r9, r9
     f2c:	93 94       	inc	r9
     f2e:	6c 01       	movw	r12, r24
     f30:	83 e1       	ldi	r24, 0x13	; 19
     f32:	c8 0e       	add	r12, r24
     f34:	d1 1c       	adc	r13, r1
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	0f 92       	push	r0
     f3c:	f8 01       	movw	r30, r16
     f3e:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f40:	ff 20       	and	r15, r15
     f42:	99 f0       	breq	.+38     	; 0xf6a <xQueueReceive+0x74>
     f44:	b5 01       	movw	r22, r10
     f46:	c8 01       	movw	r24, r16
     f48:	12 de       	rcall	.-988    	; 0xb6e <prvCopyDataFromQueue>
     f4a:	fa 94       	dec	r15
     f4c:	f8 01       	movw	r30, r16
     f4e:	f6 8e       	std	Z+30, r15	; 0x1e
     f50:	80 85       	ldd	r24, Z+8	; 0x08
     f52:	88 23       	and	r24, r24
     f54:	31 f0       	breq	.+12     	; 0xf62 <xQueueReceive+0x6c>
     f56:	c8 01       	movw	r24, r16
     f58:	08 96       	adiw	r24, 0x08	; 8
     f5a:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
     f5e:	81 11       	cpse	r24, r1
     f60:	d4 dc       	rcall	.-1624   	; 0x90a <vPortYield>
     f62:	0f 90       	pop	r0
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	81 e0       	ldi	r24, 0x01	; 1
     f68:	4d c0       	rjmp	.+154    	; 0x1004 <xQueueReceive+0x10e>
     f6a:	8e 81       	ldd	r24, Y+6	; 0x06
     f6c:	9f 81       	ldd	r25, Y+7	; 0x07
     f6e:	a8 85       	ldd	r26, Y+8	; 0x08
     f70:	b9 85       	ldd	r27, Y+9	; 0x09
     f72:	89 2b       	or	r24, r25
     f74:	8a 2b       	or	r24, r26
     f76:	8b 2b       	or	r24, r27
     f78:	21 f4       	brne	.+8      	; 0xf82 <xQueueReceive+0x8c>
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	80 e0       	ldi	r24, 0x00	; 0
     f80:	41 c0       	rjmp	.+130    	; 0x1004 <xQueueReceive+0x10e>
     f82:	e1 10       	cpse	r14, r1
     f84:	05 c0       	rjmp	.+10     	; 0xf90 <xQueueReceive+0x9a>
     f86:	ce 01       	movw	r24, r28
     f88:	01 96       	adiw	r24, 0x01	; 1
     f8a:	0e 94 8f 12 	call	0x251e	; 0x251e <vTaskInternalSetTimeOutState>
     f8e:	e9 2c       	mov	r14, r9
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	87 d6       	rcall	.+3342   	; 0x1ca4 <vTaskSuspendAll>
     f96:	0f b6       	in	r0, 0x3f	; 63
     f98:	f8 94       	cli
     f9a:	0f 92       	push	r0
     f9c:	f8 01       	movw	r30, r16
     f9e:	81 a1       	ldd	r24, Z+33	; 0x21
     fa0:	8f 3f       	cpi	r24, 0xFF	; 255
     fa2:	09 f4       	brne	.+2      	; 0xfa6 <xQueueReceive+0xb0>
     fa4:	11 a2       	std	Z+33, r1	; 0x21
     fa6:	f8 01       	movw	r30, r16
     fa8:	82 a1       	ldd	r24, Z+34	; 0x22
     faa:	8f 3f       	cpi	r24, 0xFF	; 255
     fac:	09 f4       	brne	.+2      	; 0xfb0 <xQueueReceive+0xba>
     fae:	12 a2       	std	Z+34, r1	; 0x22
     fb0:	0f 90       	pop	r0
     fb2:	0f be       	out	0x3f, r0	; 63
     fb4:	be 01       	movw	r22, r28
     fb6:	6a 5f       	subi	r22, 0xFA	; 250
     fb8:	7f 4f       	sbci	r23, 0xFF	; 255
     fba:	ce 01       	movw	r24, r28
     fbc:	01 96       	adiw	r24, 0x01	; 1
     fbe:	0e 94 a0 12 	call	0x2540	; 0x2540 <xTaskCheckForTimeOut>
     fc2:	81 11       	cpse	r24, r1
     fc4:	16 c0       	rjmp	.+44     	; 0xff2 <xQueueReceive+0xfc>
     fc6:	c8 01       	movw	r24, r16
     fc8:	68 dd       	rcall	.-1328   	; 0xa9a <prvIsQueueEmpty>
     fca:	88 23       	and	r24, r24
     fcc:	71 f0       	breq	.+28     	; 0xfea <xQueueReceive+0xf4>
     fce:	4e 81       	ldd	r20, Y+6	; 0x06
     fd0:	5f 81       	ldd	r21, Y+7	; 0x07
     fd2:	68 85       	ldd	r22, Y+8	; 0x08
     fd4:	79 85       	ldd	r23, Y+9	; 0x09
     fd6:	c6 01       	movw	r24, r12
     fd8:	0e 94 70 11 	call	0x22e0	; 0x22e0 <vTaskPlaceOnEventList>
     fdc:	c8 01       	movw	r24, r16
     fde:	e1 dd       	rcall	.-1086   	; 0xba2 <prvUnlockQueue>
     fe0:	a5 d7       	rcall	.+3914   	; 0x1f2c <xTaskResumeAll>
     fe2:	81 11       	cpse	r24, r1
     fe4:	a8 cf       	rjmp	.-176    	; 0xf36 <xQueueReceive+0x40>
     fe6:	91 dc       	rcall	.-1758   	; 0x90a <vPortYield>
     fe8:	a6 cf       	rjmp	.-180    	; 0xf36 <xQueueReceive+0x40>
     fea:	c8 01       	movw	r24, r16
     fec:	da dd       	rcall	.-1100   	; 0xba2 <prvUnlockQueue>
     fee:	9e d7       	rcall	.+3900   	; 0x1f2c <xTaskResumeAll>
     ff0:	a2 cf       	rjmp	.-188    	; 0xf36 <xQueueReceive+0x40>
     ff2:	c8 01       	movw	r24, r16
     ff4:	d6 dd       	rcall	.-1108   	; 0xba2 <prvUnlockQueue>
     ff6:	9a d7       	rcall	.+3892   	; 0x1f2c <xTaskResumeAll>
     ff8:	c8 01       	movw	r24, r16
     ffa:	4f dd       	rcall	.-1378   	; 0xa9a <prvIsQueueEmpty>
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <xQueueReceive+0x10c>
    1000:	9a cf       	rjmp	.-204    	; 0xf36 <xQueueReceive+0x40>
    1002:	80 e0       	ldi	r24, 0x00	; 0
    1004:	29 96       	adiw	r28, 0x09	; 9
    1006:	0f b6       	in	r0, 0x3f	; 63
    1008:	f8 94       	cli
    100a:	de bf       	out	0x3e, r29	; 62
    100c:	0f be       	out	0x3f, r0	; 63
    100e:	cd bf       	out	0x3d, r28	; 61
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	1f 91       	pop	r17
    1016:	0f 91       	pop	r16
    1018:	ff 90       	pop	r15
    101a:	ef 90       	pop	r14
    101c:	df 90       	pop	r13
    101e:	cf 90       	pop	r12
    1020:	bf 90       	pop	r11
    1022:	af 90       	pop	r10
    1024:	9f 90       	pop	r9
    1026:	08 95       	ret

00001028 <xQueueSemaphoreTake>:
    1028:	bf 92       	push	r11
    102a:	cf 92       	push	r12
    102c:	df 92       	push	r13
    102e:	ef 92       	push	r14
    1030:	ff 92       	push	r15
    1032:	0f 93       	push	r16
    1034:	1f 93       	push	r17
    1036:	cf 93       	push	r28
    1038:	df 93       	push	r29
    103a:	cd b7       	in	r28, 0x3d	; 61
    103c:	de b7       	in	r29, 0x3e	; 62
    103e:	29 97       	sbiw	r28, 0x09	; 9
    1040:	0f b6       	in	r0, 0x3f	; 63
    1042:	f8 94       	cli
    1044:	de bf       	out	0x3e, r29	; 62
    1046:	0f be       	out	0x3f, r0	; 63
    1048:	cd bf       	out	0x3d, r28	; 61
    104a:	8c 01       	movw	r16, r24
    104c:	4e 83       	std	Y+6, r20	; 0x06
    104e:	5f 83       	std	Y+7, r21	; 0x07
    1050:	68 87       	std	Y+8, r22	; 0x08
    1052:	79 87       	std	Y+9, r23	; 0x09
    1054:	b1 2c       	mov	r11, r1
    1056:	d1 2c       	mov	r13, r1
    1058:	cc 24       	eor	r12, r12
    105a:	c3 94       	inc	r12
    105c:	7c 01       	movw	r14, r24
    105e:	83 e1       	ldi	r24, 0x13	; 19
    1060:	e8 0e       	add	r14, r24
    1062:	f1 1c       	adc	r15, r1
    1064:	0f b6       	in	r0, 0x3f	; 63
    1066:	f8 94       	cli
    1068:	0f 92       	push	r0
    106a:	d8 01       	movw	r26, r16
    106c:	5e 96       	adiw	r26, 0x1e	; 30
    106e:	8c 91       	ld	r24, X
    1070:	5e 97       	sbiw	r26, 0x1e	; 30
    1072:	88 23       	and	r24, r24
    1074:	e1 f0       	breq	.+56     	; 0x10ae <xQueueSemaphoreTake+0x86>
    1076:	81 50       	subi	r24, 0x01	; 1
    1078:	5e 96       	adiw	r26, 0x1e	; 30
    107a:	8c 93       	st	X, r24
    107c:	5e 97       	sbiw	r26, 0x1e	; 30
    107e:	8d 91       	ld	r24, X+
    1080:	9c 91       	ld	r25, X
    1082:	89 2b       	or	r24, r25
    1084:	29 f4       	brne	.+10     	; 0x1090 <xQueueSemaphoreTake+0x68>
    1086:	0e 94 59 14 	call	0x28b2	; 0x28b2 <pvTaskIncrementMutexHeldCount>
    108a:	f8 01       	movw	r30, r16
    108c:	95 83       	std	Z+5, r25	; 0x05
    108e:	84 83       	std	Z+4, r24	; 0x04
    1090:	d8 01       	movw	r26, r16
    1092:	18 96       	adiw	r26, 0x08	; 8
    1094:	8c 91       	ld	r24, X
    1096:	88 23       	and	r24, r24
    1098:	31 f0       	breq	.+12     	; 0x10a6 <xQueueSemaphoreTake+0x7e>
    109a:	c8 01       	movw	r24, r16
    109c:	08 96       	adiw	r24, 0x08	; 8
    109e:	0e 94 c9 11 	call	0x2392	; 0x2392 <xTaskRemoveFromEventList>
    10a2:	81 11       	cpse	r24, r1
    10a4:	32 dc       	rcall	.-1948   	; 0x90a <vPortYield>
    10a6:	0f 90       	pop	r0
    10a8:	0f be       	out	0x3f, r0	; 63
    10aa:	81 e0       	ldi	r24, 0x01	; 1
    10ac:	7b c0       	rjmp	.+246    	; 0x11a4 <xQueueSemaphoreTake+0x17c>
    10ae:	8e 81       	ldd	r24, Y+6	; 0x06
    10b0:	9f 81       	ldd	r25, Y+7	; 0x07
    10b2:	a8 85       	ldd	r26, Y+8	; 0x08
    10b4:	b9 85       	ldd	r27, Y+9	; 0x09
    10b6:	89 2b       	or	r24, r25
    10b8:	8a 2b       	or	r24, r26
    10ba:	8b 2b       	or	r24, r27
    10bc:	21 f4       	brne	.+8      	; 0x10c6 <xQueueSemaphoreTake+0x9e>
    10be:	0f 90       	pop	r0
    10c0:	0f be       	out	0x3f, r0	; 63
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	6f c0       	rjmp	.+222    	; 0x11a4 <xQueueSemaphoreTake+0x17c>
    10c6:	d1 10       	cpse	r13, r1
    10c8:	05 c0       	rjmp	.+10     	; 0x10d4 <xQueueSemaphoreTake+0xac>
    10ca:	ce 01       	movw	r24, r28
    10cc:	01 96       	adiw	r24, 0x01	; 1
    10ce:	0e 94 8f 12 	call	0x251e	; 0x251e <vTaskInternalSetTimeOutState>
    10d2:	dc 2c       	mov	r13, r12
    10d4:	0f 90       	pop	r0
    10d6:	0f be       	out	0x3f, r0	; 63
    10d8:	e5 d5       	rcall	.+3018   	; 0x1ca4 <vTaskSuspendAll>
    10da:	0f b6       	in	r0, 0x3f	; 63
    10dc:	f8 94       	cli
    10de:	0f 92       	push	r0
    10e0:	f8 01       	movw	r30, r16
    10e2:	81 a1       	ldd	r24, Z+33	; 0x21
    10e4:	8f 3f       	cpi	r24, 0xFF	; 255
    10e6:	09 f4       	brne	.+2      	; 0x10ea <xQueueSemaphoreTake+0xc2>
    10e8:	11 a2       	std	Z+33, r1	; 0x21
    10ea:	d8 01       	movw	r26, r16
    10ec:	92 96       	adiw	r26, 0x22	; 34
    10ee:	8c 91       	ld	r24, X
    10f0:	92 97       	sbiw	r26, 0x22	; 34
    10f2:	8f 3f       	cpi	r24, 0xFF	; 255
    10f4:	11 f4       	brne	.+4      	; 0x10fa <xQueueSemaphoreTake+0xd2>
    10f6:	92 96       	adiw	r26, 0x22	; 34
    10f8:	1c 92       	st	X, r1
    10fa:	0f 90       	pop	r0
    10fc:	0f be       	out	0x3f, r0	; 63
    10fe:	be 01       	movw	r22, r28
    1100:	6a 5f       	subi	r22, 0xFA	; 250
    1102:	7f 4f       	sbci	r23, 0xFF	; 255
    1104:	ce 01       	movw	r24, r28
    1106:	01 96       	adiw	r24, 0x01	; 1
    1108:	0e 94 a0 12 	call	0x2540	; 0x2540 <xTaskCheckForTimeOut>
    110c:	81 11       	cpse	r24, r1
    110e:	25 c0       	rjmp	.+74     	; 0x115a <xQueueSemaphoreTake+0x132>
    1110:	c8 01       	movw	r24, r16
    1112:	c3 dc       	rcall	.-1658   	; 0xa9a <prvIsQueueEmpty>
    1114:	88 23       	and	r24, r24
    1116:	e9 f0       	breq	.+58     	; 0x1152 <xQueueSemaphoreTake+0x12a>
    1118:	f8 01       	movw	r30, r16
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	89 2b       	or	r24, r25
    1120:	51 f4       	brne	.+20     	; 0x1136 <xQueueSemaphoreTake+0x10e>
    1122:	0f b6       	in	r0, 0x3f	; 63
    1124:	f8 94       	cli
    1126:	0f 92       	push	r0
    1128:	84 81       	ldd	r24, Z+4	; 0x04
    112a:	95 81       	ldd	r25, Z+5	; 0x05
    112c:	0e 94 10 13 	call	0x2620	; 0x2620 <xTaskPriorityInherit>
    1130:	b8 2e       	mov	r11, r24
    1132:	0f 90       	pop	r0
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	4e 81       	ldd	r20, Y+6	; 0x06
    1138:	5f 81       	ldd	r21, Y+7	; 0x07
    113a:	68 85       	ldd	r22, Y+8	; 0x08
    113c:	79 85       	ldd	r23, Y+9	; 0x09
    113e:	c7 01       	movw	r24, r14
    1140:	0e 94 70 11 	call	0x22e0	; 0x22e0 <vTaskPlaceOnEventList>
    1144:	c8 01       	movw	r24, r16
    1146:	2d dd       	rcall	.-1446   	; 0xba2 <prvUnlockQueue>
    1148:	f1 d6       	rcall	.+3554   	; 0x1f2c <xTaskResumeAll>
    114a:	81 11       	cpse	r24, r1
    114c:	8b cf       	rjmp	.-234    	; 0x1064 <xQueueSemaphoreTake+0x3c>
    114e:	dd db       	rcall	.-2118   	; 0x90a <vPortYield>
    1150:	89 cf       	rjmp	.-238    	; 0x1064 <xQueueSemaphoreTake+0x3c>
    1152:	c8 01       	movw	r24, r16
    1154:	26 dd       	rcall	.-1460   	; 0xba2 <prvUnlockQueue>
    1156:	ea d6       	rcall	.+3540   	; 0x1f2c <xTaskResumeAll>
    1158:	85 cf       	rjmp	.-246    	; 0x1064 <xQueueSemaphoreTake+0x3c>
    115a:	c8 01       	movw	r24, r16
    115c:	22 dd       	rcall	.-1468   	; 0xba2 <prvUnlockQueue>
    115e:	e6 d6       	rcall	.+3532   	; 0x1f2c <xTaskResumeAll>
    1160:	c8 01       	movw	r24, r16
    1162:	9b dc       	rcall	.-1738   	; 0xa9a <prvIsQueueEmpty>
    1164:	88 23       	and	r24, r24
    1166:	09 f4       	brne	.+2      	; 0x116a <xQueueSemaphoreTake+0x142>
    1168:	7d cf       	rjmp	.-262    	; 0x1064 <xQueueSemaphoreTake+0x3c>
    116a:	bb 20       	and	r11, r11
    116c:	d1 f0       	breq	.+52     	; 0x11a2 <xQueueSemaphoreTake+0x17a>
    116e:	0f b6       	in	r0, 0x3f	; 63
    1170:	f8 94       	cli
    1172:	0f 92       	push	r0
    1174:	f8 01       	movw	r30, r16
    1176:	83 89       	ldd	r24, Z+19	; 0x13
    1178:	88 23       	and	r24, r24
    117a:	39 f0       	breq	.+14     	; 0x118a <xQueueSemaphoreTake+0x162>
    117c:	02 8c       	ldd	r0, Z+26	; 0x1a
    117e:	f3 8d       	ldd	r31, Z+27	; 0x1b
    1180:	e0 2d       	mov	r30, r0
    1182:	80 81       	ld	r24, Z
    1184:	6a e0       	ldi	r22, 0x0A	; 10
    1186:	68 1b       	sub	r22, r24
    1188:	01 c0       	rjmp	.+2      	; 0x118c <xQueueSemaphoreTake+0x164>
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	d8 01       	movw	r26, r16
    118e:	14 96       	adiw	r26, 0x04	; 4
    1190:	8d 91       	ld	r24, X+
    1192:	9c 91       	ld	r25, X
    1194:	15 97       	sbiw	r26, 0x05	; 5
    1196:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <vTaskPriorityDisinheritAfterTimeout>
    119a:	0f 90       	pop	r0
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	80 e0       	ldi	r24, 0x00	; 0
    11a0:	01 c0       	rjmp	.+2      	; 0x11a4 <xQueueSemaphoreTake+0x17c>
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	29 96       	adiw	r28, 0x09	; 9
    11a6:	0f b6       	in	r0, 0x3f	; 63
    11a8:	f8 94       	cli
    11aa:	de bf       	out	0x3e, r29	; 62
    11ac:	0f be       	out	0x3f, r0	; 63
    11ae:	cd bf       	out	0x3d, r28	; 61
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	1f 91       	pop	r17
    11b6:	0f 91       	pop	r16
    11b8:	ff 90       	pop	r15
    11ba:	ef 90       	pop	r14
    11bc:	df 90       	pop	r13
    11be:	cf 90       	pop	r12
    11c0:	bf 90       	pop	r11
    11c2:	08 95       	ret

000011c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    11c4:	cf 93       	push	r28
    11c6:	df 93       	push	r29
    11c8:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    11ca:	0f b6       	in	r0, 0x3f	; 63
    11cc:	f8 94       	cli
    11ce:	0f 92       	push	r0
    11d0:	89 a1       	ldd	r24, Y+33	; 0x21
    11d2:	8f 3f       	cpi	r24, 0xFF	; 255
    11d4:	09 f4       	brne	.+2      	; 0x11d8 <vQueueWaitForMessageRestricted+0x14>
    11d6:	19 a2       	std	Y+33, r1	; 0x21
    11d8:	8a a1       	ldd	r24, Y+34	; 0x22
    11da:	8f 3f       	cpi	r24, 0xFF	; 255
    11dc:	09 f4       	brne	.+2      	; 0x11e0 <vQueueWaitForMessageRestricted+0x1c>
    11de:	1a a2       	std	Y+34, r1	; 0x22
    11e0:	0f 90       	pop	r0
    11e2:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    11e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    11e6:	81 11       	cpse	r24, r1
    11e8:	04 c0       	rjmp	.+8      	; 0x11f2 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    11ea:	ce 01       	movw	r24, r28
    11ec:	43 96       	adiw	r24, 0x13	; 19
    11ee:	0e 94 87 11 	call	0x230e	; 0x230e <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    11f2:	ce 01       	movw	r24, r28
    11f4:	d6 dc       	rcall	.-1620   	; 0xba2 <prvUnlockQueue>
    }
    11f6:	df 91       	pop	r29
    11f8:	cf 91       	pop	r28
    11fa:	08 95       	ret

000011fc <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    11fc:	fc 01       	movw	r30, r24
    11fe:	44 81       	ldd	r20, Z+4	; 0x04
    1200:	55 81       	ldd	r21, Z+5	; 0x05
    1202:	22 81       	ldd	r18, Z+2	; 0x02
    1204:	33 81       	ldd	r19, Z+3	; 0x03
    1206:	24 0f       	add	r18, r20
    1208:	35 1f       	adc	r19, r21
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	b9 01       	movw	r22, r18
    1210:	68 1b       	sub	r22, r24
    1212:	79 0b       	sbc	r23, r25
    1214:	cb 01       	movw	r24, r22
    1216:	64 17       	cp	r22, r20
    1218:	75 07       	cpc	r23, r21
    121a:	10 f0       	brcs	.+4      	; 0x1220 <prvBytesInBuffer+0x24>
    121c:	84 1b       	sub	r24, r20
    121e:	95 0b       	sbc	r25, r21
    1220:	08 95       	ret

00001222 <prvWriteBytesToBuffer>:
    1222:	af 92       	push	r10
    1224:	bf 92       	push	r11
    1226:	cf 92       	push	r12
    1228:	df 92       	push	r13
    122a:	ef 92       	push	r14
    122c:	ff 92       	push	r15
    122e:	0f 93       	push	r16
    1230:	1f 93       	push	r17
    1232:	cf 93       	push	r28
    1234:	df 93       	push	r29
    1236:	6c 01       	movw	r12, r24
    1238:	5b 01       	movw	r10, r22
    123a:	7a 01       	movw	r14, r20
    123c:	fc 01       	movw	r30, r24
    123e:	c2 81       	ldd	r28, Z+2	; 0x02
    1240:	d3 81       	ldd	r29, Z+3	; 0x03
    1242:	04 81       	ldd	r16, Z+4	; 0x04
    1244:	15 81       	ldd	r17, Z+5	; 0x05
    1246:	0c 1b       	sub	r16, r28
    1248:	1d 0b       	sbc	r17, r29
    124a:	40 17       	cp	r20, r16
    124c:	51 07       	cpc	r21, r17
    124e:	08 f4       	brcc	.+2      	; 0x1252 <prvWriteBytesToBuffer+0x30>
    1250:	8a 01       	movw	r16, r20
    1252:	f6 01       	movw	r30, r12
    1254:	84 85       	ldd	r24, Z+12	; 0x0c
    1256:	95 85       	ldd	r25, Z+13	; 0x0d
    1258:	a8 01       	movw	r20, r16
    125a:	b5 01       	movw	r22, r10
    125c:	8c 0f       	add	r24, r28
    125e:	9d 1f       	adc	r25, r29
    1260:	0e 94 8b 31 	call	0x6316	; 0x6316 <memcpy>
    1264:	0e 15       	cp	r16, r14
    1266:	1f 05       	cpc	r17, r15
    1268:	58 f4       	brcc	.+22     	; 0x1280 <prvWriteBytesToBuffer+0x5e>
    126a:	a7 01       	movw	r20, r14
    126c:	40 1b       	sub	r20, r16
    126e:	51 0b       	sbc	r21, r17
    1270:	b5 01       	movw	r22, r10
    1272:	60 0f       	add	r22, r16
    1274:	71 1f       	adc	r23, r17
    1276:	f6 01       	movw	r30, r12
    1278:	84 85       	ldd	r24, Z+12	; 0x0c
    127a:	95 85       	ldd	r25, Z+13	; 0x0d
    127c:	0e 94 8b 31 	call	0x6316	; 0x6316 <memcpy>
    1280:	ce 01       	movw	r24, r28
    1282:	8e 0d       	add	r24, r14
    1284:	9f 1d       	adc	r25, r15
    1286:	f6 01       	movw	r30, r12
    1288:	24 81       	ldd	r18, Z+4	; 0x04
    128a:	35 81       	ldd	r19, Z+5	; 0x05
    128c:	82 17       	cp	r24, r18
    128e:	93 07       	cpc	r25, r19
    1290:	10 f0       	brcs	.+4      	; 0x1296 <prvWriteBytesToBuffer+0x74>
    1292:	82 1b       	sub	r24, r18
    1294:	93 0b       	sbc	r25, r19
    1296:	f6 01       	movw	r30, r12
    1298:	93 83       	std	Z+3, r25	; 0x03
    129a:	82 83       	std	Z+2, r24	; 0x02
    129c:	c7 01       	movw	r24, r14
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	1f 91       	pop	r17
    12a4:	0f 91       	pop	r16
    12a6:	ff 90       	pop	r15
    12a8:	ef 90       	pop	r14
    12aa:	df 90       	pop	r13
    12ac:	cf 90       	pop	r12
    12ae:	bf 90       	pop	r11
    12b0:	af 90       	pop	r10
    12b2:	08 95       	ret

000012b4 <prvWriteMessageToBuffer>:
    12b4:	cf 92       	push	r12
    12b6:	df 92       	push	r13
    12b8:	ef 92       	push	r14
    12ba:	ff 92       	push	r15
    12bc:	0f 93       	push	r16
    12be:	1f 93       	push	r17
    12c0:	cf 93       	push	r28
    12c2:	df 93       	push	r29
    12c4:	1f 92       	push	r1
    12c6:	1f 92       	push	r1
    12c8:	cd b7       	in	r28, 0x3d	; 61
    12ca:	de b7       	in	r29, 0x3e	; 62
    12cc:	5a 83       	std	Y+2, r21	; 0x02
    12ce:	49 83       	std	Y+1, r20	; 0x01
    12d0:	21 15       	cp	r18, r1
    12d2:	31 05       	cpc	r19, r1
    12d4:	c9 f0       	breq	.+50     	; 0x1308 <prvWriteMessageToBuffer+0x54>
    12d6:	6b 01       	movw	r12, r22
    12d8:	7c 01       	movw	r14, r24
    12da:	fc 01       	movw	r30, r24
    12dc:	86 85       	ldd	r24, Z+14	; 0x0e
    12de:	80 fd       	sbrc	r24, 0
    12e0:	08 c0       	rjmp	.+16     	; 0x12f2 <prvWriteMessageToBuffer+0x3e>
    12e2:	ca 01       	movw	r24, r20
    12e4:	24 17       	cp	r18, r20
    12e6:	35 07       	cpc	r19, r21
    12e8:	08 f4       	brcc	.+2      	; 0x12ec <prvWriteMessageToBuffer+0x38>
    12ea:	c9 01       	movw	r24, r18
    12ec:	9a 83       	std	Y+2, r25	; 0x02
    12ee:	89 83       	std	Y+1, r24	; 0x01
    12f0:	11 c0       	rjmp	.+34     	; 0x1314 <prvWriteMessageToBuffer+0x60>
    12f2:	20 17       	cp	r18, r16
    12f4:	31 07       	cpc	r19, r17
    12f6:	58 f0       	brcs	.+22     	; 0x130e <prvWriteMessageToBuffer+0x5a>
    12f8:	42 e0       	ldi	r20, 0x02	; 2
    12fa:	50 e0       	ldi	r21, 0x00	; 0
    12fc:	be 01       	movw	r22, r28
    12fe:	6f 5f       	subi	r22, 0xFF	; 255
    1300:	7f 4f       	sbci	r23, 0xFF	; 255
    1302:	c7 01       	movw	r24, r14
    1304:	8e df       	rcall	.-228    	; 0x1222 <prvWriteBytesToBuffer>
    1306:	06 c0       	rjmp	.+12     	; 0x1314 <prvWriteMessageToBuffer+0x60>
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	08 c0       	rjmp	.+16     	; 0x131e <prvWriteMessageToBuffer+0x6a>
    130e:	80 e0       	ldi	r24, 0x00	; 0
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	05 c0       	rjmp	.+10     	; 0x131e <prvWriteMessageToBuffer+0x6a>
    1314:	49 81       	ldd	r20, Y+1	; 0x01
    1316:	5a 81       	ldd	r21, Y+2	; 0x02
    1318:	b6 01       	movw	r22, r12
    131a:	c7 01       	movw	r24, r14
    131c:	82 df       	rcall	.-252    	; 0x1222 <prvWriteBytesToBuffer>
    131e:	0f 90       	pop	r0
    1320:	0f 90       	pop	r0
    1322:	df 91       	pop	r29
    1324:	cf 91       	pop	r28
    1326:	1f 91       	pop	r17
    1328:	0f 91       	pop	r16
    132a:	ff 90       	pop	r15
    132c:	ef 90       	pop	r14
    132e:	df 90       	pop	r13
    1330:	cf 90       	pop	r12
    1332:	08 95       	ret

00001334 <prvReadBytesFromBuffer>:
    1334:	af 92       	push	r10
    1336:	bf 92       	push	r11
    1338:	cf 92       	push	r12
    133a:	df 92       	push	r13
    133c:	ef 92       	push	r14
    133e:	ff 92       	push	r15
    1340:	0f 93       	push	r16
    1342:	1f 93       	push	r17
    1344:	cf 93       	push	r28
    1346:	df 93       	push	r29
    1348:	7c 01       	movw	r14, r24
    134a:	5b 01       	movw	r10, r22
    134c:	e9 01       	movw	r28, r18
    134e:	42 17       	cp	r20, r18
    1350:	53 07       	cpc	r21, r19
    1352:	08 f4       	brcc	.+2      	; 0x1356 <prvReadBytesFromBuffer+0x22>
    1354:	ea 01       	movw	r28, r20
    1356:	20 97       	sbiw	r28, 0x00	; 0
    1358:	79 f1       	breq	.+94     	; 0x13b8 <prvReadBytesFromBuffer+0x84>
    135a:	f7 01       	movw	r30, r14
    135c:	00 81       	ld	r16, Z
    135e:	11 81       	ldd	r17, Z+1	; 0x01
    1360:	c4 80       	ldd	r12, Z+4	; 0x04
    1362:	d5 80       	ldd	r13, Z+5	; 0x05
    1364:	c0 1a       	sub	r12, r16
    1366:	d1 0a       	sbc	r13, r17
    1368:	cc 15       	cp	r28, r12
    136a:	dd 05       	cpc	r29, r13
    136c:	08 f4       	brcc	.+2      	; 0x1370 <prvReadBytesFromBuffer+0x3c>
    136e:	6e 01       	movw	r12, r28
    1370:	f7 01       	movw	r30, r14
    1372:	64 85       	ldd	r22, Z+12	; 0x0c
    1374:	75 85       	ldd	r23, Z+13	; 0x0d
    1376:	60 0f       	add	r22, r16
    1378:	71 1f       	adc	r23, r17
    137a:	a6 01       	movw	r20, r12
    137c:	c5 01       	movw	r24, r10
    137e:	0e 94 8b 31 	call	0x6316	; 0x6316 <memcpy>
    1382:	cc 16       	cp	r12, r28
    1384:	dd 06       	cpc	r13, r29
    1386:	58 f4       	brcc	.+22     	; 0x139e <prvReadBytesFromBuffer+0x6a>
    1388:	ae 01       	movw	r20, r28
    138a:	4c 19       	sub	r20, r12
    138c:	5d 09       	sbc	r21, r13
    138e:	f7 01       	movw	r30, r14
    1390:	64 85       	ldd	r22, Z+12	; 0x0c
    1392:	75 85       	ldd	r23, Z+13	; 0x0d
    1394:	c5 01       	movw	r24, r10
    1396:	8c 0d       	add	r24, r12
    1398:	9d 1d       	adc	r25, r13
    139a:	0e 94 8b 31 	call	0x6316	; 0x6316 <memcpy>
    139e:	0c 0f       	add	r16, r28
    13a0:	1d 1f       	adc	r17, r29
    13a2:	f7 01       	movw	r30, r14
    13a4:	84 81       	ldd	r24, Z+4	; 0x04
    13a6:	95 81       	ldd	r25, Z+5	; 0x05
    13a8:	08 17       	cp	r16, r24
    13aa:	19 07       	cpc	r17, r25
    13ac:	10 f0       	brcs	.+4      	; 0x13b2 <prvReadBytesFromBuffer+0x7e>
    13ae:	08 1b       	sub	r16, r24
    13b0:	19 0b       	sbc	r17, r25
    13b2:	f7 01       	movw	r30, r14
    13b4:	11 83       	std	Z+1, r17	; 0x01
    13b6:	00 83       	st	Z, r16
    13b8:	ce 01       	movw	r24, r28
    13ba:	df 91       	pop	r29
    13bc:	cf 91       	pop	r28
    13be:	1f 91       	pop	r17
    13c0:	0f 91       	pop	r16
    13c2:	ff 90       	pop	r15
    13c4:	ef 90       	pop	r14
    13c6:	df 90       	pop	r13
    13c8:	cf 90       	pop	r12
    13ca:	bf 90       	pop	r11
    13cc:	af 90       	pop	r10
    13ce:	08 95       	ret

000013d0 <xStreamBufferGenericCreate>:
    13d0:	ff 92       	push	r15
    13d2:	0f 93       	push	r16
    13d4:	1f 93       	push	r17
    13d6:	cf 93       	push	r28
    13d8:	df 93       	push	r29
    13da:	8b 01       	movw	r16, r22
    13dc:	ff 24       	eor	r15, r15
    13de:	f3 94       	inc	r15
    13e0:	41 30       	cpi	r20, 0x01	; 1
    13e2:	09 f0       	breq	.+2      	; 0x13e6 <xStreamBufferGenericCreate+0x16>
    13e4:	f1 2c       	mov	r15, r1
    13e6:	01 15       	cp	r16, r1
    13e8:	11 05       	cpc	r17, r1
    13ea:	11 f4       	brne	.+4      	; 0x13f0 <xStreamBufferGenericCreate+0x20>
    13ec:	01 e0       	ldi	r16, 0x01	; 1
    13ee:	10 e0       	ldi	r17, 0x00	; 0
    13f0:	9c 01       	movw	r18, r24
    13f2:	20 5f       	subi	r18, 0xF0	; 240
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	82 17       	cp	r24, r18
    13f8:	93 07       	cpc	r25, r19
    13fa:	b0 f4       	brcc	.+44     	; 0x1428 <xStreamBufferGenericCreate+0x58>
    13fc:	ec 01       	movw	r28, r24
    13fe:	21 96       	adiw	r28, 0x01	; 1
    1400:	c9 01       	movw	r24, r18
    1402:	b5 d8       	rcall	.-3734   	; 0x56e <pvPortMalloc>
    1404:	fc 01       	movw	r30, r24
    1406:	89 2b       	or	r24, r25
    1408:	89 f0       	breq	.+34     	; 0x142c <xStreamBufferGenericCreate+0x5c>
    140a:	8f e0       	ldi	r24, 0x0F	; 15
    140c:	df 01       	movw	r26, r30
    140e:	1d 92       	st	X+, r1
    1410:	8a 95       	dec	r24
    1412:	e9 f7       	brne	.-6      	; 0x140e <xStreamBufferGenericCreate+0x3e>
    1414:	cf 01       	movw	r24, r30
    1416:	0f 96       	adiw	r24, 0x0f	; 15
    1418:	95 87       	std	Z+13, r25	; 0x0d
    141a:	84 87       	std	Z+12, r24	; 0x0c
    141c:	d5 83       	std	Z+5, r29	; 0x05
    141e:	c4 83       	std	Z+4, r28	; 0x04
    1420:	17 83       	std	Z+7, r17	; 0x07
    1422:	06 83       	std	Z+6, r16	; 0x06
    1424:	f6 86       	std	Z+14, r15	; 0x0e
    1426:	02 c0       	rjmp	.+4      	; 0x142c <xStreamBufferGenericCreate+0x5c>
    1428:	e0 e0       	ldi	r30, 0x00	; 0
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	cf 01       	movw	r24, r30
    142e:	df 91       	pop	r29
    1430:	cf 91       	pop	r28
    1432:	1f 91       	pop	r17
    1434:	0f 91       	pop	r16
    1436:	ff 90       	pop	r15
    1438:	08 95       	ret

0000143a <xStreamBufferReset>:
    143a:	0f b6       	in	r0, 0x3f	; 63
    143c:	f8 94       	cli
    143e:	0f 92       	push	r0
    1440:	dc 01       	movw	r26, r24
    1442:	18 96       	adiw	r26, 0x08	; 8
    1444:	2d 91       	ld	r18, X+
    1446:	3c 91       	ld	r19, X
    1448:	19 97       	sbiw	r26, 0x09	; 9
    144a:	23 2b       	or	r18, r19
    144c:	51 f5       	brne	.+84     	; 0x14a2 <xStreamBufferReset+0x68>
    144e:	1a 96       	adiw	r26, 0x0a	; 10
    1450:	2d 91       	ld	r18, X+
    1452:	3c 91       	ld	r19, X
    1454:	1b 97       	sbiw	r26, 0x0b	; 11
    1456:	23 2b       	or	r18, r19
    1458:	31 f5       	brne	.+76     	; 0x14a6 <xStreamBufferReset+0x6c>
    145a:	1e 96       	adiw	r26, 0x0e	; 14
    145c:	2c 91       	ld	r18, X
    145e:	1e 97       	sbiw	r26, 0x0e	; 14
    1460:	16 96       	adiw	r26, 0x06	; 6
    1462:	4d 91       	ld	r20, X+
    1464:	5c 91       	ld	r21, X
    1466:	17 97       	sbiw	r26, 0x07	; 7
    1468:	14 96       	adiw	r26, 0x04	; 4
    146a:	6d 91       	ld	r22, X+
    146c:	7c 91       	ld	r23, X
    146e:	15 97       	sbiw	r26, 0x05	; 5
    1470:	1c 96       	adiw	r26, 0x0c	; 12
    1472:	ed 91       	ld	r30, X+
    1474:	fc 91       	ld	r31, X
    1476:	1d 97       	sbiw	r26, 0x0d	; 13
    1478:	3f e0       	ldi	r19, 0x0F	; 15
    147a:	1d 92       	st	X+, r1
    147c:	3a 95       	dec	r19
    147e:	e9 f7       	brne	.-6      	; 0x147a <xStreamBufferReset+0x40>
    1480:	dc 01       	movw	r26, r24
    1482:	1d 96       	adiw	r26, 0x0d	; 13
    1484:	fc 93       	st	X, r31
    1486:	ee 93       	st	-X, r30
    1488:	1c 97       	sbiw	r26, 0x0c	; 12
    148a:	15 96       	adiw	r26, 0x05	; 5
    148c:	7c 93       	st	X, r23
    148e:	6e 93       	st	-X, r22
    1490:	14 97       	sbiw	r26, 0x04	; 4
    1492:	17 96       	adiw	r26, 0x07	; 7
    1494:	5c 93       	st	X, r21
    1496:	4e 93       	st	-X, r20
    1498:	16 97       	sbiw	r26, 0x06	; 6
    149a:	1e 96       	adiw	r26, 0x0e	; 14
    149c:	2c 93       	st	X, r18
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	03 c0       	rjmp	.+6      	; 0x14a8 <xStreamBufferReset+0x6e>
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	01 c0       	rjmp	.+2      	; 0x14a8 <xStreamBufferReset+0x6e>
    14a6:	80 e0       	ldi	r24, 0x00	; 0
    14a8:	0f 90       	pop	r0
    14aa:	0f be       	out	0x3f, r0	; 63
    14ac:	08 95       	ret

000014ae <xStreamBufferSpacesAvailable>:
    14ae:	fc 01       	movw	r30, r24
    14b0:	24 81       	ldd	r18, Z+4	; 0x04
    14b2:	35 81       	ldd	r19, Z+5	; 0x05
    14b4:	80 81       	ld	r24, Z
    14b6:	91 81       	ldd	r25, Z+1	; 0x01
    14b8:	42 81       	ldd	r20, Z+2	; 0x02
    14ba:	53 81       	ldd	r21, Z+3	; 0x03
    14bc:	82 0f       	add	r24, r18
    14be:	93 1f       	adc	r25, r19
    14c0:	01 97       	sbiw	r24, 0x01	; 1
    14c2:	84 1b       	sub	r24, r20
    14c4:	95 0b       	sbc	r25, r21
    14c6:	82 17       	cp	r24, r18
    14c8:	93 07       	cpc	r25, r19
    14ca:	10 f0       	brcs	.+4      	; 0x14d0 <xStreamBufferSpacesAvailable+0x22>
    14cc:	82 1b       	sub	r24, r18
    14ce:	93 0b       	sbc	r25, r19
    14d0:	08 95       	ret

000014d2 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    14d2:	2f 92       	push	r2
    14d4:	3f 92       	push	r3
    14d6:	4f 92       	push	r4
    14d8:	5f 92       	push	r5
    14da:	6f 92       	push	r6
    14dc:	7f 92       	push	r7
    14de:	8f 92       	push	r8
    14e0:	9f 92       	push	r9
    14e2:	af 92       	push	r10
    14e4:	bf 92       	push	r11
    14e6:	cf 92       	push	r12
    14e8:	df 92       	push	r13
    14ea:	ef 92       	push	r14
    14ec:	ff 92       	push	r15
    14ee:	0f 93       	push	r16
    14f0:	1f 93       	push	r17
    14f2:	cf 93       	push	r28
    14f4:	df 93       	push	r29
    14f6:	cd b7       	in	r28, 0x3d	; 61
    14f8:	de b7       	in	r29, 0x3e	; 62
    14fa:	2b 97       	sbiw	r28, 0x0b	; 11
    14fc:	0f b6       	in	r0, 0x3f	; 63
    14fe:	f8 94       	cli
    1500:	de bf       	out	0x3e, r29	; 62
    1502:	0f be       	out	0x3f, r0	; 63
    1504:	cd bf       	out	0x3d, r28	; 61
    1506:	4c 01       	movw	r8, r24
    1508:	7b 87       	std	Y+11, r23	; 0x0b
    150a:	6a 87       	std	Y+10, r22	; 0x0a
    150c:	1a 01       	movw	r2, r20
    150e:	0e 83       	std	Y+6, r16	; 0x06
    1510:	1f 83       	std	Y+7, r17	; 0x07
    1512:	28 87       	std	Y+8, r18	; 0x08
    1514:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1516:	fc 01       	movw	r30, r24
    1518:	84 81       	ldd	r24, Z+4	; 0x04
    151a:	95 81       	ldd	r25, Z+5	; 0x05
    151c:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    151e:	26 85       	ldd	r18, Z+14	; 0x0e
    1520:	20 ff       	sbrs	r18, 0
    1522:	0c c0       	rjmp	.+24     	; 0x153c <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1524:	2a 01       	movw	r4, r20
    1526:	f2 e0       	ldi	r31, 0x02	; 2
    1528:	4f 0e       	add	r4, r31
    152a:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    152c:	84 15       	cp	r24, r4
    152e:	95 05       	cpc	r25, r5
    1530:	50 f4       	brcc	.+20     	; 0x1546 <xStreamBufferSend+0x74>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1532:	1e 82       	std	Y+6, r1	; 0x06
    1534:	1f 82       	std	Y+7, r1	; 0x07
    1536:	18 86       	std	Y+8, r1	; 0x08
    1538:	19 86       	std	Y+9, r1	; 0x09
    153a:	46 c0       	rjmp	.+140    	; 0x15c8 <xStreamBufferSend+0xf6>
    153c:	2a 01       	movw	r4, r20
    153e:	84 17       	cp	r24, r20
    1540:	95 07       	cpc	r25, r21
    1542:	08 f4       	brcc	.+2      	; 0x1546 <xStreamBufferSend+0x74>
    1544:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1546:	8e 81       	ldd	r24, Y+6	; 0x06
    1548:	9f 81       	ldd	r25, Y+7	; 0x07
    154a:	a8 85       	ldd	r26, Y+8	; 0x08
    154c:	b9 85       	ldd	r27, Y+9	; 0x09
    154e:	89 2b       	or	r24, r25
    1550:	8a 2b       	or	r24, r26
    1552:	8b 2b       	or	r24, r27
    1554:	09 f4       	brne	.+2      	; 0x1558 <xStreamBufferSend+0x86>
    1556:	38 c0       	rjmp	.+112    	; 0x15c8 <xStreamBufferSend+0xf6>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1558:	ce 01       	movw	r24, r28
    155a:	01 96       	adiw	r24, 0x01	; 1
    155c:	ca d7       	rcall	.+3988   	; 0x24f2 <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1564:	c4 01       	movw	r24, r8
    1566:	a3 df       	rcall	.-186    	; 0x14ae <xStreamBufferSpacesAvailable>
    1568:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    156a:	84 15       	cp	r24, r4
    156c:	95 05       	cpc	r25, r5
    156e:	38 f5       	brcc	.+78     	; 0x15be <xStreamBufferSend+0xec>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	90 e0       	ldi	r25, 0x00	; 0
    1576:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    157a:	0e 94 fd 12 	call	0x25fa	; 0x25fa <xTaskGetCurrentTaskHandle>
    157e:	f4 01       	movw	r30, r8
    1580:	93 87       	std	Z+11, r25	; 0x0b
    1582:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1584:	0f 90       	pop	r0
    1586:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1588:	ae 80       	ldd	r10, Y+6	; 0x06
    158a:	bf 80       	ldd	r11, Y+7	; 0x07
    158c:	c8 84       	ldd	r12, Y+8	; 0x08
    158e:	d9 84       	ldd	r13, Y+9	; 0x09
    1590:	e1 2c       	mov	r14, r1
    1592:	f1 2c       	mov	r15, r1
    1594:	00 e0       	ldi	r16, 0x00	; 0
    1596:	10 e0       	ldi	r17, 0x00	; 0
    1598:	98 01       	movw	r18, r16
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	ba 01       	movw	r22, r20
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    15a6:	f4 01       	movw	r30, r8
    15a8:	13 86       	std	Z+11, r1	; 0x0b
    15aa:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    15ac:	be 01       	movw	r22, r28
    15ae:	6a 5f       	subi	r22, 0xFA	; 250
    15b0:	7f 4f       	sbci	r23, 0xFF	; 255
    15b2:	ce 01       	movw	r24, r28
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	c4 d7       	rcall	.+3976   	; 0x2540 <xTaskCheckForTimeOut>
    15b8:	88 23       	and	r24, r24
    15ba:	89 f2       	breq	.-94     	; 0x155e <xStreamBufferSend+0x8c>
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <xStreamBufferSend+0xf0>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    15be:	0f 90       	pop	r0
    15c0:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    15c2:	61 14       	cp	r6, r1
    15c4:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    15c6:	19 f4       	brne	.+6      	; 0x15ce <xStreamBufferSend+0xfc>
    15c8:	c4 01       	movw	r24, r8
    15ca:	71 df       	rcall	.-286    	; 0x14ae <xStreamBufferSpacesAvailable>
    15cc:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    15ce:	82 01       	movw	r16, r4
    15d0:	93 01       	movw	r18, r6
    15d2:	a1 01       	movw	r20, r2
    15d4:	6a 85       	ldd	r22, Y+10	; 0x0a
    15d6:	7b 85       	ldd	r23, Y+11	; 0x0b
    15d8:	c4 01       	movw	r24, r8
    15da:	6c de       	rcall	.-808    	; 0x12b4 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    15dc:	6c 01       	movw	r12, r24
    15de:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    15e0:	e9 f0       	breq	.+58     	; 0x161c <xStreamBufferSend+0x14a>
    15e2:	c4 01       	movw	r24, r8
    15e4:	0b de       	rcall	.-1002   	; 0x11fc <prvBytesInBuffer>
    15e6:	f4 01       	movw	r30, r8
    15e8:	26 81       	ldd	r18, Z+6	; 0x06
    15ea:	37 81       	ldd	r19, Z+7	; 0x07
    15ec:	82 17       	cp	r24, r18
    15ee:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    15f0:	a8 f0       	brcs	.+42     	; 0x161c <xStreamBufferSend+0x14a>
    15f2:	58 d3       	rcall	.+1712   	; 0x1ca4 <vTaskSuspendAll>
    15f4:	f4 01       	movw	r30, r8
    15f6:	80 85       	ldd	r24, Z+8	; 0x08
    15f8:	91 85       	ldd	r25, Z+9	; 0x09
    15fa:	89 2b       	or	r24, r25
    15fc:	71 f0       	breq	.+28     	; 0x161a <xStreamBufferSend+0x148>
    15fe:	80 85       	ldd	r24, Z+8	; 0x08
    1600:	91 85       	ldd	r25, Z+9	; 0x09
    1602:	e1 2c       	mov	r14, r1
    1604:	f1 2c       	mov	r15, r1
    1606:	00 e0       	ldi	r16, 0x00	; 0
    1608:	20 e0       	ldi	r18, 0x00	; 0
    160a:	30 e0       	ldi	r19, 0x00	; 0
    160c:	a9 01       	movw	r20, r18
    160e:	60 e0       	ldi	r22, 0x00	; 0
    1610:	0e 94 13 15 	call	0x2a26	; 0x2a26 <xTaskGenericNotify>
    1614:	f4 01       	movw	r30, r8
    1616:	11 86       	std	Z+9, r1	; 0x09
    1618:	10 86       	std	Z+8, r1	; 0x08
    161a:	88 d4       	rcall	.+2320   	; 0x1f2c <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    161c:	c6 01       	movw	r24, r12
    161e:	2b 96       	adiw	r28, 0x0b	; 11
    1620:	0f b6       	in	r0, 0x3f	; 63
    1622:	f8 94       	cli
    1624:	de bf       	out	0x3e, r29	; 62
    1626:	0f be       	out	0x3f, r0	; 63
    1628:	cd bf       	out	0x3d, r28	; 61
    162a:	df 91       	pop	r29
    162c:	cf 91       	pop	r28
    162e:	1f 91       	pop	r17
    1630:	0f 91       	pop	r16
    1632:	ff 90       	pop	r15
    1634:	ef 90       	pop	r14
    1636:	df 90       	pop	r13
    1638:	cf 90       	pop	r12
    163a:	bf 90       	pop	r11
    163c:	af 90       	pop	r10
    163e:	9f 90       	pop	r9
    1640:	8f 90       	pop	r8
    1642:	7f 90       	pop	r7
    1644:	6f 90       	pop	r6
    1646:	5f 90       	pop	r5
    1648:	4f 90       	pop	r4
    164a:	3f 90       	pop	r3
    164c:	2f 90       	pop	r2
    164e:	08 95       	ret

00001650 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    1650:	af 92       	push	r10
    1652:	bf 92       	push	r11
    1654:	cf 92       	push	r12
    1656:	df 92       	push	r13
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
    1660:	cf 93       	push	r28
    1662:	df 93       	push	r29
    1664:	ec 01       	movw	r28, r24
    1666:	7b 01       	movw	r14, r22
    1668:	5a 01       	movw	r10, r20
    166a:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    166c:	8e 85       	ldd	r24, Y+14	; 0x0e
    166e:	80 ff       	sbrs	r24, 0
    1670:	04 c0       	rjmp	.+8      	; 0x167a <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1672:	8a 01       	movw	r16, r20
    1674:	0e 5f       	subi	r16, 0xFE	; 254
    1676:	1f 4f       	sbci	r17, 0xFF	; 255
    1678:	01 c0       	rjmp	.+2      	; 0x167c <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    167a:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    167c:	ce 01       	movw	r24, r28
    167e:	17 df       	rcall	.-466    	; 0x14ae <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    1680:	9c 01       	movw	r18, r24
    1682:	a5 01       	movw	r20, r10
    1684:	b7 01       	movw	r22, r14
    1686:	ce 01       	movw	r24, r28
    1688:	15 de       	rcall	.-982    	; 0x12b4 <prvWriteMessageToBuffer>
    168a:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    168c:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    168e:	c1 f0       	breq	.+48     	; 0x16c0 <xStreamBufferSendFromISR+0x70>
    1690:	ce 01       	movw	r24, r28
    1692:	b4 dd       	rcall	.-1176   	; 0x11fc <prvBytesInBuffer>
    1694:	2e 81       	ldd	r18, Y+6	; 0x06
    1696:	3f 81       	ldd	r19, Y+7	; 0x07
    1698:	82 17       	cp	r24, r18
    169a:	93 07       	cpc	r25, r19
    169c:	88 f0       	brcs	.+34     	; 0x16c0 <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    169e:	88 85       	ldd	r24, Y+8	; 0x08
    16a0:	99 85       	ldd	r25, Y+9	; 0x09
    16a2:	89 2b       	or	r24, r25
    16a4:	69 f0       	breq	.+26     	; 0x16c0 <xStreamBufferSendFromISR+0x70>
    16a6:	88 85       	ldd	r24, Y+8	; 0x08
    16a8:	99 85       	ldd	r25, Y+9	; 0x09
    16aa:	e1 2c       	mov	r14, r1
    16ac:	f1 2c       	mov	r15, r1
    16ae:	00 e0       	ldi	r16, 0x00	; 0
    16b0:	20 e0       	ldi	r18, 0x00	; 0
    16b2:	30 e0       	ldi	r19, 0x00	; 0
    16b4:	a9 01       	movw	r20, r18
    16b6:	60 e0       	ldi	r22, 0x00	; 0
    16b8:	0e 94 07 16 	call	0x2c0e	; 0x2c0e <xTaskGenericNotifyFromISR>
    16bc:	19 86       	std	Y+9, r1	; 0x09
    16be:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    16c0:	c5 01       	movw	r24, r10
    16c2:	df 91       	pop	r29
    16c4:	cf 91       	pop	r28
    16c6:	1f 91       	pop	r17
    16c8:	0f 91       	pop	r16
    16ca:	ff 90       	pop	r15
    16cc:	ef 90       	pop	r14
    16ce:	df 90       	pop	r13
    16d0:	cf 90       	pop	r12
    16d2:	bf 90       	pop	r11
    16d4:	af 90       	pop	r10
    16d6:	08 95       	ret

000016d8 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    16d8:	2f 92       	push	r2
    16da:	3f 92       	push	r3
    16dc:	4f 92       	push	r4
    16de:	5f 92       	push	r5
    16e0:	6f 92       	push	r6
    16e2:	7f 92       	push	r7
    16e4:	8f 92       	push	r8
    16e6:	9f 92       	push	r9
    16e8:	af 92       	push	r10
    16ea:	bf 92       	push	r11
    16ec:	cf 92       	push	r12
    16ee:	df 92       	push	r13
    16f0:	ef 92       	push	r14
    16f2:	ff 92       	push	r15
    16f4:	0f 93       	push	r16
    16f6:	1f 93       	push	r17
    16f8:	cf 93       	push	r28
    16fa:	df 93       	push	r29
    16fc:	1f 92       	push	r1
    16fe:	1f 92       	push	r1
    1700:	cd b7       	in	r28, 0x3d	; 61
    1702:	de b7       	in	r29, 0x3e	; 62
    1704:	4c 01       	movw	r8, r24
    1706:	1b 01       	movw	r2, r22
    1708:	2a 01       	movw	r4, r20
    170a:	58 01       	movw	r10, r16
    170c:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    170e:	fc 01       	movw	r30, r24
    1710:	86 85       	ldd	r24, Z+14	; 0x0e
    1712:	80 fd       	sbrc	r24, 0
    1714:	03 c0       	rjmp	.+6      	; 0x171c <xStreamBufferReceive+0x44>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1716:	61 2c       	mov	r6, r1
    1718:	71 2c       	mov	r7, r1
    171a:	04 c0       	rjmp	.+8      	; 0x1724 <xStreamBufferReceive+0x4c>
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    171c:	68 94       	set
    171e:	66 24       	eor	r6, r6
    1720:	61 f8       	bld	r6, 1
    1722:	71 2c       	mov	r7, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1724:	a1 14       	cp	r10, r1
    1726:	b1 04       	cpc	r11, r1
    1728:	c1 04       	cpc	r12, r1
    172a:	d1 04       	cpc	r13, r1
    172c:	49 f1       	breq	.+82     	; 0x1780 <xStreamBufferReceive+0xa8>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    172e:	0f b6       	in	r0, 0x3f	; 63
    1730:	f8 94       	cli
    1732:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1734:	c4 01       	movw	r24, r8
    1736:	62 dd       	rcall	.-1340   	; 0x11fc <prvBytesInBuffer>
    1738:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    173a:	68 16       	cp	r6, r24
    173c:	79 06       	cpc	r7, r25
    173e:	48 f0       	brcs	.+18     	; 0x1752 <xStreamBufferReceive+0x7a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    1740:	60 e0       	ldi	r22, 0x00	; 0
    1742:	80 e0       	ldi	r24, 0x00	; 0
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	0e 94 25 17 	call	0x2e4a	; 0x2e4a <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    174a:	57 d7       	rcall	.+3758   	; 0x25fa <xTaskGetCurrentTaskHandle>
    174c:	f4 01       	movw	r30, r8
    174e:	91 87       	std	Z+9, r25	; 0x09
    1750:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    1752:	0f 90       	pop	r0
    1754:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1756:	60 16       	cp	r6, r16
    1758:	71 06       	cpc	r7, r17
    175a:	c0 f0       	brcs	.+48     	; 0x178c <xStreamBufferReceive+0xb4>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    175c:	e1 2c       	mov	r14, r1
    175e:	f1 2c       	mov	r15, r1
    1760:	00 e0       	ldi	r16, 0x00	; 0
    1762:	10 e0       	ldi	r17, 0x00	; 0
    1764:	98 01       	movw	r18, r16
    1766:	40 e0       	ldi	r20, 0x00	; 0
    1768:	50 e0       	ldi	r21, 0x00	; 0
    176a:	ba 01       	movw	r22, r20
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	0e 94 6b 14 	call	0x28d6	; 0x28d6 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    1772:	f4 01       	movw	r30, r8
    1774:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1776:	10 86       	std	Z+8, r1	; 0x08
    1778:	c4 01       	movw	r24, r8
    177a:	40 dd       	rcall	.-1408   	; 0x11fc <prvBytesInBuffer>
    177c:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    177e:	03 c0       	rjmp	.+6      	; 0x1786 <xStreamBufferReceive+0xae>
    1780:	c4 01       	movw	r24, r8
    1782:	3c dd       	rcall	.-1416   	; 0x11fc <prvBytesInBuffer>
    1784:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1786:	60 16       	cp	r6, r16
    1788:	71 06       	cpc	r7, r17
    178a:	c8 f5       	brcc	.+114    	; 0x17fe <xStreamBufferReceive+0x126>
                                        size_t xBytesToStoreMessageLength )
{
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    178c:	61 14       	cp	r6, r1
    178e:	71 04       	cpc	r7, r1
    1790:	c1 f0       	breq	.+48     	; 0x17c2 <xStreamBufferReceive+0xea>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    1792:	f4 01       	movw	r30, r8
    1794:	c0 80       	ld	r12, Z
    1796:	d1 80       	ldd	r13, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1798:	98 01       	movw	r18, r16
    179a:	a3 01       	movw	r20, r6
    179c:	be 01       	movw	r22, r28
    179e:	6f 5f       	subi	r22, 0xFF	; 255
    17a0:	7f 4f       	sbci	r23, 0xFF	; 255
    17a2:	c4 01       	movw	r24, r8
    17a4:	c7 dd       	rcall	.-1138   	; 0x1334 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    17a6:	89 81       	ldd	r24, Y+1	; 0x01
    17a8:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    17aa:	06 19       	sub	r16, r6
    17ac:	17 09       	sbc	r17, r7

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    17ae:	48 16       	cp	r4, r24
    17b0:	59 06       	cpc	r5, r25
    17b2:	30 f4       	brcc	.+12     	; 0x17c0 <xStreamBufferReceive+0xe8>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    17b4:	f4 01       	movw	r30, r8
    17b6:	d1 82       	std	Z+1, r13	; 0x01
    17b8:	c0 82       	st	Z, r12
            xNextMessageLength = 0;
    17ba:	41 2c       	mov	r4, r1
    17bc:	51 2c       	mov	r5, r1
    17be:	01 c0       	rjmp	.+2      	; 0x17c2 <xStreamBufferReceive+0xea>
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    17c0:	2c 01       	movw	r4, r24
    17c2:	98 01       	movw	r18, r16
    17c4:	a2 01       	movw	r20, r4
    17c6:	b1 01       	movw	r22, r2
    17c8:	c4 01       	movw	r24, r8
    17ca:	b4 dd       	rcall	.-1176   	; 0x1334 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    17cc:	6c 01       	movw	r12, r24
    17ce:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    17d0:	c1 f0       	breq	.+48     	; 0x1802 <xStreamBufferReceive+0x12a>
    17d2:	68 d2       	rcall	.+1232   	; 0x1ca4 <vTaskSuspendAll>
    17d4:	f4 01       	movw	r30, r8
    17d6:	82 85       	ldd	r24, Z+10	; 0x0a
    17d8:	93 85       	ldd	r25, Z+11	; 0x0b
    17da:	89 2b       	or	r24, r25
    17dc:	71 f0       	breq	.+28     	; 0x17fa <xStreamBufferReceive+0x122>
    17de:	82 85       	ldd	r24, Z+10	; 0x0a
    17e0:	93 85       	ldd	r25, Z+11	; 0x0b
    17e2:	e1 2c       	mov	r14, r1
    17e4:	f1 2c       	mov	r15, r1
    17e6:	00 e0       	ldi	r16, 0x00	; 0
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	a9 01       	movw	r20, r18
    17ee:	60 e0       	ldi	r22, 0x00	; 0
    17f0:	0e 94 13 15 	call	0x2a26	; 0x2a26 <xTaskGenericNotify>
    17f4:	f4 01       	movw	r30, r8
    17f6:	13 86       	std	Z+11, r1	; 0x0b
    17f8:	12 86       	std	Z+10, r1	; 0x0a
    17fa:	98 d3       	rcall	.+1840   	; 0x1f2c <xTaskResumeAll>
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <xStreamBufferReceive+0x12a>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    17fe:	c1 2c       	mov	r12, r1
    1800:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    1802:	c6 01       	movw	r24, r12
    1804:	0f 90       	pop	r0
    1806:	0f 90       	pop	r0
    1808:	df 91       	pop	r29
    180a:	cf 91       	pop	r28
    180c:	1f 91       	pop	r17
    180e:	0f 91       	pop	r16
    1810:	ff 90       	pop	r15
    1812:	ef 90       	pop	r14
    1814:	df 90       	pop	r13
    1816:	cf 90       	pop	r12
    1818:	bf 90       	pop	r11
    181a:	af 90       	pop	r10
    181c:	9f 90       	pop	r9
    181e:	8f 90       	pop	r8
    1820:	7f 90       	pop	r7
    1822:	6f 90       	pop	r6
    1824:	5f 90       	pop	r5
    1826:	4f 90       	pop	r4
    1828:	3f 90       	pop	r3
    182a:	2f 90       	pop	r2
    182c:	08 95       	ret

0000182e <prvResetNextTaskUnblockTime>:
    182e:	e0 91 b3 15 	lds	r30, 0x15B3	; 0x8015b3 <pxDelayedTaskList>
    1832:	f0 91 b4 15 	lds	r31, 0x15B4	; 0x8015b4 <pxDelayedTaskList+0x1>
    1836:	80 81       	ld	r24, Z
    1838:	81 11       	cpse	r24, r1
    183a:	0c c0       	rjmp	.+24     	; 0x1854 <prvResetNextTaskUnblockTime+0x26>
    183c:	8f ef       	ldi	r24, 0xFF	; 255
    183e:	9f ef       	ldi	r25, 0xFF	; 255
    1840:	dc 01       	movw	r26, r24
    1842:	80 93 7d 15 	sts	0x157D, r24	; 0x80157d <xNextTaskUnblockTime>
    1846:	90 93 7e 15 	sts	0x157E, r25	; 0x80157e <xNextTaskUnblockTime+0x1>
    184a:	a0 93 7f 15 	sts	0x157F, r26	; 0x80157f <xNextTaskUnblockTime+0x2>
    184e:	b0 93 80 15 	sts	0x1580, r27	; 0x801580 <xNextTaskUnblockTime+0x3>
    1852:	08 95       	ret
    1854:	e0 91 b3 15 	lds	r30, 0x15B3	; 0x8015b3 <pxDelayedTaskList>
    1858:	f0 91 b4 15 	lds	r31, 0x15B4	; 0x8015b4 <pxDelayedTaskList+0x1>
    185c:	07 80       	ldd	r0, Z+7	; 0x07
    185e:	f0 85       	ldd	r31, Z+8	; 0x08
    1860:	e0 2d       	mov	r30, r0
    1862:	80 81       	ld	r24, Z
    1864:	91 81       	ldd	r25, Z+1	; 0x01
    1866:	a2 81       	ldd	r26, Z+2	; 0x02
    1868:	b3 81       	ldd	r27, Z+3	; 0x03
    186a:	80 93 7d 15 	sts	0x157D, r24	; 0x80157d <xNextTaskUnblockTime>
    186e:	90 93 7e 15 	sts	0x157E, r25	; 0x80157e <xNextTaskUnblockTime+0x1>
    1872:	a0 93 7f 15 	sts	0x157F, r26	; 0x80157f <xNextTaskUnblockTime+0x2>
    1876:	b0 93 80 15 	sts	0x1580, r27	; 0x801580 <xNextTaskUnblockTime+0x3>
    187a:	08 95       	ret

0000187c <prvAddCurrentTaskToDelayedList>:
    187c:	8f 92       	push	r8
    187e:	9f 92       	push	r9
    1880:	af 92       	push	r10
    1882:	bf 92       	push	r11
    1884:	cf 92       	push	r12
    1886:	df 92       	push	r13
    1888:	ef 92       	push	r14
    188a:	ff 92       	push	r15
    188c:	cf 93       	push	r28
    188e:	df 93       	push	r29
    1890:	6b 01       	movw	r12, r22
    1892:	7c 01       	movw	r14, r24
    1894:	c4 2f       	mov	r28, r20
    1896:	80 90 8a 15 	lds	r8, 0x158A	; 0x80158a <xTickCount>
    189a:	90 90 8b 15 	lds	r9, 0x158B	; 0x80158b <xTickCount+0x1>
    189e:	a0 90 8c 15 	lds	r10, 0x158C	; 0x80158c <xTickCount+0x2>
    18a2:	b0 90 8d 15 	lds	r11, 0x158D	; 0x80158d <xTickCount+0x3>
    18a6:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <pxCurrentTCB>
    18aa:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    18ae:	02 96       	adiw	r24, 0x02	; 2
    18b0:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
    18b4:	8f ef       	ldi	r24, 0xFF	; 255
    18b6:	c8 16       	cp	r12, r24
    18b8:	d8 06       	cpc	r13, r24
    18ba:	e8 06       	cpc	r14, r24
    18bc:	f8 06       	cpc	r15, r24
    18be:	b1 f5       	brne	.+108    	; 0x192c <prvAddCurrentTaskToDelayedList+0xb0>
    18c0:	cc 23       	and	r28, r28
    18c2:	a1 f1       	breq	.+104    	; 0x192c <prvAddCurrentTaskToDelayedList+0xb0>
    18c4:	ef e8       	ldi	r30, 0x8F	; 143
    18c6:	f5 e1       	ldi	r31, 0x15	; 21
    18c8:	a1 81       	ldd	r26, Z+1	; 0x01
    18ca:	b2 81       	ldd	r27, Z+2	; 0x02
    18cc:	c0 91 39 16 	lds	r28, 0x1639	; 0x801639 <pxCurrentTCB>
    18d0:	d0 91 3a 16 	lds	r29, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    18d4:	bf 83       	std	Y+7, r27	; 0x07
    18d6:	ae 83       	std	Y+6, r26	; 0x06
    18d8:	c0 91 39 16 	lds	r28, 0x1639	; 0x801639 <pxCurrentTCB>
    18dc:	d0 91 3a 16 	lds	r29, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    18e0:	16 96       	adiw	r26, 0x06	; 6
    18e2:	8d 91       	ld	r24, X+
    18e4:	9c 91       	ld	r25, X
    18e6:	17 97       	sbiw	r26, 0x07	; 7
    18e8:	99 87       	std	Y+9, r25	; 0x09
    18ea:	88 87       	std	Y+8, r24	; 0x08
    18ec:	16 96       	adiw	r26, 0x06	; 6
    18ee:	cd 91       	ld	r28, X+
    18f0:	dc 91       	ld	r29, X
    18f2:	17 97       	sbiw	r26, 0x07	; 7
    18f4:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <pxCurrentTCB>
    18f8:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    18fc:	02 96       	adiw	r24, 0x02	; 2
    18fe:	9d 83       	std	Y+5, r25	; 0x05
    1900:	8c 83       	std	Y+4, r24	; 0x04
    1902:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <pxCurrentTCB>
    1906:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    190a:	02 96       	adiw	r24, 0x02	; 2
    190c:	17 96       	adiw	r26, 0x07	; 7
    190e:	9c 93       	st	X, r25
    1910:	8e 93       	st	-X, r24
    1912:	16 97       	sbiw	r26, 0x06	; 6
    1914:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
    1918:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    191c:	1d 96       	adiw	r26, 0x0d	; 13
    191e:	fc 93       	st	X, r31
    1920:	ee 93       	st	-X, r30
    1922:	1c 97       	sbiw	r26, 0x0c	; 12
    1924:	80 81       	ld	r24, Z
    1926:	8f 5f       	subi	r24, 0xFF	; 255
    1928:	80 83       	st	Z, r24
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <prvAddCurrentTaskToDelayedList+0x12e>
    192c:	c8 0c       	add	r12, r8
    192e:	d9 1c       	adc	r13, r9
    1930:	ea 1c       	adc	r14, r10
    1932:	fb 1c       	adc	r15, r11
    1934:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    1938:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    193c:	c2 82       	std	Z+2, r12	; 0x02
    193e:	d3 82       	std	Z+3, r13	; 0x03
    1940:	e4 82       	std	Z+4, r14	; 0x04
    1942:	f5 82       	std	Z+5, r15	; 0x05
    1944:	c8 14       	cp	r12, r8
    1946:	d9 04       	cpc	r13, r9
    1948:	ea 04       	cpc	r14, r10
    194a:	fb 04       	cpc	r15, r11
    194c:	68 f4       	brcc	.+26     	; 0x1968 <prvAddCurrentTaskToDelayedList+0xec>
    194e:	60 91 39 16 	lds	r22, 0x1639	; 0x801639 <pxCurrentTCB>
    1952:	70 91 3a 16 	lds	r23, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    1956:	80 91 b1 15 	lds	r24, 0x15B1	; 0x8015b1 <pxOverflowDelayedTaskList>
    195a:	90 91 b2 15 	lds	r25, 0x15B2	; 0x8015b2 <pxOverflowDelayedTaskList+0x1>
    195e:	6e 5f       	subi	r22, 0xFE	; 254
    1960:	7f 4f       	sbci	r23, 0xFF	; 255
    1962:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    1966:	21 c0       	rjmp	.+66     	; 0x19aa <prvAddCurrentTaskToDelayedList+0x12e>
    1968:	60 91 39 16 	lds	r22, 0x1639	; 0x801639 <pxCurrentTCB>
    196c:	70 91 3a 16 	lds	r23, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    1970:	80 91 b3 15 	lds	r24, 0x15B3	; 0x8015b3 <pxDelayedTaskList>
    1974:	90 91 b4 15 	lds	r25, 0x15B4	; 0x8015b4 <pxDelayedTaskList+0x1>
    1978:	6e 5f       	subi	r22, 0xFE	; 254
    197a:	7f 4f       	sbci	r23, 0xFF	; 255
    197c:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    1980:	80 91 7d 15 	lds	r24, 0x157D	; 0x80157d <xNextTaskUnblockTime>
    1984:	90 91 7e 15 	lds	r25, 0x157E	; 0x80157e <xNextTaskUnblockTime+0x1>
    1988:	a0 91 7f 15 	lds	r26, 0x157F	; 0x80157f <xNextTaskUnblockTime+0x2>
    198c:	b0 91 80 15 	lds	r27, 0x1580	; 0x801580 <xNextTaskUnblockTime+0x3>
    1990:	c8 16       	cp	r12, r24
    1992:	d9 06       	cpc	r13, r25
    1994:	ea 06       	cpc	r14, r26
    1996:	fb 06       	cpc	r15, r27
    1998:	40 f4       	brcc	.+16     	; 0x19aa <prvAddCurrentTaskToDelayedList+0x12e>
    199a:	c0 92 7d 15 	sts	0x157D, r12	; 0x80157d <xNextTaskUnblockTime>
    199e:	d0 92 7e 15 	sts	0x157E, r13	; 0x80157e <xNextTaskUnblockTime+0x1>
    19a2:	e0 92 7f 15 	sts	0x157F, r14	; 0x80157f <xNextTaskUnblockTime+0x2>
    19a6:	f0 92 80 15 	sts	0x1580, r15	; 0x801580 <xNextTaskUnblockTime+0x3>
    19aa:	df 91       	pop	r29
    19ac:	cf 91       	pop	r28
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	9f 90       	pop	r9
    19bc:	8f 90       	pop	r8
    19be:	08 95       	ret

000019c0 <xTaskCreate>:
    19c0:	4f 92       	push	r4
    19c2:	5f 92       	push	r5
    19c4:	6f 92       	push	r6
    19c6:	7f 92       	push	r7
    19c8:	8f 92       	push	r8
    19ca:	9f 92       	push	r9
    19cc:	af 92       	push	r10
    19ce:	bf 92       	push	r11
    19d0:	cf 92       	push	r12
    19d2:	df 92       	push	r13
    19d4:	ef 92       	push	r14
    19d6:	ff 92       	push	r15
    19d8:	0f 93       	push	r16
    19da:	1f 93       	push	r17
    19dc:	cf 93       	push	r28
    19de:	df 93       	push	r29
    19e0:	4c 01       	movw	r8, r24
    19e2:	6b 01       	movw	r12, r22
    19e4:	5a 01       	movw	r10, r20
    19e6:	29 01       	movw	r4, r18
    19e8:	ca 01       	movw	r24, r20
    19ea:	0e 94 b7 02 	call	0x56e	; 0x56e <pvPortMalloc>
    19ee:	3c 01       	movw	r6, r24
    19f0:	89 2b       	or	r24, r25
    19f2:	09 f4       	brne	.+2      	; 0x19f6 <xTaskCreate+0x36>
    19f4:	0d c1       	rjmp	.+538    	; 0x1c10 <xTaskCreate+0x250>
    19f6:	84 e3       	ldi	r24, 0x34	; 52
    19f8:	90 e0       	ldi	r25, 0x00	; 0
    19fa:	0e 94 b7 02 	call	0x56e	; 0x56e <pvPortMalloc>
    19fe:	ec 01       	movw	r28, r24
    1a00:	89 2b       	or	r24, r25
    1a02:	99 f0       	breq	.+38     	; 0x1a2a <xTaskCreate+0x6a>
    1a04:	7c 8e       	std	Y+28, r7	; 0x1c
    1a06:	6b 8e       	std	Y+27, r6	; 0x1b
    1a08:	a5 01       	movw	r20, r10
    1a0a:	65 ea       	ldi	r22, 0xA5	; 165
    1a0c:	70 e0       	ldi	r23, 0x00	; 0
    1a0e:	c3 01       	movw	r24, r6
    1a10:	0e 94 94 31 	call	0x6328	; 0x6328 <memset>
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	a8 1a       	sub	r10, r24
    1a18:	b1 08       	sbc	r11, r1
    1a1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a1e:	a8 0e       	add	r10, r24
    1a20:	b9 1e       	adc	r11, r25
    1a22:	c1 14       	cp	r12, r1
    1a24:	d1 04       	cpc	r13, r1
    1a26:	29 f4       	brne	.+10     	; 0x1a32 <xTaskCreate+0x72>
    1a28:	20 c0       	rjmp	.+64     	; 0x1a6a <xTaskCreate+0xaa>
    1a2a:	c3 01       	movw	r24, r6
    1a2c:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vPortFree>
    1a30:	ef c0       	rjmp	.+478    	; 0x1c10 <xTaskCreate+0x250>
    1a32:	d6 01       	movw	r26, r12
    1a34:	8c 91       	ld	r24, X
    1a36:	8d 8f       	std	Y+29, r24	; 0x1d
    1a38:	8c 91       	ld	r24, X
    1a3a:	88 23       	and	r24, r24
    1a3c:	a1 f0       	breq	.+40     	; 0x1a66 <xTaskCreate+0xa6>
    1a3e:	ae 01       	movw	r20, r28
    1a40:	42 5e       	subi	r20, 0xE2	; 226
    1a42:	5f 4f       	sbci	r21, 0xFF	; 255
    1a44:	f6 01       	movw	r30, r12
    1a46:	31 96       	adiw	r30, 0x01	; 1
    1a48:	b0 e1       	ldi	r27, 0x10	; 16
    1a4a:	cb 0e       	add	r12, r27
    1a4c:	d1 1c       	adc	r13, r1
    1a4e:	cf 01       	movw	r24, r30
    1a50:	21 91       	ld	r18, Z+
    1a52:	da 01       	movw	r26, r20
    1a54:	2d 93       	st	X+, r18
    1a56:	ad 01       	movw	r20, r26
    1a58:	dc 01       	movw	r26, r24
    1a5a:	8c 91       	ld	r24, X
    1a5c:	88 23       	and	r24, r24
    1a5e:	19 f0       	breq	.+6      	; 0x1a66 <xTaskCreate+0xa6>
    1a60:	ce 16       	cp	r12, r30
    1a62:	df 06       	cpc	r13, r31
    1a64:	a1 f7       	brne	.-24     	; 0x1a4e <xTaskCreate+0x8e>
    1a66:	1c a6       	std	Y+44, r1	; 0x2c
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <xTaskCreate+0xac>
    1a6a:	1d 8e       	std	Y+29, r1	; 0x1d
    1a6c:	0a 30       	cpi	r16, 0x0A	; 10
    1a6e:	08 f0       	brcs	.+2      	; 0x1a72 <xTaskCreate+0xb2>
    1a70:	09 e0       	ldi	r16, 0x09	; 9
    1a72:	0a 8f       	std	Y+26, r16	; 0x1a
    1a74:	0d a7       	std	Y+45, r16	; 0x2d
    1a76:	1e a6       	std	Y+46, r1	; 0x2e
    1a78:	6e 01       	movw	r12, r28
    1a7a:	b2 e0       	ldi	r27, 0x02	; 2
    1a7c:	cb 0e       	add	r12, r27
    1a7e:	d1 1c       	adc	r13, r1
    1a80:	c6 01       	movw	r24, r12
    1a82:	0e 94 ca 03 	call	0x794	; 0x794 <vListInitialiseItem>
    1a86:	ce 01       	movw	r24, r28
    1a88:	0e 96       	adiw	r24, 0x0e	; 14
    1a8a:	0e 94 ca 03 	call	0x794	; 0x794 <vListInitialiseItem>
    1a8e:	db 87       	std	Y+11, r29	; 0x0b
    1a90:	ca 87       	std	Y+10, r28	; 0x0a
    1a92:	8a e0       	ldi	r24, 0x0A	; 10
    1a94:	90 e0       	ldi	r25, 0x00	; 0
    1a96:	a0 e0       	ldi	r26, 0x00	; 0
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	80 1b       	sub	r24, r16
    1a9c:	91 09       	sbc	r25, r1
    1a9e:	a1 09       	sbc	r26, r1
    1aa0:	b1 09       	sbc	r27, r1
    1aa2:	8e 87       	std	Y+14, r24	; 0x0e
    1aa4:	9f 87       	std	Y+15, r25	; 0x0f
    1aa6:	a8 8b       	std	Y+16, r26	; 0x10
    1aa8:	b9 8b       	std	Y+17, r27	; 0x11
    1aaa:	df 8b       	std	Y+23, r29	; 0x17
    1aac:	ce 8b       	std	Y+22, r28	; 0x16
    1aae:	84 e0       	ldi	r24, 0x04	; 4
    1ab0:	fe 01       	movw	r30, r28
    1ab2:	bf 96       	adiw	r30, 0x2f	; 47
    1ab4:	df 01       	movw	r26, r30
    1ab6:	1d 92       	st	X+, r1
    1ab8:	8a 95       	dec	r24
    1aba:	e9 f7       	brne	.-6      	; 0x1ab6 <xTaskCreate+0xf6>
    1abc:	1b aa       	std	Y+51, r1	; 0x33
    1abe:	a2 01       	movw	r20, r4
    1ac0:	b4 01       	movw	r22, r8
    1ac2:	c5 01       	movw	r24, r10
    1ac4:	0e 94 32 04 	call	0x864	; 0x864 <pxPortInitialiseStack>
    1ac8:	99 83       	std	Y+1, r25	; 0x01
    1aca:	88 83       	st	Y, r24
    1acc:	e1 14       	cp	r14, r1
    1ace:	f1 04       	cpc	r15, r1
    1ad0:	19 f0       	breq	.+6      	; 0x1ad8 <xTaskCreate+0x118>
    1ad2:	f7 01       	movw	r30, r14
    1ad4:	d1 83       	std	Z+1, r29	; 0x01
    1ad6:	c0 83       	st	Z, r28
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	0f 92       	push	r0
    1ade:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <uxCurrentNumberOfTasks>
    1ae2:	8f 5f       	subi	r24, 0xFF	; 255
    1ae4:	80 93 8e 15 	sts	0x158E, r24	; 0x80158e <uxCurrentNumberOfTasks>
    1ae8:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <pxCurrentTCB>
    1aec:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    1af0:	89 2b       	or	r24, r25
    1af2:	d1 f5       	brne	.+116    	; 0x1b68 <xTaskCreate+0x1a8>
    1af4:	d0 93 3a 16 	sts	0x163A, r29	; 0x80163a <pxCurrentTCB+0x1>
    1af8:	c0 93 39 16 	sts	0x1639, r28	; 0x801639 <pxCurrentTCB>
    1afc:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <uxCurrentNumberOfTasks>
    1b00:	81 30       	cpi	r24, 0x01	; 1
    1b02:	09 f0       	breq	.+2      	; 0x1b06 <xTaskCreate+0x146>
    1b04:	41 c0       	rjmp	.+130    	; 0x1b88 <xTaskCreate+0x1c8>
    1b06:	0b ec       	ldi	r16, 0xCB	; 203
    1b08:	15 e1       	ldi	r17, 0x15	; 21
    1b0a:	0f 2e       	mov	r0, r31
    1b0c:	f9 e3       	ldi	r31, 0x39	; 57
    1b0e:	ef 2e       	mov	r14, r31
    1b10:	f6 e1       	ldi	r31, 0x16	; 22
    1b12:	ff 2e       	mov	r15, r31
    1b14:	f0 2d       	mov	r31, r0
    1b16:	c8 01       	movw	r24, r16
    1b18:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b1c:	05 5f       	subi	r16, 0xF5	; 245
    1b1e:	1f 4f       	sbci	r17, 0xFF	; 255
    1b20:	0e 15       	cp	r16, r14
    1b22:	1f 05       	cpc	r17, r15
    1b24:	c1 f7       	brne	.-16     	; 0x1b16 <xTaskCreate+0x156>
    1b26:	80 ec       	ldi	r24, 0xC0	; 192
    1b28:	95 e1       	ldi	r25, 0x15	; 21
    1b2a:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b2e:	85 eb       	ldi	r24, 0xB5	; 181
    1b30:	95 e1       	ldi	r25, 0x15	; 21
    1b32:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b36:	86 ea       	ldi	r24, 0xA6	; 166
    1b38:	95 e1       	ldi	r25, 0x15	; 21
    1b3a:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b3e:	8b e9       	ldi	r24, 0x9B	; 155
    1b40:	95 e1       	ldi	r25, 0x15	; 21
    1b42:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b46:	8f e8       	ldi	r24, 0x8F	; 143
    1b48:	95 e1       	ldi	r25, 0x15	; 21
    1b4a:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1b4e:	80 ec       	ldi	r24, 0xC0	; 192
    1b50:	95 e1       	ldi	r25, 0x15	; 21
    1b52:	90 93 b4 15 	sts	0x15B4, r25	; 0x8015b4 <pxDelayedTaskList+0x1>
    1b56:	80 93 b3 15 	sts	0x15B3, r24	; 0x8015b3 <pxDelayedTaskList>
    1b5a:	85 eb       	ldi	r24, 0xB5	; 181
    1b5c:	95 e1       	ldi	r25, 0x15	; 21
    1b5e:	90 93 b2 15 	sts	0x15B2, r25	; 0x8015b2 <pxOverflowDelayedTaskList+0x1>
    1b62:	80 93 b1 15 	sts	0x15B1, r24	; 0x8015b1 <pxOverflowDelayedTaskList>
    1b66:	10 c0       	rjmp	.+32     	; 0x1b88 <xTaskCreate+0x1c8>
    1b68:	80 91 88 15 	lds	r24, 0x1588	; 0x801588 <xSchedulerRunning>
    1b6c:	81 11       	cpse	r24, r1
    1b6e:	0c c0       	rjmp	.+24     	; 0x1b88 <xTaskCreate+0x1c8>
    1b70:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    1b74:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    1b78:	92 8d       	ldd	r25, Z+26	; 0x1a
    1b7a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1b7c:	89 17       	cp	r24, r25
    1b7e:	20 f0       	brcs	.+8      	; 0x1b88 <xTaskCreate+0x1c8>
    1b80:	d0 93 3a 16 	sts	0x163A, r29	; 0x80163a <pxCurrentTCB+0x1>
    1b84:	c0 93 39 16 	sts	0x1639, r28	; 0x801639 <pxCurrentTCB>
    1b88:	80 91 81 15 	lds	r24, 0x1581	; 0x801581 <uxTaskNumber>
    1b8c:	8f 5f       	subi	r24, 0xFF	; 255
    1b8e:	80 93 81 15 	sts	0x1581, r24	; 0x801581 <uxTaskNumber>
    1b92:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1b94:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <uxTopReadyPriority>
    1b98:	8e 17       	cp	r24, r30
    1b9a:	10 f4       	brcc	.+4      	; 0x1ba0 <xTaskCreate+0x1e0>
    1b9c:	e0 93 89 15 	sts	0x1589, r30	; 0x801589 <uxTopReadyPriority>
    1ba0:	8b e0       	ldi	r24, 0x0B	; 11
    1ba2:	8e 9f       	mul	r24, r30
    1ba4:	f0 01       	movw	r30, r0
    1ba6:	11 24       	eor	r1, r1
    1ba8:	e5 53       	subi	r30, 0x35	; 53
    1baa:	fa 4e       	sbci	r31, 0xEA	; 234
    1bac:	01 80       	ldd	r0, Z+1	; 0x01
    1bae:	f2 81       	ldd	r31, Z+2	; 0x02
    1bb0:	e0 2d       	mov	r30, r0
    1bb2:	ff 83       	std	Y+7, r31	; 0x07
    1bb4:	ee 83       	std	Y+6, r30	; 0x06
    1bb6:	26 81       	ldd	r18, Z+6	; 0x06
    1bb8:	37 81       	ldd	r19, Z+7	; 0x07
    1bba:	39 87       	std	Y+9, r19	; 0x09
    1bbc:	28 87       	std	Y+8, r18	; 0x08
    1bbe:	a6 81       	ldd	r26, Z+6	; 0x06
    1bc0:	b7 81       	ldd	r27, Z+7	; 0x07
    1bc2:	15 96       	adiw	r26, 0x05	; 5
    1bc4:	dc 92       	st	X, r13
    1bc6:	ce 92       	st	-X, r12
    1bc8:	14 97       	sbiw	r26, 0x04	; 4
    1bca:	d7 82       	std	Z+7, r13	; 0x07
    1bcc:	c6 82       	std	Z+6, r12	; 0x06
    1bce:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1bd0:	8e 9f       	mul	r24, r30
    1bd2:	f0 01       	movw	r30, r0
    1bd4:	11 24       	eor	r1, r1
    1bd6:	e5 53       	subi	r30, 0x35	; 53
    1bd8:	fa 4e       	sbci	r31, 0xEA	; 234
    1bda:	fd 87       	std	Y+13, r31	; 0x0d
    1bdc:	ec 87       	std	Y+12, r30	; 0x0c
    1bde:	80 81       	ld	r24, Z
    1be0:	8f 5f       	subi	r24, 0xFF	; 255
    1be2:	80 83       	st	Z, r24
    1be4:	0f 90       	pop	r0
    1be6:	0f be       	out	0x3f, r0	; 63
    1be8:	80 91 88 15 	lds	r24, 0x1588	; 0x801588 <xSchedulerRunning>
    1bec:	88 23       	and	r24, r24
    1bee:	61 f0       	breq	.+24     	; 0x1c08 <xTaskCreate+0x248>
    1bf0:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    1bf4:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    1bf8:	92 8d       	ldd	r25, Z+26	; 0x1a
    1bfa:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1bfc:	98 17       	cp	r25, r24
    1bfe:	30 f4       	brcc	.+12     	; 0x1c0c <xTaskCreate+0x24c>
    1c00:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	05 c0       	rjmp	.+10     	; 0x1c12 <xTaskCreate+0x252>
    1c08:	81 e0       	ldi	r24, 0x01	; 1
    1c0a:	03 c0       	rjmp	.+6      	; 0x1c12 <xTaskCreate+0x252>
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	01 c0       	rjmp	.+2      	; 0x1c12 <xTaskCreate+0x252>
    1c10:	8f ef       	ldi	r24, 0xFF	; 255
    1c12:	df 91       	pop	r29
    1c14:	cf 91       	pop	r28
    1c16:	1f 91       	pop	r17
    1c18:	0f 91       	pop	r16
    1c1a:	ff 90       	pop	r15
    1c1c:	ef 90       	pop	r14
    1c1e:	df 90       	pop	r13
    1c20:	cf 90       	pop	r12
    1c22:	bf 90       	pop	r11
    1c24:	af 90       	pop	r10
    1c26:	9f 90       	pop	r9
    1c28:	8f 90       	pop	r8
    1c2a:	7f 90       	pop	r7
    1c2c:	6f 90       	pop	r6
    1c2e:	5f 90       	pop	r5
    1c30:	4f 90       	pop	r4
    1c32:	08 95       	ret

00001c34 <vTaskStartScheduler>:
    1c34:	ef 92       	push	r14
    1c36:	ff 92       	push	r15
    1c38:	0f 93       	push	r16
    1c3a:	0f 2e       	mov	r0, r31
    1c3c:	fb e7       	ldi	r31, 0x7B	; 123
    1c3e:	ef 2e       	mov	r14, r31
    1c40:	f5 e1       	ldi	r31, 0x15	; 21
    1c42:	ff 2e       	mov	r15, r31
    1c44:	f0 2d       	mov	r31, r0
    1c46:	00 e0       	ldi	r16, 0x00	; 0
    1c48:	20 e0       	ldi	r18, 0x00	; 0
    1c4a:	30 e0       	ldi	r19, 0x00	; 0
    1c4c:	40 ec       	ldi	r20, 0xC0	; 192
    1c4e:	50 e0       	ldi	r21, 0x00	; 0
    1c50:	69 e7       	ldi	r22, 0x79	; 121
    1c52:	72 e0       	ldi	r23, 0x02	; 2
    1c54:	8d ec       	ldi	r24, 0xCD	; 205
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	b3 de       	rcall	.-666    	; 0x19c0 <xTaskCreate>
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	e9 f4       	brne	.+58     	; 0x1c98 <vTaskStartScheduler+0x64>
    1c5e:	0e 94 b1 17 	call	0x2f62	; 0x2f62 <xTimerCreateTimerTask>
    1c62:	81 30       	cpi	r24, 0x01	; 1
    1c64:	c9 f4       	brne	.+50     	; 0x1c98 <vTaskStartScheduler+0x64>
    1c66:	f8 94       	cli
    1c68:	8f ef       	ldi	r24, 0xFF	; 255
    1c6a:	9f ef       	ldi	r25, 0xFF	; 255
    1c6c:	dc 01       	movw	r26, r24
    1c6e:	80 93 7d 15 	sts	0x157D, r24	; 0x80157d <xNextTaskUnblockTime>
    1c72:	90 93 7e 15 	sts	0x157E, r25	; 0x80157e <xNextTaskUnblockTime+0x1>
    1c76:	a0 93 7f 15 	sts	0x157F, r26	; 0x80157f <xNextTaskUnblockTime+0x2>
    1c7a:	b0 93 80 15 	sts	0x1580, r27	; 0x801580 <xNextTaskUnblockTime+0x3>
    1c7e:	81 e0       	ldi	r24, 0x01	; 1
    1c80:	80 93 88 15 	sts	0x1588, r24	; 0x801588 <xSchedulerRunning>
    1c84:	10 92 8a 15 	sts	0x158A, r1	; 0x80158a <xTickCount>
    1c88:	10 92 8b 15 	sts	0x158B, r1	; 0x80158b <xTickCount+0x1>
    1c8c:	10 92 8c 15 	sts	0x158C, r1	; 0x80158c <xTickCount+0x2>
    1c90:	10 92 8d 15 	sts	0x158D, r1	; 0x80158d <xTickCount+0x3>
    1c94:	0e 94 49 04 	call	0x892	; 0x892 <xPortStartScheduler>
    1c98:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1c9c:	0f 91       	pop	r16
    1c9e:	ff 90       	pop	r15
    1ca0:	ef 90       	pop	r14
    1ca2:	08 95       	ret

00001ca4 <vTaskSuspendAll>:
    1ca4:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <uxSchedulerSuspended>
    1ca8:	8f 5f       	subi	r24, 0xFF	; 255
    1caa:	80 93 7a 15 	sts	0x157A, r24	; 0x80157a <uxSchedulerSuspended>
    1cae:	08 95       	ret

00001cb0 <xTaskGetTickCount>:
    1cb0:	0f b6       	in	r0, 0x3f	; 63
    1cb2:	f8 94       	cli
    1cb4:	0f 92       	push	r0
    1cb6:	60 91 8a 15 	lds	r22, 0x158A	; 0x80158a <xTickCount>
    1cba:	70 91 8b 15 	lds	r23, 0x158B	; 0x80158b <xTickCount+0x1>
    1cbe:	80 91 8c 15 	lds	r24, 0x158C	; 0x80158c <xTickCount+0x2>
    1cc2:	90 91 8d 15 	lds	r25, 0x158D	; 0x80158d <xTickCount+0x3>
    1cc6:	0f 90       	pop	r0
    1cc8:	0f be       	out	0x3f, r0	; 63
    1cca:	08 95       	ret

00001ccc <xTaskIncrementTick>:
    1ccc:	cf 92       	push	r12
    1cce:	df 92       	push	r13
    1cd0:	ef 92       	push	r14
    1cd2:	ff 92       	push	r15
    1cd4:	0f 93       	push	r16
    1cd6:	1f 93       	push	r17
    1cd8:	cf 93       	push	r28
    1cda:	df 93       	push	r29
    1cdc:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <uxSchedulerSuspended>
    1ce0:	81 11       	cpse	r24, r1
    1ce2:	07 c1       	rjmp	.+526    	; 0x1ef2 <xTaskIncrementTick+0x226>
    1ce4:	c0 90 8a 15 	lds	r12, 0x158A	; 0x80158a <xTickCount>
    1ce8:	d0 90 8b 15 	lds	r13, 0x158B	; 0x80158b <xTickCount+0x1>
    1cec:	e0 90 8c 15 	lds	r14, 0x158C	; 0x80158c <xTickCount+0x2>
    1cf0:	f0 90 8d 15 	lds	r15, 0x158D	; 0x80158d <xTickCount+0x3>
    1cf4:	8f ef       	ldi	r24, 0xFF	; 255
    1cf6:	c8 1a       	sub	r12, r24
    1cf8:	d8 0a       	sbc	r13, r24
    1cfa:	e8 0a       	sbc	r14, r24
    1cfc:	f8 0a       	sbc	r15, r24
    1cfe:	c0 92 8a 15 	sts	0x158A, r12	; 0x80158a <xTickCount>
    1d02:	d0 92 8b 15 	sts	0x158B, r13	; 0x80158b <xTickCount+0x1>
    1d06:	e0 92 8c 15 	sts	0x158C, r14	; 0x80158c <xTickCount+0x2>
    1d0a:	f0 92 8d 15 	sts	0x158D, r15	; 0x80158d <xTickCount+0x3>
    1d0e:	c1 14       	cp	r12, r1
    1d10:	d1 04       	cpc	r13, r1
    1d12:	e1 04       	cpc	r14, r1
    1d14:	f1 04       	cpc	r15, r1
    1d16:	b1 f4       	brne	.+44     	; 0x1d44 <xTaskIncrementTick+0x78>
    1d18:	80 91 b3 15 	lds	r24, 0x15B3	; 0x8015b3 <pxDelayedTaskList>
    1d1c:	90 91 b4 15 	lds	r25, 0x15B4	; 0x8015b4 <pxDelayedTaskList+0x1>
    1d20:	20 91 b1 15 	lds	r18, 0x15B1	; 0x8015b1 <pxOverflowDelayedTaskList>
    1d24:	30 91 b2 15 	lds	r19, 0x15B2	; 0x8015b2 <pxOverflowDelayedTaskList+0x1>
    1d28:	30 93 b4 15 	sts	0x15B4, r19	; 0x8015b4 <pxDelayedTaskList+0x1>
    1d2c:	20 93 b3 15 	sts	0x15B3, r18	; 0x8015b3 <pxDelayedTaskList>
    1d30:	90 93 b2 15 	sts	0x15B2, r25	; 0x8015b2 <pxOverflowDelayedTaskList+0x1>
    1d34:	80 93 b1 15 	sts	0x15B1, r24	; 0x8015b1 <pxOverflowDelayedTaskList>
    1d38:	80 91 82 15 	lds	r24, 0x1582	; 0x801582 <xNumOfOverflows>
    1d3c:	8f 5f       	subi	r24, 0xFF	; 255
    1d3e:	80 93 82 15 	sts	0x1582, r24	; 0x801582 <xNumOfOverflows>
    1d42:	75 dd       	rcall	.-1302   	; 0x182e <prvResetNextTaskUnblockTime>
    1d44:	80 91 7d 15 	lds	r24, 0x157D	; 0x80157d <xNextTaskUnblockTime>
    1d48:	90 91 7e 15 	lds	r25, 0x157E	; 0x80157e <xNextTaskUnblockTime+0x1>
    1d4c:	a0 91 7f 15 	lds	r26, 0x157F	; 0x80157f <xNextTaskUnblockTime+0x2>
    1d50:	b0 91 80 15 	lds	r27, 0x1580	; 0x801580 <xNextTaskUnblockTime+0x3>
    1d54:	c8 16       	cp	r12, r24
    1d56:	d9 06       	cpc	r13, r25
    1d58:	ea 06       	cpc	r14, r26
    1d5a:	fb 06       	cpc	r15, r27
    1d5c:	10 f4       	brcc	.+4      	; 0x1d62 <xTaskIncrementTick+0x96>
    1d5e:	80 e0       	ldi	r24, 0x00	; 0
    1d60:	b3 c0       	rjmp	.+358    	; 0x1ec8 <xTaskIncrementTick+0x1fc>
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	4b e0       	ldi	r20, 0x0B	; 11
    1d66:	51 e0       	ldi	r21, 0x01	; 1
    1d68:	e0 91 b3 15 	lds	r30, 0x15B3	; 0x8015b3 <pxDelayedTaskList>
    1d6c:	f0 91 b4 15 	lds	r31, 0x15B4	; 0x8015b4 <pxDelayedTaskList+0x1>
    1d70:	90 81       	ld	r25, Z
    1d72:	91 11       	cpse	r25, r1
    1d74:	0c c0       	rjmp	.+24     	; 0x1d8e <xTaskIncrementTick+0xc2>
    1d76:	4f ef       	ldi	r20, 0xFF	; 255
    1d78:	5f ef       	ldi	r21, 0xFF	; 255
    1d7a:	ba 01       	movw	r22, r20
    1d7c:	40 93 7d 15 	sts	0x157D, r20	; 0x80157d <xNextTaskUnblockTime>
    1d80:	50 93 7e 15 	sts	0x157E, r21	; 0x80157e <xNextTaskUnblockTime+0x1>
    1d84:	60 93 7f 15 	sts	0x157F, r22	; 0x80157f <xNextTaskUnblockTime+0x2>
    1d88:	70 93 80 15 	sts	0x1580, r23	; 0x801580 <xNextTaskUnblockTime+0x3>
    1d8c:	9d c0       	rjmp	.+314    	; 0x1ec8 <xTaskIncrementTick+0x1fc>
    1d8e:	e0 91 b3 15 	lds	r30, 0x15B3	; 0x8015b3 <pxDelayedTaskList>
    1d92:	f0 91 b4 15 	lds	r31, 0x15B4	; 0x8015b4 <pxDelayedTaskList+0x1>
    1d96:	07 80       	ldd	r0, Z+7	; 0x07
    1d98:	f0 85       	ldd	r31, Z+8	; 0x08
    1d9a:	e0 2d       	mov	r30, r0
    1d9c:	00 84       	ldd	r0, Z+8	; 0x08
    1d9e:	f1 85       	ldd	r31, Z+9	; 0x09
    1da0:	e0 2d       	mov	r30, r0
    1da2:	02 81       	ldd	r16, Z+2	; 0x02
    1da4:	13 81       	ldd	r17, Z+3	; 0x03
    1da6:	24 81       	ldd	r18, Z+4	; 0x04
    1da8:	35 81       	ldd	r19, Z+5	; 0x05
    1daa:	c0 16       	cp	r12, r16
    1dac:	d1 06       	cpc	r13, r17
    1dae:	e2 06       	cpc	r14, r18
    1db0:	f3 06       	cpc	r15, r19
    1db2:	48 f4       	brcc	.+18     	; 0x1dc6 <xTaskIncrementTick+0xfa>
    1db4:	00 93 7d 15 	sts	0x157D, r16	; 0x80157d <xNextTaskUnblockTime>
    1db8:	10 93 7e 15 	sts	0x157E, r17	; 0x80157e <xNextTaskUnblockTime+0x1>
    1dbc:	20 93 7f 15 	sts	0x157F, r18	; 0x80157f <xNextTaskUnblockTime+0x2>
    1dc0:	30 93 80 15 	sts	0x1580, r19	; 0x801580 <xNextTaskUnblockTime+0x3>
    1dc4:	81 c0       	rjmp	.+258    	; 0x1ec8 <xTaskIncrementTick+0x1fc>
    1dc6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1dc8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1dca:	c6 81       	ldd	r28, Z+6	; 0x06
    1dcc:	d7 81       	ldd	r29, Z+7	; 0x07
    1dce:	20 85       	ldd	r18, Z+8	; 0x08
    1dd0:	31 85       	ldd	r19, Z+9	; 0x09
    1dd2:	3f 83       	std	Y+7, r19	; 0x07
    1dd4:	2e 83       	std	Y+6, r18	; 0x06
    1dd6:	c0 85       	ldd	r28, Z+8	; 0x08
    1dd8:	d1 85       	ldd	r29, Z+9	; 0x09
    1dda:	26 81       	ldd	r18, Z+6	; 0x06
    1ddc:	37 81       	ldd	r19, Z+7	; 0x07
    1dde:	3d 83       	std	Y+5, r19	; 0x05
    1de0:	2c 83       	std	Y+4, r18	; 0x04
    1de2:	9f 01       	movw	r18, r30
    1de4:	2e 5f       	subi	r18, 0xFE	; 254
    1de6:	3f 4f       	sbci	r19, 0xFF	; 255
    1de8:	11 96       	adiw	r26, 0x01	; 1
    1dea:	6d 91       	ld	r22, X+
    1dec:	7c 91       	ld	r23, X
    1dee:	12 97       	sbiw	r26, 0x02	; 2
    1df0:	62 17       	cp	r22, r18
    1df2:	73 07       	cpc	r23, r19
    1df4:	31 f4       	brne	.+12     	; 0x1e02 <xTaskIncrementTick+0x136>
    1df6:	60 85       	ldd	r22, Z+8	; 0x08
    1df8:	71 85       	ldd	r23, Z+9	; 0x09
    1dfa:	12 96       	adiw	r26, 0x02	; 2
    1dfc:	7c 93       	st	X, r23
    1dfe:	6e 93       	st	-X, r22
    1e00:	11 97       	sbiw	r26, 0x01	; 1
    1e02:	15 86       	std	Z+13, r1	; 0x0d
    1e04:	14 86       	std	Z+12, r1	; 0x0c
    1e06:	9c 91       	ld	r25, X
    1e08:	91 50       	subi	r25, 0x01	; 1
    1e0a:	9c 93       	st	X, r25
    1e0c:	a0 8d       	ldd	r26, Z+24	; 0x18
    1e0e:	b1 8d       	ldd	r27, Z+25	; 0x19
    1e10:	10 97       	sbiw	r26, 0x00	; 0
    1e12:	09 f1       	breq	.+66     	; 0x1e56 <xTaskIncrementTick+0x18a>
    1e14:	c2 89       	ldd	r28, Z+18	; 0x12
    1e16:	d3 89       	ldd	r29, Z+19	; 0x13
    1e18:	64 89       	ldd	r22, Z+20	; 0x14
    1e1a:	75 89       	ldd	r23, Z+21	; 0x15
    1e1c:	7f 83       	std	Y+7, r23	; 0x07
    1e1e:	6e 83       	std	Y+6, r22	; 0x06
    1e20:	c4 89       	ldd	r28, Z+20	; 0x14
    1e22:	d5 89       	ldd	r29, Z+21	; 0x15
    1e24:	62 89       	ldd	r22, Z+18	; 0x12
    1e26:	73 89       	ldd	r23, Z+19	; 0x13
    1e28:	7d 83       	std	Y+5, r23	; 0x05
    1e2a:	6c 83       	std	Y+4, r22	; 0x04
    1e2c:	11 96       	adiw	r26, 0x01	; 1
    1e2e:	cd 91       	ld	r28, X+
    1e30:	dc 91       	ld	r29, X
    1e32:	12 97       	sbiw	r26, 0x02	; 2
    1e34:	bf 01       	movw	r22, r30
    1e36:	62 5f       	subi	r22, 0xF2	; 242
    1e38:	7f 4f       	sbci	r23, 0xFF	; 255
    1e3a:	c6 17       	cp	r28, r22
    1e3c:	d7 07       	cpc	r29, r23
    1e3e:	31 f4       	brne	.+12     	; 0x1e4c <xTaskIncrementTick+0x180>
    1e40:	64 89       	ldd	r22, Z+20	; 0x14
    1e42:	75 89       	ldd	r23, Z+21	; 0x15
    1e44:	12 96       	adiw	r26, 0x02	; 2
    1e46:	7c 93       	st	X, r23
    1e48:	6e 93       	st	-X, r22
    1e4a:	11 97       	sbiw	r26, 0x01	; 1
    1e4c:	11 8e       	std	Z+25, r1	; 0x19
    1e4e:	10 8e       	std	Z+24, r1	; 0x18
    1e50:	9c 91       	ld	r25, X
    1e52:	91 50       	subi	r25, 0x01	; 1
    1e54:	9c 93       	st	X, r25
    1e56:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e58:	90 91 89 15 	lds	r25, 0x1589	; 0x801589 <uxTopReadyPriority>
    1e5c:	9a 17       	cp	r25, r26
    1e5e:	10 f4       	brcc	.+4      	; 0x1e64 <xTaskIncrementTick+0x198>
    1e60:	a0 93 89 15 	sts	0x1589, r26	; 0x801589 <uxTopReadyPriority>
    1e64:	4a 9f       	mul	r20, r26
    1e66:	d0 01       	movw	r26, r0
    1e68:	11 24       	eor	r1, r1
    1e6a:	a5 53       	subi	r26, 0x35	; 53
    1e6c:	ba 4e       	sbci	r27, 0xEA	; 234
    1e6e:	11 96       	adiw	r26, 0x01	; 1
    1e70:	0d 90       	ld	r0, X+
    1e72:	bc 91       	ld	r27, X
    1e74:	a0 2d       	mov	r26, r0
    1e76:	b7 83       	std	Z+7, r27	; 0x07
    1e78:	a6 83       	std	Z+6, r26	; 0x06
    1e7a:	16 96       	adiw	r26, 0x06	; 6
    1e7c:	6d 91       	ld	r22, X+
    1e7e:	7c 91       	ld	r23, X
    1e80:	17 97       	sbiw	r26, 0x07	; 7
    1e82:	71 87       	std	Z+9, r23	; 0x09
    1e84:	60 87       	std	Z+8, r22	; 0x08
    1e86:	16 96       	adiw	r26, 0x06	; 6
    1e88:	cd 91       	ld	r28, X+
    1e8a:	dc 91       	ld	r29, X
    1e8c:	17 97       	sbiw	r26, 0x07	; 7
    1e8e:	3d 83       	std	Y+5, r19	; 0x05
    1e90:	2c 83       	std	Y+4, r18	; 0x04
    1e92:	17 96       	adiw	r26, 0x07	; 7
    1e94:	3c 93       	st	X, r19
    1e96:	2e 93       	st	-X, r18
    1e98:	16 97       	sbiw	r26, 0x06	; 6
    1e9a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e9c:	4a 9f       	mul	r20, r26
    1e9e:	d0 01       	movw	r26, r0
    1ea0:	11 24       	eor	r1, r1
    1ea2:	a5 53       	subi	r26, 0x35	; 53
    1ea4:	ba 4e       	sbci	r27, 0xEA	; 234
    1ea6:	b5 87       	std	Z+13, r27	; 0x0d
    1ea8:	a4 87       	std	Z+12, r26	; 0x0c
    1eaa:	9c 91       	ld	r25, X
    1eac:	9f 5f       	subi	r25, 0xFF	; 255
    1eae:	9c 93       	st	X, r25
    1eb0:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
    1eb4:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    1eb8:	22 8d       	ldd	r18, Z+26	; 0x1a
    1eba:	5a 96       	adiw	r26, 0x1a	; 26
    1ebc:	9c 91       	ld	r25, X
    1ebe:	29 17       	cp	r18, r25
    1ec0:	08 f4       	brcc	.+2      	; 0x1ec4 <xTaskIncrementTick+0x1f8>
    1ec2:	52 cf       	rjmp	.-348    	; 0x1d68 <xTaskIncrementTick+0x9c>
    1ec4:	85 2f       	mov	r24, r21
    1ec6:	50 cf       	rjmp	.-352    	; 0x1d68 <xTaskIncrementTick+0x9c>
    1ec8:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    1ecc:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    1ed0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1ed2:	9b e0       	ldi	r25, 0x0B	; 11
    1ed4:	e9 9f       	mul	r30, r25
    1ed6:	f0 01       	movw	r30, r0
    1ed8:	11 24       	eor	r1, r1
    1eda:	e5 53       	subi	r30, 0x35	; 53
    1edc:	fa 4e       	sbci	r31, 0xEA	; 234
    1ede:	90 81       	ld	r25, Z
    1ee0:	92 30       	cpi	r25, 0x02	; 2
    1ee2:	08 f0       	brcs	.+2      	; 0x1ee6 <xTaskIncrementTick+0x21a>
    1ee4:	81 e0       	ldi	r24, 0x01	; 1
    1ee6:	90 91 83 15 	lds	r25, 0x1583	; 0x801583 <xYieldPending>
    1eea:	99 23       	and	r25, r25
    1eec:	b1 f0       	breq	.+44     	; 0x1f1a <xTaskIncrementTick+0x24e>
    1eee:	81 e0       	ldi	r24, 0x01	; 1
    1ef0:	14 c0       	rjmp	.+40     	; 0x1f1a <xTaskIncrementTick+0x24e>
    1ef2:	80 91 84 15 	lds	r24, 0x1584	; 0x801584 <xPendedTicks>
    1ef6:	90 91 85 15 	lds	r25, 0x1585	; 0x801585 <xPendedTicks+0x1>
    1efa:	a0 91 86 15 	lds	r26, 0x1586	; 0x801586 <xPendedTicks+0x2>
    1efe:	b0 91 87 15 	lds	r27, 0x1587	; 0x801587 <xPendedTicks+0x3>
    1f02:	01 96       	adiw	r24, 0x01	; 1
    1f04:	a1 1d       	adc	r26, r1
    1f06:	b1 1d       	adc	r27, r1
    1f08:	80 93 84 15 	sts	0x1584, r24	; 0x801584 <xPendedTicks>
    1f0c:	90 93 85 15 	sts	0x1585, r25	; 0x801585 <xPendedTicks+0x1>
    1f10:	a0 93 86 15 	sts	0x1586, r26	; 0x801586 <xPendedTicks+0x2>
    1f14:	b0 93 87 15 	sts	0x1587, r27	; 0x801587 <xPendedTicks+0x3>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	df 91       	pop	r29
    1f1c:	cf 91       	pop	r28
    1f1e:	1f 91       	pop	r17
    1f20:	0f 91       	pop	r16
    1f22:	ff 90       	pop	r15
    1f24:	ef 90       	pop	r14
    1f26:	df 90       	pop	r13
    1f28:	cf 90       	pop	r12
    1f2a:	08 95       	ret

00001f2c <xTaskResumeAll>:
    1f2c:	cf 92       	push	r12
    1f2e:	df 92       	push	r13
    1f30:	ef 92       	push	r14
    1f32:	ff 92       	push	r15
    1f34:	0f 93       	push	r16
    1f36:	1f 93       	push	r17
    1f38:	cf 93       	push	r28
    1f3a:	df 93       	push	r29
    1f3c:	0f b6       	in	r0, 0x3f	; 63
    1f3e:	f8 94       	cli
    1f40:	0f 92       	push	r0
    1f42:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <uxSchedulerSuspended>
    1f46:	81 50       	subi	r24, 0x01	; 1
    1f48:	80 93 7a 15 	sts	0x157A, r24	; 0x80157a <uxSchedulerSuspended>
    1f4c:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <uxSchedulerSuspended>
    1f50:	81 11       	cpse	r24, r1
    1f52:	c4 c0       	rjmp	.+392    	; 0x20dc <xTaskResumeAll+0x1b0>
    1f54:	80 91 8e 15 	lds	r24, 0x158E	; 0x80158e <uxCurrentNumberOfTasks>
    1f58:	81 11       	cpse	r24, r1
    1f5a:	8b c0       	rjmp	.+278    	; 0x2072 <xTaskResumeAll+0x146>
    1f5c:	c2 c0       	rjmp	.+388    	; 0x20e2 <xTaskResumeAll+0x1b6>
    1f5e:	d8 01       	movw	r26, r16
    1f60:	17 96       	adiw	r26, 0x07	; 7
    1f62:	ed 91       	ld	r30, X+
    1f64:	fc 91       	ld	r31, X
    1f66:	18 97       	sbiw	r26, 0x08	; 8
    1f68:	00 84       	ldd	r0, Z+8	; 0x08
    1f6a:	f1 85       	ldd	r31, Z+9	; 0x09
    1f6c:	e0 2d       	mov	r30, r0
    1f6e:	a0 8d       	ldd	r26, Z+24	; 0x18
    1f70:	b1 8d       	ldd	r27, Z+25	; 0x19
    1f72:	82 89       	ldd	r24, Z+18	; 0x12
    1f74:	93 89       	ldd	r25, Z+19	; 0x13
    1f76:	64 89       	ldd	r22, Z+20	; 0x14
    1f78:	75 89       	ldd	r23, Z+21	; 0x15
    1f7a:	ec 01       	movw	r28, r24
    1f7c:	7f 83       	std	Y+7, r23	; 0x07
    1f7e:	6e 83       	std	Y+6, r22	; 0x06
    1f80:	84 89       	ldd	r24, Z+20	; 0x14
    1f82:	95 89       	ldd	r25, Z+21	; 0x15
    1f84:	62 89       	ldd	r22, Z+18	; 0x12
    1f86:	73 89       	ldd	r23, Z+19	; 0x13
    1f88:	ec 01       	movw	r28, r24
    1f8a:	7d 83       	std	Y+5, r23	; 0x05
    1f8c:	6c 83       	std	Y+4, r22	; 0x04
    1f8e:	cf 01       	movw	r24, r30
    1f90:	0e 96       	adiw	r24, 0x0e	; 14
    1f92:	11 96       	adiw	r26, 0x01	; 1
    1f94:	6d 91       	ld	r22, X+
    1f96:	7c 91       	ld	r23, X
    1f98:	12 97       	sbiw	r26, 0x02	; 2
    1f9a:	68 17       	cp	r22, r24
    1f9c:	79 07       	cpc	r23, r25
    1f9e:	31 f4       	brne	.+12     	; 0x1fac <xTaskResumeAll+0x80>
    1fa0:	84 89       	ldd	r24, Z+20	; 0x14
    1fa2:	95 89       	ldd	r25, Z+21	; 0x15
    1fa4:	12 96       	adiw	r26, 0x02	; 2
    1fa6:	9c 93       	st	X, r25
    1fa8:	8e 93       	st	-X, r24
    1faa:	11 97       	sbiw	r26, 0x01	; 1
    1fac:	11 8e       	std	Z+25, r1	; 0x19
    1fae:	10 8e       	std	Z+24, r1	; 0x18
    1fb0:	8c 91       	ld	r24, X
    1fb2:	81 50       	subi	r24, 0x01	; 1
    1fb4:	8c 93       	st	X, r24
    1fb6:	a4 85       	ldd	r26, Z+12	; 0x0c
    1fb8:	b5 85       	ldd	r27, Z+13	; 0x0d
    1fba:	86 81       	ldd	r24, Z+6	; 0x06
    1fbc:	97 81       	ldd	r25, Z+7	; 0x07
    1fbe:	60 85       	ldd	r22, Z+8	; 0x08
    1fc0:	71 85       	ldd	r23, Z+9	; 0x09
    1fc2:	ec 01       	movw	r28, r24
    1fc4:	7f 83       	std	Y+7, r23	; 0x07
    1fc6:	6e 83       	std	Y+6, r22	; 0x06
    1fc8:	80 85       	ldd	r24, Z+8	; 0x08
    1fca:	91 85       	ldd	r25, Z+9	; 0x09
    1fcc:	66 81       	ldd	r22, Z+6	; 0x06
    1fce:	77 81       	ldd	r23, Z+7	; 0x07
    1fd0:	ec 01       	movw	r28, r24
    1fd2:	7d 83       	std	Y+5, r23	; 0x05
    1fd4:	6c 83       	std	Y+4, r22	; 0x04
    1fd6:	cf 01       	movw	r24, r30
    1fd8:	02 96       	adiw	r24, 0x02	; 2
    1fda:	11 96       	adiw	r26, 0x01	; 1
    1fdc:	6d 91       	ld	r22, X+
    1fde:	7c 91       	ld	r23, X
    1fe0:	12 97       	sbiw	r26, 0x02	; 2
    1fe2:	68 17       	cp	r22, r24
    1fe4:	79 07       	cpc	r23, r25
    1fe6:	31 f4       	brne	.+12     	; 0x1ff4 <xTaskResumeAll+0xc8>
    1fe8:	60 85       	ldd	r22, Z+8	; 0x08
    1fea:	71 85       	ldd	r23, Z+9	; 0x09
    1fec:	12 96       	adiw	r26, 0x02	; 2
    1fee:	7c 93       	st	X, r23
    1ff0:	6e 93       	st	-X, r22
    1ff2:	11 97       	sbiw	r26, 0x01	; 1
    1ff4:	15 86       	std	Z+13, r1	; 0x0d
    1ff6:	14 86       	std	Z+12, r1	; 0x0c
    1ff8:	2c 91       	ld	r18, X
    1ffa:	21 50       	subi	r18, 0x01	; 1
    1ffc:	2c 93       	st	X, r18
    1ffe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2000:	20 91 89 15 	lds	r18, 0x1589	; 0x801589 <uxTopReadyPriority>
    2004:	2a 17       	cp	r18, r26
    2006:	10 f4       	brcc	.+4      	; 0x200c <xTaskResumeAll+0xe0>
    2008:	a0 93 89 15 	sts	0x1589, r26	; 0x801589 <uxTopReadyPriority>
    200c:	3a 9f       	mul	r19, r26
    200e:	d0 01       	movw	r26, r0
    2010:	11 24       	eor	r1, r1
    2012:	a5 53       	subi	r26, 0x35	; 53
    2014:	ba 4e       	sbci	r27, 0xEA	; 234
    2016:	11 96       	adiw	r26, 0x01	; 1
    2018:	0d 90       	ld	r0, X+
    201a:	bc 91       	ld	r27, X
    201c:	a0 2d       	mov	r26, r0
    201e:	b7 83       	std	Z+7, r27	; 0x07
    2020:	a6 83       	std	Z+6, r26	; 0x06
    2022:	16 96       	adiw	r26, 0x06	; 6
    2024:	6d 91       	ld	r22, X+
    2026:	7c 91       	ld	r23, X
    2028:	17 97       	sbiw	r26, 0x07	; 7
    202a:	71 87       	std	Z+9, r23	; 0x09
    202c:	60 87       	std	Z+8, r22	; 0x08
    202e:	16 96       	adiw	r26, 0x06	; 6
    2030:	6d 91       	ld	r22, X+
    2032:	7c 91       	ld	r23, X
    2034:	17 97       	sbiw	r26, 0x07	; 7
    2036:	eb 01       	movw	r28, r22
    2038:	9d 83       	std	Y+5, r25	; 0x05
    203a:	8c 83       	std	Y+4, r24	; 0x04
    203c:	17 96       	adiw	r26, 0x07	; 7
    203e:	9c 93       	st	X, r25
    2040:	8e 93       	st	-X, r24
    2042:	16 97       	sbiw	r26, 0x06	; 6
    2044:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2046:	3a 9f       	mul	r19, r26
    2048:	d0 01       	movw	r26, r0
    204a:	11 24       	eor	r1, r1
    204c:	a5 53       	subi	r26, 0x35	; 53
    204e:	ba 4e       	sbci	r27, 0xEA	; 234
    2050:	b5 87       	std	Z+13, r27	; 0x0d
    2052:	a4 87       	std	Z+12, r26	; 0x0c
    2054:	8c 91       	ld	r24, X
    2056:	8f 5f       	subi	r24, 0xFF	; 255
    2058:	8c 93       	st	X, r24
    205a:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
    205e:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2062:	92 8d       	ldd	r25, Z+26	; 0x1a
    2064:	5a 96       	adiw	r26, 0x1a	; 26
    2066:	8c 91       	ld	r24, X
    2068:	98 17       	cp	r25, r24
    206a:	48 f0       	brcs	.+18     	; 0x207e <xTaskResumeAll+0x152>
    206c:	40 93 83 15 	sts	0x1583, r20	; 0x801583 <xYieldPending>
    2070:	06 c0       	rjmp	.+12     	; 0x207e <xTaskResumeAll+0x152>
    2072:	e0 e0       	ldi	r30, 0x00	; 0
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	06 ea       	ldi	r16, 0xA6	; 166
    2078:	15 e1       	ldi	r17, 0x15	; 21
    207a:	3b e0       	ldi	r19, 0x0B	; 11
    207c:	41 e0       	ldi	r20, 0x01	; 1
    207e:	d8 01       	movw	r26, r16
    2080:	8c 91       	ld	r24, X
    2082:	81 11       	cpse	r24, r1
    2084:	6c cf       	rjmp	.-296    	; 0x1f5e <xTaskResumeAll+0x32>
    2086:	ef 2b       	or	r30, r31
    2088:	09 f0       	breq	.+2      	; 0x208c <xTaskResumeAll+0x160>
    208a:	d1 db       	rcall	.-2142   	; 0x182e <prvResetNextTaskUnblockTime>
    208c:	c0 90 84 15 	lds	r12, 0x1584	; 0x801584 <xPendedTicks>
    2090:	d0 90 85 15 	lds	r13, 0x1585	; 0x801585 <xPendedTicks+0x1>
    2094:	e0 90 86 15 	lds	r14, 0x1586	; 0x801586 <xPendedTicks+0x2>
    2098:	f0 90 87 15 	lds	r15, 0x1587	; 0x801587 <xPendedTicks+0x3>
    209c:	c1 14       	cp	r12, r1
    209e:	d1 04       	cpc	r13, r1
    20a0:	e1 04       	cpc	r14, r1
    20a2:	f1 04       	cpc	r15, r1
    20a4:	99 f0       	breq	.+38     	; 0x20cc <xTaskResumeAll+0x1a0>
    20a6:	c1 e0       	ldi	r28, 0x01	; 1
    20a8:	11 de       	rcall	.-990    	; 0x1ccc <xTaskIncrementTick>
    20aa:	81 11       	cpse	r24, r1
    20ac:	c0 93 83 15 	sts	0x1583, r28	; 0x801583 <xYieldPending>
    20b0:	b1 e0       	ldi	r27, 0x01	; 1
    20b2:	cb 1a       	sub	r12, r27
    20b4:	d1 08       	sbc	r13, r1
    20b6:	e1 08       	sbc	r14, r1
    20b8:	f1 08       	sbc	r15, r1
    20ba:	b1 f7       	brne	.-20     	; 0x20a8 <xTaskResumeAll+0x17c>
    20bc:	10 92 84 15 	sts	0x1584, r1	; 0x801584 <xPendedTicks>
    20c0:	10 92 85 15 	sts	0x1585, r1	; 0x801585 <xPendedTicks+0x1>
    20c4:	10 92 86 15 	sts	0x1586, r1	; 0x801586 <xPendedTicks+0x2>
    20c8:	10 92 87 15 	sts	0x1587, r1	; 0x801587 <xPendedTicks+0x3>
    20cc:	80 91 83 15 	lds	r24, 0x1583	; 0x801583 <xYieldPending>
    20d0:	88 23       	and	r24, r24
    20d2:	31 f0       	breq	.+12     	; 0x20e0 <xTaskResumeAll+0x1b4>
    20d4:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    20d8:	81 e0       	ldi	r24, 0x01	; 1
    20da:	03 c0       	rjmp	.+6      	; 0x20e2 <xTaskResumeAll+0x1b6>
    20dc:	80 e0       	ldi	r24, 0x00	; 0
    20de:	01 c0       	rjmp	.+2      	; 0x20e2 <xTaskResumeAll+0x1b6>
    20e0:	80 e0       	ldi	r24, 0x00	; 0
    20e2:	0f 90       	pop	r0
    20e4:	0f be       	out	0x3f, r0	; 63
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	1f 91       	pop	r17
    20ec:	0f 91       	pop	r16
    20ee:	ff 90       	pop	r15
    20f0:	ef 90       	pop	r14
    20f2:	df 90       	pop	r13
    20f4:	cf 90       	pop	r12
    20f6:	08 95       	ret

000020f8 <xTaskDelayUntil>:
    20f8:	cf 92       	push	r12
    20fa:	df 92       	push	r13
    20fc:	ef 92       	push	r14
    20fe:	ff 92       	push	r15
    2100:	0f 93       	push	r16
    2102:	1f 93       	push	r17
    2104:	cf 93       	push	r28
    2106:	df 93       	push	r29
    2108:	ec 01       	movw	r28, r24
    210a:	6a 01       	movw	r12, r20
    210c:	7b 01       	movw	r14, r22
    210e:	ca dd       	rcall	.-1132   	; 0x1ca4 <vTaskSuspendAll>
    2110:	00 91 8a 15 	lds	r16, 0x158A	; 0x80158a <xTickCount>
    2114:	10 91 8b 15 	lds	r17, 0x158B	; 0x80158b <xTickCount+0x1>
    2118:	20 91 8c 15 	lds	r18, 0x158C	; 0x80158c <xTickCount+0x2>
    211c:	30 91 8d 15 	lds	r19, 0x158D	; 0x80158d <xTickCount+0x3>
    2120:	88 81       	ld	r24, Y
    2122:	99 81       	ldd	r25, Y+1	; 0x01
    2124:	aa 81       	ldd	r26, Y+2	; 0x02
    2126:	bb 81       	ldd	r27, Y+3	; 0x03
    2128:	ac 01       	movw	r20, r24
    212a:	bd 01       	movw	r22, r26
    212c:	4c 0d       	add	r20, r12
    212e:	5d 1d       	adc	r21, r13
    2130:	6e 1d       	adc	r22, r14
    2132:	7f 1d       	adc	r23, r15
    2134:	08 17       	cp	r16, r24
    2136:	19 07       	cpc	r17, r25
    2138:	2a 07       	cpc	r18, r26
    213a:	3b 07       	cpc	r19, r27
    213c:	b8 f4       	brcc	.+46     	; 0x216c <xTaskDelayUntil+0x74>
    213e:	48 17       	cp	r20, r24
    2140:	59 07       	cpc	r21, r25
    2142:	6a 07       	cpc	r22, r26
    2144:	7b 07       	cpc	r23, r27
    2146:	90 f5       	brcc	.+100    	; 0x21ac <xTaskDelayUntil+0xb4>
    2148:	ff 24       	eor	r15, r15
    214a:	f3 94       	inc	r15
    214c:	04 17       	cp	r16, r20
    214e:	15 07       	cpc	r17, r21
    2150:	26 07       	cpc	r18, r22
    2152:	37 07       	cpc	r19, r23
    2154:	08 f0       	brcs	.+2      	; 0x2158 <xTaskDelayUntil+0x60>
    2156:	f1 2c       	mov	r15, r1
    2158:	48 83       	st	Y, r20
    215a:	59 83       	std	Y+1, r21	; 0x01
    215c:	6a 83       	std	Y+2, r22	; 0x02
    215e:	7b 83       	std	Y+3, r23	; 0x03
    2160:	04 17       	cp	r16, r20
    2162:	15 07       	cpc	r17, r21
    2164:	26 07       	cpc	r18, r22
    2166:	37 07       	cpc	r19, r23
    2168:	a0 f4       	brcc	.+40     	; 0x2192 <xTaskDelayUntil+0x9a>
    216a:	0b c0       	rjmp	.+22     	; 0x2182 <xTaskDelayUntil+0x8a>
    216c:	48 17       	cp	r20, r24
    216e:	59 07       	cpc	r21, r25
    2170:	6a 07       	cpc	r22, r26
    2172:	7b 07       	cpc	r23, r27
    2174:	a0 f0       	brcs	.+40     	; 0x219e <xTaskDelayUntil+0xa6>
    2176:	04 17       	cp	r16, r20
    2178:	15 07       	cpc	r17, r21
    217a:	26 07       	cpc	r18, r22
    217c:	37 07       	cpc	r19, r23
    217e:	78 f0       	brcs	.+30     	; 0x219e <xTaskDelayUntil+0xa6>
    2180:	15 c0       	rjmp	.+42     	; 0x21ac <xTaskDelayUntil+0xb4>
    2182:	cb 01       	movw	r24, r22
    2184:	ba 01       	movw	r22, r20
    2186:	60 1b       	sub	r22, r16
    2188:	71 0b       	sbc	r23, r17
    218a:	82 0b       	sbc	r24, r18
    218c:	93 0b       	sbc	r25, r19
    218e:	40 e0       	ldi	r20, 0x00	; 0
    2190:	75 db       	rcall	.-2326   	; 0x187c <prvAddCurrentTaskToDelayedList>
    2192:	cc de       	rcall	.-616    	; 0x1f2c <xTaskResumeAll>
    2194:	81 11       	cpse	r24, r1
    2196:	10 c0       	rjmp	.+32     	; 0x21b8 <xTaskDelayUntil+0xc0>
    2198:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    219c:	0d c0       	rjmp	.+26     	; 0x21b8 <xTaskDelayUntil+0xc0>
    219e:	48 83       	st	Y, r20
    21a0:	59 83       	std	Y+1, r21	; 0x01
    21a2:	6a 83       	std	Y+2, r22	; 0x02
    21a4:	7b 83       	std	Y+3, r23	; 0x03
    21a6:	ff 24       	eor	r15, r15
    21a8:	f3 94       	inc	r15
    21aa:	eb cf       	rjmp	.-42     	; 0x2182 <xTaskDelayUntil+0x8a>
    21ac:	48 83       	st	Y, r20
    21ae:	59 83       	std	Y+1, r21	; 0x01
    21b0:	6a 83       	std	Y+2, r22	; 0x02
    21b2:	7b 83       	std	Y+3, r23	; 0x03
    21b4:	f1 2c       	mov	r15, r1
    21b6:	ed cf       	rjmp	.-38     	; 0x2192 <xTaskDelayUntil+0x9a>
    21b8:	8f 2d       	mov	r24, r15
    21ba:	df 91       	pop	r29
    21bc:	cf 91       	pop	r28
    21be:	1f 91       	pop	r17
    21c0:	0f 91       	pop	r16
    21c2:	ff 90       	pop	r15
    21c4:	ef 90       	pop	r14
    21c6:	df 90       	pop	r13
    21c8:	cf 90       	pop	r12
    21ca:	08 95       	ret

000021cc <vTaskDelay>:
    21cc:	cf 92       	push	r12
    21ce:	df 92       	push	r13
    21d0:	ef 92       	push	r14
    21d2:	ff 92       	push	r15
    21d4:	6b 01       	movw	r12, r22
    21d6:	7c 01       	movw	r14, r24
    21d8:	67 2b       	or	r22, r23
    21da:	68 2b       	or	r22, r24
    21dc:	69 2b       	or	r22, r25
    21de:	41 f0       	breq	.+16     	; 0x21f0 <vTaskDelay+0x24>
    21e0:	61 dd       	rcall	.-1342   	; 0x1ca4 <vTaskSuspendAll>
    21e2:	40 e0       	ldi	r20, 0x00	; 0
    21e4:	c7 01       	movw	r24, r14
    21e6:	b6 01       	movw	r22, r12
    21e8:	49 db       	rcall	.-2414   	; 0x187c <prvAddCurrentTaskToDelayedList>
    21ea:	a0 de       	rcall	.-704    	; 0x1f2c <xTaskResumeAll>
    21ec:	81 11       	cpse	r24, r1
    21ee:	02 c0       	rjmp	.+4      	; 0x21f4 <vTaskDelay+0x28>
    21f0:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    21f4:	ff 90       	pop	r15
    21f6:	ef 90       	pop	r14
    21f8:	df 90       	pop	r13
    21fa:	cf 90       	pop	r12
    21fc:	08 95       	ret

000021fe <vTaskSwitchContext>:
    21fe:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <uxSchedulerSuspended>
    2202:	88 23       	and	r24, r24
    2204:	21 f0       	breq	.+8      	; 0x220e <__stack+0xf>
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	80 93 83 15 	sts	0x1583, r24	; 0x801583 <xYieldPending>
    220c:	08 95       	ret
    220e:	10 92 83 15 	sts	0x1583, r1	; 0x801583 <xYieldPending>
    2212:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
    2216:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    221a:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    221e:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2222:	2d 91       	ld	r18, X+
    2224:	3c 91       	ld	r19, X
    2226:	83 8d       	ldd	r24, Z+27	; 0x1b
    2228:	94 8d       	ldd	r25, Z+28	; 0x1c
    222a:	82 17       	cp	r24, r18
    222c:	93 07       	cpc	r25, r19
    222e:	58 f0       	brcs	.+22     	; 0x2246 <__stack+0x47>
    2230:	60 91 39 16 	lds	r22, 0x1639	; 0x801639 <pxCurrentTCB>
    2234:	70 91 3a 16 	lds	r23, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2238:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <pxCurrentTCB>
    223c:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2240:	63 5e       	subi	r22, 0xE3	; 227
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	b6 d7       	rcall	.+3948   	; 0x31b2 <vApplicationStackOverflowHook>
    2246:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <uxTopReadyPriority>
    224a:	28 2f       	mov	r18, r24
    224c:	30 e0       	ldi	r19, 0x00	; 0
    224e:	9b e0       	ldi	r25, 0x0B	; 11
    2250:	89 9f       	mul	r24, r25
    2252:	f0 01       	movw	r30, r0
    2254:	11 24       	eor	r1, r1
    2256:	e5 53       	subi	r30, 0x35	; 53
    2258:	fa 4e       	sbci	r31, 0xEA	; 234
    225a:	90 81       	ld	r25, Z
    225c:	91 11       	cpse	r25, r1
    225e:	0e c0       	rjmp	.+28     	; 0x227c <__stack+0x7d>
    2260:	4b e0       	ldi	r20, 0x0B	; 11
    2262:	81 50       	subi	r24, 0x01	; 1
    2264:	28 2f       	mov	r18, r24
    2266:	30 e0       	ldi	r19, 0x00	; 0
    2268:	42 9f       	mul	r20, r18
    226a:	f0 01       	movw	r30, r0
    226c:	43 9f       	mul	r20, r19
    226e:	f0 0d       	add	r31, r0
    2270:	11 24       	eor	r1, r1
    2272:	e5 53       	subi	r30, 0x35	; 53
    2274:	fa 4e       	sbci	r31, 0xEA	; 234
    2276:	90 81       	ld	r25, Z
    2278:	99 23       	and	r25, r25
    227a:	99 f3       	breq	.-26     	; 0x2262 <__stack+0x63>
    227c:	9b e0       	ldi	r25, 0x0B	; 11
    227e:	92 9f       	mul	r25, r18
    2280:	a0 01       	movw	r20, r0
    2282:	93 9f       	mul	r25, r19
    2284:	50 0d       	add	r21, r0
    2286:	11 24       	eor	r1, r1
    2288:	da 01       	movw	r26, r20
    228a:	a5 53       	subi	r26, 0x35	; 53
    228c:	ba 4e       	sbci	r27, 0xEA	; 234
    228e:	11 96       	adiw	r26, 0x01	; 1
    2290:	ed 91       	ld	r30, X+
    2292:	fc 91       	ld	r31, X
    2294:	12 97       	sbiw	r26, 0x02	; 2
    2296:	04 80       	ldd	r0, Z+4	; 0x04
    2298:	f5 81       	ldd	r31, Z+5	; 0x05
    229a:	e0 2d       	mov	r30, r0
    229c:	12 96       	adiw	r26, 0x02	; 2
    229e:	fc 93       	st	X, r31
    22a0:	ee 93       	st	-X, r30
    22a2:	11 97       	sbiw	r26, 0x01	; 1
    22a4:	42 53       	subi	r20, 0x32	; 50
    22a6:	5a 4e       	sbci	r21, 0xEA	; 234
    22a8:	e4 17       	cp	r30, r20
    22aa:	f5 07       	cpc	r31, r21
    22ac:	29 f4       	brne	.+10     	; 0x22b8 <__stack+0xb9>
    22ae:	44 81       	ldd	r20, Z+4	; 0x04
    22b0:	55 81       	ldd	r21, Z+5	; 0x05
    22b2:	fd 01       	movw	r30, r26
    22b4:	52 83       	std	Z+2, r21	; 0x02
    22b6:	41 83       	std	Z+1, r20	; 0x01
    22b8:	9b e0       	ldi	r25, 0x0B	; 11
    22ba:	92 9f       	mul	r25, r18
    22bc:	f0 01       	movw	r30, r0
    22be:	93 9f       	mul	r25, r19
    22c0:	f0 0d       	add	r31, r0
    22c2:	11 24       	eor	r1, r1
    22c4:	e5 53       	subi	r30, 0x35	; 53
    22c6:	fa 4e       	sbci	r31, 0xEA	; 234
    22c8:	01 80       	ldd	r0, Z+1	; 0x01
    22ca:	f2 81       	ldd	r31, Z+2	; 0x02
    22cc:	e0 2d       	mov	r30, r0
    22ce:	20 85       	ldd	r18, Z+8	; 0x08
    22d0:	31 85       	ldd	r19, Z+9	; 0x09
    22d2:	30 93 3a 16 	sts	0x163A, r19	; 0x80163a <pxCurrentTCB+0x1>
    22d6:	20 93 39 16 	sts	0x1639, r18	; 0x801639 <pxCurrentTCB>
    22da:	80 93 89 15 	sts	0x1589, r24	; 0x801589 <uxTopReadyPriority>
    22de:	08 95       	ret

000022e0 <vTaskPlaceOnEventList>:
    22e0:	cf 92       	push	r12
    22e2:	df 92       	push	r13
    22e4:	ef 92       	push	r14
    22e6:	ff 92       	push	r15
    22e8:	6a 01       	movw	r12, r20
    22ea:	7b 01       	movw	r14, r22
    22ec:	60 91 39 16 	lds	r22, 0x1639	; 0x801639 <pxCurrentTCB>
    22f0:	70 91 3a 16 	lds	r23, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    22f4:	62 5f       	subi	r22, 0xF2	; 242
    22f6:	7f 4f       	sbci	r23, 0xFF	; 255
    22f8:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    22fc:	41 e0       	ldi	r20, 0x01	; 1
    22fe:	c7 01       	movw	r24, r14
    2300:	b6 01       	movw	r22, r12
    2302:	bc da       	rcall	.-2696   	; 0x187c <prvAddCurrentTaskToDelayedList>
    2304:	ff 90       	pop	r15
    2306:	ef 90       	pop	r14
    2308:	df 90       	pop	r13
    230a:	cf 90       	pop	r12
    230c:	08 95       	ret

0000230e <vTaskPlaceOnEventListRestricted>:
    230e:	cf 93       	push	r28
    2310:	df 93       	push	r29
    2312:	fc 01       	movw	r30, r24
    2314:	cb 01       	movw	r24, r22
    2316:	ba 01       	movw	r22, r20
    2318:	a1 81       	ldd	r26, Z+1	; 0x01
    231a:	b2 81       	ldd	r27, Z+2	; 0x02
    231c:	c0 91 39 16 	lds	r28, 0x1639	; 0x801639 <pxCurrentTCB>
    2320:	d0 91 3a 16 	lds	r29, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2324:	bb 8b       	std	Y+19, r27	; 0x13
    2326:	aa 8b       	std	Y+18, r26	; 0x12
    2328:	c0 91 39 16 	lds	r28, 0x1639	; 0x801639 <pxCurrentTCB>
    232c:	d0 91 3a 16 	lds	r29, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2330:	16 96       	adiw	r26, 0x06	; 6
    2332:	4d 91       	ld	r20, X+
    2334:	5c 91       	ld	r21, X
    2336:	17 97       	sbiw	r26, 0x07	; 7
    2338:	5d 8b       	std	Y+21, r21	; 0x15
    233a:	4c 8b       	std	Y+20, r20	; 0x14
    233c:	16 96       	adiw	r26, 0x06	; 6
    233e:	cd 91       	ld	r28, X+
    2340:	dc 91       	ld	r29, X
    2342:	17 97       	sbiw	r26, 0x07	; 7
    2344:	40 91 39 16 	lds	r20, 0x1639	; 0x801639 <pxCurrentTCB>
    2348:	50 91 3a 16 	lds	r21, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    234c:	42 5f       	subi	r20, 0xF2	; 242
    234e:	5f 4f       	sbci	r21, 0xFF	; 255
    2350:	5d 83       	std	Y+5, r21	; 0x05
    2352:	4c 83       	std	Y+4, r20	; 0x04
    2354:	40 91 39 16 	lds	r20, 0x1639	; 0x801639 <pxCurrentTCB>
    2358:	50 91 3a 16 	lds	r21, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    235c:	42 5f       	subi	r20, 0xF2	; 242
    235e:	5f 4f       	sbci	r21, 0xFF	; 255
    2360:	17 96       	adiw	r26, 0x07	; 7
    2362:	5c 93       	st	X, r21
    2364:	4e 93       	st	-X, r20
    2366:	16 97       	sbiw	r26, 0x06	; 6
    2368:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
    236c:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2370:	59 96       	adiw	r26, 0x19	; 25
    2372:	fc 93       	st	X, r31
    2374:	ee 93       	st	-X, r30
    2376:	58 97       	sbiw	r26, 0x18	; 24
    2378:	30 81       	ld	r19, Z
    237a:	3f 5f       	subi	r19, 0xFF	; 255
    237c:	30 83       	st	Z, r19
    237e:	22 23       	and	r18, r18
    2380:	19 f0       	breq	.+6      	; 0x2388 <vTaskPlaceOnEventListRestricted+0x7a>
    2382:	6f ef       	ldi	r22, 0xFF	; 255
    2384:	7f ef       	ldi	r23, 0xFF	; 255
    2386:	cb 01       	movw	r24, r22
    2388:	42 2f       	mov	r20, r18
    238a:	78 da       	rcall	.-2832   	; 0x187c <prvAddCurrentTaskToDelayedList>
    238c:	df 91       	pop	r29
    238e:	cf 91       	pop	r28
    2390:	08 95       	ret

00002392 <xTaskRemoveFromEventList>:
    2392:	cf 93       	push	r28
    2394:	df 93       	push	r29
    2396:	dc 01       	movw	r26, r24
    2398:	17 96       	adiw	r26, 0x07	; 7
    239a:	ed 91       	ld	r30, X+
    239c:	fc 91       	ld	r31, X
    239e:	18 97       	sbiw	r26, 0x08	; 8
    23a0:	00 84       	ldd	r0, Z+8	; 0x08
    23a2:	f1 85       	ldd	r31, Z+9	; 0x09
    23a4:	e0 2d       	mov	r30, r0
    23a6:	a0 8d       	ldd	r26, Z+24	; 0x18
    23a8:	b1 8d       	ldd	r27, Z+25	; 0x19
    23aa:	c2 89       	ldd	r28, Z+18	; 0x12
    23ac:	d3 89       	ldd	r29, Z+19	; 0x13
    23ae:	84 89       	ldd	r24, Z+20	; 0x14
    23b0:	95 89       	ldd	r25, Z+21	; 0x15
    23b2:	9f 83       	std	Y+7, r25	; 0x07
    23b4:	8e 83       	std	Y+6, r24	; 0x06
    23b6:	c4 89       	ldd	r28, Z+20	; 0x14
    23b8:	d5 89       	ldd	r29, Z+21	; 0x15
    23ba:	82 89       	ldd	r24, Z+18	; 0x12
    23bc:	93 89       	ldd	r25, Z+19	; 0x13
    23be:	9d 83       	std	Y+5, r25	; 0x05
    23c0:	8c 83       	std	Y+4, r24	; 0x04
    23c2:	9f 01       	movw	r18, r30
    23c4:	22 5f       	subi	r18, 0xF2	; 242
    23c6:	3f 4f       	sbci	r19, 0xFF	; 255
    23c8:	11 96       	adiw	r26, 0x01	; 1
    23ca:	8d 91       	ld	r24, X+
    23cc:	9c 91       	ld	r25, X
    23ce:	12 97       	sbiw	r26, 0x02	; 2
    23d0:	82 17       	cp	r24, r18
    23d2:	93 07       	cpc	r25, r19
    23d4:	31 f4       	brne	.+12     	; 0x23e2 <xTaskRemoveFromEventList+0x50>
    23d6:	84 89       	ldd	r24, Z+20	; 0x14
    23d8:	95 89       	ldd	r25, Z+21	; 0x15
    23da:	12 96       	adiw	r26, 0x02	; 2
    23dc:	9c 93       	st	X, r25
    23de:	8e 93       	st	-X, r24
    23e0:	11 97       	sbiw	r26, 0x01	; 1
    23e2:	11 8e       	std	Z+25, r1	; 0x19
    23e4:	10 8e       	std	Z+24, r1	; 0x18
    23e6:	8c 91       	ld	r24, X
    23e8:	81 50       	subi	r24, 0x01	; 1
    23ea:	8c 93       	st	X, r24
    23ec:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <uxSchedulerSuspended>
    23f0:	81 11       	cpse	r24, r1
    23f2:	52 c0       	rjmp	.+164    	; 0x2498 <xTaskRemoveFromEventList+0x106>
    23f4:	a4 85       	ldd	r26, Z+12	; 0x0c
    23f6:	b5 85       	ldd	r27, Z+13	; 0x0d
    23f8:	c6 81       	ldd	r28, Z+6	; 0x06
    23fa:	d7 81       	ldd	r29, Z+7	; 0x07
    23fc:	80 85       	ldd	r24, Z+8	; 0x08
    23fe:	91 85       	ldd	r25, Z+9	; 0x09
    2400:	9f 83       	std	Y+7, r25	; 0x07
    2402:	8e 83       	std	Y+6, r24	; 0x06
    2404:	c0 85       	ldd	r28, Z+8	; 0x08
    2406:	d1 85       	ldd	r29, Z+9	; 0x09
    2408:	86 81       	ldd	r24, Z+6	; 0x06
    240a:	97 81       	ldd	r25, Z+7	; 0x07
    240c:	9d 83       	std	Y+5, r25	; 0x05
    240e:	8c 83       	std	Y+4, r24	; 0x04
    2410:	9f 01       	movw	r18, r30
    2412:	2e 5f       	subi	r18, 0xFE	; 254
    2414:	3f 4f       	sbci	r19, 0xFF	; 255
    2416:	11 96       	adiw	r26, 0x01	; 1
    2418:	8d 91       	ld	r24, X+
    241a:	9c 91       	ld	r25, X
    241c:	12 97       	sbiw	r26, 0x02	; 2
    241e:	82 17       	cp	r24, r18
    2420:	93 07       	cpc	r25, r19
    2422:	31 f4       	brne	.+12     	; 0x2430 <xTaskRemoveFromEventList+0x9e>
    2424:	80 85       	ldd	r24, Z+8	; 0x08
    2426:	91 85       	ldd	r25, Z+9	; 0x09
    2428:	12 96       	adiw	r26, 0x02	; 2
    242a:	9c 93       	st	X, r25
    242c:	8e 93       	st	-X, r24
    242e:	11 97       	sbiw	r26, 0x01	; 1
    2430:	15 86       	std	Z+13, r1	; 0x0d
    2432:	14 86       	std	Z+12, r1	; 0x0c
    2434:	8c 91       	ld	r24, X
    2436:	81 50       	subi	r24, 0x01	; 1
    2438:	8c 93       	st	X, r24
    243a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    243c:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <uxTopReadyPriority>
    2440:	8a 17       	cp	r24, r26
    2442:	10 f4       	brcc	.+4      	; 0x2448 <xTaskRemoveFromEventList+0xb6>
    2444:	a0 93 89 15 	sts	0x1589, r26	; 0x801589 <uxTopReadyPriority>
    2448:	8b e0       	ldi	r24, 0x0B	; 11
    244a:	8a 9f       	mul	r24, r26
    244c:	d0 01       	movw	r26, r0
    244e:	11 24       	eor	r1, r1
    2450:	a5 53       	subi	r26, 0x35	; 53
    2452:	ba 4e       	sbci	r27, 0xEA	; 234
    2454:	11 96       	adiw	r26, 0x01	; 1
    2456:	0d 90       	ld	r0, X+
    2458:	bc 91       	ld	r27, X
    245a:	a0 2d       	mov	r26, r0
    245c:	b7 83       	std	Z+7, r27	; 0x07
    245e:	a6 83       	std	Z+6, r26	; 0x06
    2460:	16 96       	adiw	r26, 0x06	; 6
    2462:	4d 91       	ld	r20, X+
    2464:	5c 91       	ld	r21, X
    2466:	17 97       	sbiw	r26, 0x07	; 7
    2468:	51 87       	std	Z+9, r21	; 0x09
    246a:	40 87       	std	Z+8, r20	; 0x08
    246c:	16 96       	adiw	r26, 0x06	; 6
    246e:	cd 91       	ld	r28, X+
    2470:	dc 91       	ld	r29, X
    2472:	17 97       	sbiw	r26, 0x07	; 7
    2474:	3d 83       	std	Y+5, r19	; 0x05
    2476:	2c 83       	std	Y+4, r18	; 0x04
    2478:	17 96       	adiw	r26, 0x07	; 7
    247a:	3c 93       	st	X, r19
    247c:	2e 93       	st	-X, r18
    247e:	16 97       	sbiw	r26, 0x06	; 6
    2480:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2482:	8a 9f       	mul	r24, r26
    2484:	d0 01       	movw	r26, r0
    2486:	11 24       	eor	r1, r1
    2488:	a5 53       	subi	r26, 0x35	; 53
    248a:	ba 4e       	sbci	r27, 0xEA	; 234
    248c:	b5 87       	std	Z+13, r27	; 0x0d
    248e:	a4 87       	std	Z+12, r26	; 0x0c
    2490:	8c 91       	ld	r24, X
    2492:	8f 5f       	subi	r24, 0xFF	; 255
    2494:	8c 93       	st	X, r24
    2496:	1c c0       	rjmp	.+56     	; 0x24d0 <xTaskRemoveFromEventList+0x13e>
    2498:	46 ea       	ldi	r20, 0xA6	; 166
    249a:	55 e1       	ldi	r21, 0x15	; 21
    249c:	da 01       	movw	r26, r20
    249e:	11 96       	adiw	r26, 0x01	; 1
    24a0:	cd 91       	ld	r28, X+
    24a2:	dc 91       	ld	r29, X
    24a4:	12 97       	sbiw	r26, 0x02	; 2
    24a6:	d3 8b       	std	Z+19, r29	; 0x13
    24a8:	c2 8b       	std	Z+18, r28	; 0x12
    24aa:	8e 81       	ldd	r24, Y+6	; 0x06
    24ac:	9f 81       	ldd	r25, Y+7	; 0x07
    24ae:	95 8b       	std	Z+21, r25	; 0x15
    24b0:	84 8b       	std	Z+20, r24	; 0x14
    24b2:	8e 81       	ldd	r24, Y+6	; 0x06
    24b4:	9f 81       	ldd	r25, Y+7	; 0x07
    24b6:	dc 01       	movw	r26, r24
    24b8:	15 96       	adiw	r26, 0x05	; 5
    24ba:	3c 93       	st	X, r19
    24bc:	2e 93       	st	-X, r18
    24be:	14 97       	sbiw	r26, 0x04	; 4
    24c0:	3f 83       	std	Y+7, r19	; 0x07
    24c2:	2e 83       	std	Y+6, r18	; 0x06
    24c4:	51 8f       	std	Z+25, r21	; 0x19
    24c6:	40 8f       	std	Z+24, r20	; 0x18
    24c8:	da 01       	movw	r26, r20
    24ca:	8c 91       	ld	r24, X
    24cc:	8f 5f       	subi	r24, 0xFF	; 255
    24ce:	8c 93       	st	X, r24
    24d0:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
    24d4:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    24d8:	92 8d       	ldd	r25, Z+26	; 0x1a
    24da:	5a 96       	adiw	r26, 0x1a	; 26
    24dc:	8c 91       	ld	r24, X
    24de:	89 17       	cp	r24, r25
    24e0:	20 f4       	brcc	.+8      	; 0x24ea <xTaskRemoveFromEventList+0x158>
    24e2:	81 e0       	ldi	r24, 0x01	; 1
    24e4:	80 93 83 15 	sts	0x1583, r24	; 0x801583 <xYieldPending>
    24e8:	01 c0       	rjmp	.+2      	; 0x24ec <xTaskRemoveFromEventList+0x15a>
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	df 91       	pop	r29
    24ee:	cf 91       	pop	r28
    24f0:	08 95       	ret

000024f2 <vTaskSetTimeOutState>:
    24f2:	0f b6       	in	r0, 0x3f	; 63
    24f4:	f8 94       	cli
    24f6:	0f 92       	push	r0
    24f8:	20 91 82 15 	lds	r18, 0x1582	; 0x801582 <xNumOfOverflows>
    24fc:	fc 01       	movw	r30, r24
    24fe:	20 83       	st	Z, r18
    2500:	40 91 8a 15 	lds	r20, 0x158A	; 0x80158a <xTickCount>
    2504:	50 91 8b 15 	lds	r21, 0x158B	; 0x80158b <xTickCount+0x1>
    2508:	60 91 8c 15 	lds	r22, 0x158C	; 0x80158c <xTickCount+0x2>
    250c:	70 91 8d 15 	lds	r23, 0x158D	; 0x80158d <xTickCount+0x3>
    2510:	41 83       	std	Z+1, r20	; 0x01
    2512:	52 83       	std	Z+2, r21	; 0x02
    2514:	63 83       	std	Z+3, r22	; 0x03
    2516:	74 83       	std	Z+4, r23	; 0x04
    2518:	0f 90       	pop	r0
    251a:	0f be       	out	0x3f, r0	; 63
    251c:	08 95       	ret

0000251e <vTaskInternalSetTimeOutState>:
    251e:	20 91 82 15 	lds	r18, 0x1582	; 0x801582 <xNumOfOverflows>
    2522:	fc 01       	movw	r30, r24
    2524:	20 83       	st	Z, r18
    2526:	40 91 8a 15 	lds	r20, 0x158A	; 0x80158a <xTickCount>
    252a:	50 91 8b 15 	lds	r21, 0x158B	; 0x80158b <xTickCount+0x1>
    252e:	60 91 8c 15 	lds	r22, 0x158C	; 0x80158c <xTickCount+0x2>
    2532:	70 91 8d 15 	lds	r23, 0x158D	; 0x80158d <xTickCount+0x3>
    2536:	41 83       	std	Z+1, r20	; 0x01
    2538:	52 83       	std	Z+2, r21	; 0x02
    253a:	63 83       	std	Z+3, r22	; 0x03
    253c:	74 83       	std	Z+4, r23	; 0x04
    253e:	08 95       	ret

00002540 <xTaskCheckForTimeOut>:
    2540:	cf 92       	push	r12
    2542:	df 92       	push	r13
    2544:	ef 92       	push	r14
    2546:	ff 92       	push	r15
    2548:	0f 93       	push	r16
    254a:	1f 93       	push	r17
    254c:	cf 93       	push	r28
    254e:	df 93       	push	r29
    2550:	fb 01       	movw	r30, r22
    2552:	0f b6       	in	r0, 0x3f	; 63
    2554:	f8 94       	cli
    2556:	0f 92       	push	r0
    2558:	40 91 8a 15 	lds	r20, 0x158A	; 0x80158a <xTickCount>
    255c:	50 91 8b 15 	lds	r21, 0x158B	; 0x80158b <xTickCount+0x1>
    2560:	60 91 8c 15 	lds	r22, 0x158C	; 0x80158c <xTickCount+0x2>
    2564:	70 91 8d 15 	lds	r23, 0x158D	; 0x80158d <xTickCount+0x3>
    2568:	00 81       	ld	r16, Z
    256a:	11 81       	ldd	r17, Z+1	; 0x01
    256c:	22 81       	ldd	r18, Z+2	; 0x02
    256e:	33 81       	ldd	r19, Z+3	; 0x03
    2570:	0f 3f       	cpi	r16, 0xFF	; 255
    2572:	af ef       	ldi	r26, 0xFF	; 255
    2574:	1a 07       	cpc	r17, r26
    2576:	2a 07       	cpc	r18, r26
    2578:	3a 07       	cpc	r19, r26
    257a:	79 f1       	breq	.+94     	; 0x25da <xTaskCheckForTimeOut+0x9a>
    257c:	ec 01       	movw	r28, r24
    257e:	c9 80       	ldd	r12, Y+1	; 0x01
    2580:	da 80       	ldd	r13, Y+2	; 0x02
    2582:	eb 80       	ldd	r14, Y+3	; 0x03
    2584:	fc 80       	ldd	r15, Y+4	; 0x04
    2586:	a0 91 82 15 	lds	r26, 0x1582	; 0x801582 <xNumOfOverflows>
    258a:	b8 81       	ld	r27, Y
    258c:	ba 17       	cp	r27, r26
    258e:	59 f0       	breq	.+22     	; 0x25a6 <xTaskCheckForTimeOut+0x66>
    2590:	4c 15       	cp	r20, r12
    2592:	5d 05       	cpc	r21, r13
    2594:	6e 05       	cpc	r22, r14
    2596:	7f 05       	cpc	r23, r15
    2598:	30 f0       	brcs	.+12     	; 0x25a6 <xTaskCheckForTimeOut+0x66>
    259a:	10 82       	st	Z, r1
    259c:	11 82       	std	Z+1, r1	; 0x01
    259e:	12 82       	std	Z+2, r1	; 0x02
    25a0:	13 82       	std	Z+3, r1	; 0x03
    25a2:	81 e0       	ldi	r24, 0x01	; 1
    25a4:	1b c0       	rjmp	.+54     	; 0x25dc <xTaskCheckForTimeOut+0x9c>
    25a6:	4c 19       	sub	r20, r12
    25a8:	5d 09       	sbc	r21, r13
    25aa:	6e 09       	sbc	r22, r14
    25ac:	7f 09       	sbc	r23, r15
    25ae:	40 17       	cp	r20, r16
    25b0:	51 07       	cpc	r21, r17
    25b2:	62 07       	cpc	r22, r18
    25b4:	73 07       	cpc	r23, r19
    25b6:	58 f4       	brcc	.+22     	; 0x25ce <xTaskCheckForTimeOut+0x8e>
    25b8:	04 1b       	sub	r16, r20
    25ba:	15 0b       	sbc	r17, r21
    25bc:	26 0b       	sbc	r18, r22
    25be:	37 0b       	sbc	r19, r23
    25c0:	00 83       	st	Z, r16
    25c2:	11 83       	std	Z+1, r17	; 0x01
    25c4:	22 83       	std	Z+2, r18	; 0x02
    25c6:	33 83       	std	Z+3, r19	; 0x03
    25c8:	aa df       	rcall	.-172    	; 0x251e <vTaskInternalSetTimeOutState>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	07 c0       	rjmp	.+14     	; 0x25dc <xTaskCheckForTimeOut+0x9c>
    25ce:	10 82       	st	Z, r1
    25d0:	11 82       	std	Z+1, r1	; 0x01
    25d2:	12 82       	std	Z+2, r1	; 0x02
    25d4:	13 82       	std	Z+3, r1	; 0x03
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	01 c0       	rjmp	.+2      	; 0x25dc <xTaskCheckForTimeOut+0x9c>
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	0f 90       	pop	r0
    25de:	0f be       	out	0x3f, r0	; 63
    25e0:	df 91       	pop	r29
    25e2:	cf 91       	pop	r28
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	ff 90       	pop	r15
    25ea:	ef 90       	pop	r14
    25ec:	df 90       	pop	r13
    25ee:	cf 90       	pop	r12
    25f0:	08 95       	ret

000025f2 <vTaskMissedYield>:
    25f2:	81 e0       	ldi	r24, 0x01	; 1
    25f4:	80 93 83 15 	sts	0x1583, r24	; 0x801583 <xYieldPending>
    25f8:	08 95       	ret

000025fa <xTaskGetCurrentTaskHandle>:
    25fa:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <pxCurrentTCB>
    25fe:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2602:	08 95       	ret

00002604 <xTaskGetSchedulerState>:
    2604:	80 91 88 15 	lds	r24, 0x1588	; 0x801588 <xSchedulerRunning>
    2608:	88 23       	and	r24, r24
    260a:	31 f0       	breq	.+12     	; 0x2618 <xTaskGetSchedulerState+0x14>
    260c:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <uxSchedulerSuspended>
    2610:	88 23       	and	r24, r24
    2612:	21 f0       	breq	.+8      	; 0x261c <xTaskGetSchedulerState+0x18>
    2614:	80 e0       	ldi	r24, 0x00	; 0
    2616:	08 95       	ret
    2618:	81 e0       	ldi	r24, 0x01	; 1
    261a:	08 95       	ret
    261c:	82 e0       	ldi	r24, 0x02	; 2
    261e:	08 95       	ret

00002620 <xTaskPriorityInherit>:
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	cf 93       	push	r28
    2626:	df 93       	push	r29
    2628:	fc 01       	movw	r30, r24
    262a:	89 2b       	or	r24, r25
    262c:	09 f4       	brne	.+2      	; 0x2630 <xTaskPriorityInherit+0x10>
    262e:	79 c0       	rjmp	.+242    	; 0x2722 <xTaskPriorityInherit+0x102>
    2630:	82 8d       	ldd	r24, Z+26	; 0x1a
    2632:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
    2636:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    263a:	5a 96       	adiw	r26, 0x1a	; 26
    263c:	9c 91       	ld	r25, X
    263e:	89 17       	cp	r24, r25
    2640:	08 f0       	brcs	.+2      	; 0x2644 <xTaskPriorityInherit+0x24>
    2642:	63 c0       	rjmp	.+198    	; 0x270a <xTaskPriorityInherit+0xea>
    2644:	46 85       	ldd	r20, Z+14	; 0x0e
    2646:	57 85       	ldd	r21, Z+15	; 0x0f
    2648:	60 89       	ldd	r22, Z+16	; 0x10
    264a:	71 89       	ldd	r23, Z+17	; 0x11
    264c:	77 23       	and	r23, r23
    264e:	94 f0       	brlt	.+36     	; 0x2674 <xTaskPriorityInherit+0x54>
    2650:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
    2654:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2658:	5a 96       	adiw	r26, 0x1a	; 26
    265a:	9c 91       	ld	r25, X
    265c:	4a e0       	ldi	r20, 0x0A	; 10
    265e:	50 e0       	ldi	r21, 0x00	; 0
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	49 1b       	sub	r20, r25
    2666:	51 09       	sbc	r21, r1
    2668:	61 09       	sbc	r22, r1
    266a:	71 09       	sbc	r23, r1
    266c:	46 87       	std	Z+14, r20	; 0x0e
    266e:	57 87       	std	Z+15, r21	; 0x0f
    2670:	60 8b       	std	Z+16, r22	; 0x10
    2672:	71 8b       	std	Z+17, r23	; 0x11
    2674:	2b e0       	ldi	r18, 0x0B	; 11
    2676:	82 9f       	mul	r24, r18
    2678:	c0 01       	movw	r24, r0
    267a:	11 24       	eor	r1, r1
    267c:	85 53       	subi	r24, 0x35	; 53
    267e:	9a 4e       	sbci	r25, 0xEA	; 234
    2680:	24 85       	ldd	r18, Z+12	; 0x0c
    2682:	35 85       	ldd	r19, Z+13	; 0x0d
    2684:	28 17       	cp	r18, r24
    2686:	39 07       	cpc	r19, r25
    2688:	b9 f5       	brne	.+110    	; 0x26f8 <xTaskPriorityInherit+0xd8>
    268a:	ef 01       	movw	r28, r30
    268c:	8f 01       	movw	r16, r30
    268e:	0e 5f       	subi	r16, 0xFE	; 254
    2690:	1f 4f       	sbci	r17, 0xFF	; 255
    2692:	c8 01       	movw	r24, r16
    2694:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
    2698:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    269c:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    26a0:	e2 8d       	ldd	r30, Z+26	; 0x1a
    26a2:	ea 8f       	std	Y+26, r30	; 0x1a
    26a4:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <uxTopReadyPriority>
    26a8:	8e 17       	cp	r24, r30
    26aa:	10 f4       	brcc	.+4      	; 0x26b0 <xTaskPriorityInherit+0x90>
    26ac:	e0 93 89 15 	sts	0x1589, r30	; 0x801589 <uxTopReadyPriority>
    26b0:	8b e0       	ldi	r24, 0x0B	; 11
    26b2:	8e 9f       	mul	r24, r30
    26b4:	f0 01       	movw	r30, r0
    26b6:	11 24       	eor	r1, r1
    26b8:	e5 53       	subi	r30, 0x35	; 53
    26ba:	fa 4e       	sbci	r31, 0xEA	; 234
    26bc:	01 80       	ldd	r0, Z+1	; 0x01
    26be:	f2 81       	ldd	r31, Z+2	; 0x02
    26c0:	e0 2d       	mov	r30, r0
    26c2:	ff 83       	std	Y+7, r31	; 0x07
    26c4:	ee 83       	std	Y+6, r30	; 0x06
    26c6:	26 81       	ldd	r18, Z+6	; 0x06
    26c8:	37 81       	ldd	r19, Z+7	; 0x07
    26ca:	39 87       	std	Y+9, r19	; 0x09
    26cc:	28 87       	std	Y+8, r18	; 0x08
    26ce:	a6 81       	ldd	r26, Z+6	; 0x06
    26d0:	b7 81       	ldd	r27, Z+7	; 0x07
    26d2:	15 96       	adiw	r26, 0x05	; 5
    26d4:	1c 93       	st	X, r17
    26d6:	0e 93       	st	-X, r16
    26d8:	14 97       	sbiw	r26, 0x04	; 4
    26da:	17 83       	std	Z+7, r17	; 0x07
    26dc:	06 83       	std	Z+6, r16	; 0x06
    26de:	ea 8d       	ldd	r30, Y+26	; 0x1a
    26e0:	8e 9f       	mul	r24, r30
    26e2:	f0 01       	movw	r30, r0
    26e4:	11 24       	eor	r1, r1
    26e6:	e5 53       	subi	r30, 0x35	; 53
    26e8:	fa 4e       	sbci	r31, 0xEA	; 234
    26ea:	fd 87       	std	Y+13, r31	; 0x0d
    26ec:	ec 87       	std	Y+12, r30	; 0x0c
    26ee:	80 81       	ld	r24, Z
    26f0:	8f 5f       	subi	r24, 0xFF	; 255
    26f2:	80 83       	st	Z, r24
    26f4:	81 e0       	ldi	r24, 0x01	; 1
    26f6:	16 c0       	rjmp	.+44     	; 0x2724 <xTaskPriorityInherit+0x104>
    26f8:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
    26fc:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2700:	5a 96       	adiw	r26, 0x1a	; 26
    2702:	8c 91       	ld	r24, X
    2704:	82 8f       	std	Z+26, r24	; 0x1a
    2706:	81 e0       	ldi	r24, 0x01	; 1
    2708:	0d c0       	rjmp	.+26     	; 0x2724 <xTaskPriorityInherit+0x104>
    270a:	a0 91 39 16 	lds	r26, 0x1639	; 0x801639 <pxCurrentTCB>
    270e:	b0 91 3a 16 	lds	r27, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2712:	81 e0       	ldi	r24, 0x01	; 1
    2714:	25 a5       	ldd	r18, Z+45	; 0x2d
    2716:	5a 96       	adiw	r26, 0x1a	; 26
    2718:	9c 91       	ld	r25, X
    271a:	29 17       	cp	r18, r25
    271c:	18 f0       	brcs	.+6      	; 0x2724 <xTaskPriorityInherit+0x104>
    271e:	80 e0       	ldi	r24, 0x00	; 0
    2720:	01 c0       	rjmp	.+2      	; 0x2724 <xTaskPriorityInherit+0x104>
    2722:	80 e0       	ldi	r24, 0x00	; 0
    2724:	df 91       	pop	r29
    2726:	cf 91       	pop	r28
    2728:	1f 91       	pop	r17
    272a:	0f 91       	pop	r16
    272c:	08 95       	ret

0000272e <xTaskPriorityDisinherit>:
    272e:	0f 93       	push	r16
    2730:	1f 93       	push	r17
    2732:	cf 93       	push	r28
    2734:	df 93       	push	r29
    2736:	fc 01       	movw	r30, r24
    2738:	89 2b       	or	r24, r25
    273a:	09 f4       	brne	.+2      	; 0x273e <xTaskPriorityDisinherit+0x10>
    273c:	49 c0       	rjmp	.+146    	; 0x27d0 <xTaskPriorityDisinherit+0xa2>
    273e:	86 a5       	ldd	r24, Z+46	; 0x2e
    2740:	81 50       	subi	r24, 0x01	; 1
    2742:	86 a7       	std	Z+46, r24	; 0x2e
    2744:	22 8d       	ldd	r18, Z+26	; 0x1a
    2746:	95 a5       	ldd	r25, Z+45	; 0x2d
    2748:	29 17       	cp	r18, r25
    274a:	09 f4       	brne	.+2      	; 0x274e <xTaskPriorityDisinherit+0x20>
    274c:	43 c0       	rjmp	.+134    	; 0x27d4 <xTaskPriorityDisinherit+0xa6>
    274e:	81 11       	cpse	r24, r1
    2750:	43 c0       	rjmp	.+134    	; 0x27d8 <xTaskPriorityDisinherit+0xaa>
    2752:	ef 01       	movw	r28, r30
    2754:	8f 01       	movw	r16, r30
    2756:	0e 5f       	subi	r16, 0xFE	; 254
    2758:	1f 4f       	sbci	r17, 0xFF	; 255
    275a:	c8 01       	movw	r24, r16
    275c:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
    2760:	ed a5       	ldd	r30, Y+45	; 0x2d
    2762:	ea 8f       	std	Y+26, r30	; 0x1a
    2764:	8a e0       	ldi	r24, 0x0A	; 10
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	a0 e0       	ldi	r26, 0x00	; 0
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	8e 1b       	sub	r24, r30
    276e:	91 09       	sbc	r25, r1
    2770:	a1 09       	sbc	r26, r1
    2772:	b1 09       	sbc	r27, r1
    2774:	8e 87       	std	Y+14, r24	; 0x0e
    2776:	9f 87       	std	Y+15, r25	; 0x0f
    2778:	a8 8b       	std	Y+16, r26	; 0x10
    277a:	b9 8b       	std	Y+17, r27	; 0x11
    277c:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <uxTopReadyPriority>
    2780:	8e 17       	cp	r24, r30
    2782:	10 f4       	brcc	.+4      	; 0x2788 <xTaskPriorityDisinherit+0x5a>
    2784:	e0 93 89 15 	sts	0x1589, r30	; 0x801589 <uxTopReadyPriority>
    2788:	8b e0       	ldi	r24, 0x0B	; 11
    278a:	8e 9f       	mul	r24, r30
    278c:	f0 01       	movw	r30, r0
    278e:	11 24       	eor	r1, r1
    2790:	e5 53       	subi	r30, 0x35	; 53
    2792:	fa 4e       	sbci	r31, 0xEA	; 234
    2794:	01 80       	ldd	r0, Z+1	; 0x01
    2796:	f2 81       	ldd	r31, Z+2	; 0x02
    2798:	e0 2d       	mov	r30, r0
    279a:	ff 83       	std	Y+7, r31	; 0x07
    279c:	ee 83       	std	Y+6, r30	; 0x06
    279e:	26 81       	ldd	r18, Z+6	; 0x06
    27a0:	37 81       	ldd	r19, Z+7	; 0x07
    27a2:	39 87       	std	Y+9, r19	; 0x09
    27a4:	28 87       	std	Y+8, r18	; 0x08
    27a6:	a6 81       	ldd	r26, Z+6	; 0x06
    27a8:	b7 81       	ldd	r27, Z+7	; 0x07
    27aa:	15 96       	adiw	r26, 0x05	; 5
    27ac:	1c 93       	st	X, r17
    27ae:	0e 93       	st	-X, r16
    27b0:	14 97       	sbiw	r26, 0x04	; 4
    27b2:	17 83       	std	Z+7, r17	; 0x07
    27b4:	06 83       	std	Z+6, r16	; 0x06
    27b6:	ea 8d       	ldd	r30, Y+26	; 0x1a
    27b8:	8e 9f       	mul	r24, r30
    27ba:	f0 01       	movw	r30, r0
    27bc:	11 24       	eor	r1, r1
    27be:	e5 53       	subi	r30, 0x35	; 53
    27c0:	fa 4e       	sbci	r31, 0xEA	; 234
    27c2:	fd 87       	std	Y+13, r31	; 0x0d
    27c4:	ec 87       	std	Y+12, r30	; 0x0c
    27c6:	80 81       	ld	r24, Z
    27c8:	8f 5f       	subi	r24, 0xFF	; 255
    27ca:	80 83       	st	Z, r24
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	05 c0       	rjmp	.+10     	; 0x27da <xTaskPriorityDisinherit+0xac>
    27d0:	80 e0       	ldi	r24, 0x00	; 0
    27d2:	03 c0       	rjmp	.+6      	; 0x27da <xTaskPriorityDisinherit+0xac>
    27d4:	80 e0       	ldi	r24, 0x00	; 0
    27d6:	01 c0       	rjmp	.+2      	; 0x27da <xTaskPriorityDisinherit+0xac>
    27d8:	80 e0       	ldi	r24, 0x00	; 0
    27da:	df 91       	pop	r29
    27dc:	cf 91       	pop	r28
    27de:	1f 91       	pop	r17
    27e0:	0f 91       	pop	r16
    27e2:	08 95       	ret

000027e4 <vTaskPriorityDisinheritAfterTimeout>:
    27e4:	0f 93       	push	r16
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	fc 01       	movw	r30, r24
    27ee:	89 2b       	or	r24, r25
    27f0:	09 f4       	brne	.+2      	; 0x27f4 <vTaskPriorityDisinheritAfterTimeout+0x10>
    27f2:	5a c0       	rjmp	.+180    	; 0x28a8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    27f4:	85 a5       	ldd	r24, Z+45	; 0x2d
    27f6:	86 17       	cp	r24, r22
    27f8:	08 f4       	brcc	.+2      	; 0x27fc <vTaskPriorityDisinheritAfterTimeout+0x18>
    27fa:	86 2f       	mov	r24, r22
    27fc:	92 8d       	ldd	r25, Z+26	; 0x1a
    27fe:	98 17       	cp	r25, r24
    2800:	09 f4       	brne	.+2      	; 0x2804 <vTaskPriorityDisinheritAfterTimeout+0x20>
    2802:	52 c0       	rjmp	.+164    	; 0x28a8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2804:	26 a5       	ldd	r18, Z+46	; 0x2e
    2806:	21 30       	cpi	r18, 0x01	; 1
    2808:	09 f0       	breq	.+2      	; 0x280c <vTaskPriorityDisinheritAfterTimeout+0x28>
    280a:	4e c0       	rjmp	.+156    	; 0x28a8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    280c:	82 8f       	std	Z+26, r24	; 0x1a
    280e:	46 85       	ldd	r20, Z+14	; 0x0e
    2810:	57 85       	ldd	r21, Z+15	; 0x0f
    2812:	60 89       	ldd	r22, Z+16	; 0x10
    2814:	71 89       	ldd	r23, Z+17	; 0x11
    2816:	77 23       	and	r23, r23
    2818:	64 f0       	brlt	.+24     	; 0x2832 <vTaskPriorityDisinheritAfterTimeout+0x4e>
    281a:	4a e0       	ldi	r20, 0x0A	; 10
    281c:	50 e0       	ldi	r21, 0x00	; 0
    281e:	60 e0       	ldi	r22, 0x00	; 0
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	48 1b       	sub	r20, r24
    2824:	51 09       	sbc	r21, r1
    2826:	61 09       	sbc	r22, r1
    2828:	71 09       	sbc	r23, r1
    282a:	46 87       	std	Z+14, r20	; 0x0e
    282c:	57 87       	std	Z+15, r21	; 0x0f
    282e:	60 8b       	std	Z+16, r22	; 0x10
    2830:	71 8b       	std	Z+17, r23	; 0x11
    2832:	2b e0       	ldi	r18, 0x0B	; 11
    2834:	92 9f       	mul	r25, r18
    2836:	c0 01       	movw	r24, r0
    2838:	11 24       	eor	r1, r1
    283a:	85 53       	subi	r24, 0x35	; 53
    283c:	9a 4e       	sbci	r25, 0xEA	; 234
    283e:	24 85       	ldd	r18, Z+12	; 0x0c
    2840:	35 85       	ldd	r19, Z+13	; 0x0d
    2842:	28 17       	cp	r18, r24
    2844:	39 07       	cpc	r19, r25
    2846:	81 f5       	brne	.+96     	; 0x28a8 <vTaskPriorityDisinheritAfterTimeout+0xc4>
    2848:	ef 01       	movw	r28, r30
    284a:	8f 01       	movw	r16, r30
    284c:	0e 5f       	subi	r16, 0xFE	; 254
    284e:	1f 4f       	sbci	r17, 0xFF	; 255
    2850:	c8 01       	movw	r24, r16
    2852:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
    2856:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2858:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <uxTopReadyPriority>
    285c:	8e 17       	cp	r24, r30
    285e:	10 f4       	brcc	.+4      	; 0x2864 <vTaskPriorityDisinheritAfterTimeout+0x80>
    2860:	e0 93 89 15 	sts	0x1589, r30	; 0x801589 <uxTopReadyPriority>
    2864:	8b e0       	ldi	r24, 0x0B	; 11
    2866:	8e 9f       	mul	r24, r30
    2868:	f0 01       	movw	r30, r0
    286a:	11 24       	eor	r1, r1
    286c:	e5 53       	subi	r30, 0x35	; 53
    286e:	fa 4e       	sbci	r31, 0xEA	; 234
    2870:	01 80       	ldd	r0, Z+1	; 0x01
    2872:	f2 81       	ldd	r31, Z+2	; 0x02
    2874:	e0 2d       	mov	r30, r0
    2876:	ff 83       	std	Y+7, r31	; 0x07
    2878:	ee 83       	std	Y+6, r30	; 0x06
    287a:	26 81       	ldd	r18, Z+6	; 0x06
    287c:	37 81       	ldd	r19, Z+7	; 0x07
    287e:	39 87       	std	Y+9, r19	; 0x09
    2880:	28 87       	std	Y+8, r18	; 0x08
    2882:	a6 81       	ldd	r26, Z+6	; 0x06
    2884:	b7 81       	ldd	r27, Z+7	; 0x07
    2886:	15 96       	adiw	r26, 0x05	; 5
    2888:	1c 93       	st	X, r17
    288a:	0e 93       	st	-X, r16
    288c:	14 97       	sbiw	r26, 0x04	; 4
    288e:	17 83       	std	Z+7, r17	; 0x07
    2890:	06 83       	std	Z+6, r16	; 0x06
    2892:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2894:	8e 9f       	mul	r24, r30
    2896:	f0 01       	movw	r30, r0
    2898:	11 24       	eor	r1, r1
    289a:	e5 53       	subi	r30, 0x35	; 53
    289c:	fa 4e       	sbci	r31, 0xEA	; 234
    289e:	fd 87       	std	Y+13, r31	; 0x0d
    28a0:	ec 87       	std	Y+12, r30	; 0x0c
    28a2:	80 81       	ld	r24, Z
    28a4:	8f 5f       	subi	r24, 0xFF	; 255
    28a6:	80 83       	st	Z, r24
    28a8:	df 91       	pop	r29
    28aa:	cf 91       	pop	r28
    28ac:	1f 91       	pop	r17
    28ae:	0f 91       	pop	r16
    28b0:	08 95       	ret

000028b2 <pvTaskIncrementMutexHeldCount>:
    28b2:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <pxCurrentTCB>
    28b6:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    28ba:	89 2b       	or	r24, r25
    28bc:	39 f0       	breq	.+14     	; 0x28cc <pvTaskIncrementMutexHeldCount+0x1a>
    28be:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    28c2:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    28c6:	86 a5       	ldd	r24, Z+46	; 0x2e
    28c8:	8f 5f       	subi	r24, 0xFF	; 255
    28ca:	86 a7       	std	Z+46, r24	; 0x2e
    28cc:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <pxCurrentTCB>
    28d0:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    28d4:	08 95       	ret

000028d6 <xTaskGenericNotifyWait>:
    28d6:	4f 92       	push	r4
    28d8:	5f 92       	push	r5
    28da:	6f 92       	push	r6
    28dc:	7f 92       	push	r7
    28de:	af 92       	push	r10
    28e0:	bf 92       	push	r11
    28e2:	cf 92       	push	r12
    28e4:	df 92       	push	r13
    28e6:	ef 92       	push	r14
    28e8:	ff 92       	push	r15
    28ea:	0f 93       	push	r16
    28ec:	1f 93       	push	r17
    28ee:	cf 93       	push	r28
    28f0:	df 93       	push	r29
    28f2:	28 01       	movw	r4, r16
    28f4:	39 01       	movw	r6, r18
    28f6:	0f b6       	in	r0, 0x3f	; 63
    28f8:	f8 94       	cli
    28fa:	0f 92       	push	r0
    28fc:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    2900:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2904:	c8 2f       	mov	r28, r24
    2906:	d0 e0       	ldi	r29, 0x00	; 0
    2908:	ec 0f       	add	r30, r28
    290a:	fd 1f       	adc	r31, r29
    290c:	83 a9       	ldd	r24, Z+51	; 0x33
    290e:	82 30       	cpi	r24, 0x02	; 2
    2910:	79 f1       	breq	.+94     	; 0x2970 <xTaskGenericNotifyWait+0x9a>
    2912:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    2916:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    291a:	ce 01       	movw	r24, r28
    291c:	88 0f       	add	r24, r24
    291e:	99 1f       	adc	r25, r25
    2920:	88 0f       	add	r24, r24
    2922:	99 1f       	adc	r25, r25
    2924:	e8 0f       	add	r30, r24
    2926:	f9 1f       	adc	r31, r25
    2928:	87 a5       	ldd	r24, Z+47	; 0x2f
    292a:	90 a9       	ldd	r25, Z+48	; 0x30
    292c:	a1 a9       	ldd	r26, Z+49	; 0x31
    292e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2930:	40 95       	com	r20
    2932:	50 95       	com	r21
    2934:	60 95       	com	r22
    2936:	70 95       	com	r23
    2938:	48 23       	and	r20, r24
    293a:	59 23       	and	r21, r25
    293c:	6a 23       	and	r22, r26
    293e:	7b 23       	and	r23, r27
    2940:	47 a7       	std	Z+47, r20	; 0x2f
    2942:	50 ab       	std	Z+48, r21	; 0x30
    2944:	61 ab       	std	Z+49, r22	; 0x31
    2946:	72 ab       	std	Z+50, r23	; 0x32
    2948:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    294c:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2950:	ec 0f       	add	r30, r28
    2952:	fd 1f       	adc	r31, r29
    2954:	81 e0       	ldi	r24, 0x01	; 1
    2956:	83 ab       	std	Z+51, r24	; 0x33
    2958:	a1 14       	cp	r10, r1
    295a:	b1 04       	cpc	r11, r1
    295c:	c1 04       	cpc	r12, r1
    295e:	d1 04       	cpc	r13, r1
    2960:	39 f0       	breq	.+14     	; 0x2970 <xTaskGenericNotifyWait+0x9a>
    2962:	41 e0       	ldi	r20, 0x01	; 1
    2964:	c6 01       	movw	r24, r12
    2966:	b5 01       	movw	r22, r10
    2968:	0e 94 3e 0c 	call	0x187c	; 0x187c <prvAddCurrentTaskToDelayedList>
    296c:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    2970:	0f 90       	pop	r0
    2972:	0f be       	out	0x3f, r0	; 63
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	0f 92       	push	r0
    297a:	e1 14       	cp	r14, r1
    297c:	f1 04       	cpc	r15, r1
    297e:	a1 f0       	breq	.+40     	; 0x29a8 <xTaskGenericNotifyWait+0xd2>
    2980:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    2984:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2988:	ce 01       	movw	r24, r28
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	e8 0f       	add	r30, r24
    2994:	f9 1f       	adc	r31, r25
    2996:	87 a5       	ldd	r24, Z+47	; 0x2f
    2998:	90 a9       	ldd	r25, Z+48	; 0x30
    299a:	a1 a9       	ldd	r26, Z+49	; 0x31
    299c:	b2 a9       	ldd	r27, Z+50	; 0x32
    299e:	f7 01       	movw	r30, r14
    29a0:	80 83       	st	Z, r24
    29a2:	91 83       	std	Z+1, r25	; 0x01
    29a4:	a2 83       	std	Z+2, r26	; 0x02
    29a6:	b3 83       	std	Z+3, r27	; 0x03
    29a8:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    29ac:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    29b0:	ec 0f       	add	r30, r28
    29b2:	fd 1f       	adc	r31, r29
    29b4:	83 a9       	ldd	r24, Z+51	; 0x33
    29b6:	82 30       	cpi	r24, 0x02	; 2
    29b8:	e9 f4       	brne	.+58     	; 0x29f4 <xTaskGenericNotifyWait+0x11e>
    29ba:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    29be:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    29c2:	ce 01       	movw	r24, r28
    29c4:	88 0f       	add	r24, r24
    29c6:	99 1f       	adc	r25, r25
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	e8 0f       	add	r30, r24
    29ce:	f9 1f       	adc	r31, r25
    29d0:	87 a5       	ldd	r24, Z+47	; 0x2f
    29d2:	90 a9       	ldd	r25, Z+48	; 0x30
    29d4:	a1 a9       	ldd	r26, Z+49	; 0x31
    29d6:	b2 a9       	ldd	r27, Z+50	; 0x32
    29d8:	40 94       	com	r4
    29da:	50 94       	com	r5
    29dc:	60 94       	com	r6
    29de:	70 94       	com	r7
    29e0:	48 22       	and	r4, r24
    29e2:	59 22       	and	r5, r25
    29e4:	6a 22       	and	r6, r26
    29e6:	7b 22       	and	r7, r27
    29e8:	47 a6       	std	Z+47, r4	; 0x2f
    29ea:	50 aa       	std	Z+48, r5	; 0x30
    29ec:	61 aa       	std	Z+49, r6	; 0x31
    29ee:	72 aa       	std	Z+50, r7	; 0x32
    29f0:	81 e0       	ldi	r24, 0x01	; 1
    29f2:	01 c0       	rjmp	.+2      	; 0x29f6 <xTaskGenericNotifyWait+0x120>
    29f4:	80 e0       	ldi	r24, 0x00	; 0
    29f6:	20 91 39 16 	lds	r18, 0x1639	; 0x801639 <pxCurrentTCB>
    29fa:	30 91 3a 16 	lds	r19, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    29fe:	c2 0f       	add	r28, r18
    2a00:	d3 1f       	adc	r29, r19
    2a02:	1b aa       	std	Y+51, r1	; 0x33
    2a04:	0f 90       	pop	r0
    2a06:	0f be       	out	0x3f, r0	; 63
    2a08:	df 91       	pop	r29
    2a0a:	cf 91       	pop	r28
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	ff 90       	pop	r15
    2a12:	ef 90       	pop	r14
    2a14:	df 90       	pop	r13
    2a16:	cf 90       	pop	r12
    2a18:	bf 90       	pop	r11
    2a1a:	af 90       	pop	r10
    2a1c:	7f 90       	pop	r7
    2a1e:	6f 90       	pop	r6
    2a20:	5f 90       	pop	r5
    2a22:	4f 90       	pop	r4
    2a24:	08 95       	ret

00002a26 <xTaskGenericNotify>:
    2a26:	8f 92       	push	r8
    2a28:	9f 92       	push	r9
    2a2a:	af 92       	push	r10
    2a2c:	bf 92       	push	r11
    2a2e:	ef 92       	push	r14
    2a30:	ff 92       	push	r15
    2a32:	0f 93       	push	r16
    2a34:	cf 93       	push	r28
    2a36:	df 93       	push	r29
    2a38:	dc 01       	movw	r26, r24
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	f8 94       	cli
    2a3e:	0f 92       	push	r0
    2a40:	e1 14       	cp	r14, r1
    2a42:	f1 04       	cpc	r15, r1
    2a44:	79 f0       	breq	.+30     	; 0x2a64 <xTaskGenericNotify+0x3e>
    2a46:	fc 01       	movw	r30, r24
    2a48:	84 e0       	ldi	r24, 0x04	; 4
    2a4a:	68 9f       	mul	r22, r24
    2a4c:	e0 0d       	add	r30, r0
    2a4e:	f1 1d       	adc	r31, r1
    2a50:	11 24       	eor	r1, r1
    2a52:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a54:	90 a8       	ldd	r9, Z+48	; 0x30
    2a56:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a58:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a5a:	f7 01       	movw	r30, r14
    2a5c:	80 82       	st	Z, r8
    2a5e:	91 82       	std	Z+1, r9	; 0x01
    2a60:	a2 82       	std	Z+2, r10	; 0x02
    2a62:	b3 82       	std	Z+3, r11	; 0x03
    2a64:	70 e0       	ldi	r23, 0x00	; 0
    2a66:	fd 01       	movw	r30, r26
    2a68:	e6 0f       	add	r30, r22
    2a6a:	f7 1f       	adc	r31, r23
    2a6c:	83 a9       	ldd	r24, Z+51	; 0x33
    2a6e:	92 e0       	ldi	r25, 0x02	; 2
    2a70:	93 ab       	std	Z+51, r25	; 0x33
    2a72:	02 30       	cpi	r16, 0x02	; 2
    2a74:	f9 f0       	breq	.+62     	; 0x2ab4 <xTaskGenericNotify+0x8e>
    2a76:	18 f4       	brcc	.+6      	; 0x2a7e <xTaskGenericNotify+0x58>
    2a78:	01 30       	cpi	r16, 0x01	; 1
    2a7a:	31 f0       	breq	.+12     	; 0x2a88 <xTaskGenericNotify+0x62>
    2a7c:	49 c0       	rjmp	.+146    	; 0x2b10 <xTaskGenericNotify+0xea>
    2a7e:	03 30       	cpi	r16, 0x03	; 3
    2a80:	69 f1       	breq	.+90     	; 0x2adc <xTaskGenericNotify+0xb6>
    2a82:	04 30       	cpi	r16, 0x04	; 4
    2a84:	b9 f1       	breq	.+110    	; 0x2af4 <xTaskGenericNotify+0xce>
    2a86:	44 c0       	rjmp	.+136    	; 0x2b10 <xTaskGenericNotify+0xea>
    2a88:	66 0f       	add	r22, r22
    2a8a:	77 1f       	adc	r23, r23
    2a8c:	66 0f       	add	r22, r22
    2a8e:	77 1f       	adc	r23, r23
    2a90:	fd 01       	movw	r30, r26
    2a92:	e6 0f       	add	r30, r22
    2a94:	f7 1f       	adc	r31, r23
    2a96:	87 a4       	ldd	r8, Z+47	; 0x2f
    2a98:	90 a8       	ldd	r9, Z+48	; 0x30
    2a9a:	a1 a8       	ldd	r10, Z+49	; 0x31
    2a9c:	b2 a8       	ldd	r11, Z+50	; 0x32
    2a9e:	ba 01       	movw	r22, r20
    2aa0:	a9 01       	movw	r20, r18
    2aa2:	48 29       	or	r20, r8
    2aa4:	59 29       	or	r21, r9
    2aa6:	6a 29       	or	r22, r10
    2aa8:	7b 29       	or	r23, r11
    2aaa:	47 a7       	std	Z+47, r20	; 0x2f
    2aac:	50 ab       	std	Z+48, r21	; 0x30
    2aae:	61 ab       	std	Z+49, r22	; 0x31
    2ab0:	72 ab       	std	Z+50, r23	; 0x32
    2ab2:	2e c0       	rjmp	.+92     	; 0x2b10 <xTaskGenericNotify+0xea>
    2ab4:	66 0f       	add	r22, r22
    2ab6:	77 1f       	adc	r23, r23
    2ab8:	66 0f       	add	r22, r22
    2aba:	77 1f       	adc	r23, r23
    2abc:	fd 01       	movw	r30, r26
    2abe:	e6 0f       	add	r30, r22
    2ac0:	f7 1f       	adc	r31, r23
    2ac2:	47 a5       	ldd	r20, Z+47	; 0x2f
    2ac4:	50 a9       	ldd	r21, Z+48	; 0x30
    2ac6:	61 a9       	ldd	r22, Z+49	; 0x31
    2ac8:	72 a9       	ldd	r23, Z+50	; 0x32
    2aca:	4f 5f       	subi	r20, 0xFF	; 255
    2acc:	5f 4f       	sbci	r21, 0xFF	; 255
    2ace:	6f 4f       	sbci	r22, 0xFF	; 255
    2ad0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ad2:	47 a7       	std	Z+47, r20	; 0x2f
    2ad4:	50 ab       	std	Z+48, r21	; 0x30
    2ad6:	61 ab       	std	Z+49, r22	; 0x31
    2ad8:	72 ab       	std	Z+50, r23	; 0x32
    2ada:	1a c0       	rjmp	.+52     	; 0x2b10 <xTaskGenericNotify+0xea>
    2adc:	66 0f       	add	r22, r22
    2ade:	77 1f       	adc	r23, r23
    2ae0:	66 0f       	add	r22, r22
    2ae2:	77 1f       	adc	r23, r23
    2ae4:	fd 01       	movw	r30, r26
    2ae6:	e6 0f       	add	r30, r22
    2ae8:	f7 1f       	adc	r31, r23
    2aea:	27 a7       	std	Z+47, r18	; 0x2f
    2aec:	30 ab       	std	Z+48, r19	; 0x30
    2aee:	41 ab       	std	Z+49, r20	; 0x31
    2af0:	52 ab       	std	Z+50, r21	; 0x32
    2af2:	0e c0       	rjmp	.+28     	; 0x2b10 <xTaskGenericNotify+0xea>
    2af4:	82 30       	cpi	r24, 0x02	; 2
    2af6:	09 f4       	brne	.+2      	; 0x2afa <xTaskGenericNotify+0xd4>
    2af8:	79 c0       	rjmp	.+242    	; 0x2bec <xTaskGenericNotify+0x1c6>
    2afa:	66 0f       	add	r22, r22
    2afc:	77 1f       	adc	r23, r23
    2afe:	66 0f       	add	r22, r22
    2b00:	77 1f       	adc	r23, r23
    2b02:	fd 01       	movw	r30, r26
    2b04:	e6 0f       	add	r30, r22
    2b06:	f7 1f       	adc	r31, r23
    2b08:	27 a7       	std	Z+47, r18	; 0x2f
    2b0a:	30 ab       	std	Z+48, r19	; 0x30
    2b0c:	41 ab       	std	Z+49, r20	; 0x31
    2b0e:	52 ab       	std	Z+50, r21	; 0x32
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	09 f0       	breq	.+2      	; 0x2b16 <xTaskGenericNotify+0xf0>
    2b14:	6d c0       	rjmp	.+218    	; 0x2bf0 <xTaskGenericNotify+0x1ca>
    2b16:	1c 96       	adiw	r26, 0x0c	; 12
    2b18:	ed 91       	ld	r30, X+
    2b1a:	fc 91       	ld	r31, X
    2b1c:	1d 97       	sbiw	r26, 0x0d	; 13
    2b1e:	16 96       	adiw	r26, 0x06	; 6
    2b20:	cd 91       	ld	r28, X+
    2b22:	dc 91       	ld	r29, X
    2b24:	17 97       	sbiw	r26, 0x07	; 7
    2b26:	18 96       	adiw	r26, 0x08	; 8
    2b28:	8d 91       	ld	r24, X+
    2b2a:	9c 91       	ld	r25, X
    2b2c:	19 97       	sbiw	r26, 0x09	; 9
    2b2e:	9f 83       	std	Y+7, r25	; 0x07
    2b30:	8e 83       	std	Y+6, r24	; 0x06
    2b32:	18 96       	adiw	r26, 0x08	; 8
    2b34:	cd 91       	ld	r28, X+
    2b36:	dc 91       	ld	r29, X
    2b38:	19 97       	sbiw	r26, 0x09	; 9
    2b3a:	16 96       	adiw	r26, 0x06	; 6
    2b3c:	8d 91       	ld	r24, X+
    2b3e:	9c 91       	ld	r25, X
    2b40:	17 97       	sbiw	r26, 0x07	; 7
    2b42:	9d 83       	std	Y+5, r25	; 0x05
    2b44:	8c 83       	std	Y+4, r24	; 0x04
    2b46:	9d 01       	movw	r18, r26
    2b48:	2e 5f       	subi	r18, 0xFE	; 254
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	81 81       	ldd	r24, Z+1	; 0x01
    2b4e:	92 81       	ldd	r25, Z+2	; 0x02
    2b50:	82 17       	cp	r24, r18
    2b52:	93 07       	cpc	r25, r19
    2b54:	31 f4       	brne	.+12     	; 0x2b62 <xTaskGenericNotify+0x13c>
    2b56:	18 96       	adiw	r26, 0x08	; 8
    2b58:	8d 91       	ld	r24, X+
    2b5a:	9c 91       	ld	r25, X
    2b5c:	19 97       	sbiw	r26, 0x09	; 9
    2b5e:	92 83       	std	Z+2, r25	; 0x02
    2b60:	81 83       	std	Z+1, r24	; 0x01
    2b62:	1d 96       	adiw	r26, 0x0d	; 13
    2b64:	1c 92       	st	X, r1
    2b66:	1e 92       	st	-X, r1
    2b68:	1c 97       	sbiw	r26, 0x0c	; 12
    2b6a:	80 81       	ld	r24, Z
    2b6c:	81 50       	subi	r24, 0x01	; 1
    2b6e:	80 83       	st	Z, r24
    2b70:	5a 96       	adiw	r26, 0x1a	; 26
    2b72:	ec 91       	ld	r30, X
    2b74:	5a 97       	sbiw	r26, 0x1a	; 26
    2b76:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <uxTopReadyPriority>
    2b7a:	8e 17       	cp	r24, r30
    2b7c:	10 f4       	brcc	.+4      	; 0x2b82 <xTaskGenericNotify+0x15c>
    2b7e:	e0 93 89 15 	sts	0x1589, r30	; 0x801589 <uxTopReadyPriority>
    2b82:	8b e0       	ldi	r24, 0x0B	; 11
    2b84:	8e 9f       	mul	r24, r30
    2b86:	f0 01       	movw	r30, r0
    2b88:	11 24       	eor	r1, r1
    2b8a:	e5 53       	subi	r30, 0x35	; 53
    2b8c:	fa 4e       	sbci	r31, 0xEA	; 234
    2b8e:	01 80       	ldd	r0, Z+1	; 0x01
    2b90:	f2 81       	ldd	r31, Z+2	; 0x02
    2b92:	e0 2d       	mov	r30, r0
    2b94:	17 96       	adiw	r26, 0x07	; 7
    2b96:	fc 93       	st	X, r31
    2b98:	ee 93       	st	-X, r30
    2b9a:	16 97       	sbiw	r26, 0x06	; 6
    2b9c:	46 81       	ldd	r20, Z+6	; 0x06
    2b9e:	57 81       	ldd	r21, Z+7	; 0x07
    2ba0:	19 96       	adiw	r26, 0x09	; 9
    2ba2:	5c 93       	st	X, r21
    2ba4:	4e 93       	st	-X, r20
    2ba6:	18 97       	sbiw	r26, 0x08	; 8
    2ba8:	c6 81       	ldd	r28, Z+6	; 0x06
    2baa:	d7 81       	ldd	r29, Z+7	; 0x07
    2bac:	3d 83       	std	Y+5, r19	; 0x05
    2bae:	2c 83       	std	Y+4, r18	; 0x04
    2bb0:	37 83       	std	Z+7, r19	; 0x07
    2bb2:	26 83       	std	Z+6, r18	; 0x06
    2bb4:	5a 96       	adiw	r26, 0x1a	; 26
    2bb6:	ec 91       	ld	r30, X
    2bb8:	5a 97       	sbiw	r26, 0x1a	; 26
    2bba:	8e 9f       	mul	r24, r30
    2bbc:	f0 01       	movw	r30, r0
    2bbe:	11 24       	eor	r1, r1
    2bc0:	e5 53       	subi	r30, 0x35	; 53
    2bc2:	fa 4e       	sbci	r31, 0xEA	; 234
    2bc4:	1d 96       	adiw	r26, 0x0d	; 13
    2bc6:	fc 93       	st	X, r31
    2bc8:	ee 93       	st	-X, r30
    2bca:	1c 97       	sbiw	r26, 0x0c	; 12
    2bcc:	80 81       	ld	r24, Z
    2bce:	8f 5f       	subi	r24, 0xFF	; 255
    2bd0:	80 83       	st	Z, r24
    2bd2:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    2bd6:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2bda:	5a 96       	adiw	r26, 0x1a	; 26
    2bdc:	9c 91       	ld	r25, X
    2bde:	82 8d       	ldd	r24, Z+26	; 0x1a
    2be0:	89 17       	cp	r24, r25
    2be2:	40 f4       	brcc	.+16     	; 0x2bf4 <xTaskGenericNotify+0x1ce>
    2be4:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	05 c0       	rjmp	.+10     	; 0x2bf6 <xTaskGenericNotify+0x1d0>
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	03 c0       	rjmp	.+6      	; 0x2bf6 <xTaskGenericNotify+0x1d0>
    2bf0:	81 e0       	ldi	r24, 0x01	; 1
    2bf2:	01 c0       	rjmp	.+2      	; 0x2bf6 <xTaskGenericNotify+0x1d0>
    2bf4:	81 e0       	ldi	r24, 0x01	; 1
    2bf6:	0f 90       	pop	r0
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	df 91       	pop	r29
    2bfc:	cf 91       	pop	r28
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	bf 90       	pop	r11
    2c06:	af 90       	pop	r10
    2c08:	9f 90       	pop	r9
    2c0a:	8f 90       	pop	r8
    2c0c:	08 95       	ret

00002c0e <xTaskGenericNotifyFromISR>:
    2c0e:	8f 92       	push	r8
    2c10:	9f 92       	push	r9
    2c12:	af 92       	push	r10
    2c14:	bf 92       	push	r11
    2c16:	cf 92       	push	r12
    2c18:	df 92       	push	r13
    2c1a:	ef 92       	push	r14
    2c1c:	ff 92       	push	r15
    2c1e:	0f 93       	push	r16
    2c20:	cf 93       	push	r28
    2c22:	df 93       	push	r29
    2c24:	dc 01       	movw	r26, r24
    2c26:	e1 14       	cp	r14, r1
    2c28:	f1 04       	cpc	r15, r1
    2c2a:	79 f0       	breq	.+30     	; 0x2c4a <xTaskGenericNotifyFromISR+0x3c>
    2c2c:	fc 01       	movw	r30, r24
    2c2e:	84 e0       	ldi	r24, 0x04	; 4
    2c30:	68 9f       	mul	r22, r24
    2c32:	e0 0d       	add	r30, r0
    2c34:	f1 1d       	adc	r31, r1
    2c36:	11 24       	eor	r1, r1
    2c38:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c3a:	90 a8       	ldd	r9, Z+48	; 0x30
    2c3c:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c3e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c40:	f7 01       	movw	r30, r14
    2c42:	80 82       	st	Z, r8
    2c44:	91 82       	std	Z+1, r9	; 0x01
    2c46:	a2 82       	std	Z+2, r10	; 0x02
    2c48:	b3 82       	std	Z+3, r11	; 0x03
    2c4a:	70 e0       	ldi	r23, 0x00	; 0
    2c4c:	fd 01       	movw	r30, r26
    2c4e:	e6 0f       	add	r30, r22
    2c50:	f7 1f       	adc	r31, r23
    2c52:	83 a9       	ldd	r24, Z+51	; 0x33
    2c54:	92 e0       	ldi	r25, 0x02	; 2
    2c56:	93 ab       	std	Z+51, r25	; 0x33
    2c58:	02 30       	cpi	r16, 0x02	; 2
    2c5a:	f9 f0       	breq	.+62     	; 0x2c9a <xTaskGenericNotifyFromISR+0x8c>
    2c5c:	18 f4       	brcc	.+6      	; 0x2c64 <xTaskGenericNotifyFromISR+0x56>
    2c5e:	01 30       	cpi	r16, 0x01	; 1
    2c60:	31 f0       	breq	.+12     	; 0x2c6e <xTaskGenericNotifyFromISR+0x60>
    2c62:	49 c0       	rjmp	.+146    	; 0x2cf6 <xTaskGenericNotifyFromISR+0xe8>
    2c64:	03 30       	cpi	r16, 0x03	; 3
    2c66:	69 f1       	breq	.+90     	; 0x2cc2 <xTaskGenericNotifyFromISR+0xb4>
    2c68:	04 30       	cpi	r16, 0x04	; 4
    2c6a:	b9 f1       	breq	.+110    	; 0x2cda <xTaskGenericNotifyFromISR+0xcc>
    2c6c:	44 c0       	rjmp	.+136    	; 0x2cf6 <xTaskGenericNotifyFromISR+0xe8>
    2c6e:	66 0f       	add	r22, r22
    2c70:	77 1f       	adc	r23, r23
    2c72:	66 0f       	add	r22, r22
    2c74:	77 1f       	adc	r23, r23
    2c76:	fd 01       	movw	r30, r26
    2c78:	e6 0f       	add	r30, r22
    2c7a:	f7 1f       	adc	r31, r23
    2c7c:	87 a4       	ldd	r8, Z+47	; 0x2f
    2c7e:	90 a8       	ldd	r9, Z+48	; 0x30
    2c80:	a1 a8       	ldd	r10, Z+49	; 0x31
    2c82:	b2 a8       	ldd	r11, Z+50	; 0x32
    2c84:	ba 01       	movw	r22, r20
    2c86:	a9 01       	movw	r20, r18
    2c88:	48 29       	or	r20, r8
    2c8a:	59 29       	or	r21, r9
    2c8c:	6a 29       	or	r22, r10
    2c8e:	7b 29       	or	r23, r11
    2c90:	47 a7       	std	Z+47, r20	; 0x2f
    2c92:	50 ab       	std	Z+48, r21	; 0x30
    2c94:	61 ab       	std	Z+49, r22	; 0x31
    2c96:	72 ab       	std	Z+50, r23	; 0x32
    2c98:	2e c0       	rjmp	.+92     	; 0x2cf6 <xTaskGenericNotifyFromISR+0xe8>
    2c9a:	66 0f       	add	r22, r22
    2c9c:	77 1f       	adc	r23, r23
    2c9e:	66 0f       	add	r22, r22
    2ca0:	77 1f       	adc	r23, r23
    2ca2:	fd 01       	movw	r30, r26
    2ca4:	e6 0f       	add	r30, r22
    2ca6:	f7 1f       	adc	r31, r23
    2ca8:	47 a5       	ldd	r20, Z+47	; 0x2f
    2caa:	50 a9       	ldd	r21, Z+48	; 0x30
    2cac:	61 a9       	ldd	r22, Z+49	; 0x31
    2cae:	72 a9       	ldd	r23, Z+50	; 0x32
    2cb0:	4f 5f       	subi	r20, 0xFF	; 255
    2cb2:	5f 4f       	sbci	r21, 0xFF	; 255
    2cb4:	6f 4f       	sbci	r22, 0xFF	; 255
    2cb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb8:	47 a7       	std	Z+47, r20	; 0x2f
    2cba:	50 ab       	std	Z+48, r21	; 0x30
    2cbc:	61 ab       	std	Z+49, r22	; 0x31
    2cbe:	72 ab       	std	Z+50, r23	; 0x32
    2cc0:	1a c0       	rjmp	.+52     	; 0x2cf6 <xTaskGenericNotifyFromISR+0xe8>
    2cc2:	66 0f       	add	r22, r22
    2cc4:	77 1f       	adc	r23, r23
    2cc6:	66 0f       	add	r22, r22
    2cc8:	77 1f       	adc	r23, r23
    2cca:	fd 01       	movw	r30, r26
    2ccc:	e6 0f       	add	r30, r22
    2cce:	f7 1f       	adc	r31, r23
    2cd0:	27 a7       	std	Z+47, r18	; 0x2f
    2cd2:	30 ab       	std	Z+48, r19	; 0x30
    2cd4:	41 ab       	std	Z+49, r20	; 0x31
    2cd6:	52 ab       	std	Z+50, r21	; 0x32
    2cd8:	0e c0       	rjmp	.+28     	; 0x2cf6 <xTaskGenericNotifyFromISR+0xe8>
    2cda:	82 30       	cpi	r24, 0x02	; 2
    2cdc:	09 f4       	brne	.+2      	; 0x2ce0 <xTaskGenericNotifyFromISR+0xd2>
    2cde:	a4 c0       	rjmp	.+328    	; 0x2e28 <xTaskGenericNotifyFromISR+0x21a>
    2ce0:	66 0f       	add	r22, r22
    2ce2:	77 1f       	adc	r23, r23
    2ce4:	66 0f       	add	r22, r22
    2ce6:	77 1f       	adc	r23, r23
    2ce8:	fd 01       	movw	r30, r26
    2cea:	e6 0f       	add	r30, r22
    2cec:	f7 1f       	adc	r31, r23
    2cee:	27 a7       	std	Z+47, r18	; 0x2f
    2cf0:	30 ab       	std	Z+48, r19	; 0x30
    2cf2:	41 ab       	std	Z+49, r20	; 0x31
    2cf4:	52 ab       	std	Z+50, r21	; 0x32
    2cf6:	81 30       	cpi	r24, 0x01	; 1
    2cf8:	09 f0       	breq	.+2      	; 0x2cfc <xTaskGenericNotifyFromISR+0xee>
    2cfa:	98 c0       	rjmp	.+304    	; 0x2e2c <xTaskGenericNotifyFromISR+0x21e>
    2cfc:	80 91 7a 15 	lds	r24, 0x157A	; 0x80157a <uxSchedulerSuspended>
    2d00:	81 11       	cpse	r24, r1
    2d02:	5f c0       	rjmp	.+190    	; 0x2dc2 <xTaskGenericNotifyFromISR+0x1b4>
    2d04:	1c 96       	adiw	r26, 0x0c	; 12
    2d06:	ed 91       	ld	r30, X+
    2d08:	fc 91       	ld	r31, X
    2d0a:	1d 97       	sbiw	r26, 0x0d	; 13
    2d0c:	16 96       	adiw	r26, 0x06	; 6
    2d0e:	cd 91       	ld	r28, X+
    2d10:	dc 91       	ld	r29, X
    2d12:	17 97       	sbiw	r26, 0x07	; 7
    2d14:	18 96       	adiw	r26, 0x08	; 8
    2d16:	8d 91       	ld	r24, X+
    2d18:	9c 91       	ld	r25, X
    2d1a:	19 97       	sbiw	r26, 0x09	; 9
    2d1c:	9f 83       	std	Y+7, r25	; 0x07
    2d1e:	8e 83       	std	Y+6, r24	; 0x06
    2d20:	18 96       	adiw	r26, 0x08	; 8
    2d22:	cd 91       	ld	r28, X+
    2d24:	dc 91       	ld	r29, X
    2d26:	19 97       	sbiw	r26, 0x09	; 9
    2d28:	16 96       	adiw	r26, 0x06	; 6
    2d2a:	8d 91       	ld	r24, X+
    2d2c:	9c 91       	ld	r25, X
    2d2e:	17 97       	sbiw	r26, 0x07	; 7
    2d30:	9d 83       	std	Y+5, r25	; 0x05
    2d32:	8c 83       	std	Y+4, r24	; 0x04
    2d34:	9d 01       	movw	r18, r26
    2d36:	2e 5f       	subi	r18, 0xFE	; 254
    2d38:	3f 4f       	sbci	r19, 0xFF	; 255
    2d3a:	81 81       	ldd	r24, Z+1	; 0x01
    2d3c:	92 81       	ldd	r25, Z+2	; 0x02
    2d3e:	82 17       	cp	r24, r18
    2d40:	93 07       	cpc	r25, r19
    2d42:	31 f4       	brne	.+12     	; 0x2d50 <xTaskGenericNotifyFromISR+0x142>
    2d44:	18 96       	adiw	r26, 0x08	; 8
    2d46:	8d 91       	ld	r24, X+
    2d48:	9c 91       	ld	r25, X
    2d4a:	19 97       	sbiw	r26, 0x09	; 9
    2d4c:	92 83       	std	Z+2, r25	; 0x02
    2d4e:	81 83       	std	Z+1, r24	; 0x01
    2d50:	1d 96       	adiw	r26, 0x0d	; 13
    2d52:	1c 92       	st	X, r1
    2d54:	1e 92       	st	-X, r1
    2d56:	1c 97       	sbiw	r26, 0x0c	; 12
    2d58:	80 81       	ld	r24, Z
    2d5a:	81 50       	subi	r24, 0x01	; 1
    2d5c:	80 83       	st	Z, r24
    2d5e:	5a 96       	adiw	r26, 0x1a	; 26
    2d60:	ec 91       	ld	r30, X
    2d62:	5a 97       	sbiw	r26, 0x1a	; 26
    2d64:	80 91 89 15 	lds	r24, 0x1589	; 0x801589 <uxTopReadyPriority>
    2d68:	8e 17       	cp	r24, r30
    2d6a:	10 f4       	brcc	.+4      	; 0x2d70 <xTaskGenericNotifyFromISR+0x162>
    2d6c:	e0 93 89 15 	sts	0x1589, r30	; 0x801589 <uxTopReadyPriority>
    2d70:	8b e0       	ldi	r24, 0x0B	; 11
    2d72:	8e 9f       	mul	r24, r30
    2d74:	f0 01       	movw	r30, r0
    2d76:	11 24       	eor	r1, r1
    2d78:	e5 53       	subi	r30, 0x35	; 53
    2d7a:	fa 4e       	sbci	r31, 0xEA	; 234
    2d7c:	01 80       	ldd	r0, Z+1	; 0x01
    2d7e:	f2 81       	ldd	r31, Z+2	; 0x02
    2d80:	e0 2d       	mov	r30, r0
    2d82:	17 96       	adiw	r26, 0x07	; 7
    2d84:	fc 93       	st	X, r31
    2d86:	ee 93       	st	-X, r30
    2d88:	16 97       	sbiw	r26, 0x06	; 6
    2d8a:	46 81       	ldd	r20, Z+6	; 0x06
    2d8c:	57 81       	ldd	r21, Z+7	; 0x07
    2d8e:	19 96       	adiw	r26, 0x09	; 9
    2d90:	5c 93       	st	X, r21
    2d92:	4e 93       	st	-X, r20
    2d94:	18 97       	sbiw	r26, 0x08	; 8
    2d96:	c6 81       	ldd	r28, Z+6	; 0x06
    2d98:	d7 81       	ldd	r29, Z+7	; 0x07
    2d9a:	3d 83       	std	Y+5, r19	; 0x05
    2d9c:	2c 83       	std	Y+4, r18	; 0x04
    2d9e:	37 83       	std	Z+7, r19	; 0x07
    2da0:	26 83       	std	Z+6, r18	; 0x06
    2da2:	5a 96       	adiw	r26, 0x1a	; 26
    2da4:	ec 91       	ld	r30, X
    2da6:	5a 97       	sbiw	r26, 0x1a	; 26
    2da8:	8e 9f       	mul	r24, r30
    2daa:	f0 01       	movw	r30, r0
    2dac:	11 24       	eor	r1, r1
    2dae:	e5 53       	subi	r30, 0x35	; 53
    2db0:	fa 4e       	sbci	r31, 0xEA	; 234
    2db2:	1d 96       	adiw	r26, 0x0d	; 13
    2db4:	fc 93       	st	X, r31
    2db6:	ee 93       	st	-X, r30
    2db8:	1c 97       	sbiw	r26, 0x0c	; 12
    2dba:	80 81       	ld	r24, Z
    2dbc:	8f 5f       	subi	r24, 0xFF	; 255
    2dbe:	80 83       	st	Z, r24
    2dc0:	20 c0       	rjmp	.+64     	; 0x2e02 <xTaskGenericNotifyFromISR+0x1f4>
    2dc2:	46 ea       	ldi	r20, 0xA6	; 166
    2dc4:	55 e1       	ldi	r21, 0x15	; 21
    2dc6:	fa 01       	movw	r30, r20
    2dc8:	c1 81       	ldd	r28, Z+1	; 0x01
    2dca:	d2 81       	ldd	r29, Z+2	; 0x02
    2dcc:	53 96       	adiw	r26, 0x13	; 19
    2dce:	dc 93       	st	X, r29
    2dd0:	ce 93       	st	-X, r28
    2dd2:	52 97       	sbiw	r26, 0x12	; 18
    2dd4:	8e 81       	ldd	r24, Y+6	; 0x06
    2dd6:	9f 81       	ldd	r25, Y+7	; 0x07
    2dd8:	55 96       	adiw	r26, 0x15	; 21
    2dda:	9c 93       	st	X, r25
    2ddc:	8e 93       	st	-X, r24
    2dde:	54 97       	sbiw	r26, 0x14	; 20
    2de0:	2e 81       	ldd	r18, Y+6	; 0x06
    2de2:	3f 81       	ldd	r19, Y+7	; 0x07
    2de4:	cd 01       	movw	r24, r26
    2de6:	0e 96       	adiw	r24, 0x0e	; 14
    2de8:	f9 01       	movw	r30, r18
    2dea:	95 83       	std	Z+5, r25	; 0x05
    2dec:	84 83       	std	Z+4, r24	; 0x04
    2dee:	9f 83       	std	Y+7, r25	; 0x07
    2df0:	8e 83       	std	Y+6, r24	; 0x06
    2df2:	59 96       	adiw	r26, 0x19	; 25
    2df4:	5c 93       	st	X, r21
    2df6:	4e 93       	st	-X, r20
    2df8:	58 97       	sbiw	r26, 0x18	; 24
    2dfa:	fa 01       	movw	r30, r20
    2dfc:	80 81       	ld	r24, Z
    2dfe:	8f 5f       	subi	r24, 0xFF	; 255
    2e00:	80 83       	st	Z, r24
    2e02:	e0 91 39 16 	lds	r30, 0x1639	; 0x801639 <pxCurrentTCB>
    2e06:	f0 91 3a 16 	lds	r31, 0x163A	; 0x80163a <pxCurrentTCB+0x1>
    2e0a:	5a 96       	adiw	r26, 0x1a	; 26
    2e0c:	9c 91       	ld	r25, X
    2e0e:	82 8d       	ldd	r24, Z+26	; 0x1a
    2e10:	89 17       	cp	r24, r25
    2e12:	70 f4       	brcc	.+28     	; 0x2e30 <xTaskGenericNotifyFromISR+0x222>
    2e14:	c1 14       	cp	r12, r1
    2e16:	d1 04       	cpc	r13, r1
    2e18:	19 f0       	breq	.+6      	; 0x2e20 <xTaskGenericNotifyFromISR+0x212>
    2e1a:	81 e0       	ldi	r24, 0x01	; 1
    2e1c:	f6 01       	movw	r30, r12
    2e1e:	80 83       	st	Z, r24
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	80 93 83 15 	sts	0x1583, r24	; 0x801583 <xYieldPending>
    2e26:	05 c0       	rjmp	.+10     	; 0x2e32 <xTaskGenericNotifyFromISR+0x224>
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	03 c0       	rjmp	.+6      	; 0x2e32 <xTaskGenericNotifyFromISR+0x224>
    2e2c:	81 e0       	ldi	r24, 0x01	; 1
    2e2e:	01 c0       	rjmp	.+2      	; 0x2e32 <xTaskGenericNotifyFromISR+0x224>
    2e30:	81 e0       	ldi	r24, 0x01	; 1
    2e32:	df 91       	pop	r29
    2e34:	cf 91       	pop	r28
    2e36:	0f 91       	pop	r16
    2e38:	ff 90       	pop	r15
    2e3a:	ef 90       	pop	r14
    2e3c:	df 90       	pop	r13
    2e3e:	cf 90       	pop	r12
    2e40:	bf 90       	pop	r11
    2e42:	af 90       	pop	r10
    2e44:	9f 90       	pop	r9
    2e46:	8f 90       	pop	r8
    2e48:	08 95       	ret

00002e4a <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	21 f4       	brne	.+8      	; 0x2e56 <xTaskGenericNotifyStateClear+0xc>
    2e4e:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <pxCurrentTCB>
    2e52:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2e56:	0f b6       	in	r0, 0x3f	; 63
    2e58:	f8 94       	cli
    2e5a:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2e5c:	70 e0       	ldi	r23, 0x00	; 0
    2e5e:	fc 01       	movw	r30, r24
    2e60:	e6 0f       	add	r30, r22
    2e62:	f7 1f       	adc	r31, r23
    2e64:	23 a9       	ldd	r18, Z+51	; 0x33
    2e66:	22 30       	cpi	r18, 0x02	; 2
    2e68:	31 f4       	brne	.+12     	; 0x2e76 <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2e6a:	fc 01       	movw	r30, r24
    2e6c:	e6 0f       	add	r30, r22
    2e6e:	f7 1f       	adc	r31, r23
    2e70:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2e72:	81 e0       	ldi	r24, 0x01	; 1
    2e74:	01 c0       	rjmp	.+2      	; 0x2e78 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2e76:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2e78:	0f 90       	pop	r0
    2e7a:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2e7c:	08 95       	ret

00002e7e <prvInsertTimerInActiveList>:
    2e7e:	cf 92       	push	r12
    2e80:	df 92       	push	r13
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	fc 01       	movw	r30, r24
    2e8c:	42 83       	std	Z+2, r20	; 0x02
    2e8e:	53 83       	std	Z+3, r21	; 0x03
    2e90:	64 83       	std	Z+4, r22	; 0x04
    2e92:	75 83       	std	Z+5, r23	; 0x05
    2e94:	93 87       	std	Z+11, r25	; 0x0b
    2e96:	82 87       	std	Z+10, r24	; 0x0a
    2e98:	04 17       	cp	r16, r20
    2e9a:	15 07       	cpc	r17, r21
    2e9c:	26 07       	cpc	r18, r22
    2e9e:	37 07       	cpc	r19, r23
    2ea0:	c0 f0       	brcs	.+48     	; 0x2ed2 <prvInsertTimerInActiveList+0x54>
    2ea2:	0c 19       	sub	r16, r12
    2ea4:	1d 09       	sbc	r17, r13
    2ea6:	2e 09       	sbc	r18, r14
    2ea8:	3f 09       	sbc	r19, r15
    2eaa:	86 85       	ldd	r24, Z+14	; 0x0e
    2eac:	97 85       	ldd	r25, Z+15	; 0x0f
    2eae:	a0 89       	ldd	r26, Z+16	; 0x10
    2eb0:	b1 89       	ldd	r27, Z+17	; 0x11
    2eb2:	08 17       	cp	r16, r24
    2eb4:	19 07       	cpc	r17, r25
    2eb6:	2a 07       	cpc	r18, r26
    2eb8:	3b 07       	cpc	r19, r27
    2eba:	00 f5       	brcc	.+64     	; 0x2efc <prvInsertTimerInActiveList+0x7e>
    2ebc:	bf 01       	movw	r22, r30
    2ebe:	6e 5f       	subi	r22, 0xFE	; 254
    2ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec2:	80 91 43 16 	lds	r24, 0x1643	; 0x801643 <pxOverflowTimerList>
    2ec6:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <pxOverflowTimerList+0x1>
    2eca:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    2ece:	80 e0       	ldi	r24, 0x00	; 0
    2ed0:	18 c0       	rjmp	.+48     	; 0x2f02 <prvInsertTimerInActiveList+0x84>
    2ed2:	0c 15       	cp	r16, r12
    2ed4:	1d 05       	cpc	r17, r13
    2ed6:	2e 05       	cpc	r18, r14
    2ed8:	3f 05       	cpc	r19, r15
    2eda:	28 f4       	brcc	.+10     	; 0x2ee6 <prvInsertTimerInActiveList+0x68>
    2edc:	4c 15       	cp	r20, r12
    2ede:	5d 05       	cpc	r21, r13
    2ee0:	6e 05       	cpc	r22, r14
    2ee2:	7f 05       	cpc	r23, r15
    2ee4:	68 f4       	brcc	.+26     	; 0x2f00 <prvInsertTimerInActiveList+0x82>
    2ee6:	bf 01       	movw	r22, r30
    2ee8:	6e 5f       	subi	r22, 0xFE	; 254
    2eea:	7f 4f       	sbci	r23, 0xFF	; 255
    2eec:	80 91 45 16 	lds	r24, 0x1645	; 0x801645 <pxCurrentTimerList>
    2ef0:	90 91 46 16 	lds	r25, 0x1646	; 0x801646 <pxCurrentTimerList+0x1>
    2ef4:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	03 c0       	rjmp	.+6      	; 0x2f02 <prvInsertTimerInActiveList+0x84>
    2efc:	81 e0       	ldi	r24, 0x01	; 1
    2efe:	01 c0       	rjmp	.+2      	; 0x2f02 <prvInsertTimerInActiveList+0x84>
    2f00:	81 e0       	ldi	r24, 0x01	; 1
    2f02:	1f 91       	pop	r17
    2f04:	0f 91       	pop	r16
    2f06:	ff 90       	pop	r15
    2f08:	ef 90       	pop	r14
    2f0a:	df 90       	pop	r13
    2f0c:	cf 90       	pop	r12
    2f0e:	08 95       	ret

00002f10 <prvCheckForValidListAndQueue>:
    2f10:	0f b6       	in	r0, 0x3f	; 63
    2f12:	f8 94       	cli
    2f14:	0f 92       	push	r0
    2f16:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <xTimerQueue>
    2f1a:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <xTimerQueue+0x1>
    2f1e:	89 2b       	or	r24, r25
    2f20:	e9 f4       	brne	.+58     	; 0x2f5c <prvCheckForValidListAndQueue+0x4c>
    2f22:	82 e5       	ldi	r24, 0x52	; 82
    2f24:	96 e1       	ldi	r25, 0x16	; 22
    2f26:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    2f2a:	87 e4       	ldi	r24, 0x47	; 71
    2f2c:	96 e1       	ldi	r25, 0x16	; 22
    2f2e:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    2f32:	82 e5       	ldi	r24, 0x52	; 82
    2f34:	96 e1       	ldi	r25, 0x16	; 22
    2f36:	90 93 46 16 	sts	0x1646, r25	; 0x801646 <pxCurrentTimerList+0x1>
    2f3a:	80 93 45 16 	sts	0x1645, r24	; 0x801645 <pxCurrentTimerList>
    2f3e:	87 e4       	ldi	r24, 0x47	; 71
    2f40:	96 e1       	ldi	r25, 0x16	; 22
    2f42:	90 93 44 16 	sts	0x1644, r25	; 0x801644 <pxOverflowTimerList+0x1>
    2f46:	80 93 43 16 	sts	0x1643, r24	; 0x801643 <pxOverflowTimerList>
    2f4a:	40 e0       	ldi	r20, 0x00	; 0
    2f4c:	67 e0       	ldi	r22, 0x07	; 7
    2f4e:	8a e0       	ldi	r24, 0x0A	; 10
    2f50:	0e 94 61 06 	call	0xcc2	; 0xcc2 <xQueueGenericCreate>
    2f54:	90 93 42 16 	sts	0x1642, r25	; 0x801642 <xTimerQueue+0x1>
    2f58:	80 93 41 16 	sts	0x1641, r24	; 0x801641 <xTimerQueue>
    2f5c:	0f 90       	pop	r0
    2f5e:	0f be       	out	0x3f, r0	; 63
    2f60:	08 95       	ret

00002f62 <xTimerCreateTimerTask>:
    2f62:	ef 92       	push	r14
    2f64:	ff 92       	push	r15
    2f66:	0f 93       	push	r16
    2f68:	d3 df       	rcall	.-90     	; 0x2f10 <prvCheckForValidListAndQueue>
    2f6a:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <xTimerQueue>
    2f6e:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <xTimerQueue+0x1>
    2f72:	89 2b       	or	r24, r25
    2f74:	91 f0       	breq	.+36     	; 0x2f9a <xTimerCreateTimerTask+0x38>
    2f76:	0f 2e       	mov	r0, r31
    2f78:	ff e3       	ldi	r31, 0x3F	; 63
    2f7a:	ef 2e       	mov	r14, r31
    2f7c:	f6 e1       	ldi	r31, 0x16	; 22
    2f7e:	ff 2e       	mov	r15, r31
    2f80:	f0 2d       	mov	r31, r0
    2f82:	03 e0       	ldi	r16, 0x03	; 3
    2f84:	20 e0       	ldi	r18, 0x00	; 0
    2f86:	30 e0       	ldi	r19, 0x00	; 0
    2f88:	40 ec       	ldi	r20, 0xC0	; 192
    2f8a:	50 e0       	ldi	r21, 0x00	; 0
    2f8c:	6e e7       	ldi	r22, 0x7E	; 126
    2f8e:	72 e0       	ldi	r23, 0x02	; 2
    2f90:	83 e0       	ldi	r24, 0x03	; 3
    2f92:	91 e0       	ldi	r25, 0x01	; 1
    2f94:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <xTimerCreateTimerTask+0x3a>
    2f9a:	80 e0       	ldi	r24, 0x00	; 0
    2f9c:	0f 91       	pop	r16
    2f9e:	ff 90       	pop	r15
    2fa0:	ef 90       	pop	r14
    2fa2:	08 95       	ret

00002fa4 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2fa4:	8f 92       	push	r8
    2fa6:	9f 92       	push	r9
    2fa8:	af 92       	push	r10
    2faa:	bf 92       	push	r11
    2fac:	cf 92       	push	r12
    2fae:	df 92       	push	r13
    2fb0:	ef 92       	push	r14
    2fb2:	ff 92       	push	r15
    2fb4:	0f 93       	push	r16
    2fb6:	1f 93       	push	r17
    2fb8:	cf 93       	push	r28
    2fba:	df 93       	push	r29
    2fbc:	cd b7       	in	r28, 0x3d	; 61
    2fbe:	de b7       	in	r29, 0x3e	; 62
    2fc0:	27 97       	sbiw	r28, 0x07	; 7
    2fc2:	0f b6       	in	r0, 0x3f	; 63
    2fc4:	f8 94       	cli
    2fc6:	de bf       	out	0x3e, r29	; 62
    2fc8:	0f be       	out	0x3f, r0	; 63
    2fca:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2fcc:	e0 91 41 16 	lds	r30, 0x1641	; 0x801641 <xTimerQueue>
    2fd0:	f0 91 42 16 	lds	r31, 0x1642	; 0x801642 <xTimerQueue+0x1>
    2fd4:	30 97       	sbiw	r30, 0x00	; 0
    2fd6:	81 f1       	breq	.+96     	; 0x3038 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2fd8:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2fda:	2a 83       	std	Y+2, r18	; 0x02
    2fdc:	3b 83       	std	Y+3, r19	; 0x03
    2fde:	4c 83       	std	Y+4, r20	; 0x04
    2fe0:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2fe2:	9f 83       	std	Y+7, r25	; 0x07
    2fe4:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2fe6:	66 30       	cpi	r22, 0x06	; 6
    2fe8:	f4 f4       	brge	.+60     	; 0x3026 <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2fea:	0c db       	rcall	.-2536   	; 0x2604 <xTaskGetSchedulerState>
    2fec:	82 30       	cpi	r24, 0x02	; 2
    2fee:	69 f4       	brne	.+26     	; 0x300a <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2ff0:	00 e0       	ldi	r16, 0x00	; 0
    2ff2:	a7 01       	movw	r20, r14
    2ff4:	96 01       	movw	r18, r12
    2ff6:	be 01       	movw	r22, r28
    2ff8:	6f 5f       	subi	r22, 0xFF	; 255
    2ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    2ffc:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <xTimerQueue>
    3000:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <xTimerQueue+0x1>
    3004:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    3008:	18 c0       	rjmp	.+48     	; 0x303a <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    300a:	00 e0       	ldi	r16, 0x00	; 0
    300c:	20 e0       	ldi	r18, 0x00	; 0
    300e:	30 e0       	ldi	r19, 0x00	; 0
    3010:	a9 01       	movw	r20, r18
    3012:	be 01       	movw	r22, r28
    3014:	6f 5f       	subi	r22, 0xFF	; 255
    3016:	7f 4f       	sbci	r23, 0xFF	; 255
    3018:	80 91 41 16 	lds	r24, 0x1641	; 0x801641 <xTimerQueue>
    301c:	90 91 42 16 	lds	r25, 0x1642	; 0x801642 <xTimerQueue+0x1>
    3020:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    3024:	0a c0       	rjmp	.+20     	; 0x303a <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    3026:	20 e0       	ldi	r18, 0x00	; 0
    3028:	a8 01       	movw	r20, r16
    302a:	be 01       	movw	r22, r28
    302c:	6f 5f       	subi	r22, 0xFF	; 255
    302e:	7f 4f       	sbci	r23, 0xFF	; 255
    3030:	cf 01       	movw	r24, r30
    3032:	0e 94 40 07 	call	0xe80	; 0xe80 <xQueueGenericSendFromISR>
    3036:	01 c0       	rjmp	.+2      	; 0x303a <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    3038:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    303a:	27 96       	adiw	r28, 0x07	; 7
    303c:	0f b6       	in	r0, 0x3f	; 63
    303e:	f8 94       	cli
    3040:	de bf       	out	0x3e, r29	; 62
    3042:	0f be       	out	0x3f, r0	; 63
    3044:	cd bf       	out	0x3d, r28	; 61
    3046:	df 91       	pop	r29
    3048:	cf 91       	pop	r28
    304a:	1f 91       	pop	r17
    304c:	0f 91       	pop	r16
    304e:	ff 90       	pop	r15
    3050:	ef 90       	pop	r14
    3052:	df 90       	pop	r13
    3054:	cf 90       	pop	r12
    3056:	bf 90       	pop	r11
    3058:	af 90       	pop	r10
    305a:	9f 90       	pop	r9
    305c:	8f 90       	pop	r8
    305e:	08 95       	ret

00003060 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    3060:	2f 92       	push	r2
    3062:	3f 92       	push	r3
    3064:	4f 92       	push	r4
    3066:	5f 92       	push	r5
    3068:	6f 92       	push	r6
    306a:	7f 92       	push	r7
    306c:	8f 92       	push	r8
    306e:	9f 92       	push	r9
    3070:	af 92       	push	r10
    3072:	bf 92       	push	r11
    3074:	cf 92       	push	r12
    3076:	df 92       	push	r13
    3078:	ef 92       	push	r14
    307a:	ff 92       	push	r15
    307c:	0f 93       	push	r16
    307e:	1f 93       	push	r17
    3080:	cf 93       	push	r28
    3082:	df 93       	push	r29
    3084:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    3086:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    308a:	2b 01       	movw	r4, r22
    308c:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    308e:	80 91 3b 16 	lds	r24, 0x163B	; 0x80163b <xLastTime.2436>
    3092:	90 91 3c 16 	lds	r25, 0x163C	; 0x80163c <xLastTime.2436+0x1>
    3096:	a0 91 3d 16 	lds	r26, 0x163D	; 0x80163d <xLastTime.2436+0x2>
    309a:	b0 91 3e 16 	lds	r27, 0x163E	; 0x80163e <xLastTime.2436+0x3>
    309e:	48 16       	cp	r4, r24
    30a0:	59 06       	cpc	r5, r25
    30a2:	6a 06       	cpc	r6, r26
    30a4:	7b 06       	cpc	r7, r27
    30a6:	08 f0       	brcs	.+2      	; 0x30aa <prvSampleTimeNow+0x4a>
    30a8:	53 c0       	rjmp	.+166    	; 0x3150 <prvSampleTimeNow+0xf0>
    30aa:	3b c0       	rjmp	.+118    	; 0x3122 <prvSampleTimeNow+0xc2>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    30ac:	07 80       	ldd	r0, Z+7	; 0x07
    30ae:	f0 85       	ldd	r31, Z+8	; 0x08
    30b0:	e0 2d       	mov	r30, r0
    30b2:	80 80       	ld	r8, Z
    30b4:	91 80       	ldd	r9, Z+1	; 0x01
    30b6:	a2 80       	ldd	r10, Z+2	; 0x02
    30b8:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    30ba:	c0 85       	ldd	r28, Z+8	; 0x08
    30bc:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    30be:	8e 01       	movw	r16, r28
    30c0:	0e 5f       	subi	r16, 0xFE	; 254
    30c2:	1f 4f       	sbci	r17, 0xFF	; 255
    30c4:	c8 01       	movw	r24, r16
    30c6:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    30ca:	ec 89       	ldd	r30, Y+20	; 0x14
    30cc:	fd 89       	ldd	r31, Y+21	; 0x15
    30ce:	ce 01       	movw	r24, r28
    30d0:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    30d2:	8e 89       	ldd	r24, Y+22	; 0x16
    30d4:	82 ff       	sbrs	r24, 2
    30d6:	25 c0       	rjmp	.+74     	; 0x3122 <prvSampleTimeNow+0xc2>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    30d8:	8e 85       	ldd	r24, Y+14	; 0x0e
    30da:	9f 85       	ldd	r25, Y+15	; 0x0f
    30dc:	a8 89       	ldd	r26, Y+16	; 0x10
    30de:	b9 89       	ldd	r27, Y+17	; 0x11
    30e0:	88 0d       	add	r24, r8
    30e2:	99 1d       	adc	r25, r9
    30e4:	aa 1d       	adc	r26, r10
    30e6:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    30e8:	88 16       	cp	r8, r24
    30ea:	99 06       	cpc	r9, r25
    30ec:	aa 06       	cpc	r10, r26
    30ee:	bb 06       	cpc	r11, r27
    30f0:	70 f4       	brcc	.+28     	; 0x310e <prvSampleTimeNow+0xae>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    30f2:	8a 83       	std	Y+2, r24	; 0x02
    30f4:	9b 83       	std	Y+3, r25	; 0x03
    30f6:	ac 83       	std	Y+4, r26	; 0x04
    30f8:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    30fa:	db 87       	std	Y+11, r29	; 0x0b
    30fc:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    30fe:	b8 01       	movw	r22, r16
    3100:	80 91 45 16 	lds	r24, 0x1645	; 0x801645 <pxCurrentTimerList>
    3104:	90 91 46 16 	lds	r25, 0x1646	; 0x801646 <pxCurrentTimerList+0x1>
    3108:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    310c:	0a c0       	rjmp	.+20     	; 0x3122 <prvSampleTimeNow+0xc2>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    310e:	c1 2c       	mov	r12, r1
    3110:	d1 2c       	mov	r13, r1
    3112:	76 01       	movw	r14, r12
    3114:	00 e0       	ldi	r16, 0x00	; 0
    3116:	10 e0       	ldi	r17, 0x00	; 0
    3118:	a5 01       	movw	r20, r10
    311a:	94 01       	movw	r18, r8
    311c:	60 e0       	ldi	r22, 0x00	; 0
    311e:	ce 01       	movw	r24, r28
    3120:	41 df       	rcall	.-382    	; 0x2fa4 <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    3122:	e0 91 45 16 	lds	r30, 0x1645	; 0x801645 <pxCurrentTimerList>
    3126:	f0 91 46 16 	lds	r31, 0x1646	; 0x801646 <pxCurrentTimerList+0x1>
    312a:	80 81       	ld	r24, Z
    312c:	81 11       	cpse	r24, r1
    312e:	be cf       	rjmp	.-132    	; 0x30ac <prvSampleTimeNow+0x4c>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    3130:	80 91 43 16 	lds	r24, 0x1643	; 0x801643 <pxOverflowTimerList>
    3134:	90 91 44 16 	lds	r25, 0x1644	; 0x801644 <pxOverflowTimerList+0x1>
    3138:	90 93 46 16 	sts	0x1646, r25	; 0x801646 <pxCurrentTimerList+0x1>
    313c:	80 93 45 16 	sts	0x1645, r24	; 0x801645 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    3140:	f0 93 44 16 	sts	0x1644, r31	; 0x801644 <pxOverflowTimerList+0x1>
    3144:	e0 93 43 16 	sts	0x1643, r30	; 0x801643 <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    3148:	81 e0       	ldi	r24, 0x01	; 1
    314a:	f1 01       	movw	r30, r2
    314c:	80 83       	st	Z, r24
    314e:	02 c0       	rjmp	.+4      	; 0x3154 <prvSampleTimeNow+0xf4>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    3150:	f1 01       	movw	r30, r2
    3152:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    3154:	40 92 3b 16 	sts	0x163B, r4	; 0x80163b <xLastTime.2436>
    3158:	50 92 3c 16 	sts	0x163C, r5	; 0x80163c <xLastTime.2436+0x1>
    315c:	60 92 3d 16 	sts	0x163D, r6	; 0x80163d <xLastTime.2436+0x2>
    3160:	70 92 3e 16 	sts	0x163E, r7	; 0x80163e <xLastTime.2436+0x3>

        return xTimeNow;
    }
    3164:	c3 01       	movw	r24, r6
    3166:	b2 01       	movw	r22, r4
    3168:	df 91       	pop	r29
    316a:	cf 91       	pop	r28
    316c:	1f 91       	pop	r17
    316e:	0f 91       	pop	r16
    3170:	ff 90       	pop	r15
    3172:	ef 90       	pop	r14
    3174:	df 90       	pop	r13
    3176:	cf 90       	pop	r12
    3178:	bf 90       	pop	r11
    317a:	af 90       	pop	r10
    317c:	9f 90       	pop	r9
    317e:	8f 90       	pop	r8
    3180:	7f 90       	pop	r7
    3182:	6f 90       	pop	r6
    3184:	5f 90       	pop	r5
    3186:	4f 90       	pop	r4
    3188:	3f 90       	pop	r3
    318a:	2f 90       	pop	r2
    318c:	08 95       	ret

0000318e <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    318e:	08 95       	ret

00003190 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    3190:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    3192:	2f 9a       	sbi	0x05, 7	; 5
    3194:	08 95       	ret

00003196 <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    3196:	1f 9a       	sbi	0x03, 7	; 3
    3198:	08 95       	ret

0000319a <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    319a:	fa df       	rcall	.-12     	; 0x3190 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    319c:	2f ef       	ldi	r18, 0xFF	; 255
    319e:	80 e7       	ldi	r24, 0x70	; 112
    31a0:	92 e0       	ldi	r25, 0x02	; 2
    31a2:	21 50       	subi	r18, 0x01	; 1
    31a4:	80 40       	sbci	r24, 0x00	; 0
    31a6:	90 40       	sbci	r25, 0x00	; 0
    31a8:	e1 f7       	brne	.-8      	; 0x31a2 <vApplicationMallocFailedHook+0x8>
    31aa:	00 c0       	rjmp	.+0      	; 0x31ac <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    31ac:	00 00       	nop
    31ae:	f3 df       	rcall	.-26     	; 0x3196 <prvBlinkMainLed>
    31b0:	f5 cf       	rjmp	.-22     	; 0x319c <vApplicationMallocFailedHook+0x2>

000031b2 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    31b2:	ee df       	rcall	.-36     	; 0x3190 <prvSetMainLedOn>
    31b4:	2f ef       	ldi	r18, 0xFF	; 255
    31b6:	87 ea       	ldi	r24, 0xA7	; 167
    31b8:	91 e6       	ldi	r25, 0x61	; 97
    31ba:	21 50       	subi	r18, 0x01	; 1
    31bc:	80 40       	sbci	r24, 0x00	; 0
    31be:	90 40       	sbci	r25, 0x00	; 0
    31c0:	e1 f7       	brne	.-8      	; 0x31ba <vApplicationStackOverflowHook+0x8>
    31c2:	00 c0       	rjmp	.+0      	; 0x31c4 <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    31c4:	00 00       	nop
    31c6:	e7 df       	rcall	.-50     	; 0x3196 <prvBlinkMainLed>
    31c8:	f5 cf       	rjmp	.-22     	; 0x31b4 <vApplicationStackOverflowHook+0x2>

000031ca <sendData>:
#include "../Headers/data_handler.h"

extern MessageBufferHandle_t downLinkMessageBufferHandle;

void sendData(void *pvParameters)
{
    31ca:	cf 93       	push	r28
    31cc:	df 93       	push	r29
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	6a 97       	sbiw	r28, 0x1a	; 26
    31d4:	0f b6       	in	r0, 0x3f	; 63
    31d6:	f8 94       	cli
    31d8:	de bf       	out	0x3e, r29	; 62
    31da:	0f be       	out	0x3f, r0	; 63
    31dc:	cd bf       	out	0x3d, r28	; 61
    TickType_t xLastWakeTime;
    const TickType_t xFrequency = 300000 / portTICK_PERIOD_MS;

    xLastWakeTime = xTaskGetTickCount();
    31de:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    31e2:	69 83       	std	Y+1, r22	; 0x01
    31e4:	7a 83       	std	Y+2, r23	; 0x02
    31e6:	8b 83       	std	Y+3, r24	; 0x03
    31e8:	9c 83       	std	Y+4, r25	; 0x04
        xTaskDelayUntil(&xLastWakeTime, xFrequency);

        puts("Uploading values");
        lora_driver_payload_t uplink_payload;
        // Setting up amount of data points
        uplink_payload.len = 4;       // Length of the actual payload
    31ea:	04 e0       	ldi	r16, 0x04	; 4
        uplink_payload.portNo = 1;    // The LoRaWAN port number to send the message to
    31ec:	11 e0       	ldi	r17, 0x01	; 1

    xLastWakeTime = xTaskGetTickCount();

    for (;;)
    {
        xTaskDelayUntil(&xLastWakeTime, xFrequency);
    31ee:	4e e3       	ldi	r20, 0x3E	; 62
    31f0:	59 e4       	ldi	r21, 0x49	; 73
    31f2:	60 e0       	ldi	r22, 0x00	; 0
    31f4:	70 e0       	ldi	r23, 0x00	; 0
    31f6:	ce 01       	movw	r24, r28
    31f8:	01 96       	adiw	r24, 0x01	; 1
    31fa:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>

        puts("Uploading values");
    31fe:	86 e8       	ldi	r24, 0x86	; 134
    3200:	92 e0       	ldi	r25, 0x02	; 2
    3202:	0e 94 07 32 	call	0x640e	; 0x640e <puts>
        lora_driver_payload_t uplink_payload;
        // Setting up amount of data points
        uplink_payload.len = 4;       // Length of the actual payload
    3206:	0e 83       	std	Y+6, r16	; 0x06
        uplink_payload.portNo = 1;    // The LoRaWAN port number to send the message to
    3208:	1d 83       	std	Y+5, r17	; 0x05

        // Saving sensor data to the uplink
        uplink_payload.bytes[0] = sensor_getTemp();
    320a:	e1 d4       	rcall	.+2498   	; 0x3bce <sensor_getTemp>
    320c:	94 d5       	rcall	.+2856   	; 0x3d36 <__fixunssfsi>
    320e:	6f 83       	std	Y+7, r22	; 0x07
        uplink_payload.bytes[1] = sensor_getCo2();
    3210:	12 d5       	rcall	.+2596   	; 0x3c36 <sensor_getCo2>
    3212:	91 d5       	rcall	.+2850   	; 0x3d36 <__fixunssfsi>
    3214:	68 87       	std	Y+8, r22	; 0x08
        uplink_payload.bytes[2] = sensor_getHum();
    3216:	f5 d4       	rcall	.+2538   	; 0x3c02 <sensor_getHum>
    3218:	8e d5       	rcall	.+2844   	; 0x3d36 <__fixunssfsi>
    321a:	69 87       	std	Y+9, r22	; 0x09
    321c:	f4 d0       	rcall	.+488    	; 0x3406 <xData_getId>
    321e:	8a 87       	std	Y+10, r24	; 0x0a
        uplink_payload.bytes[3] = xData_getId();
    3220:	be 01       	movw	r22, r28
    3222:	6b 5f       	subi	r22, 0xFB	; 251
    3224:	7f 4f       	sbci	r23, 0xFF	; 255

        // Sending uplink message
        lora_driver_sendUploadMessage(false, &uplink_payload);
    3226:	80 e0       	ldi	r24, 0x00	; 0
    3228:	0e 94 12 23 	call	0x4624	; 0x4624 <lora_driver_sendUploadMessage>
    322c:	e0 cf       	rjmp	.-64     	; 0x31ee <sendData+0x24>

0000322e <recieveData>:
    322e:	cf 92       	push	r12
    3230:	ef 92       	push	r14
    3232:	0f 93       	push	r16
    }
}


void recieveData(void *pvParameters)
{
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	cd b7       	in	r28, 0x3d	; 61
    323c:	de b7       	in	r29, 0x3e	; 62
    323e:	6a 97       	sbiw	r28, 0x1a	; 26
    3240:	0f b6       	in	r0, 0x3f	; 63
    3242:	f8 94       	cli
    3244:	de bf       	out	0x3e, r29	; 62
    3246:	0f be       	out	0x3f, r0	; 63
    3248:	cd bf       	out	0x3d, r28	; 61

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 150000 / portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    324a:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    324e:	69 83       	std	Y+1, r22	; 0x01
    3250:	7a 83       	std	Y+2, r23	; 0x02
    3252:	8b 83       	std	Y+3, r24	; 0x03
    3254:	9c 83       	std	Y+4, r25	; 0x04

	for (;;)
	{

		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    3256:	4f e9       	ldi	r20, 0x9F	; 159
    3258:	54 e2       	ldi	r21, 0x24	; 36
    325a:	60 e0       	ldi	r22, 0x00	; 0
    325c:	70 e0       	ldi	r23, 0x00	; 0
    325e:	ce 01       	movw	r24, r28
    3260:	01 96       	adiw	r24, 0x01	; 1
    3262:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>

		lora_driver_payload_t downlinkPayload;

		xMessageBufferReceive(downLinkMessageBufferHandle, &downlinkPayload, sizeof(lora_driver_payload_t), portMAX_DELAY);
    3266:	0f ef       	ldi	r16, 0xFF	; 255
    3268:	1f ef       	ldi	r17, 0xFF	; 255
    326a:	98 01       	movw	r18, r16
    326c:	46 e1       	ldi	r20, 0x16	; 22
    326e:	50 e0       	ldi	r21, 0x00	; 0
    3270:	be 01       	movw	r22, r28
    3272:	6b 5f       	subi	r22, 0xFB	; 251
    3274:	7f 4f       	sbci	r23, 0xFF	; 255
    3276:	80 91 e6 17 	lds	r24, 0x17E6	; 0x8017e6 <downLinkMessageBufferHandle>
    327a:	90 91 e7 17 	lds	r25, 0x17E7	; 0x8017e7 <downLinkMessageBufferHandle+0x1>
    327e:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
		if (6 < downlinkPayload.len)
    3282:	8e 81       	ldd	r24, Y+6	; 0x06
    3284:	87 30       	cpi	r24, 0x07	; 7
    3286:	38 f3       	brcs	.-50     	; 0x3256 <recieveData+0x28>
		{

			// Checks if all the numbers are validated

			if (validateDownlink(downlinkPayload.bytes[4], downlinkPayload.bytes[5], downlinkPayload.bytes[2], downlinkPayload.bytes[3], downlinkPayload.bytes[0], downlinkPayload.bytes[1], downlinkPayload.bytes[6]) == 0)
    3288:	cd 84       	ldd	r12, Y+13	; 0x0d
    328a:	e8 84       	ldd	r14, Y+8	; 0x08
    328c:	0f 81       	ldd	r16, Y+7	; 0x07
    328e:	2a 85       	ldd	r18, Y+10	; 0x0a
    3290:	49 85       	ldd	r20, Y+9	; 0x09
    3292:	6c 85       	ldd	r22, Y+12	; 0x0c
    3294:	8b 85       	ldd	r24, Y+11	; 0x0b
    3296:	f0 d4       	rcall	.+2528   	; 0x3c78 <validateDownlink>
    3298:	89 2b       	or	r24, r25
    329a:	79 f0       	breq	.+30     	; 0x32ba <recieveData+0x8c>
				return;
			}

			// Sets the values to the logikObj

			vData_setCo2_lower(downlinkPayload.bytes[2]);
    329c:	89 85       	ldd	r24, Y+9	; 0x09
    329e:	d6 d0       	rcall	.+428    	; 0x344c <vData_setCo2_lower>
			vData_setCo2_upper(downlinkPayload.bytes[3]);
    32a0:	8a 85       	ldd	r24, Y+10	; 0x0a
    32a2:	b4 d0       	rcall	.+360    	; 0x340c <vData_setCo2_upper>
			vData_setHum_lower(downlinkPayload.bytes[5]);
    32a4:	8c 85       	ldd	r24, Y+12	; 0x0c
    32a6:	12 d1       	rcall	.+548    	; 0x34cc <vData_setHum_lower>
			vData_setHum_upper(downlinkPayload.bytes[4]);
    32a8:	8b 85       	ldd	r24, Y+11	; 0x0b
    32aa:	f0 d0       	rcall	.+480    	; 0x348c <vData_setHum_upper>
			vData_setTemp_lower(downlinkPayload.bytes[0]);
    32ac:	8f 81       	ldd	r24, Y+7	; 0x07
    32ae:	4e d1       	rcall	.+668    	; 0x354c <vData_setTemp_lower>
			vData_setTemp_upper(downlinkPayload.bytes[1]);
    32b0:	88 85       	ldd	r24, Y+8	; 0x08
    32b2:	2c d1       	rcall	.+600    	; 0x350c <vData_setTemp_upper>
    32b4:	8d 85       	ldd	r24, Y+13	; 0x0d
			vData_setId(downlinkPayload.bytes[6]);
    32b6:	a5 d1       	rcall	.+842    	; 0x3602 <vData_setId>
    32b8:	ce cf       	rjmp	.-100    	; 0x3256 <recieveData+0x28>
    32ba:	6a 96       	adiw	r28, 0x1a	; 26
		}
	}
    32bc:	0f b6       	in	r0, 0x3f	; 63
}
    32be:	f8 94       	cli
    32c0:	de bf       	out	0x3e, r29	; 62
    32c2:	0f be       	out	0x3f, r0	; 63
    32c4:	cd bf       	out	0x3d, r28	; 61
    32c6:	df 91       	pop	r29
    32c8:	cf 91       	pop	r28
    32ca:	1f 91       	pop	r17
    32cc:	0f 91       	pop	r16
    32ce:	ef 90       	pop	r14
    32d0:	cf 90       	pop	r12
    32d2:	08 95       	ret

000032d4 <comm_vTaskCreate>:
    32d4:	ef 92       	push	r14
    32d6:	ff 92       	push	r15

void comm_vTaskCreate(void)
{
    32d8:	0f 93       	push	r16
    xTaskCreate(sendData, "SendData", configMINIMAL_STACK_SIZE, NULL, 4, NULL);
    32da:	e1 2c       	mov	r14, r1
    32dc:	f1 2c       	mov	r15, r1
    32de:	04 e0       	ldi	r16, 0x04	; 4
    32e0:	20 e0       	ldi	r18, 0x00	; 0
    32e2:	30 e0       	ldi	r19, 0x00	; 0
    32e4:	40 ec       	ldi	r20, 0xC0	; 192
    32e6:	50 e0       	ldi	r21, 0x00	; 0
    32e8:	67 e9       	ldi	r22, 0x97	; 151
    32ea:	72 e0       	ldi	r23, 0x02	; 2
    32ec:	85 ee       	ldi	r24, 0xE5	; 229
    32ee:	98 e1       	ldi	r25, 0x18	; 24
    32f0:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
    xTaskCreate(recieveData, "RecieveData", configMINIMAL_STACK_SIZE, NULL, 5, NULL);
    32f4:	05 e0       	ldi	r16, 0x05	; 5
    32f6:	20 e0       	ldi	r18, 0x00	; 0
    32f8:	30 e0       	ldi	r19, 0x00	; 0
    32fa:	40 ec       	ldi	r20, 0xC0	; 192
    32fc:	50 e0       	ldi	r21, 0x00	; 0
    32fe:	60 ea       	ldi	r22, 0xA0	; 160
    3300:	72 e0       	ldi	r23, 0x02	; 2
    3302:	87 e1       	ldi	r24, 0x17	; 23
    3304:	99 e1       	ldi	r25, 0x19	; 25
    3306:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
    330a:	0f 91       	pop	r16
    330c:	ff 90       	pop	r15
    330e:	ef 90       	pop	r14
    3310:	08 95       	ret

00003312 <saveLimit>:
    return valueRead;
}


void write_eep(uint8_t address, uint8_t input) {
    eeprom_write_byte((uint8_t*)address, input);
    3312:	cf 93       	push	r28
    3314:	df 93       	push	r29
    3316:	00 d0       	rcall	.+0      	; 0x3318 <saveLimit+0x6>
    3318:	1f 92       	push	r1
    331a:	cd b7       	in	r28, 0x3d	; 61
    331c:	de b7       	in	r29, 0x3e	; 62
    331e:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    3322:	69 83       	std	Y+1, r22	; 0x01
    3324:	7a 83       	std	Y+2, r23	; 0x02
    3326:	8b 83       	std	Y+3, r24	; 0x03
    3328:	9c 83       	std	Y+4, r25	; 0x04
    332a:	0f 2e       	mov	r0, r31
    332c:	fc ea       	ldi	r31, 0xAC	; 172
    332e:	ef 2e       	mov	r14, r31
    3330:	f2 e0       	ldi	r31, 0x02	; 2
    3332:	ff 2e       	mov	r15, r31
    3334:	f0 2d       	mov	r31, r0
    3336:	0f 2e       	mov	r0, r31
    3338:	f9 ed       	ldi	r31, 0xD9	; 217
    333a:	cf 2e       	mov	r12, r31
    333c:	f7 e1       	ldi	r31, 0x17	; 23
    333e:	df 2e       	mov	r13, r31
    3340:	f0 2d       	mov	r31, r0
    3342:	40 e7       	ldi	r20, 0x70	; 112
    3344:	59 e9       	ldi	r21, 0x99	; 153
    3346:	64 e1       	ldi	r22, 0x14	; 20
    3348:	70 e0       	ldi	r23, 0x00	; 0
    334a:	ce 01       	movw	r24, r28
    334c:	01 96       	adiw	r24, 0x01	; 1
    334e:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>
    3352:	ff 92       	push	r15
    3354:	ef 92       	push	r14
    3356:	bc d4       	rcall	.+2424   	; 0x3cd0 <protected_printf>
    3358:	4c e0       	ldi	r20, 0x0C	; 12
    335a:	50 e0       	ldi	r21, 0x00	; 0
    335c:	60 e0       	ldi	r22, 0x00	; 0
    335e:	70 e0       	ldi	r23, 0x00	; 0
    3360:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <eep_mutex>
    3364:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <eep_mutex+0x1>
    3368:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
    336c:	0f 90       	pop	r0
    336e:	0f 90       	pop	r0
    3370:	81 30       	cpi	r24, 0x01	; 1
    3372:	39 f7       	brne	.-50     	; 0x3342 <saveLimit+0x30>
    3374:	f6 01       	movw	r30, r12
    3376:	66 81       	ldd	r22, Z+6	; 0x06
    3378:	80 e0       	ldi	r24, 0x00	; 0
    337a:	90 e0       	ldi	r25, 0x00	; 0
    337c:	0e 94 21 35 	call	0x6a42	; 0x6a42 <eeprom_write_byte>
    3380:	f6 01       	movw	r30, r12
    3382:	60 81       	ld	r22, Z
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	0e 94 21 35 	call	0x6a42	; 0x6a42 <eeprom_write_byte>
    338c:	f6 01       	movw	r30, r12
    338e:	61 81       	ldd	r22, Z+1	; 0x01
    3390:	82 e0       	ldi	r24, 0x02	; 2
    3392:	90 e0       	ldi	r25, 0x00	; 0
    3394:	0e 94 21 35 	call	0x6a42	; 0x6a42 <eeprom_write_byte>
    3398:	f6 01       	movw	r30, r12
    339a:	63 81       	ldd	r22, Z+3	; 0x03
    339c:	83 e0       	ldi	r24, 0x03	; 3
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	0e 94 21 35 	call	0x6a42	; 0x6a42 <eeprom_write_byte>
    33a4:	f6 01       	movw	r30, r12
    33a6:	62 81       	ldd	r22, Z+2	; 0x02
    33a8:	84 e0       	ldi	r24, 0x04	; 4
    33aa:	90 e0       	ldi	r25, 0x00	; 0
    33ac:	0e 94 21 35 	call	0x6a42	; 0x6a42 <eeprom_write_byte>
    33b0:	f6 01       	movw	r30, r12
    33b2:	65 81       	ldd	r22, Z+5	; 0x05
    33b4:	85 e0       	ldi	r24, 0x05	; 5
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	0e 94 21 35 	call	0x6a42	; 0x6a42 <eeprom_write_byte>
    33bc:	f6 01       	movw	r30, r12
    33be:	64 81       	ldd	r22, Z+4	; 0x04
    33c0:	86 e0       	ldi	r24, 0x06	; 6
    33c2:	90 e0       	ldi	r25, 0x00	; 0
    33c4:	0e 94 21 35 	call	0x6a42	; 0x6a42 <eeprom_write_byte>
    33c8:	00 e0       	ldi	r16, 0x00	; 0
    33ca:	20 e0       	ldi	r18, 0x00	; 0
    33cc:	30 e0       	ldi	r19, 0x00	; 0
    33ce:	a9 01       	movw	r20, r18
    33d0:	60 e0       	ldi	r22, 0x00	; 0
    33d2:	70 e0       	ldi	r23, 0x00	; 0
    33d4:	80 91 e0 17 	lds	r24, 0x17E0	; 0x8017e0 <eep_mutex>
    33d8:	90 91 e1 17 	lds	r25, 0x17E1	; 0x8017e1 <eep_mutex+0x1>
    33dc:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    33e0:	b0 cf       	rjmp	.-160    	; 0x3342 <saveLimit+0x30>

000033e2 <xData_getCo2_upper>:
}


uint8_t xData_getCo2_upper(void) {
    return limits.co2_Upper;
}
    33e2:	80 91 d9 17 	lds	r24, 0x17D9	; 0x8017d9 <limits>
    33e6:	08 95       	ret

000033e8 <xData_getCo2_lower>:

uint8_t xData_getCo2_lower(void) {
    return limits.co2_Lower;
}
    33e8:	80 91 da 17 	lds	r24, 0x17DA	; 0x8017da <limits+0x1>
    33ec:	08 95       	ret

000033ee <xData_getHum_upper>:

uint8_t xData_getHum_upper(void) {
    return limits.hum_Upper;
}
    33ee:	80 91 dc 17 	lds	r24, 0x17DC	; 0x8017dc <limits+0x3>
    33f2:	08 95       	ret

000033f4 <xData_getHum_lower>:

uint8_t xData_getHum_lower(void) {
    return limits.hum_Lower;
}
    33f4:	80 91 db 17 	lds	r24, 0x17DB	; 0x8017db <limits+0x2>
    33f8:	08 95       	ret

000033fa <xData_getTemp_upper>:

uint8_t xData_getTemp_upper(void) {
    return limits.temp_Upper;
}
    33fa:	80 91 de 17 	lds	r24, 0x17DE	; 0x8017de <limits+0x5>
    33fe:	08 95       	ret

00003400 <xData_getTemp_lower>:

uint8_t xData_getTemp_lower(void) {
    return limits.temp_Lower;
	
}
    3400:	80 91 dd 17 	lds	r24, 0x17DD	; 0x8017dd <limits+0x4>
    3404:	08 95       	ret

00003406 <xData_getId>:

uint8_t xData_getId() {
    return limits.id;
}
    3406:	80 91 df 17 	lds	r24, 0x17DF	; 0x8017df <limits+0x6>
    340a:	08 95       	ret

0000340c <vData_setCo2_upper>:

void vData_setCo2_upper(uint8_t value) {
    340c:	0f 93       	push	r16
    340e:	cf 93       	push	r28
    3410:	c8 2f       	mov	r28, r24
    if (xSemaphoreTake(co2_mutex,pdMS_TO_TICKS(200))==pdTRUE) {
    3412:	4c e0       	ldi	r20, 0x0C	; 12
    3414:	50 e0       	ldi	r21, 0x00	; 0
    3416:	60 e0       	ldi	r22, 0x00	; 0
    3418:	70 e0       	ldi	r23, 0x00	; 0
    341a:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <co2_mutex>
    341e:	90 91 eb 17 	lds	r25, 0x17EB	; 0x8017eb <co2_mutex+0x1>
    3422:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
    3426:	81 30       	cpi	r24, 0x01	; 1
    3428:	71 f4       	brne	.+28     	; 0x3446 <vData_setCo2_upper+0x3a>
        limits.co2_Upper = value;
    342a:	c0 93 d9 17 	sts	0x17D9, r28	; 0x8017d9 <limits>

        xSemaphoreGive(co2_mutex);
    342e:	00 e0       	ldi	r16, 0x00	; 0
    3430:	20 e0       	ldi	r18, 0x00	; 0
    3432:	30 e0       	ldi	r19, 0x00	; 0
    3434:	a9 01       	movw	r20, r18
    3436:	60 e0       	ldi	r22, 0x00	; 0
    3438:	70 e0       	ldi	r23, 0x00	; 0
    343a:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <co2_mutex>
    343e:	90 91 eb 17 	lds	r25, 0x17EB	; 0x8017eb <co2_mutex+0x1>
    3442:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    }
}
    3446:	cf 91       	pop	r28
    3448:	0f 91       	pop	r16
    344a:	08 95       	ret

0000344c <vData_setCo2_lower>:

void vData_setCo2_lower(uint8_t value) {
    344c:	0f 93       	push	r16
    344e:	cf 93       	push	r28
    3450:	c8 2f       	mov	r28, r24
    if (xSemaphoreTake(co2_mutex,pdMS_TO_TICKS(200))==pdTRUE) {
    3452:	4c e0       	ldi	r20, 0x0C	; 12
    3454:	50 e0       	ldi	r21, 0x00	; 0
    3456:	60 e0       	ldi	r22, 0x00	; 0
    3458:	70 e0       	ldi	r23, 0x00	; 0
    345a:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <co2_mutex>
    345e:	90 91 eb 17 	lds	r25, 0x17EB	; 0x8017eb <co2_mutex+0x1>
    3462:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
    3466:	81 30       	cpi	r24, 0x01	; 1
    3468:	71 f4       	brne	.+28     	; 0x3486 <vData_setCo2_lower+0x3a>
        limits.co2_Lower = value;
    346a:	c0 93 da 17 	sts	0x17DA, r28	; 0x8017da <limits+0x1>

        xSemaphoreGive(co2_mutex);
    346e:	00 e0       	ldi	r16, 0x00	; 0
    3470:	20 e0       	ldi	r18, 0x00	; 0
    3472:	30 e0       	ldi	r19, 0x00	; 0
    3474:	a9 01       	movw	r20, r18
    3476:	60 e0       	ldi	r22, 0x00	; 0
    3478:	70 e0       	ldi	r23, 0x00	; 0
    347a:	80 91 ea 17 	lds	r24, 0x17EA	; 0x8017ea <co2_mutex>
    347e:	90 91 eb 17 	lds	r25, 0x17EB	; 0x8017eb <co2_mutex+0x1>
    3482:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    }
}
    3486:	cf 91       	pop	r28
    3488:	0f 91       	pop	r16
    348a:	08 95       	ret

0000348c <vData_setHum_upper>:

void vData_setHum_upper(uint8_t value) {
    348c:	0f 93       	push	r16
    348e:	cf 93       	push	r28
    3490:	c8 2f       	mov	r28, r24
    if (xSemaphoreTake(hum_mutex,pdMS_TO_TICKS(200))==pdTRUE) {
    3492:	4c e0       	ldi	r20, 0x0C	; 12
    3494:	50 e0       	ldi	r21, 0x00	; 0
    3496:	60 e0       	ldi	r22, 0x00	; 0
    3498:	70 e0       	ldi	r23, 0x00	; 0
    349a:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <hum_mutex>
    349e:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <hum_mutex+0x1>
    34a2:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
    34a6:	81 30       	cpi	r24, 0x01	; 1
    34a8:	71 f4       	brne	.+28     	; 0x34c6 <vData_setHum_upper+0x3a>
        limits.hum_Upper = value;
    34aa:	c0 93 dc 17 	sts	0x17DC, r28	; 0x8017dc <limits+0x3>

        xSemaphoreGive(hum_mutex);
    34ae:	00 e0       	ldi	r16, 0x00	; 0
    34b0:	20 e0       	ldi	r18, 0x00	; 0
    34b2:	30 e0       	ldi	r19, 0x00	; 0
    34b4:	a9 01       	movw	r20, r18
    34b6:	60 e0       	ldi	r22, 0x00	; 0
    34b8:	70 e0       	ldi	r23, 0x00	; 0
    34ba:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <hum_mutex>
    34be:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <hum_mutex+0x1>
    34c2:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    }
}
    34c6:	cf 91       	pop	r28
    34c8:	0f 91       	pop	r16
    34ca:	08 95       	ret

000034cc <vData_setHum_lower>:

void vData_setHum_lower(uint8_t value) {
    34cc:	0f 93       	push	r16
    34ce:	cf 93       	push	r28
    34d0:	c8 2f       	mov	r28, r24
    if (xSemaphoreTake(hum_mutex,pdMS_TO_TICKS(200))==pdTRUE) {
    34d2:	4c e0       	ldi	r20, 0x0C	; 12
    34d4:	50 e0       	ldi	r21, 0x00	; 0
    34d6:	60 e0       	ldi	r22, 0x00	; 0
    34d8:	70 e0       	ldi	r23, 0x00	; 0
    34da:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <hum_mutex>
    34de:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <hum_mutex+0x1>
    34e2:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
    34e6:	81 30       	cpi	r24, 0x01	; 1
    34e8:	71 f4       	brne	.+28     	; 0x3506 <vData_setHum_lower+0x3a>
        limits.hum_Lower = value;
    34ea:	c0 93 db 17 	sts	0x17DB, r28	; 0x8017db <limits+0x2>

        xSemaphoreGive(hum_mutex);
    34ee:	00 e0       	ldi	r16, 0x00	; 0
    34f0:	20 e0       	ldi	r18, 0x00	; 0
    34f2:	30 e0       	ldi	r19, 0x00	; 0
    34f4:	a9 01       	movw	r20, r18
    34f6:	60 e0       	ldi	r22, 0x00	; 0
    34f8:	70 e0       	ldi	r23, 0x00	; 0
    34fa:	80 91 e2 17 	lds	r24, 0x17E2	; 0x8017e2 <hum_mutex>
    34fe:	90 91 e3 17 	lds	r25, 0x17E3	; 0x8017e3 <hum_mutex+0x1>
    3502:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    }
}
    3506:	cf 91       	pop	r28
    3508:	0f 91       	pop	r16
    350a:	08 95       	ret

0000350c <vData_setTemp_upper>:

void vData_setTemp_upper(uint8_t value) {
    350c:	0f 93       	push	r16
    350e:	cf 93       	push	r28
    3510:	c8 2f       	mov	r28, r24
   if (xSemaphoreTake(temp_mutex,pdMS_TO_TICKS(200))==pdTRUE) {
    3512:	4c e0       	ldi	r20, 0x0C	; 12
    3514:	50 e0       	ldi	r21, 0x00	; 0
    3516:	60 e0       	ldi	r22, 0x00	; 0
    3518:	70 e0       	ldi	r23, 0x00	; 0
    351a:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <temp_mutex>
    351e:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <temp_mutex+0x1>
    3522:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
    3526:	81 30       	cpi	r24, 0x01	; 1
    3528:	71 f4       	brne	.+28     	; 0x3546 <vData_setTemp_upper+0x3a>
        limits.temp_Upper = value;
    352a:	c0 93 de 17 	sts	0x17DE, r28	; 0x8017de <limits+0x5>

        xSemaphoreGive(temp_mutex);
    352e:	00 e0       	ldi	r16, 0x00	; 0
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	30 e0       	ldi	r19, 0x00	; 0
    3534:	a9 01       	movw	r20, r18
    3536:	60 e0       	ldi	r22, 0x00	; 0
    3538:	70 e0       	ldi	r23, 0x00	; 0
    353a:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <temp_mutex>
    353e:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <temp_mutex+0x1>
    3542:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    }
}
    3546:	cf 91       	pop	r28
    3548:	0f 91       	pop	r16
    354a:	08 95       	ret

0000354c <vData_setTemp_lower>:

void vData_setTemp_lower(uint8_t value) {
    354c:	0f 93       	push	r16
    354e:	cf 93       	push	r28
    3550:	c8 2f       	mov	r28, r24
    if (xSemaphoreTake(temp_mutex,pdMS_TO_TICKS(200))==pdTRUE) {
    3552:	4c e0       	ldi	r20, 0x0C	; 12
    3554:	50 e0       	ldi	r21, 0x00	; 0
    3556:	60 e0       	ldi	r22, 0x00	; 0
    3558:	70 e0       	ldi	r23, 0x00	; 0
    355a:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <temp_mutex>
    355e:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <temp_mutex+0x1>
    3562:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
    3566:	81 30       	cpi	r24, 0x01	; 1
    3568:	71 f4       	brne	.+28     	; 0x3586 <vData_setTemp_lower+0x3a>
        limits.temp_Lower = value;
    356a:	c0 93 dd 17 	sts	0x17DD, r28	; 0x8017dd <limits+0x4>

        xSemaphoreGive(temp_mutex);
    356e:	00 e0       	ldi	r16, 0x00	; 0
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e0       	ldi	r19, 0x00	; 0
    3574:	a9 01       	movw	r20, r18
    3576:	60 e0       	ldi	r22, 0x00	; 0
    3578:	70 e0       	ldi	r23, 0x00	; 0
    357a:	80 91 e4 17 	lds	r24, 0x17E4	; 0x8017e4 <temp_mutex>
    357e:	90 91 e5 17 	lds	r25, 0x17E5	; 0x8017e5 <temp_mutex+0x1>
    3582:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    }
}
    3586:	cf 91       	pop	r28
    3588:	0f 91       	pop	r16
    358a:	08 95       	ret

0000358c <vSetDefault>:
    limits.temp_Upper = eeprom_read_byte((uint8_t*)5);
    limits.temp_Lower = eeprom_read_byte((uint8_t*)6);
}

void vSetDefault(void) {
    vData_setHum_lower(0);
    358c:	80 e0       	ldi	r24, 0x00	; 0
    358e:	9e df       	rcall	.-196    	; 0x34cc <vData_setHum_lower>
    vData_setHum_upper(95);
    3590:	8f e5       	ldi	r24, 0x5F	; 95
    3592:	7c df       	rcall	.-264    	; 0x348c <vData_setHum_upper>

    vData_setTemp_lower(-40);
    3594:	88 ed       	ldi	r24, 0xD8	; 216
    3596:	da df       	rcall	.-76     	; 0x354c <vData_setTemp_lower>
    vData_setTemp_upper(50);
    3598:	82 e3       	ldi	r24, 0x32	; 50
    359a:	b8 df       	rcall	.-144    	; 0x350c <vData_setTemp_upper>

    vData_setCo2_lower(0);
    359c:	80 e0       	ldi	r24, 0x00	; 0
    359e:	56 df       	rcall	.-340    	; 0x344c <vData_setCo2_lower>
    35a0:	85 e0       	ldi	r24, 0x05	; 5
    vData_setCo2_lower(5);
    35a2:	54 cf       	rjmp	.-344    	; 0x344c <vData_setCo2_lower>
    35a4:	08 95       	ret

000035a6 <vData_handler_initialise>:
    35a6:	cf 93       	push	r28
    35a8:	df 93       	push	r29

limit_t limits;


void vData_handler_initialise() {
    uint8_t id = eeprom_read_byte((uint8_t*)0);
    35aa:	80 e0       	ldi	r24, 0x00	; 0
    35ac:	90 e0       	ldi	r25, 0x00	; 0
    35ae:	0e 94 19 35 	call	0x6a32	; 0x6a32 <eeprom_read_byte>

    if (id == 255)
    35b2:	8f 3f       	cpi	r24, 0xFF	; 255
    35b4:	11 f4       	brne	.+4      	; 0x35ba <vData_handler_initialise+0x14>
    {
        vSetDefault();
    35b6:	ea df       	rcall	.-44     	; 0x358c <vSetDefault>
        return;
    35b8:	21 c0       	rjmp	.+66     	; 0x35fc <vData_handler_initialise+0x56>
    }

    limits.id = id;
    35ba:	c9 ed       	ldi	r28, 0xD9	; 217
    35bc:	d7 e1       	ldi	r29, 0x17	; 23
    35be:	8e 83       	std	Y+6, r24	; 0x06
    limits.co2_Upper = eeprom_read_byte((uint8_t*)1);
    35c0:	81 e0       	ldi	r24, 0x01	; 1
    35c2:	90 e0       	ldi	r25, 0x00	; 0
    35c4:	0e 94 19 35 	call	0x6a32	; 0x6a32 <eeprom_read_byte>
    35c8:	88 83       	st	Y, r24
    limits.co2_Lower = eeprom_read_byte((uint8_t*)2);
    35ca:	82 e0       	ldi	r24, 0x02	; 2
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	0e 94 19 35 	call	0x6a32	; 0x6a32 <eeprom_read_byte>
    35d2:	89 83       	std	Y+1, r24	; 0x01
    limits.hum_Upper = eeprom_read_byte((uint8_t*)3);
    35d4:	83 e0       	ldi	r24, 0x03	; 3
    35d6:	90 e0       	ldi	r25, 0x00	; 0
    35d8:	0e 94 19 35 	call	0x6a32	; 0x6a32 <eeprom_read_byte>
    35dc:	8b 83       	std	Y+3, r24	; 0x03
    limits.hum_Lower = eeprom_read_byte((uint8_t*)4);
    35de:	84 e0       	ldi	r24, 0x04	; 4
    35e0:	90 e0       	ldi	r25, 0x00	; 0
    35e2:	0e 94 19 35 	call	0x6a32	; 0x6a32 <eeprom_read_byte>
    35e6:	8a 83       	std	Y+2, r24	; 0x02
    limits.temp_Upper = eeprom_read_byte((uint8_t*)5);
    35e8:	85 e0       	ldi	r24, 0x05	; 5
    35ea:	90 e0       	ldi	r25, 0x00	; 0
    35ec:	0e 94 19 35 	call	0x6a32	; 0x6a32 <eeprom_read_byte>
    35f0:	8d 83       	std	Y+5, r24	; 0x05
    limits.temp_Lower = eeprom_read_byte((uint8_t*)6);
    35f2:	86 e0       	ldi	r24, 0x06	; 6
    35f4:	90 e0       	ldi	r25, 0x00	; 0
    35f6:	0e 94 19 35 	call	0x6a32	; 0x6a32 <eeprom_read_byte>
    35fa:	8c 83       	std	Y+4, r24	; 0x04
}
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	08 95       	ret

00003602 <vData_setId>:
        xSemaphoreGive(temp_mutex);
    }
}

void vData_setId(uint8_t value) {
    limits.id = value;
    3602:	80 93 df 17 	sts	0x17DF, r24	; 0x8017df <limits+0x6>
    3606:	08 95       	ret

00003608 <data_vTaskCreate>:
}

void data_vTaskCreate(void)
{
    3608:	ef 92       	push	r14
    360a:	ff 92       	push	r15
    360c:	0f 93       	push	r16
    xTaskCreate(saveLimit, "SaveLimit", configMINIMAL_STACK_SIZE, NULL, 99, NULL);
    360e:	e1 2c       	mov	r14, r1
    3610:	f1 2c       	mov	r15, r1
    3612:	03 e6       	ldi	r16, 0x63	; 99
    3614:	20 e0       	ldi	r18, 0x00	; 0
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	40 ec       	ldi	r20, 0xC0	; 192
    361a:	50 e0       	ldi	r21, 0x00	; 0
    361c:	6a eb       	ldi	r22, 0xBA	; 186
    361e:	72 e0       	ldi	r23, 0x02	; 2
    3620:	89 e8       	ldi	r24, 0x89	; 137
    3622:	99 e1       	ldi	r25, 0x19	; 25
    3624:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
    3628:	0f 91       	pop	r16
    362a:	ff 90       	pop	r15
    362c:	ef 90       	pop	r14
    362e:	08 95       	ret

00003630 <startCo2Generator>:
#include "../Headers/ModuleHandler.h"
#include <util/delay.h>


void startCo2Generator(){
	display_7seg_powerDown();
    3630:	e8 d4       	rcall	.+2512   	; 0x4002 <display_7seg_powerDown>
    3632:	2f ef       	ldi	r18, 0xFF	; 255
    3634:	83 ed       	ldi	r24, 0xD3	; 211
    3636:	90 e3       	ldi	r25, 0x30	; 48
    3638:	21 50       	subi	r18, 0x01	; 1
    363a:	80 40       	sbci	r24, 0x00	; 0
    363c:	90 40       	sbci	r25, 0x00	; 0
    363e:	e1 f7       	brne	.-8      	; 0x3638 <startCo2Generator+0x8>
    3640:	00 c0       	rjmp	.+0      	; 0x3642 <startCo2Generator+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    3642:	00 00       	nop
    3644:	da d4       	rcall	.+2484   	; 0x3ffa <display_7seg_powerUp>
	display_7seg_displayHex("1");
    3646:	87 eb       	ldi	r24, 0xB7	; 183
    3648:	96 e0       	ldi	r25, 0x06	; 6
    364a:	2f c4       	rjmp	.+2142   	; 0x3eaa <display_7seg_displayHex>
    364c:	08 95       	ret

0000364e <startVentilation>:
}

void startVentilation(){
	display_7seg_powerDown();
    364e:	d9 d4       	rcall	.+2482   	; 0x4002 <display_7seg_powerDown>
    3650:	2f ef       	ldi	r18, 0xFF	; 255
    3652:	83 ed       	ldi	r24, 0xD3	; 211
    3654:	90 e3       	ldi	r25, 0x30	; 48
    3656:	21 50       	subi	r18, 0x01	; 1
    3658:	80 40       	sbci	r24, 0x00	; 0
    365a:	90 40       	sbci	r25, 0x00	; 0
    365c:	e1 f7       	brne	.-8      	; 0x3656 <startVentilation+0x8>
    365e:	00 c0       	rjmp	.+0      	; 0x3660 <startVentilation+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    3660:	00 00       	nop
    3662:	cb d4       	rcall	.+2454   	; 0x3ffa <display_7seg_powerUp>
	display_7seg_displayHex("2");
    3664:	84 e4       	ldi	r24, 0x44	; 68
    3666:	96 e0       	ldi	r25, 0x06	; 6
    3668:	20 c4       	rjmp	.+2112   	; 0x3eaa <display_7seg_displayHex>
    366a:	08 95       	ret

0000366c <humidifier_Lower>:
}

void humidifier_Lower(){
	display_7seg_powerDown();
    366c:	ca d4       	rcall	.+2452   	; 0x4002 <display_7seg_powerDown>
    366e:	2f ef       	ldi	r18, 0xFF	; 255
    3670:	83 ed       	ldi	r24, 0xD3	; 211
    3672:	90 e3       	ldi	r25, 0x30	; 48
    3674:	21 50       	subi	r18, 0x01	; 1
    3676:	80 40       	sbci	r24, 0x00	; 0
    3678:	90 40       	sbci	r25, 0x00	; 0
    367a:	e1 f7       	brne	.-8      	; 0x3674 <humidifier_Lower+0x8>
    367c:	00 c0       	rjmp	.+0      	; 0x367e <humidifier_Lower+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    367e:	00 00       	nop
    3680:	bc d4       	rcall	.+2424   	; 0x3ffa <display_7seg_powerUp>
	display_7seg_displayHex("3");	
    3682:	84 ec       	ldi	r24, 0xC4	; 196
    3684:	92 e0       	ldi	r25, 0x02	; 2
    3686:	11 c4       	rjmp	.+2082   	; 0x3eaa <display_7seg_displayHex>
    3688:	08 95       	ret

0000368a <humidifier_Raise>:
}

void humidifier_Raise(){
	display_7seg_powerDown();
    368a:	bb d4       	rcall	.+2422   	; 0x4002 <display_7seg_powerDown>
    368c:	2f ef       	ldi	r18, 0xFF	; 255
    368e:	83 ed       	ldi	r24, 0xD3	; 211
    3690:	90 e3       	ldi	r25, 0x30	; 48
    3692:	21 50       	subi	r18, 0x01	; 1
    3694:	80 40       	sbci	r24, 0x00	; 0
    3696:	90 40       	sbci	r25, 0x00	; 0
    3698:	e1 f7       	brne	.-8      	; 0x3692 <humidifier_Raise+0x8>
    369a:	00 c0       	rjmp	.+0      	; 0x369c <humidifier_Raise+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    369c:	00 00       	nop
    369e:	ad d4       	rcall	.+2394   	; 0x3ffa <display_7seg_powerUp>
	display_7seg_displayHex("4");
    36a0:	86 ec       	ldi	r24, 0xC6	; 198
    36a2:	92 e0       	ldi	r25, 0x02	; 2
    36a4:	02 c4       	rjmp	.+2052   	; 0x3eaa <display_7seg_displayHex>
    36a6:	08 95       	ret

000036a8 <ac_Raise>:
}

void ac_Raise(){
	display_7seg_powerDown();
    36a8:	ac d4       	rcall	.+2392   	; 0x4002 <display_7seg_powerDown>
    36aa:	2f ef       	ldi	r18, 0xFF	; 255
    36ac:	83 ed       	ldi	r24, 0xD3	; 211
    36ae:	90 e3       	ldi	r25, 0x30	; 48
    36b0:	21 50       	subi	r18, 0x01	; 1
    36b2:	80 40       	sbci	r24, 0x00	; 0
    36b4:	90 40       	sbci	r25, 0x00	; 0
    36b6:	e1 f7       	brne	.-8      	; 0x36b0 <ac_Raise+0x8>
    36b8:	00 c0       	rjmp	.+0      	; 0x36ba <ac_Raise+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    36ba:	00 00       	nop
    36bc:	9e d4       	rcall	.+2364   	; 0x3ffa <display_7seg_powerUp>
	display_7seg_displayHex("5");
    36be:	81 e7       	ldi	r24, 0x71	; 113
    36c0:	93 e0       	ldi	r25, 0x03	; 3
    36c2:	f3 c3       	rjmp	.+2022   	; 0x3eaa <display_7seg_displayHex>
    36c4:	08 95       	ret

000036c6 <ac_Lower>:
}

void ac_Lower(){
	display_7seg_powerDown();
    36c6:	9d d4       	rcall	.+2362   	; 0x4002 <display_7seg_powerDown>
    36c8:	2f ef       	ldi	r18, 0xFF	; 255
    36ca:	83 ed       	ldi	r24, 0xD3	; 211
    36cc:	90 e3       	ldi	r25, 0x30	; 48
    36ce:	21 50       	subi	r18, 0x01	; 1
    36d0:	80 40       	sbci	r24, 0x00	; 0
    36d2:	90 40       	sbci	r25, 0x00	; 0
    36d4:	e1 f7       	brne	.-8      	; 0x36ce <ac_Lower+0x8>
    36d6:	00 c0       	rjmp	.+0      	; 0x36d8 <ac_Lower+0x12>
	_delay_ms(1000);
	display_7seg_powerUp();
    36d8:	00 00       	nop
    36da:	8f d4       	rcall	.+2334   	; 0x3ffa <display_7seg_powerUp>
	display_7seg_displayHex("6");
    36dc:	88 ec       	ldi	r24, 0xC8	; 200
    36de:	92 e0       	ldi	r25, 0x02	; 2
    36e0:	e4 c3       	rjmp	.+1992   	; 0x3eaa <display_7seg_displayHex>
    36e2:	08 95       	ret

000036e4 <humChecker>:
	xTaskCreate(co2Checker, "Co2Checker", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
	xTaskCreate(tempChecker, "TempChecker", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
}


void humChecker(void *pvParameters){
    36e4:	cf 93       	push	r28
    36e6:	df 93       	push	r29
    36e8:	00 d0       	rcall	.+0      	; 0x36ea <humChecker+0x6>
    36ea:	1f 92       	push	r1
    36ec:	cd b7       	in	r28, 0x3d	; 61
    36ee:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 60000 / portTICK_PERIOD_MS;
	xLastWakeTime = xTaskGetTickCount();
    36f0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    36f4:	69 83       	std	Y+1, r22	; 0x01
    36f6:	7a 83       	std	Y+2, r23	; 0x02
    36f8:	8b 83       	std	Y+3, r24	; 0x03
    36fa:	9c 83       	std	Y+4, r25	; 0x04
	
	
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    36fc:	46 ea       	ldi	r20, 0xA6	; 166
    36fe:	5e e0       	ldi	r21, 0x0E	; 14
    3700:	60 e0       	ldi	r22, 0x00	; 0
    3702:	70 e0       	ldi	r23, 0x00	; 0
    3704:	ce 01       	movw	r24, r28
    3706:	01 96       	adiw	r24, 0x01	; 1
    3708:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>
			
		if (sensor_getHum() < xData_getHum_lower())
    370c:	7a d2       	rcall	.+1268   	; 0x3c02 <sensor_getHum>
    370e:	6b 01       	movw	r12, r22
    3710:	7c 01       	movw	r14, r24
    3712:	70 de       	rcall	.-800    	; 0x33f4 <xData_getHum_lower>
    3714:	68 2f       	mov	r22, r24
    3716:	70 e0       	ldi	r23, 0x00	; 0
    3718:	80 e0       	ldi	r24, 0x00	; 0
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	3a d3       	rcall	.+1652   	; 0x3d92 <__floatsisf>
    371e:	9b 01       	movw	r18, r22
    3720:	ac 01       	movw	r20, r24
    3722:	c7 01       	movw	r24, r14
    3724:	b6 01       	movw	r22, r12
    3726:	03 d3       	rcall	.+1542   	; 0x3d2e <__cmpsf2>
    3728:	88 23       	and	r24, r24
    372a:	14 f4       	brge	.+4      	; 0x3730 <humChecker+0x4c>
		{
			humidifier_Raise();
    372c:	ae df       	rcall	.-164    	; 0x368a <humidifier_Raise>
    372e:	e6 cf       	rjmp	.-52     	; 0x36fc <humChecker+0x18>
		}
		else if (sensor_getHum() > xData_getHum_upper())
    3730:	68 d2       	rcall	.+1232   	; 0x3c02 <sensor_getHum>
    3732:	6b 01       	movw	r12, r22
    3734:	7c 01       	movw	r14, r24
    3736:	5b de       	rcall	.-842    	; 0x33ee <xData_getHum_upper>
    3738:	68 2f       	mov	r22, r24
    373a:	70 e0       	ldi	r23, 0x00	; 0
    373c:	80 e0       	ldi	r24, 0x00	; 0
    373e:	90 e0       	ldi	r25, 0x00	; 0
    3740:	28 d3       	rcall	.+1616   	; 0x3d92 <__floatsisf>
    3742:	9b 01       	movw	r18, r22
    3744:	ac 01       	movw	r20, r24
    3746:	c7 01       	movw	r24, r14
    3748:	b6 01       	movw	r22, r12
    374a:	ab d3       	rcall	.+1878   	; 0x3ea2 <__gesf2>
    374c:	18 16       	cp	r1, r24
    374e:	b4 f6       	brge	.-84     	; 0x36fc <humChecker+0x18>
    3750:	8d df       	rcall	.-230    	; 0x366c <humidifier_Lower>
		{
			humidifier_Lower();
    3752:	d4 cf       	rjmp	.-88     	; 0x36fc <humChecker+0x18>

00003754 <co2Checker>:
    3754:	cf 93       	push	r28
    3756:	df 93       	push	r29
	}
	
}


void co2Checker(void *pvParameters){
    3758:	00 d0       	rcall	.+0      	; 0x375a <co2Checker+0x6>
    375a:	1f 92       	push	r1
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 60000 / portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    3760:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    3764:	69 83       	std	Y+1, r22	; 0x01
    3766:	7a 83       	std	Y+2, r23	; 0x02
    3768:	8b 83       	std	Y+3, r24	; 0x03
    376a:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    376c:	46 ea       	ldi	r20, 0xA6	; 166
    376e:	5e e0       	ldi	r21, 0x0E	; 14
    3770:	60 e0       	ldi	r22, 0x00	; 0
    3772:	70 e0       	ldi	r23, 0x00	; 0
    3774:	ce 01       	movw	r24, r28
    3776:	01 96       	adiw	r24, 0x01	; 1
    3778:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>
			
		if (sensor_getCo2() < xData_getCo2_lower())
    377c:	5c d2       	rcall	.+1208   	; 0x3c36 <sensor_getCo2>
    377e:	6b 01       	movw	r12, r22
    3780:	7c 01       	movw	r14, r24
    3782:	32 de       	rcall	.-924    	; 0x33e8 <xData_getCo2_lower>
    3784:	68 2f       	mov	r22, r24
    3786:	70 e0       	ldi	r23, 0x00	; 0
    3788:	80 e0       	ldi	r24, 0x00	; 0
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	02 d3       	rcall	.+1540   	; 0x3d92 <__floatsisf>
    378e:	9b 01       	movw	r18, r22
    3790:	ac 01       	movw	r20, r24
    3792:	c7 01       	movw	r24, r14
    3794:	b6 01       	movw	r22, r12
    3796:	cb d2       	rcall	.+1430   	; 0x3d2e <__cmpsf2>
    3798:	88 23       	and	r24, r24
    379a:	14 f4       	brge	.+4      	; 0x37a0 <co2Checker+0x4c>
		{
			startCo2Generator();
    379c:	49 df       	rcall	.-366    	; 0x3630 <startCo2Generator>
    379e:	e6 cf       	rjmp	.-52     	; 0x376c <co2Checker+0x18>
		}
		else if (sensor_getCo2() > xData_getCo2_upper())
    37a0:	4a d2       	rcall	.+1172   	; 0x3c36 <sensor_getCo2>
    37a2:	6b 01       	movw	r12, r22
    37a4:	7c 01       	movw	r14, r24
    37a6:	1d de       	rcall	.-966    	; 0x33e2 <xData_getCo2_upper>
    37a8:	68 2f       	mov	r22, r24
    37aa:	70 e0       	ldi	r23, 0x00	; 0
    37ac:	80 e0       	ldi	r24, 0x00	; 0
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	f0 d2       	rcall	.+1504   	; 0x3d92 <__floatsisf>
    37b2:	9b 01       	movw	r18, r22
    37b4:	ac 01       	movw	r20, r24
    37b6:	c7 01       	movw	r24, r14
    37b8:	b6 01       	movw	r22, r12
    37ba:	73 d3       	rcall	.+1766   	; 0x3ea2 <__gesf2>
    37bc:	18 16       	cp	r1, r24
    37be:	b4 f6       	brge	.-84     	; 0x376c <co2Checker+0x18>
    37c0:	46 df       	rcall	.-372    	; 0x364e <startVentilation>
		{
			startVentilation();
    37c2:	d4 cf       	rjmp	.-88     	; 0x376c <co2Checker+0x18>

000037c4 <tempChecker>:
    37c4:	cf 93       	push	r28
    37c6:	df 93       	push	r29
	}
	
}
	

void tempChecker(void *pvParameters){
    37c8:	00 d0       	rcall	.+0      	; 0x37ca <tempChecker+0x6>
    37ca:	1f 92       	push	r1
    37cc:	cd b7       	in	r28, 0x3d	; 61
    37ce:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 60000 / portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    37d0:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    37d4:	69 83       	std	Y+1, r22	; 0x01
    37d6:	7a 83       	std	Y+2, r23	; 0x02
    37d8:	8b 83       	std	Y+3, r24	; 0x03
    37da:	9c 83       	std	Y+4, r25	; 0x04
	
	for(;;){
		xTaskDelayUntil(&xLastWakeTime, xFrequency);
    37dc:	46 ea       	ldi	r20, 0xA6	; 166
    37de:	5e e0       	ldi	r21, 0x0E	; 14
    37e0:	60 e0       	ldi	r22, 0x00	; 0
    37e2:	70 e0       	ldi	r23, 0x00	; 0
    37e4:	ce 01       	movw	r24, r28
    37e6:	01 96       	adiw	r24, 0x01	; 1
    37e8:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>
			
		if (sensor_getTemp() < xData_getTemp_lower())
    37ec:	f0 d1       	rcall	.+992    	; 0x3bce <sensor_getTemp>
    37ee:	6b 01       	movw	r12, r22
    37f0:	7c 01       	movw	r14, r24
    37f2:	06 de       	rcall	.-1012   	; 0x3400 <xData_getTemp_lower>
    37f4:	68 2f       	mov	r22, r24
    37f6:	70 e0       	ldi	r23, 0x00	; 0
    37f8:	80 e0       	ldi	r24, 0x00	; 0
    37fa:	90 e0       	ldi	r25, 0x00	; 0
    37fc:	ca d2       	rcall	.+1428   	; 0x3d92 <__floatsisf>
    37fe:	9b 01       	movw	r18, r22
    3800:	ac 01       	movw	r20, r24
    3802:	c7 01       	movw	r24, r14
    3804:	b6 01       	movw	r22, r12
    3806:	93 d2       	rcall	.+1318   	; 0x3d2e <__cmpsf2>
    3808:	88 23       	and	r24, r24
    380a:	14 f4       	brge	.+4      	; 0x3810 <tempChecker+0x4c>
		{
			ac_Raise();
    380c:	4d df       	rcall	.-358    	; 0x36a8 <ac_Raise>
    380e:	e6 cf       	rjmp	.-52     	; 0x37dc <tempChecker+0x18>
		}
		else if (sensor_getTemp() > xData_getTemp_upper())
    3810:	de d1       	rcall	.+956    	; 0x3bce <sensor_getTemp>
    3812:	6b 01       	movw	r12, r22
    3814:	7c 01       	movw	r14, r24
    3816:	f1 dd       	rcall	.-1054   	; 0x33fa <xData_getTemp_upper>
    3818:	68 2f       	mov	r22, r24
    381a:	70 e0       	ldi	r23, 0x00	; 0
    381c:	80 e0       	ldi	r24, 0x00	; 0
    381e:	90 e0       	ldi	r25, 0x00	; 0
    3820:	b8 d2       	rcall	.+1392   	; 0x3d92 <__floatsisf>
    3822:	9b 01       	movw	r18, r22
    3824:	ac 01       	movw	r20, r24
    3826:	c7 01       	movw	r24, r14
    3828:	b6 01       	movw	r22, r12
    382a:	3b d3       	rcall	.+1654   	; 0x3ea2 <__gesf2>
    382c:	18 16       	cp	r1, r24
    382e:	b4 f6       	brge	.-84     	; 0x37dc <tempChecker+0x18>
    3830:	4a df       	rcall	.-364    	; 0x36c6 <ac_Lower>
		{
			ac_Lower();
    3832:	d4 cf       	rjmp	.-88     	; 0x37dc <tempChecker+0x18>

00003834 <initialise>:
    3834:	ef 92       	push	r14
    3836:	ff 92       	push	r15
void co2Checker(void *pvParameters);
void tempChecker(void *pvParameters);
void humChecker(void *pvParameters);


void initialise(void){
    3838:	0f 93       	push	r16
	xTaskCreate(humChecker, "HumChecker", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
    383a:	e1 2c       	mov	r14, r1
    383c:	f1 2c       	mov	r15, r1
    383e:	01 e0       	ldi	r16, 0x01	; 1
    3840:	20 e0       	ldi	r18, 0x00	; 0
    3842:	30 e0       	ldi	r19, 0x00	; 0
    3844:	40 ec       	ldi	r20, 0xC0	; 192
    3846:	50 e0       	ldi	r21, 0x00	; 0
    3848:	6a ec       	ldi	r22, 0xCA	; 202
    384a:	72 e0       	ldi	r23, 0x02	; 2
    384c:	82 e7       	ldi	r24, 0x72	; 114
    384e:	9b e1       	ldi	r25, 0x1B	; 27
    3850:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
	xTaskCreate(co2Checker, "Co2Checker", configMINIMAL_STACK_SIZE, NULL, 2, NULL);
    3854:	02 e0       	ldi	r16, 0x02	; 2
    3856:	20 e0       	ldi	r18, 0x00	; 0
    3858:	30 e0       	ldi	r19, 0x00	; 0
    385a:	40 ec       	ldi	r20, 0xC0	; 192
    385c:	50 e0       	ldi	r21, 0x00	; 0
    385e:	65 ed       	ldi	r22, 0xD5	; 213
    3860:	72 e0       	ldi	r23, 0x02	; 2
    3862:	8a ea       	ldi	r24, 0xAA	; 170
    3864:	9b e1       	ldi	r25, 0x1B	; 27
    3866:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
	xTaskCreate(tempChecker, "TempChecker", configMINIMAL_STACK_SIZE, NULL, 3, NULL);
    386a:	03 e0       	ldi	r16, 0x03	; 3
    386c:	20 e0       	ldi	r18, 0x00	; 0
    386e:	30 e0       	ldi	r19, 0x00	; 0
    3870:	40 ec       	ldi	r20, 0xC0	; 192
    3872:	50 e0       	ldi	r21, 0x00	; 0
    3874:	60 ee       	ldi	r22, 0xE0	; 224
    3876:	72 e0       	ldi	r23, 0x02	; 2
    3878:	82 ee       	ldi	r24, 0xE2	; 226
    387a:	9b e1       	ldi	r25, 0x1B	; 27
    387c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
}
    3880:	0f 91       	pop	r16
    3882:	ff 90       	pop	r15
    3884:	ef 90       	pop	r14
    3886:	08 95       	ret

00003888 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3888:	cf 93       	push	r28
    388a:	df 93       	push	r29
    388c:	cd b7       	in	r28, 0x3d	; 61
    388e:	de b7       	in	r29, 0x3e	; 62
    3890:	68 97       	sbiw	r28, 0x18	; 24
    3892:	0f b6       	in	r0, 0x3f	; 63
    3894:	f8 94       	cli
    3896:	de bf       	out	0x3e, r29	; 62
    3898:	0f be       	out	0x3f, r0	; 63
    389a:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    389c:	81 e0       	ldi	r24, 0x01	; 1
    389e:	24 d6       	rcall	.+3144   	; 0x44e8 <lora_driver_resetRn2483>
	vTaskDelay(2);
    38a0:	62 e0       	ldi	r22, 0x02	; 2
    38a2:	70 e0       	ldi	r23, 0x00	; 0
    38a4:	80 e0       	ldi	r24, 0x00	; 0
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <vTaskDelay>
	lora_driver_resetRn2483(0);
    38ac:	80 e0       	ldi	r24, 0x00	; 0
    38ae:	1c d6       	rcall	.+3128   	; 0x44e8 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    38b0:	66 e9       	ldi	r22, 0x96	; 150
    38b2:	70 e0       	ldi	r23, 0x00	; 0
    38b4:	80 e0       	ldi	r24, 0x00	; 0
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	0e 94 e6 10 	call	0x21cc	; 0x21cc <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    38bc:	ce d5       	rcall	.+2972   	; 0x445a <lora_driver_flushBuffers>

static void _lora_setup(void)
{
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	0e 94 9b 2c 	call	0x5936	; 0x5936 <status_leds_slowBlink>

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    38c4:	1f d6       	rcall	.+3134   	; 0x4504 <lora_driver_rn2483FactoryReset>
    38c6:	0e 94 ff 24 	call	0x49fe	; 0x49fe <lora_driver_mapReturnCodeToText>
    38ca:	9f 93       	push	r25
    38cc:	8f 93       	push	r24
    38ce:	8c ee       	ldi	r24, 0xEC	; 236
    38d0:	92 e0       	ldi	r25, 0x02	; 2
    38d2:	9f 93       	push	r25
    38d4:	8f 93       	push	r24
    38d6:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <printf>
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    38da:	92 d7       	rcall	.+3876   	; 0x4800 <lora_driver_configureToEu868>
    38dc:	0e 94 ff 24 	call	0x49fe	; 0x49fe <lora_driver_mapReturnCodeToText>
    38e0:	9f 93       	push	r25
    38e2:	8f 93       	push	r24
    38e4:	8f ef       	ldi	r24, 0xFF	; 255
    38e6:	92 e0       	ldi	r25, 0x02	; 2
    38e8:	9f 93       	push	r25
    38ea:	8f 93       	push	r24
    38ec:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <printf>

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    38f0:	8e 01       	movw	r16, r28
    38f2:	0b 5f       	subi	r16, 0xFB	; 251
    38f4:	1f 4f       	sbci	r17, 0xFF	; 255
    38f6:	c8 01       	movw	r24, r16
    38f8:	17 d6       	rcall	.+3118   	; 0x4528 <lora_driver_getRn2483Hweui>
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    38fa:	0e 94 ff 24 	call	0x49fe	; 0x49fe <lora_driver_mapReturnCodeToText>
    38fe:	1f 93       	push	r17
    3900:	0f 93       	push	r16
    3902:	9f 93       	push	r25
    3904:	8f 93       	push	r24
    3906:	88 e1       	ldi	r24, 0x18	; 24
    3908:	93 e0       	ldi	r25, 0x03	; 3
    390a:	9f 93       	push	r25
    390c:	8f 93       	push	r24
    390e:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <printf>

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3912:	c8 01       	movw	r24, r16
    3914:	25 d6       	rcall	.+3146   	; 0x4560 <lora_driver_setDeviceIdentifier>
    3916:	0e 94 ff 24 	call	0x49fe	; 0x49fe <lora_driver_mapReturnCodeToText>
    391a:	9f 93       	push	r25
    391c:	8f 93       	push	r24
    391e:	1f 93       	push	r17
    3920:	0f 93       	push	r16
    3922:	8c e2       	ldi	r24, 0x2C	; 44
    3924:	93 e0       	ldi	r25, 0x03	; 3
    3926:	9f 93       	push	r25
    3928:	8f 93       	push	r24
    392a:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <printf>

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    392e:	a8 01       	movw	r20, r16
    3930:	61 e4       	ldi	r22, 0x41	; 65
    3932:	73 e0       	ldi	r23, 0x03	; 3
    3934:	82 e6       	ldi	r24, 0x62	; 98
    3936:	93 e0       	ldi	r25, 0x03	; 3
    3938:	0e 94 de 24 	call	0x49bc	; 0x49bc <lora_driver_setOtaaIdentity>
    393c:	0e 94 ff 24 	call	0x49fe	; 0x49fe <lora_driver_mapReturnCodeToText>
    3940:	9f 93       	push	r25
    3942:	8f 93       	push	r24
    3944:	1f 93       	push	r17
    3946:	0f 93       	push	r16
    3948:	81 e4       	ldi	r24, 0x41	; 65
    394a:	93 e0       	ldi	r25, 0x03	; 3
    394c:	9f 93       	push	r25
    394e:	8f 93       	push	r24
    3950:	82 e6       	ldi	r24, 0x62	; 98
    3952:	93 e0       	ldi	r25, 0x03	; 3
    3954:	9f 93       	push	r25
    3956:	8f 93       	push	r24
    3958:	83 e7       	ldi	r24, 0x73	; 115
    395a:	93 e0       	ldi	r25, 0x03	; 3
    395c:	9f 93       	push	r25
    395e:	8f 93       	push	r24
    3960:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <printf>

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    3964:	30 d6       	rcall	.+3168   	; 0x45c6 <lora_driver_saveMac>
    3966:	0e 94 ff 24 	call	0x49fe	; 0x49fe <lora_driver_mapReturnCodeToText>
    396a:	9f 93       	push	r25
    396c:	8f 93       	push	r24
    396e:	89 ea       	ldi	r24, 0xA9	; 169
    3970:	93 e0       	ldi	r25, 0x03	; 3
    3972:	9f 93       	push	r25
    3974:	8f 93       	push	r24
    3976:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <printf>

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    397a:	0f b6       	in	r0, 0x3f	; 63
    397c:	f8 94       	cli
    397e:	de bf       	out	0x3e, r29	; 62
    3980:	0f be       	out	0x3f, r0	; 63
    3982:	cd bf       	out	0x3d, r28	; 61
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	19 d7       	rcall	.+3634   	; 0x47ba <lora_driver_setAdaptiveDataRate>
    3988:	0e 94 ff 24 	call	0x49fe	; 0x49fe <lora_driver_mapReturnCodeToText>
    398c:	9f 93       	push	r25
    398e:	8f 93       	push	r24
    3990:	88 eb       	ldi	r24, 0xB8	; 184
    3992:	93 e0       	ldi	r25, 0x03	; 3
    3994:	9f 93       	push	r25
    3996:	8f 93       	push	r24
    3998:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <printf>

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    399c:	84 ef       	ldi	r24, 0xF4	; 244
    399e:	91 e0       	ldi	r25, 0x01	; 1
    39a0:	17 d7       	rcall	.+3630   	; 0x47d0 <lora_driver_setReceiveDelay>
    39a2:	0e 94 ff 24 	call	0x49fe	; 0x49fe <lora_driver_mapReturnCodeToText>
    39a6:	9f 93       	push	r25
    39a8:	8f 93       	push	r24
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	8f 93       	push	r24
    39ae:	84 ef       	ldi	r24, 0xF4	; 244
    39b0:	8f 93       	push	r24
    39b2:	89 ed       	ldi	r24, 0xD9	; 217
    39b4:	93 e0       	ldi	r25, 0x03	; 3
    39b6:	9f 93       	push	r25
    39b8:	8f 93       	push	r24
    39ba:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <printf>
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
    39c8:	0a e0       	ldi	r16, 0x0A	; 10
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    39ca:	10 e0       	ldi	r17, 0x00	; 0
    39cc:	0f 2e       	mov	r0, r31
    39ce:	f9 ef       	ldi	r31, 0xF9	; 249
    39d0:	ef 2e       	mov	r14, r31
    39d2:	f3 e0       	ldi	r31, 0x03	; 3
    39d4:	ff 2e       	mov	r15, r31

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    39d6:	f0 2d       	mov	r31, r0
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	fb d5       	rcall	.+3062   	; 0x45d2 <lora_driver_join>
    39dc:	d8 2e       	mov	r13, r24
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    39de:	0e 94 ff 24 	call	0x49fe	; 0x49fe <lora_driver_mapReturnCodeToText>
    39e2:	9f 93       	push	r25
    39e4:	8f 93       	push	r24
    39e6:	1f 93       	push	r17
    39e8:	0f 93       	push	r16
    39ea:	ff 92       	push	r15
    39ec:	ef 92       	push	r14
    39ee:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <printf>

		if ( rc != LORA_ACCEPTED)
    39f2:	0f 90       	pop	r0
    39f4:	0f 90       	pop	r0
    39f6:	0f 90       	pop	r0
    39f8:	0f 90       	pop	r0
    39fa:	0f 90       	pop	r0
    39fc:	0f 90       	pop	r0
    39fe:	f8 e0       	ldi	r31, 0x08	; 8
    3a00:	df 16       	cp	r13, r31
    3a02:	c1 f1       	breq	.+112    	; 0x3a74 <lora_handler_task+0x1ec>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    3a04:	80 e0       	ldi	r24, 0x00	; 0
    3a06:	0e 94 ff 2c 	call	0x59fe	; 0x59fe <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3a0a:	66 e3       	ldi	r22, 0x36	; 54
    3a0c:	71 e0       	ldi	r23, 0x01	; 1
    3a0e:	80 e0       	ldi	r24, 0x00	; 0
    3a10:	90 e0       	ldi	r25, 0x00	; 0
    3a12:	0e 94 e6 10 	call	0x21cc	; 0x21cc <vTaskDelay>
    3a16:	01 50       	subi	r16, 0x01	; 1
    3a18:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3a1a:	f1 f6       	brne	.-68     	; 0x39d8 <lora_handler_task+0x150>
    3a1c:	24 c0       	rjmp	.+72     	; 0x3a66 <lora_handler_task+0x1de>
		status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3a1e:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    3a22:	fd cf       	rjmp	.-6      	; 0x3a1e <lora_handler_task+0x196>
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    3a24:	48 ea       	ldi	r20, 0xA8	; 168
    3a26:	58 e4       	ldi	r21, 0x48	; 72
    3a28:	60 e0       	ldi	r22, 0x00	; 0
    3a2a:	70 e0       	ldi	r23, 0x00	; 0
    3a2c:	ce 01       	movw	r24, r28
    3a2e:	01 96       	adiw	r24, 0x01	; 1
    3a30:	0e 94 7c 10 	call	0x20f8	; 0x20f8 <xTaskDelayUntil>
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    3a34:	f8 01       	movw	r30, r16
		_uplink_payload.bytes[1] = hum & 0xFF;
		_uplink_payload.bytes[2] = temp >> 8;
    3a36:	82 82       	std	Z+2, r8	; 0x02
		_uplink_payload.bytes[3] = temp & 0xFF;
    3a38:	93 82       	std	Z+3, r9	; 0x03
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    3a3a:	a4 82       	std	Z+4, r10	; 0x04
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    3a3c:	b5 82       	std	Z+5, r11	; 0x05

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    3a3e:	c6 82       	std	Z+6, r12	; 0x06
    3a40:	d7 82       	std	Z+7, r13	; 0x07
    3a42:	83 e0       	ldi	r24, 0x03	; 3
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3a44:	0e 94 11 2d 	call	0x5a22	; 0x5a22 <status_leds_shortPuls>
    3a48:	b8 01       	movw	r22, r16
    3a4a:	80 e0       	ldi	r24, 0x00	; 0
    3a4c:	eb d5       	rcall	.+3030   	; 0x4624 <lora_driver_sendUploadMessage>
    3a4e:	d7 d7       	rcall	.+4014   	; 0x49fe <lora_driver_mapReturnCodeToText>
    3a50:	9f 93       	push	r25
    3a52:	8f 93       	push	r24
    3a54:	ff 92       	push	r15
    3a56:	ef 92       	push	r14
    3a58:	0e 94 f4 31 	call	0x63e8	; 0x63e8 <printf>
    3a5c:	0f 90       	pop	r0
    3a5e:	0f 90       	pop	r0
    3a60:	0f 90       	pop	r0
    3a62:	0f 90       	pop	r0
    3a64:	df cf       	rjmp	.-66     	; 0x3a24 <lora_handler_task+0x19c>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    3a66:	81 e0       	ldi	r24, 0x01	; 1
    3a68:	0e 94 f0 2c 	call	0x59e0	; 0x59e0 <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    3a6c:	80 e0       	ldi	r24, 0x00	; 0
    3a6e:	0e 94 be 2c 	call	0x597c	; 0x597c <status_leds_fastBlink>
    3a72:	d5 cf       	rjmp	.-86     	; 0x3a1e <lora_handler_task+0x196>

	if (rc == LORA_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    3a74:	81 e0       	ldi	r24, 0x01	; 1
    3a76:	0e 94 e1 2c 	call	0x59c2	; 0x59c2 <status_leds_ledOn>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
    3a7a:	ed e5       	ldi	r30, 0x5D	; 93
    3a7c:	f6 e1       	ldi	r31, 0x16	; 22
    3a7e:	86 e0       	ldi	r24, 0x06	; 6
    3a80:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    3a82:	82 e0       	ldi	r24, 0x02	; 2
    3a84:	80 83       	st	Z, r24

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    3a86:	0e 94 58 0e 	call	0x1cb0	; 0x1cb0 <xTaskGetTickCount>
    3a8a:	69 83       	std	Y+1, r22	; 0x01
    3a8c:	7a 83       	std	Y+2, r23	; 0x02
    3a8e:	8b 83       	std	Y+3, r24	; 0x03
    3a90:	9c 83       	std	Y+4, r25	; 0x04
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    3a92:	0d e5       	ldi	r16, 0x5D	; 93
    3a94:	16 e1       	ldi	r17, 0x16	; 22
    3a96:	0f 2e       	mov	r0, r31
    3a98:	f0 e3       	ldi	r31, 0x30	; 48
    3a9a:	8f 2e       	mov	r8, r31
    3a9c:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
    3a9e:	0f 2e       	mov	r0, r31
    3aa0:	f9 e3       	ldi	r31, 0x39	; 57
    3aa2:	9f 2e       	mov	r9, r31
    3aa4:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
    3aa6:	68 94       	set
    3aa8:	aa 24       	eor	r10, r10
    3aaa:	a1 f8       	bld	r10, 1
		_uplink_payload.bytes[3] = temp & 0xFF;
    3aac:	0f 2e       	mov	r0, r31
    3aae:	f3 ea       	ldi	r31, 0xA3	; 163
    3ab0:	bf 2e       	mov	r11, r31
    3ab2:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    3ab4:	68 94       	set
    3ab6:	cc 24       	eor	r12, r12
    3ab8:	c2 f8       	bld	r12, 2
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    3aba:	0f 2e       	mov	r0, r31
    3abc:	fa e1       	ldi	r31, 0x1A	; 26
    3abe:	df 2e       	mov	r13, r31
    3ac0:	f0 2d       	mov	r31, r0

		status_leds_shortPuls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    3ac2:	0f 2e       	mov	r0, r31
    3ac4:	f9 e1       	ldi	r31, 0x19	; 25
    3ac6:	ef 2e       	mov	r14, r31
    3ac8:	f4 e0       	ldi	r31, 0x04	; 4
    3aca:	ff 2e       	mov	r15, r31
    3acc:	f0 2d       	mov	r31, r0
    3ace:	aa cf       	rjmp	.-172    	; 0x3a24 <lora_handler_task+0x19c>

00003ad0 <lora_handler_initialise>:
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3ad0:	ef 92       	push	r14
    3ad2:	ff 92       	push	r15
    3ad4:	0f 93       	push	r16
	xTaskCreate(
    3ad6:	e1 2c       	mov	r14, r1
    3ad8:	f1 2c       	mov	r15, r1
    3ada:	08 2f       	mov	r16, r24
    3adc:	20 e0       	ldi	r18, 0x00	; 0
    3ade:	30 e0       	ldi	r19, 0x00	; 0
    3ae0:	48 e8       	ldi	r20, 0x88	; 136
    3ae2:	51 e0       	ldi	r21, 0x01	; 1
    3ae4:	6e e2       	ldi	r22, 0x2E	; 46
    3ae6:	74 e0       	ldi	r23, 0x04	; 4
    3ae8:	84 e4       	ldi	r24, 0x44	; 68
    3aea:	9c e1       	ldi	r25, 0x1C	; 28
    3aec:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3af0:	0f 91       	pop	r16
    3af2:	ff 90       	pop	r15
    3af4:	ef 90       	pop	r14
    3af6:	08 95       	ret

00003af8 <create_mutex>:
    comm_vTaskCreate();
    data_vTaskCreate();
	initialise();
}

void create_mutex(SemaphoreHandle_t* mutex) {
    3af8:	0f 93       	push	r16
    3afa:	cf 93       	push	r28
    3afc:	df 93       	push	r29
	if (*mutex == NULL) // Check to confirm that the Semaphore has not already been created.
    3afe:	fc 01       	movw	r30, r24
    3b00:	20 81       	ld	r18, Z
    3b02:	31 81       	ldd	r19, Z+1	; 0x01
    3b04:	23 2b       	or	r18, r19
    3b06:	81 f4       	brne	.+32     	; 0x3b28 <create_mutex+0x30>
    3b08:	ec 01       	movw	r28, r24
	{
		*mutex = xSemaphoreCreateMutex(); // Create a mutex semaphore.
    3b0a:	81 e0       	ldi	r24, 0x01	; 1
    3b0c:	0e 94 25 07 	call	0xe4a	; 0xe4a <xQueueCreateMutex>
    3b10:	99 83       	std	Y+1, r25	; 0x01
    3b12:	88 83       	st	Y, r24
		if ((*mutex) != NULL)
    3b14:	00 97       	sbiw	r24, 0x00	; 0
    3b16:	41 f0       	breq	.+16     	; 0x3b28 <create_mutex+0x30>
		{
			xSemaphoreGive((*mutex)); // Make the mutex available for use, by initially "Giving" the Semaphore.
    3b18:	00 e0       	ldi	r16, 0x00	; 0
    3b1a:	20 e0       	ldi	r18, 0x00	; 0
    3b1c:	30 e0       	ldi	r19, 0x00	; 0
    3b1e:	a9 01       	movw	r20, r18
    3b20:	60 e0       	ldi	r22, 0x00	; 0
    3b22:	70 e0       	ldi	r23, 0x00	; 0
    3b24:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
		}
	}
}
    3b28:	df 91       	pop	r29
    3b2a:	cf 91       	pop	r28
    3b2c:	0f 91       	pop	r16
    3b2e:	08 95       	ret

00003b30 <create_tasks_and_semaphores>:
void create_tasks_and_semaphores(void)
{
    // Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
    // because it is sharing a resource, such as the Serial port.
    // Semaphores should only be used whilst the scheduler is running, but we can set it up here.
    create_mutex(&hum_mutex);
    3b30:	82 ee       	ldi	r24, 0xE2	; 226
    3b32:	97 e1       	ldi	r25, 0x17	; 23
    3b34:	e1 df       	rcall	.-62     	; 0x3af8 <create_mutex>
	create_mutex(&temp_mutex);
    3b36:	84 ee       	ldi	r24, 0xE4	; 228
    3b38:	97 e1       	ldi	r25, 0x17	; 23
    3b3a:	de df       	rcall	.-68     	; 0x3af8 <create_mutex>
	create_mutex(&co2_mutex);
    3b3c:	8a ee       	ldi	r24, 0xEA	; 234
    3b3e:	97 e1       	ldi	r25, 0x17	; 23
    3b40:	db df       	rcall	.-74     	; 0x3af8 <create_mutex>
    create_mutex(&eep_mutex);
    3b42:	80 ee       	ldi	r24, 0xE0	; 224
    3b44:	97 e1       	ldi	r25, 0x17	; 23
    3b46:	d8 df       	rcall	.-80     	; 0x3af8 <create_mutex>
    3b48:	80 91 73 16 	lds	r24, 0x1673	; 0x801673 <printMutex>
	create_mutex(printMutex);
    3b4c:	90 91 74 16 	lds	r25, 0x1674	; 0x801674 <printMutex+0x1>

    comm_vTaskCreate();
    3b50:	d3 df       	rcall	.-90     	; 0x3af8 <create_mutex>
    3b52:	c0 db       	rcall	.-2176   	; 0x32d4 <comm_vTaskCreate>
    data_vTaskCreate();
    3b54:	59 dd       	rcall	.-1358   	; 0x3608 <data_vTaskCreate>
    3b56:	6e ce       	rjmp	.-804    	; 0x3834 <initialise>
	initialise();
    3b58:	08 95       	ret

00003b5a <initialiseDrivers>:
    3b5a:	f8 d2       	rcall	.+1520   	; 0x414c <hih8120_initialise>
    3b5c:	83 e0       	ldi	r24, 0x03	; 3
        // Driver initialised OK
        // Always check what hih8120_initialise() returns
    }

    // // MH-Z19 initialization (default USART port is USART3)
    mh_z19_initialise(ser_USART3);
    3b5e:	0c 94 db 25 	jmp	0x4bb6	; 0x4bb6 <mh_z19_initialise>
    3b62:	08 95       	ret

00003b64 <initialiseSystem>:
/*-----------------------------------------------------------*/

void initialiseSystem()
{
    // Set output ports for leds used in the example
    DDRA |= _BV(DDA0) | _BV(DDA7);
    3b64:	81 b1       	in	r24, 0x01	; 1
    3b66:	81 68       	ori	r24, 0x81	; 129
    3b68:	81 b9       	out	0x01, r24	; 1

    // initialise trace driver
    trace_init();
    3b6a:	0e 94 69 02 	call	0x4d2	; 0x4d2 <trace_init>

    // Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
    stdio_initialise(ser_USART0);
    3b6e:	80 e0       	ldi	r24, 0x00	; 0
    3b70:	0e 94 fd 29 	call	0x53fa	; 0x53fa <stdio_initialise>
    // Let's create some tasks

    // initialiseDrivers - handles driver initailazation for modules HIH8120, MH-Z19
    initialiseDrivers();
    3b74:	f2 df       	rcall	.-28     	; 0x3b5a <initialiseDrivers>

    create_tasks_and_semaphores();
    3b76:	dc df       	rcall	.-72     	; 0x3b30 <create_tasks_and_semaphores>

    vData_handler_initialise();
    3b78:	16 dd       	rcall	.-1492   	; 0x35a6 <vData_handler_initialise>
    3b7a:	83 e3       	ldi	r24, 0x33	; 51

    // vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
    // Status Leds driver
    status_leds_initialise(51); // Priority 5 for internal task
    3b7c:	0e 94 4d 2c 	call	0x589a	; 0x589a <status_leds_initialise>
    3b80:	41 e0       	ldi	r20, 0x01	; 1
    // Initialise the LoRaWAN driver with down-link buffer
    downLinkMessageBufferHandle = xMessageBufferCreate(sizeof(lora_driver_payload_t) * 2); // Here I make room for two downlink messages in the message buffer
    3b82:	60 e0       	ldi	r22, 0x00	; 0
    3b84:	70 e0       	ldi	r23, 0x00	; 0
    3b86:	8c e2       	ldi	r24, 0x2C	; 44
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <xStreamBufferGenericCreate>
    3b8e:	90 93 e7 17 	sts	0x17E7, r25	; 0x8017e7 <downLinkMessageBufferHandle+0x1>
    3b92:	80 93 e6 17 	sts	0x17E6, r24	; 0x8017e6 <downLinkMessageBufferHandle>
    lora_driver_initialise(ser_USART1, downLinkMessageBufferHandle);                       // The parameter is the USART port the RN2483 module is connected to - in this case USART1 - here no message buffer for down-link messages are defined
    3b96:	bc 01       	movw	r22, r24
    3b98:	81 e0       	ldi	r24, 0x01	; 1
    3b9a:	66 d4       	rcall	.+2252   	; 0x4468 <lora_driver_initialise>
    // Create LoRaWAN task and start it up with priority 3
    lora_handler_initialise(50);
    3b9c:	82 e3       	ldi	r24, 0x32	; 50
    3b9e:	98 cf       	rjmp	.-208    	; 0x3ad0 <lora_handler_initialise>
    3ba0:	08 95       	ret

00003ba2 <main>:
    3ba2:	e0 df       	rcall	.-64     	; 0x3b64 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
    initialiseSystem(); // Must be done as the very first thing!!
    printf("Program started!!\n");
    3ba4:	85 e3       	ldi	r24, 0x35	; 53
    3ba6:	94 e0       	ldi	r25, 0x04	; 4
    3ba8:	0e 94 07 32 	call	0x640e	; 0x640e <puts>
    vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    3bac:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <vTaskStartScheduler>
    3bb0:	ff cf       	rjmp	.-2      	; 0x3bb0 <main+0xe>

00003bb2 <sensor_wakeUp>:
#include "../Headers/util.h"
#include "../Headers/SensorReading.h"

void sensor_wakeUp(void)
{
    hih8120_driverReturnCode_t wake_rc = hih8120_wakeup();
    3bb2:	e7 d2       	rcall	.+1486   	; 0x4182 <hih8120_wakeup>

	protected_printf("HIH8120 Wake up status: %c\n", hih8120_xReturnCodes_to_text(wake_rc));
    3bb4:	7a d0       	rcall	.+244    	; 0x3caa <hih8120_xReturnCodes_to_text>
    3bb6:	9f 93       	push	r25
    3bb8:	8f 93       	push	r24
    3bba:	87 e4       	ldi	r24, 0x47	; 71
    3bbc:	94 e0       	ldi	r25, 0x04	; 4
    3bbe:	9f 93       	push	r25
    3bc0:	8f 93       	push	r24
    3bc2:	86 d0       	rcall	.+268    	; 0x3cd0 <protected_printf>
    3bc4:	0f 90       	pop	r0
}
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	08 95       	ret

00003bce <sensor_getTemp>:
    3bce:	f1 df       	rcall	.-30     	; 0x3bb2 <sensor_wakeUp>
    3bd0:	2f ef       	ldi	r18, 0xFF	; 255
    3bd2:	8d ee       	ldi	r24, 0xED	; 237
    3bd4:	92 e0       	ldi	r25, 0x02	; 2
    3bd6:	21 50       	subi	r18, 0x01	; 1
    3bd8:	80 40       	sbci	r24, 0x00	; 0
    3bda:	90 40       	sbci	r25, 0x00	; 0
    3bdc:	e1 f7       	brne	.-8      	; 0x3bd6 <sensor_getTemp+0x8>
    3bde:	00 c0       	rjmp	.+0      	; 0x3be0 <sensor_getTemp+0x12>
float sensor_getTemp(void) {
	sensor_wakeUp();

	_delay_ms(60);

	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
    3be0:	00 00       	nop
    3be2:	e4 d2       	rcall	.+1480   	; 0x41ac <hih8120_measure>

	 while (!(hih8120_isReady())) {
    3be4:	09 c0       	rjmp	.+18     	; 0x3bf8 <sensor_getTemp+0x2a>
    3be6:	2f ef       	ldi	r18, 0xFF	; 255
    3be8:	8d ee       	ldi	r24, 0xED	; 237
    3bea:	92 e0       	ldi	r25, 0x02	; 2
    3bec:	21 50       	subi	r18, 0x01	; 1
    3bee:	80 40       	sbci	r24, 0x00	; 0
    3bf0:	90 40       	sbci	r25, 0x00	; 0
    3bf2:	e1 f7       	brne	.-8      	; 0x3bec <sensor_getTemp+0x1e>
    3bf4:	00 c0       	rjmp	.+0      	; 0x3bf6 <sensor_getTemp+0x28>
    3bf6:	00 00       	nop
    3bf8:	c1 d2       	rcall	.+1410   	; 0x417c <hih8120_isReady>
    3bfa:	88 23       	and	r24, r24

		 _delay_ms(60);
	 }
	 return( hih8120_getTemperature());
    3bfc:	a1 f3       	breq	.-24     	; 0x3be6 <sensor_getTemp+0x18>
    3bfe:	fb c2       	rjmp	.+1526   	; 0x41f6 <hih8120_getTemperature>
}
    3c00:	08 95       	ret

00003c02 <sensor_getHum>:


float sensor_getHum(void) {

	sensor_wakeUp();
    3c02:	d7 df       	rcall	.-82     	; 0x3bb2 <sensor_wakeUp>
    3c04:	2f ef       	ldi	r18, 0xFF	; 255
    3c06:	8d ee       	ldi	r24, 0xED	; 237
    3c08:	92 e0       	ldi	r25, 0x02	; 2
    3c0a:	21 50       	subi	r18, 0x01	; 1
    3c0c:	80 40       	sbci	r24, 0x00	; 0
    3c0e:	90 40       	sbci	r25, 0x00	; 0
    3c10:	e1 f7       	brne	.-8      	; 0x3c0a <sensor_getHum+0x8>
    3c12:	00 c0       	rjmp	.+0      	; 0x3c14 <sensor_getHum+0x12>

	_delay_ms(60);

	hih8120_driverReturnCode_t measure_rc = hih8120_measure();
    3c14:	00 00       	nop
    3c16:	ca d2       	rcall	.+1428   	; 0x41ac <hih8120_measure>

	while (!(hih8120_isReady())) {
    3c18:	09 c0       	rjmp	.+18     	; 0x3c2c <sensor_getHum+0x2a>
    3c1a:	2f ef       	ldi	r18, 0xFF	; 255
    3c1c:	8d ee       	ldi	r24, 0xED	; 237
    3c1e:	92 e0       	ldi	r25, 0x02	; 2
    3c20:	21 50       	subi	r18, 0x01	; 1
    3c22:	80 40       	sbci	r24, 0x00	; 0
    3c24:	90 40       	sbci	r25, 0x00	; 0
    3c26:	e1 f7       	brne	.-8      	; 0x3c20 <sensor_getHum+0x1e>
    3c28:	00 c0       	rjmp	.+0      	; 0x3c2a <sensor_getHum+0x28>
    3c2a:	00 00       	nop
    3c2c:	a7 d2       	rcall	.+1358   	; 0x417c <hih8120_isReady>
    3c2e:	88 23       	and	r24, r24

		_delay_ms(60);
	}
	return( hih8120_getHumidity());
    3c30:	a1 f3       	breq	.-24     	; 0x3c1a <sensor_getHum+0x18>
    3c32:	cd c2       	rjmp	.+1434   	; 0x41ce <hih8120_getHumidity>
}
    3c34:	08 95       	ret

00003c36 <sensor_getCo2>:

float sensor_getCo2(void){
    3c36:	cf 93       	push	r28
    3c38:	df 93       	push	r29
    3c3a:	1f 92       	push	r1
    3c3c:	1f 92       	push	r1
    3c3e:	cd b7       	in	r28, 0x3d	; 61
    3c40:	de b7       	in	r29, 0x3e	; 62
	
	mh_z19_returnCode_t co2_rc = mh_z19_takeMeassuring();
    3c42:	de d7       	rcall	.+4028   	; 0x4c00 <mh_z19_takeMeassuring>

	protected_printf("MH_Z19 Measure status: %c\n", mh_z19_xReturnCodes_to_text(co2_rc));
    3c44:	3c d0       	rcall	.+120    	; 0x3cbe <mh_z19_xReturnCodes_to_text>
    3c46:	9f 93       	push	r25
    3c48:	8f 93       	push	r24
    3c4a:	83 e6       	ldi	r24, 0x63	; 99
    3c4c:	94 e0       	ldi	r25, 0x04	; 4
    3c4e:	9f 93       	push	r25
    3c50:	8f 93       	push	r24
    3c52:	3e d0       	rcall	.+124    	; 0x3cd0 <protected_printf>

	uint16_t ppm;
	mh_z19_getCo2Ppm(&ppm);
    3c54:	ce 01       	movw	r24, r28
    3c56:	01 96       	adiw	r24, 0x01	; 1
    3c58:	0e 94 2f 26 	call	0x4c5e	; 0x4c5e <mh_z19_getCo2Ppm>
	  
	return (float)ppm;
    3c5c:	69 81       	ldd	r22, Y+1	; 0x01
    3c5e:	7a 81       	ldd	r23, Y+2	; 0x02
    3c60:	80 e0       	ldi	r24, 0x00	; 0
    3c62:	90 e0       	ldi	r25, 0x00	; 0
    3c64:	94 d0       	rcall	.+296    	; 0x3d8e <__floatunsisf>
}
    3c66:	0f 90       	pop	r0
    3c68:	0f 90       	pop	r0
    3c6a:	0f 90       	pop	r0
    3c6c:	0f 90       	pop	r0
    3c6e:	0f 90       	pop	r0
    3c70:	0f 90       	pop	r0
    3c72:	df 91       	pop	r29
    3c74:	cf 91       	pop	r28
    3c76:	08 95       	ret

00003c78 <validateDownlink>:
#include "../Headers/DownLinkValidator.h"
#include "../Headers/data_handler.h"

int validateDownlink(uint8_t hum_lower, uint8_t hum_upper, uint8_t co2_lower, uint8_t co2_upper, uint8_t temp_lower, uint8_t temp_upper, uint8_t id) {
    3c78:	cf 92       	push	r12
    3c7a:	ef 92       	push	r14
    3c7c:	cf 93       	push	r28
    3c7e:	c6 2f       	mov	r28, r22

    // Checks the current ID against the saved ID.

    if (id == xData_getId()) {
    3c80:	c2 db       	rcall	.-2172   	; 0x3406 <xData_getId>
    3c82:	8c 15       	cp	r24, r12
    3c84:	49 f0       	breq	.+18     	; 0x3c98 <validateDownlink+0x20>
    }

    // Checks Humidity. Settings cannot go below 0, as that's impossible and 
    // not above 95 as the CO2 driver would not function in that envoirment.

    if (hum_lower < 0 || hum_upper > 95) {
    3c86:	c0 36       	cpi	r28, 0x60	; 96
    3c88:	50 f4       	brcc	.+20     	; 0x3c9e <validateDownlink+0x26>
int validateDownlink(uint8_t hum_lower, uint8_t hum_upper, uint8_t co2_lower, uint8_t co2_upper, uint8_t temp_lower, uint8_t temp_upper, uint8_t id) {

    // Checks the current ID against the saved ID.

    if (id == xData_getId()) {
        return 0;
    3c8a:	81 e0       	ldi	r24, 0x01	; 1
    3c8c:	90 e0       	ldi	r25, 0x00	; 0
    3c8e:	22 e3       	ldi	r18, 0x32	; 50
    3c90:	2e 15       	cp	r18, r14
    3c92:	38 f4       	brcc	.+14     	; 0x3ca2 <validateDownlink+0x2a>
    3c94:	80 e0       	ldi	r24, 0x00	; 0
    3c96:	05 c0       	rjmp	.+10     	; 0x3ca2 <validateDownlink+0x2a>
    3c98:	80 e0       	ldi	r24, 0x00	; 0
    3c9a:	90 e0       	ldi	r25, 0x00	; 0
    3c9c:	02 c0       	rjmp	.+4      	; 0x3ca2 <validateDownlink+0x2a>

    // Checks Humidity. Settings cannot go below 0, as that's impossible and 
    // not above 95 as the CO2 driver would not function in that envoirment.

    if (hum_lower < 0 || hum_upper > 95) {
        return 0;
    3c9e:	80 e0       	ldi	r24, 0x00	; 0
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    if (temp_lower < -40 || temp_upper > 50) {
        return 0;
    }

    return 1;
    3ca2:	cf 91       	pop	r28
    3ca4:	ef 90       	pop	r14
    3ca6:	cf 90       	pop	r12
    3ca8:	08 95       	ret

00003caa <hih8120_xReturnCodes_to_text>:
	"HIH8120_DRIVER_NOT_INITIALISED", /**< Driver must be initialise before use */
	"HIH8120_TWI_BUSY" /**< The two wire/I2C interface is busy */
};

char* hih8120_xReturnCodes_to_text(hih8120_driverReturnCode_t returnMessage) {
    return hih8120_driverReturnCodes_text[returnMessage];
    3caa:	20 91 07 02 	lds	r18, 0x0207	; 0x800207 <hih8120_driverReturnCodes_text>
    3cae:	30 91 08 02 	lds	r19, 0x0208	; 0x800208 <hih8120_driverReturnCodes_text+0x1>
    3cb2:	f9 01       	movw	r30, r18
    3cb4:	e8 0f       	add	r30, r24
    3cb6:	f1 1d       	adc	r31, r1
    3cb8:	80 81       	ld	r24, Z
}
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	08 95       	ret

00003cbe <mh_z19_xReturnCodes_to_text>:

char* mh_z19_xReturnCodes_to_text(mh_z19_returnCode_t returnMessage) {
    return mh_z19_returnCode_text[returnMessage];
    3cbe:	e8 2f       	mov	r30, r24
    3cc0:	f0 e0       	ldi	r31, 0x00	; 0
    3cc2:	ee 0f       	add	r30, r30
    3cc4:	ff 1f       	adc	r31, r31
    3cc6:	e7 5f       	subi	r30, 0xF7	; 247
    3cc8:	fd 4f       	sbci	r31, 0xFD	; 253
}
    3cca:	80 81       	ld	r24, Z
    3ccc:	91 81       	ldd	r25, Z+1	; 0x01
    3cce:	08 95       	ret

00003cd0 <protected_printf>:

/* Mutex */
SemaphoreHandle_t printMutex = NULL;

void protected_printf(const char* _fmt, ...)
{
    3cd0:	ef 92       	push	r14
    3cd2:	ff 92       	push	r15
    3cd4:	0f 93       	push	r16
    3cd6:	1f 93       	push	r17
    3cd8:	cf 93       	push	r28
    3cda:	df 93       	push	r29
    3cdc:	cd b7       	in	r28, 0x3d	; 61
    3cde:	de b7       	in	r29, 0x3e	; 62
    3ce0:	8e 01       	movw	r16, r28
    3ce2:	06 5f       	subi	r16, 0xF6	; 246
    3ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ce6:	f8 01       	movw	r30, r16
    3ce8:	e1 90       	ld	r14, Z+
    3cea:	f1 90       	ld	r15, Z+
    3cec:	8f 01       	movw	r16, r30
	va_list _arg;
	va_start(_arg, _fmt);

	xSemaphoreTake(printMutex, portMAX_DELAY);
    3cee:	4f ef       	ldi	r20, 0xFF	; 255
    3cf0:	5f ef       	ldi	r21, 0xFF	; 255
    3cf2:	ba 01       	movw	r22, r20
    3cf4:	80 91 73 16 	lds	r24, 0x1673	; 0x801673 <printMutex>
    3cf8:	90 91 74 16 	lds	r25, 0x1674	; 0x801674 <printMutex+0x1>
    3cfc:	0e 94 14 08 	call	0x1028	; 0x1028 <xQueueSemaphoreTake>
	vprintf(_fmt, _arg);
    3d00:	b8 01       	movw	r22, r16
    3d02:	c7 01       	movw	r24, r14
    3d04:	0e 94 65 32 	call	0x64ca	; 0x64ca <vprintf>
	xSemaphoreGive(printMutex);
    3d08:	00 e0       	ldi	r16, 0x00	; 0
    3d0a:	20 e0       	ldi	r18, 0x00	; 0
    3d0c:	30 e0       	ldi	r19, 0x00	; 0
    3d0e:	a9 01       	movw	r20, r18
    3d10:	60 e0       	ldi	r22, 0x00	; 0
    3d12:	70 e0       	ldi	r23, 0x00	; 0
    3d14:	80 91 73 16 	lds	r24, 0x1673	; 0x801673 <printMutex>
    3d18:	90 91 74 16 	lds	r25, 0x1674	; 0x801674 <printMutex+0x1>
    3d1c:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	1f 91       	pop	r17
    3d26:	0f 91       	pop	r16
    3d28:	ff 90       	pop	r15
    3d2a:	ef 90       	pop	r14
    3d2c:	08 95       	ret

00003d2e <__cmpsf2>:
    3d2e:	6c d0       	rcall	.+216    	; 0x3e08 <__fp_cmp>
    3d30:	08 f4       	brcc	.+2      	; 0x3d34 <__cmpsf2+0x6>
    3d32:	81 e0       	ldi	r24, 0x01	; 1
    3d34:	08 95       	ret

00003d36 <__fixunssfsi>:
    3d36:	94 d0       	rcall	.+296    	; 0x3e60 <__fp_splitA>
    3d38:	88 f0       	brcs	.+34     	; 0x3d5c <__fixunssfsi+0x26>
    3d3a:	9f 57       	subi	r25, 0x7F	; 127
    3d3c:	90 f0       	brcs	.+36     	; 0x3d62 <__fixunssfsi+0x2c>
    3d3e:	b9 2f       	mov	r27, r25
    3d40:	99 27       	eor	r25, r25
    3d42:	b7 51       	subi	r27, 0x17	; 23
    3d44:	a0 f0       	brcs	.+40     	; 0x3d6e <__fixunssfsi+0x38>
    3d46:	d1 f0       	breq	.+52     	; 0x3d7c <__fixunssfsi+0x46>
    3d48:	66 0f       	add	r22, r22
    3d4a:	77 1f       	adc	r23, r23
    3d4c:	88 1f       	adc	r24, r24
    3d4e:	99 1f       	adc	r25, r25
    3d50:	1a f0       	brmi	.+6      	; 0x3d58 <__fixunssfsi+0x22>
    3d52:	ba 95       	dec	r27
    3d54:	c9 f7       	brne	.-14     	; 0x3d48 <__fixunssfsi+0x12>
    3d56:	12 c0       	rjmp	.+36     	; 0x3d7c <__fixunssfsi+0x46>
    3d58:	b1 30       	cpi	r27, 0x01	; 1
    3d5a:	81 f0       	breq	.+32     	; 0x3d7c <__fixunssfsi+0x46>
    3d5c:	9b d0       	rcall	.+310    	; 0x3e94 <__fp_zero>
    3d5e:	b1 e0       	ldi	r27, 0x01	; 1
    3d60:	08 95       	ret
    3d62:	98 c0       	rjmp	.+304    	; 0x3e94 <__fp_zero>
    3d64:	67 2f       	mov	r22, r23
    3d66:	78 2f       	mov	r23, r24
    3d68:	88 27       	eor	r24, r24
    3d6a:	b8 5f       	subi	r27, 0xF8	; 248
    3d6c:	39 f0       	breq	.+14     	; 0x3d7c <__fixunssfsi+0x46>
    3d6e:	b9 3f       	cpi	r27, 0xF9	; 249
    3d70:	cc f3       	brlt	.-14     	; 0x3d64 <__fixunssfsi+0x2e>
    3d72:	86 95       	lsr	r24
    3d74:	77 95       	ror	r23
    3d76:	67 95       	ror	r22
    3d78:	b3 95       	inc	r27
    3d7a:	d9 f7       	brne	.-10     	; 0x3d72 <__fixunssfsi+0x3c>
    3d7c:	3e f4       	brtc	.+14     	; 0x3d8c <__fixunssfsi+0x56>
    3d7e:	90 95       	com	r25
    3d80:	80 95       	com	r24
    3d82:	70 95       	com	r23
    3d84:	61 95       	neg	r22
    3d86:	7f 4f       	sbci	r23, 0xFF	; 255
    3d88:	8f 4f       	sbci	r24, 0xFF	; 255
    3d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3d8c:	08 95       	ret

00003d8e <__floatunsisf>:
    3d8e:	e8 94       	clt
    3d90:	09 c0       	rjmp	.+18     	; 0x3da4 <__floatsisf+0x12>

00003d92 <__floatsisf>:
    3d92:	97 fb       	bst	r25, 7
    3d94:	3e f4       	brtc	.+14     	; 0x3da4 <__floatsisf+0x12>
    3d96:	90 95       	com	r25
    3d98:	80 95       	com	r24
    3d9a:	70 95       	com	r23
    3d9c:	61 95       	neg	r22
    3d9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3da0:	8f 4f       	sbci	r24, 0xFF	; 255
    3da2:	9f 4f       	sbci	r25, 0xFF	; 255
    3da4:	99 23       	and	r25, r25
    3da6:	a9 f0       	breq	.+42     	; 0x3dd2 <__floatsisf+0x40>
    3da8:	f9 2f       	mov	r31, r25
    3daa:	96 e9       	ldi	r25, 0x96	; 150
    3dac:	bb 27       	eor	r27, r27
    3dae:	93 95       	inc	r25
    3db0:	f6 95       	lsr	r31
    3db2:	87 95       	ror	r24
    3db4:	77 95       	ror	r23
    3db6:	67 95       	ror	r22
    3db8:	b7 95       	ror	r27
    3dba:	f1 11       	cpse	r31, r1
    3dbc:	f8 cf       	rjmp	.-16     	; 0x3dae <__floatsisf+0x1c>
    3dbe:	fa f4       	brpl	.+62     	; 0x3dfe <__floatsisf+0x6c>
    3dc0:	bb 0f       	add	r27, r27
    3dc2:	11 f4       	brne	.+4      	; 0x3dc8 <__floatsisf+0x36>
    3dc4:	60 ff       	sbrs	r22, 0
    3dc6:	1b c0       	rjmp	.+54     	; 0x3dfe <__floatsisf+0x6c>
    3dc8:	6f 5f       	subi	r22, 0xFF	; 255
    3dca:	7f 4f       	sbci	r23, 0xFF	; 255
    3dcc:	8f 4f       	sbci	r24, 0xFF	; 255
    3dce:	9f 4f       	sbci	r25, 0xFF	; 255
    3dd0:	16 c0       	rjmp	.+44     	; 0x3dfe <__floatsisf+0x6c>
    3dd2:	88 23       	and	r24, r24
    3dd4:	11 f0       	breq	.+4      	; 0x3dda <__floatsisf+0x48>
    3dd6:	96 e9       	ldi	r25, 0x96	; 150
    3dd8:	11 c0       	rjmp	.+34     	; 0x3dfc <__floatsisf+0x6a>
    3dda:	77 23       	and	r23, r23
    3ddc:	21 f0       	breq	.+8      	; 0x3de6 <__floatsisf+0x54>
    3dde:	9e e8       	ldi	r25, 0x8E	; 142
    3de0:	87 2f       	mov	r24, r23
    3de2:	76 2f       	mov	r23, r22
    3de4:	05 c0       	rjmp	.+10     	; 0x3df0 <__floatsisf+0x5e>
    3de6:	66 23       	and	r22, r22
    3de8:	71 f0       	breq	.+28     	; 0x3e06 <__floatsisf+0x74>
    3dea:	96 e8       	ldi	r25, 0x86	; 134
    3dec:	86 2f       	mov	r24, r22
    3dee:	70 e0       	ldi	r23, 0x00	; 0
    3df0:	60 e0       	ldi	r22, 0x00	; 0
    3df2:	2a f0       	brmi	.+10     	; 0x3dfe <__floatsisf+0x6c>
    3df4:	9a 95       	dec	r25
    3df6:	66 0f       	add	r22, r22
    3df8:	77 1f       	adc	r23, r23
    3dfa:	88 1f       	adc	r24, r24
    3dfc:	da f7       	brpl	.-10     	; 0x3df4 <__floatsisf+0x62>
    3dfe:	88 0f       	add	r24, r24
    3e00:	96 95       	lsr	r25
    3e02:	87 95       	ror	r24
    3e04:	97 f9       	bld	r25, 7
    3e06:	08 95       	ret

00003e08 <__fp_cmp>:
    3e08:	99 0f       	add	r25, r25
    3e0a:	00 08       	sbc	r0, r0
    3e0c:	55 0f       	add	r21, r21
    3e0e:	aa 0b       	sbc	r26, r26
    3e10:	e0 e8       	ldi	r30, 0x80	; 128
    3e12:	fe ef       	ldi	r31, 0xFE	; 254
    3e14:	16 16       	cp	r1, r22
    3e16:	17 06       	cpc	r1, r23
    3e18:	e8 07       	cpc	r30, r24
    3e1a:	f9 07       	cpc	r31, r25
    3e1c:	c0 f0       	brcs	.+48     	; 0x3e4e <__fp_cmp+0x46>
    3e1e:	12 16       	cp	r1, r18
    3e20:	13 06       	cpc	r1, r19
    3e22:	e4 07       	cpc	r30, r20
    3e24:	f5 07       	cpc	r31, r21
    3e26:	98 f0       	brcs	.+38     	; 0x3e4e <__fp_cmp+0x46>
    3e28:	62 1b       	sub	r22, r18
    3e2a:	73 0b       	sbc	r23, r19
    3e2c:	84 0b       	sbc	r24, r20
    3e2e:	95 0b       	sbc	r25, r21
    3e30:	39 f4       	brne	.+14     	; 0x3e40 <__fp_cmp+0x38>
    3e32:	0a 26       	eor	r0, r26
    3e34:	61 f0       	breq	.+24     	; 0x3e4e <__fp_cmp+0x46>
    3e36:	23 2b       	or	r18, r19
    3e38:	24 2b       	or	r18, r20
    3e3a:	25 2b       	or	r18, r21
    3e3c:	21 f4       	brne	.+8      	; 0x3e46 <__fp_cmp+0x3e>
    3e3e:	08 95       	ret
    3e40:	0a 26       	eor	r0, r26
    3e42:	09 f4       	brne	.+2      	; 0x3e46 <__fp_cmp+0x3e>
    3e44:	a1 40       	sbci	r26, 0x01	; 1
    3e46:	a6 95       	lsr	r26
    3e48:	8f ef       	ldi	r24, 0xFF	; 255
    3e4a:	81 1d       	adc	r24, r1
    3e4c:	81 1d       	adc	r24, r1
    3e4e:	08 95       	ret

00003e50 <__fp_split3>:
    3e50:	57 fd       	sbrc	r21, 7
    3e52:	90 58       	subi	r25, 0x80	; 128
    3e54:	44 0f       	add	r20, r20
    3e56:	55 1f       	adc	r21, r21
    3e58:	59 f0       	breq	.+22     	; 0x3e70 <__fp_splitA+0x10>
    3e5a:	5f 3f       	cpi	r21, 0xFF	; 255
    3e5c:	71 f0       	breq	.+28     	; 0x3e7a <__fp_splitA+0x1a>
    3e5e:	47 95       	ror	r20

00003e60 <__fp_splitA>:
    3e60:	88 0f       	add	r24, r24
    3e62:	97 fb       	bst	r25, 7
    3e64:	99 1f       	adc	r25, r25
    3e66:	61 f0       	breq	.+24     	; 0x3e80 <__fp_splitA+0x20>
    3e68:	9f 3f       	cpi	r25, 0xFF	; 255
    3e6a:	79 f0       	breq	.+30     	; 0x3e8a <__fp_splitA+0x2a>
    3e6c:	87 95       	ror	r24
    3e6e:	08 95       	ret
    3e70:	12 16       	cp	r1, r18
    3e72:	13 06       	cpc	r1, r19
    3e74:	14 06       	cpc	r1, r20
    3e76:	55 1f       	adc	r21, r21
    3e78:	f2 cf       	rjmp	.-28     	; 0x3e5e <__fp_split3+0xe>
    3e7a:	46 95       	lsr	r20
    3e7c:	f1 df       	rcall	.-30     	; 0x3e60 <__fp_splitA>
    3e7e:	08 c0       	rjmp	.+16     	; 0x3e90 <__fp_splitA+0x30>
    3e80:	16 16       	cp	r1, r22
    3e82:	17 06       	cpc	r1, r23
    3e84:	18 06       	cpc	r1, r24
    3e86:	99 1f       	adc	r25, r25
    3e88:	f1 cf       	rjmp	.-30     	; 0x3e6c <__fp_splitA+0xc>
    3e8a:	86 95       	lsr	r24
    3e8c:	71 05       	cpc	r23, r1
    3e8e:	61 05       	cpc	r22, r1
    3e90:	08 94       	sec
    3e92:	08 95       	ret

00003e94 <__fp_zero>:
    3e94:	e8 94       	clt

00003e96 <__fp_szero>:
    3e96:	bb 27       	eor	r27, r27
    3e98:	66 27       	eor	r22, r22
    3e9a:	77 27       	eor	r23, r23
    3e9c:	cb 01       	movw	r24, r22
    3e9e:	97 f9       	bld	r25, 7
    3ea0:	08 95       	ret

00003ea2 <__gesf2>:
    3ea2:	b2 df       	rcall	.-156    	; 0x3e08 <__fp_cmp>
    3ea4:	08 f4       	brcc	.+2      	; 0x3ea8 <__gesf2+0x6>
    3ea6:	8f ef       	ldi	r24, 0xFF	; 255
    3ea8:	08 95       	ret

00003eaa <display_7seg_displayHex>:
    3eaa:	cf 93       	push	r28
    3eac:	df 93       	push	r29
    3eae:	ec 01       	movw	r28, r24
    3eb0:	fc 01       	movw	r30, r24
    3eb2:	01 90       	ld	r0, Z+
    3eb4:	00 20       	and	r0, r0
    3eb6:	e9 f7       	brne	.-6      	; 0x3eb2 <display_7seg_displayHex+0x8>
    3eb8:	31 97       	sbiw	r30, 0x01	; 1
    3eba:	e8 1b       	sub	r30, r24
    3ebc:	f9 0b       	sbc	r31, r25
    3ebe:	e0 93 79 16 	sts	0x1679, r30	; 0x801679 <_hexStringLength>
    3ec2:	e1 32       	cpi	r30, 0x21	; 33
    3ec4:	08 f4       	brcc	.+2      	; 0x3ec8 <display_7seg_displayHex+0x1e>
    3ec6:	7d c0       	rjmp	.+250    	; 0x3fc2 <display_7seg_displayHex+0x118>
    3ec8:	18 a2       	std	Y+32, r1	; 0x20
    3eca:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <strupr>
    3ece:	80 91 79 16 	lds	r24, 0x1679	; 0x801679 <_hexStringLength>
    3ed2:	85 30       	cpi	r24, 0x05	; 5
    3ed4:	e0 f4       	brcc	.+56     	; 0x3f0e <display_7seg_displayHex+0x64>
    3ed6:	44 e0       	ldi	r20, 0x04	; 4
    3ed8:	50 e0       	ldi	r21, 0x00	; 0
    3eda:	48 1b       	sub	r20, r24
    3edc:	51 09       	sbc	r21, r1
    3ede:	14 16       	cp	r1, r20
    3ee0:	15 06       	cpc	r1, r21
    3ee2:	74 f4       	brge	.+28     	; 0x3f00 <display_7seg_displayHex+0x56>
    3ee4:	80 e0       	ldi	r24, 0x00	; 0
    3ee6:	90 e0       	ldi	r25, 0x00	; 0
    3ee8:	20 e0       	ldi	r18, 0x00	; 0
    3eea:	2f 5f       	subi	r18, 0xFF	; 255
    3eec:	fc 01       	movw	r30, r24
    3eee:	e6 58       	subi	r30, 0x86	; 134
    3ef0:	f9 4e       	sbci	r31, 0xE9	; 233
    3ef2:	10 82       	st	Z, r1
    3ef4:	82 2f       	mov	r24, r18
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	84 17       	cp	r24, r20
    3efa:	95 07       	cpc	r25, r21
    3efc:	b4 f3       	brlt	.-20     	; 0x3eea <display_7seg_displayHex+0x40>
    3efe:	01 c0       	rjmp	.+2      	; 0x3f02 <display_7seg_displayHex+0x58>
    3f00:	20 e0       	ldi	r18, 0x00	; 0
    3f02:	10 92 76 16 	sts	0x1676, r1	; 0x801676 <_maxHexSegmentindex>
    3f06:	91 e0       	ldi	r25, 0x01	; 1
    3f08:	92 0f       	add	r25, r18
    3f0a:	20 e0       	ldi	r18, 0x00	; 0
    3f0c:	2e c0       	rjmp	.+92     	; 0x3f6a <display_7seg_displayHex+0xc0>
    3f0e:	ea e7       	ldi	r30, 0x7A	; 122
    3f10:	f6 e1       	ldi	r31, 0x16	; 22
    3f12:	10 82       	st	Z, r1
    3f14:	11 82       	std	Z+1, r1	; 0x01
    3f16:	12 82       	std	Z+2, r1	; 0x02
    3f18:	23 e0       	ldi	r18, 0x03	; 3
    3f1a:	f5 cf       	rjmp	.-22     	; 0x3f06 <display_7seg_displayHex+0x5c>
    3f1c:	fe 01       	movw	r30, r28
    3f1e:	e4 0f       	add	r30, r20
    3f20:	f5 1f       	adc	r31, r21
    3f22:	a0 81       	ld	r26, Z
    3f24:	30 ed       	ldi	r19, 0xD0	; 208
    3f26:	3a 0f       	add	r19, r26
    3f28:	3a 30       	cpi	r19, 0x0A	; 10
    3f2a:	50 f4       	brcc	.+20     	; 0x3f40 <display_7seg_displayHex+0x96>
    3f2c:	e8 2f       	mov	r30, r24
    3f2e:	f0 e0       	ldi	r31, 0x00	; 0
    3f30:	e6 58       	subi	r30, 0x86	; 134
    3f32:	f9 4e       	sbci	r31, 0xE9	; 233
    3f34:	b0 e0       	ldi	r27, 0x00	; 0
    3f36:	a7 55       	subi	r26, 0x57	; 87
    3f38:	bb 4f       	sbci	r27, 0xFB	; 251
    3f3a:	8c 91       	ld	r24, X
    3f3c:	80 83       	st	Z, r24
    3f3e:	13 c0       	rjmp	.+38     	; 0x3f66 <display_7seg_displayHex+0xbc>
    3f40:	3f eb       	ldi	r19, 0xBF	; 191
    3f42:	3a 0f       	add	r19, r26
    3f44:	36 30       	cpi	r19, 0x06	; 6
    3f46:	50 f4       	brcc	.+20     	; 0x3f5c <display_7seg_displayHex+0xb2>
    3f48:	e8 2f       	mov	r30, r24
    3f4a:	f0 e0       	ldi	r31, 0x00	; 0
    3f4c:	e6 58       	subi	r30, 0x86	; 134
    3f4e:	f9 4e       	sbci	r31, 0xE9	; 233
    3f50:	b0 e0       	ldi	r27, 0x00	; 0
    3f52:	ae 55       	subi	r26, 0x5E	; 94
    3f54:	bb 4f       	sbci	r27, 0xFB	; 251
    3f56:	8c 91       	ld	r24, X
    3f58:	80 83       	st	Z, r24
    3f5a:	05 c0       	rjmp	.+10     	; 0x3f66 <display_7seg_displayHex+0xbc>
    3f5c:	e8 2f       	mov	r30, r24
    3f5e:	f0 e0       	ldi	r31, 0x00	; 0
    3f60:	e6 58       	subi	r30, 0x86	; 134
    3f62:	f9 4e       	sbci	r31, 0xE9	; 233
    3f64:	10 82       	st	Z, r1
    3f66:	2f 5f       	subi	r18, 0xFF	; 255
    3f68:	9f 5f       	subi	r25, 0xFF	; 255
    3f6a:	8f ef       	ldi	r24, 0xFF	; 255
    3f6c:	89 0f       	add	r24, r25
    3f6e:	42 2f       	mov	r20, r18
    3f70:	50 e0       	ldi	r21, 0x00	; 0
    3f72:	fe 01       	movw	r30, r28
    3f74:	01 90       	ld	r0, Z+
    3f76:	00 20       	and	r0, r0
    3f78:	e9 f7       	brne	.-6      	; 0x3f74 <display_7seg_displayHex+0xca>
    3f7a:	31 97       	sbiw	r30, 0x01	; 1
    3f7c:	ec 1b       	sub	r30, r28
    3f7e:	fd 0b       	sbc	r31, r29
    3f80:	4e 17       	cp	r20, r30
    3f82:	5f 07       	cpc	r21, r31
    3f84:	58 f2       	brcs	.-106    	; 0x3f1c <display_7seg_displayHex+0x72>
    3f86:	20 91 79 16 	lds	r18, 0x1679	; 0x801679 <_hexStringLength>
    3f8a:	25 30       	cpi	r18, 0x05	; 5
    3f8c:	10 f1       	brcs	.+68     	; 0x3fd2 <display_7seg_displayHex+0x128>
    3f8e:	e8 2f       	mov	r30, r24
    3f90:	f0 e0       	ldi	r31, 0x00	; 0
    3f92:	e6 58       	subi	r30, 0x86	; 134
    3f94:	f9 4e       	sbci	r31, 0xE9	; 233
    3f96:	10 82       	st	Z, r1
    3f98:	e9 2f       	mov	r30, r25
    3f9a:	f0 e0       	ldi	r31, 0x00	; 0
    3f9c:	e6 58       	subi	r30, 0x86	; 134
    3f9e:	f9 4e       	sbci	r31, 0xE9	; 233
    3fa0:	10 82       	st	Z, r1
    3fa2:	e1 e0       	ldi	r30, 0x01	; 1
    3fa4:	e9 0f       	add	r30, r25
    3fa6:	f0 e0       	ldi	r31, 0x00	; 0
    3fa8:	e6 58       	subi	r30, 0x86	; 134
    3faa:	f9 4e       	sbci	r31, 0xE9	; 233
    3fac:	10 82       	st	Z, r1
    3fae:	9e 5f       	subi	r25, 0xFE	; 254
    3fb0:	90 93 76 16 	sts	0x1676, r25	; 0x801676 <_maxHexSegmentindex>
    3fb4:	10 92 75 16 	sts	0x1675, r1	; 0x801675 <_scrollIndex>
    3fb8:	10 92 78 16 	sts	0x1678, r1	; 0x801678 <_intCounter+0x1>
    3fbc:	10 92 77 16 	sts	0x1677, r1	; 0x801677 <_intCounter>
    3fc0:	08 c0       	rjmp	.+16     	; 0x3fd2 <display_7seg_displayHex+0x128>
    3fc2:	0e 94 ea 31 	call	0x63d4	; 0x63d4 <strupr>
    3fc6:	80 91 79 16 	lds	r24, 0x1679	; 0x801679 <_hexStringLength>
    3fca:	85 30       	cpi	r24, 0x05	; 5
    3fcc:	08 f4       	brcc	.+2      	; 0x3fd0 <display_7seg_displayHex+0x126>
    3fce:	83 cf       	rjmp	.-250    	; 0x3ed6 <display_7seg_displayHex+0x2c>
    3fd0:	9e cf       	rjmp	.-196    	; 0x3f0e <display_7seg_displayHex+0x64>
    3fd2:	e0 ea       	ldi	r30, 0xA0	; 160
    3fd4:	f6 e1       	ldi	r31, 0x16	; 22
    3fd6:	aa e7       	ldi	r26, 0x7A	; 122
    3fd8:	b6 e1       	ldi	r27, 0x16	; 22
    3fda:	8c 91       	ld	r24, X
    3fdc:	80 83       	st	Z, r24
    3fde:	11 96       	adiw	r26, 0x01	; 1
    3fe0:	8c 91       	ld	r24, X
    3fe2:	11 97       	sbiw	r26, 0x01	; 1
    3fe4:	81 83       	std	Z+1, r24	; 0x01
    3fe6:	12 96       	adiw	r26, 0x02	; 2
    3fe8:	8c 91       	ld	r24, X
    3fea:	12 97       	sbiw	r26, 0x02	; 2
    3fec:	82 83       	std	Z+2, r24	; 0x02
    3fee:	13 96       	adiw	r26, 0x03	; 3
    3ff0:	8c 91       	ld	r24, X
    3ff2:	83 83       	std	Z+3, r24	; 0x03
    3ff4:	df 91       	pop	r29
    3ff6:	cf 91       	pop	r28
    3ff8:	08 95       	ret

00003ffa <display_7seg_powerUp>:
    3ffa:	85 b5       	in	r24, 0x25	; 37
    3ffc:	85 60       	ori	r24, 0x05	; 5
    3ffe:	85 bd       	out	0x25, r24	; 37
    4000:	08 95       	ret

00004002 <display_7seg_powerDown>:
    4002:	85 b5       	in	r24, 0x25	; 37
    4004:	88 7f       	andi	r24, 0xF8	; 248
    4006:	85 bd       	out	0x25, r24	; 37
    4008:	81 b3       	in	r24, 0x11	; 17
    400a:	8f 60       	ori	r24, 0x0F	; 15
    400c:	81 bb       	out	0x11, r24	; 17
    400e:	08 95       	ret

00004010 <__vector_21>:
    4010:	1f 92       	push	r1
    4012:	0f 92       	push	r0
    4014:	0f b6       	in	r0, 0x3f	; 63
    4016:	0f 92       	push	r0
    4018:	11 24       	eor	r1, r1
    401a:	0b b6       	in	r0, 0x3b	; 59
    401c:	0f 92       	push	r0
    401e:	2f 93       	push	r18
    4020:	3f 93       	push	r19
    4022:	4f 93       	push	r20
    4024:	5f 93       	push	r21
    4026:	6f 93       	push	r22
    4028:	7f 93       	push	r23
    402a:	8f 93       	push	r24
    402c:	9f 93       	push	r25
    402e:	af 93       	push	r26
    4030:	bf 93       	push	r27
    4032:	ef 93       	push	r30
    4034:	ff 93       	push	r31
    4036:	80 91 76 16 	lds	r24, 0x1676	; 0x801676 <_maxHexSegmentindex>
    403a:	88 23       	and	r24, r24
    403c:	69 f1       	breq	.+90     	; 0x4098 <__vector_21+0x88>
    403e:	20 91 77 16 	lds	r18, 0x1677	; 0x801677 <_intCounter>
    4042:	30 91 78 16 	lds	r19, 0x1678	; 0x801678 <_intCounter+0x1>
    4046:	25 3f       	cpi	r18, 0xF5	; 245
    4048:	91 e0       	ldi	r25, 0x01	; 1
    404a:	39 07       	cpc	r19, r25
    404c:	38 f4       	brcc	.+14     	; 0x405c <__vector_21+0x4c>
    404e:	2f 5f       	subi	r18, 0xFF	; 255
    4050:	3f 4f       	sbci	r19, 0xFF	; 255
    4052:	30 93 78 16 	sts	0x1678, r19	; 0x801678 <_intCounter+0x1>
    4056:	20 93 77 16 	sts	0x1677, r18	; 0x801677 <_intCounter>
    405a:	1e c0       	rjmp	.+60     	; 0x4098 <__vector_21+0x88>
    405c:	10 92 78 16 	sts	0x1678, r1	; 0x801678 <_intCounter+0x1>
    4060:	10 92 77 16 	sts	0x1677, r1	; 0x801677 <_intCounter>
    4064:	e0 91 75 16 	lds	r30, 0x1675	; 0x801675 <_scrollIndex>
    4068:	2e 2f       	mov	r18, r30
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	04 97       	sbiw	r24, 0x04	; 4
    4070:	28 17       	cp	r18, r24
    4072:	39 07       	cpc	r19, r25
    4074:	14 f4       	brge	.+4      	; 0x407a <__vector_21+0x6a>
    4076:	ef 5f       	subi	r30, 0xFF	; 255
    4078:	01 c0       	rjmp	.+2      	; 0x407c <__vector_21+0x6c>
    407a:	e0 e0       	ldi	r30, 0x00	; 0
    407c:	e0 93 75 16 	sts	0x1675, r30	; 0x801675 <_scrollIndex>
    4080:	f0 e0       	ldi	r31, 0x00	; 0
    4082:	e6 58       	subi	r30, 0x86	; 134
    4084:	f9 4e       	sbci	r31, 0xE9	; 233
    4086:	a0 ea       	ldi	r26, 0xA0	; 160
    4088:	b6 e1       	ldi	r27, 0x16	; 22
    408a:	24 ea       	ldi	r18, 0xA4	; 164
    408c:	36 e1       	ldi	r19, 0x16	; 22
    408e:	81 91       	ld	r24, Z+
    4090:	8d 93       	st	X+, r24
    4092:	a2 17       	cp	r26, r18
    4094:	b3 07       	cpc	r27, r19
    4096:	d9 f7       	brne	.-10     	; 0x408e <__vector_21+0x7e>
    4098:	80 91 a4 16 	lds	r24, 0x16A4	; 0x8016a4 <_digitNo>
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	01 96       	adiw	r24, 0x01	; 1
    40a0:	83 70       	andi	r24, 0x03	; 3
    40a2:	90 78       	andi	r25, 0x80	; 128
    40a4:	99 23       	and	r25, r25
    40a6:	24 f4       	brge	.+8      	; 0x40b0 <__vector_21+0xa0>
    40a8:	01 97       	sbiw	r24, 0x01	; 1
    40aa:	8c 6f       	ori	r24, 0xFC	; 252
    40ac:	9f 6f       	ori	r25, 0xFF	; 255
    40ae:	01 96       	adiw	r24, 0x01	; 1
    40b0:	80 93 a4 16 	sts	0x16A4, r24	; 0x8016a4 <_digitNo>
    40b4:	99 27       	eor	r25, r25
    40b6:	fc 01       	movw	r30, r24
    40b8:	e0 56       	subi	r30, 0x60	; 96
    40ba:	f9 4e       	sbci	r31, 0xE9	; 233
    40bc:	60 81       	ld	r22, Z
    40be:	60 95       	com	r22
    40c0:	80 91 a5 16 	lds	r24, 0x16A5	; 0x8016a5 <_spi>
    40c4:	90 91 a6 16 	lds	r25, 0x16A6	; 0x8016a6 <_spi+0x1>
    40c8:	0e 94 5f 2a 	call	0x54be	; 0x54be <spi_sendByte>
    40cc:	ff 91       	pop	r31
    40ce:	ef 91       	pop	r30
    40d0:	bf 91       	pop	r27
    40d2:	af 91       	pop	r26
    40d4:	9f 91       	pop	r25
    40d6:	8f 91       	pop	r24
    40d8:	7f 91       	pop	r23
    40da:	6f 91       	pop	r22
    40dc:	5f 91       	pop	r21
    40de:	4f 91       	pop	r20
    40e0:	3f 91       	pop	r19
    40e2:	2f 91       	pop	r18
    40e4:	0f 90       	pop	r0
    40e6:	0b be       	out	0x3b, r0	; 59
    40e8:	0f 90       	pop	r0
    40ea:	0f be       	out	0x3f, r0	; 63
    40ec:	0f 90       	pop	r0
    40ee:	1f 90       	pop	r1
    40f0:	18 95       	reti

000040f2 <_hihTwiCallback>:
    40f2:	65 30       	cpi	r22, 0x05	; 5
    40f4:	f1 f4       	brne	.+60     	; 0x4132 <_hihTwiCallback+0x40>
    40f6:	fa 01       	movw	r30, r20
    40f8:	80 81       	ld	r24, Z
    40fa:	8f 73       	andi	r24, 0x3F	; 63
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	98 2f       	mov	r25, r24
    4100:	88 27       	eor	r24, r24
    4102:	21 81       	ldd	r18, Z+1	; 0x01
    4104:	82 2b       	or	r24, r18
    4106:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <_hum+0x1>
    410a:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_hum>
    410e:	82 81       	ldd	r24, Z+2	; 0x02
    4110:	f0 e4       	ldi	r31, 0x40	; 64
    4112:	8f 9f       	mul	r24, r31
    4114:	c0 01       	movw	r24, r0
    4116:	11 24       	eor	r1, r1
    4118:	fa 01       	movw	r30, r20
    411a:	23 81       	ldd	r18, Z+3	; 0x03
    411c:	26 95       	lsr	r18
    411e:	26 95       	lsr	r18
    4120:	82 2b       	or	r24, r18
    4122:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <_temp+0x1>
    4126:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <_temp>
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	80 93 a7 16 	sts	0x16A7, r24	; 0x8016a7 <_measuringIsReady>
    4130:	08 95       	ret
    4132:	64 30       	cpi	r22, 0x04	; 4
    4134:	51 f0       	breq	.+20     	; 0x414a <_hihTwiCallback+0x58>
    4136:	80 e0       	ldi	r24, 0x00	; 0
    4138:	90 e4       	ldi	r25, 0x40	; 64
    413a:	90 93 12 02 	sts	0x0212, r25	; 0x800212 <_temp+0x1>
    413e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <_temp>
    4142:	90 93 14 02 	sts	0x0214, r25	; 0x800214 <_hum+0x1>
    4146:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <_hum>
    414a:	08 95       	ret

0000414c <hih8120_initialise>:
    414c:	0f 93       	push	r16
    414e:	1f 93       	push	r17
    4150:	09 e7       	ldi	r16, 0x79	; 121
    4152:	10 e2       	ldi	r17, 0x20	; 32
    4154:	20 e0       	ldi	r18, 0x00	; 0
    4156:	34 e2       	ldi	r19, 0x24	; 36
    4158:	44 ef       	ldi	r20, 0xF4	; 244
    415a:	50 e0       	ldi	r21, 0x00	; 0
    415c:	60 e0       	ldi	r22, 0x00	; 0
    415e:	87 e2       	ldi	r24, 0x27	; 39
    4160:	0e 94 33 2d 	call	0x5a66	; 0x5a66 <twiCreate>
    4164:	90 93 a9 16 	sts	0x16A9, r25	; 0x8016a9 <_hih8120Handler+0x1>
    4168:	80 93 a8 16 	sts	0x16A8, r24	; 0x8016a8 <_hih8120Handler>
    416c:	21 e0       	ldi	r18, 0x01	; 1
    416e:	89 2b       	or	r24, r25
    4170:	09 f0       	breq	.+2      	; 0x4174 <hih8120_initialise+0x28>
    4172:	20 e0       	ldi	r18, 0x00	; 0
    4174:	82 2f       	mov	r24, r18
    4176:	1f 91       	pop	r17
    4178:	0f 91       	pop	r16
    417a:	08 95       	ret

0000417c <hih8120_isReady>:
    417c:	80 91 a7 16 	lds	r24, 0x16A7	; 0x8016a7 <_measuringIsReady>
    4180:	08 95       	ret

00004182 <hih8120_wakeup>:
    4182:	80 91 a8 16 	lds	r24, 0x16A8	; 0x8016a8 <_hih8120Handler>
    4186:	90 91 a9 16 	lds	r25, 0x16A9	; 0x8016a9 <_hih8120Handler+0x1>
    418a:	00 97       	sbiw	r24, 0x00	; 0
    418c:	59 f0       	breq	.+22     	; 0x41a4 <hih8120_wakeup+0x22>
    418e:	40 e0       	ldi	r20, 0x00	; 0
    4190:	60 e0       	ldi	r22, 0x00	; 0
    4192:	70 e0       	ldi	r23, 0x00	; 0
    4194:	0e 94 84 2d 	call	0x5b08	; 0x5b08 <twiTransmit>
    4198:	84 30       	cpi	r24, 0x04	; 4
    419a:	31 f4       	brne	.+12     	; 0x41a8 <hih8120_wakeup+0x26>
    419c:	10 92 a7 16 	sts	0x16A7, r1	; 0x8016a7 <_measuringIsReady>
    41a0:	80 e0       	ldi	r24, 0x00	; 0
    41a2:	08 95       	ret
    41a4:	82 e0       	ldi	r24, 0x02	; 2
    41a6:	08 95       	ret
    41a8:	83 e0       	ldi	r24, 0x03	; 3
    41aa:	08 95       	ret

000041ac <hih8120_measure>:
    41ac:	80 91 a8 16 	lds	r24, 0x16A8	; 0x8016a8 <_hih8120Handler>
    41b0:	90 91 a9 16 	lds	r25, 0x16A9	; 0x8016a9 <_hih8120Handler+0x1>
    41b4:	00 97       	sbiw	r24, 0x00	; 0
    41b6:	39 f0       	breq	.+14     	; 0x41c6 <hih8120_measure+0x1a>
    41b8:	64 e0       	ldi	r22, 0x04	; 4
    41ba:	0e 94 d0 2d 	call	0x5ba0	; 0x5ba0 <twiReceive>
    41be:	85 30       	cpi	r24, 0x05	; 5
    41c0:	21 f0       	breq	.+8      	; 0x41ca <hih8120_measure+0x1e>
    41c2:	83 e0       	ldi	r24, 0x03	; 3
    41c4:	08 95       	ret
    41c6:	82 e0       	ldi	r24, 0x02	; 2
    41c8:	08 95       	ret
    41ca:	80 e0       	ldi	r24, 0x00	; 0
    41cc:	08 95       	ret

000041ce <hih8120_getHumidity>:
    41ce:	60 91 13 02 	lds	r22, 0x0213	; 0x800213 <_hum>
    41d2:	70 91 14 02 	lds	r23, 0x0214	; 0x800214 <_hum+0x1>
    41d6:	80 e0       	ldi	r24, 0x00	; 0
    41d8:	90 e0       	ldi	r25, 0x00	; 0
    41da:	d9 dd       	rcall	.-1102   	; 0x3d8e <__floatunsisf>
    41dc:	20 e0       	ldi	r18, 0x00	; 0
    41de:	30 e0       	ldi	r19, 0x00	; 0
    41e0:	48 ec       	ldi	r20, 0xC8	; 200
    41e2:	52 e4       	ldi	r21, 0x42	; 66
    41e4:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__mulsf3>
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	38 ef       	ldi	r19, 0xF8	; 248
    41ec:	4f e7       	ldi	r20, 0x7F	; 127
    41ee:	56 e4       	ldi	r21, 0x46	; 70
    41f0:	0c 94 43 2f 	jmp	0x5e86	; 0x5e86 <__divsf3>
    41f4:	08 95       	ret

000041f6 <hih8120_getTemperature>:
    41f6:	60 91 11 02 	lds	r22, 0x0211	; 0x800211 <_temp>
    41fa:	70 91 12 02 	lds	r23, 0x0212	; 0x800212 <_temp+0x1>
    41fe:	80 e0       	ldi	r24, 0x00	; 0
    4200:	90 e0       	ldi	r25, 0x00	; 0
    4202:	c5 dd       	rcall	.-1142   	; 0x3d8e <__floatunsisf>
    4204:	20 e0       	ldi	r18, 0x00	; 0
    4206:	30 e0       	ldi	r19, 0x00	; 0
    4208:	45 e2       	ldi	r20, 0x25	; 37
    420a:	53 e4       	ldi	r21, 0x43	; 67
    420c:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__mulsf3>
    4210:	20 e0       	ldi	r18, 0x00	; 0
    4212:	38 ef       	ldi	r19, 0xF8	; 248
    4214:	4f e7       	ldi	r20, 0x7F	; 127
    4216:	56 e4       	ldi	r21, 0x46	; 70
    4218:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__divsf3>
    421c:	20 e0       	ldi	r18, 0x00	; 0
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	40 e2       	ldi	r20, 0x20	; 32
    4222:	52 e4       	ldi	r21, 0x42	; 66
    4224:	0c 94 dc 2e 	jmp	0x5db8	; 0x5db8 <__subsf3>
    4228:	08 95       	ret

0000422a <_serialCallBack>:
    422a:	0f 93       	push	r16
    422c:	1f 93       	push	r17
    422e:	cf 93       	push	r28
    4230:	df 93       	push	r29
    4232:	1f 92       	push	r1
    4234:	1f 92       	push	r1
    4236:	cd b7       	in	r28, 0x3d	; 61
    4238:	de b7       	in	r29, 0x3e	; 62
    423a:	8c 01       	movw	r16, r24
    423c:	19 82       	std	Y+1, r1	; 0x01
    423e:	2d c0       	rjmp	.+90     	; 0x429a <_serialCallBack+0x70>
    4240:	e0 91 e1 16 	lds	r30, 0x16E1	; 0x8016e1 <rec_buf_inp.2878>
    4244:	ec 32       	cpi	r30, 0x2C	; 44
    4246:	50 f4       	brcc	.+20     	; 0x425c <_serialCallBack+0x32>
    4248:	81 e0       	ldi	r24, 0x01	; 1
    424a:	8e 0f       	add	r24, r30
    424c:	80 93 e1 16 	sts	0x16E1, r24	; 0x8016e1 <rec_buf_inp.2878>
    4250:	f0 e0       	ldi	r31, 0x00	; 0
    4252:	ed 5e       	subi	r30, 0xED	; 237
    4254:	f8 4e       	sbci	r31, 0xE8	; 232
    4256:	8a 81       	ldd	r24, Y+2	; 0x02
    4258:	80 83       	st	Z, r24
    425a:	02 c0       	rjmp	.+4      	; 0x4260 <_serialCallBack+0x36>
    425c:	10 92 e1 16 	sts	0x16E1, r1	; 0x8016e1 <rec_buf_inp.2878>
    4260:	8a 81       	ldd	r24, Y+2	; 0x02
    4262:	8a 30       	cpi	r24, 0x0A	; 10
    4264:	d1 f4       	brne	.+52     	; 0x429a <_serialCallBack+0x70>
    4266:	40 91 e1 16 	lds	r20, 0x16E1	; 0x8016e1 <rec_buf_inp.2878>
    426a:	50 e0       	ldi	r21, 0x00	; 0
    426c:	fa 01       	movw	r30, r20
    426e:	ef 5e       	subi	r30, 0xEF	; 239
    4270:	f8 4e       	sbci	r31, 0xE8	; 232
    4272:	10 82       	st	Z, r1
    4274:	41 50       	subi	r20, 0x01	; 1
    4276:	51 09       	sbc	r21, r1
    4278:	9e 01       	movw	r18, r28
    427a:	2f 5f       	subi	r18, 0xFF	; 255
    427c:	3f 4f       	sbci	r19, 0xFF	; 255
    427e:	63 e1       	ldi	r22, 0x13	; 19
    4280:	77 e1       	ldi	r23, 0x17	; 23
    4282:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <_serialReplyBufferHandle>
    4286:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <_serialReplyBufferHandle+0x1>
    428a:	0e 94 28 0b 	call	0x1650	; 0x1650 <xStreamBufferSendFromISR>
    428e:	89 81       	ldd	r24, Y+1	; 0x01
    4290:	81 11       	cpse	r24, r1
    4292:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    4296:	10 92 e1 16 	sts	0x16E1, r1	; 0x8016e1 <rec_buf_inp.2878>
    429a:	be 01       	movw	r22, r28
    429c:	6e 5f       	subi	r22, 0xFE	; 254
    429e:	7f 4f       	sbci	r23, 0xFF	; 255
    42a0:	c8 01       	movw	r24, r16
    42a2:	15 d6       	rcall	.+3114   	; 0x4ece <serial_getByte>
    42a4:	88 23       	and	r24, r24
    42a6:	61 f2       	breq	.-104    	; 0x4240 <_serialCallBack+0x16>
    42a8:	0f 90       	pop	r0
    42aa:	0f 90       	pop	r0
    42ac:	df 91       	pop	r29
    42ae:	cf 91       	pop	r28
    42b0:	1f 91       	pop	r17
    42b2:	0f 91       	pop	r16
    42b4:	08 95       	ret

000042b6 <_uploadMessage>:
    42b6:	0f 93       	push	r16
    42b8:	1f 93       	push	r17
    42ba:	cf 93       	push	r28
    42bc:	df 93       	push	r29
    42be:	8c 01       	movw	r16, r24
    42c0:	eb 01       	movw	r28, r22
    42c2:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <_serialReplyBufferHandle>
    42c6:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <_serialReplyBufferHandle+0x1>
    42ca:	0e 94 1d 0a 	call	0x143a	; 0x143a <xStreamBufferReset>
    42ce:	b8 01       	movw	r22, r16
    42d0:	8a ea       	ldi	r24, 0xAA	; 170
    42d2:	96 e1       	ldi	r25, 0x16	; 22
    42d4:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcpy>
    42d8:	20 97       	sbiw	r28, 0x00	; 0
    42da:	79 f0       	breq	.+30     	; 0x42fa <_uploadMessage+0x44>
    42dc:	ea ea       	ldi	r30, 0xAA	; 170
    42de:	f6 e1       	ldi	r31, 0x16	; 22
    42e0:	01 90       	ld	r0, Z+
    42e2:	00 20       	and	r0, r0
    42e4:	e9 f7       	brne	.-6      	; 0x42e0 <_uploadMessage+0x2a>
    42e6:	31 97       	sbiw	r30, 0x01	; 1
    42e8:	80 e2       	ldi	r24, 0x20	; 32
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	91 83       	std	Z+1, r25	; 0x01
    42ee:	80 83       	st	Z, r24
    42f0:	be 01       	movw	r22, r28
    42f2:	8a ea       	ldi	r24, 0xAA	; 170
    42f4:	96 e1       	ldi	r25, 0x16	; 22
    42f6:	0e 94 c0 31 	call	0x6380	; 0x6380 <strcat>
    42fa:	ea ea       	ldi	r30, 0xAA	; 170
    42fc:	f6 e1       	ldi	r31, 0x16	; 22
    42fe:	df 01       	movw	r26, r30
    4300:	0d 90       	ld	r0, X+
    4302:	00 20       	and	r0, r0
    4304:	e9 f7       	brne	.-6      	; 0x4300 <_uploadMessage+0x4a>
    4306:	11 97       	sbiw	r26, 0x01	; 1
    4308:	8d e0       	ldi	r24, 0x0D	; 13
    430a:	9a e0       	ldi	r25, 0x0A	; 10
    430c:	11 96       	adiw	r26, 0x01	; 1
    430e:	9c 93       	st	X, r25
    4310:	8e 93       	st	-X, r24
    4312:	12 96       	adiw	r26, 0x02	; 2
    4314:	1c 92       	st	X, r1
    4316:	01 90       	ld	r0, Z+
    4318:	00 20       	and	r0, r0
    431a:	e9 f7       	brne	.-6      	; 0x4316 <_uploadMessage+0x60>
    431c:	31 97       	sbiw	r30, 0x01	; 1
    431e:	ea 5a       	subi	r30, 0xAA	; 170
    4320:	f6 41       	sbci	r31, 0x16	; 22
    4322:	ae 2f       	mov	r26, r30
    4324:	8a ea       	ldi	r24, 0xAA	; 170
    4326:	96 e1       	ldi	r25, 0x16	; 22
    4328:	ac 01       	movw	r20, r24
    432a:	6a 2f       	mov	r22, r26
    432c:	80 91 e6 16 	lds	r24, 0x16E6	; 0x8016e6 <_rn2483_serial>
    4330:	90 91 e7 16 	lds	r25, 0x16E7	; 0x8016e7 <_rn2483_serial+0x1>
    4334:	77 d5       	rcall	.+2798   	; 0x4e24 <serial_sendBytes>
    4336:	81 11       	cpse	r24, r1
    4338:	11 c0       	rjmp	.+34     	; 0x435c <_uploadMessage+0xa6>
    433a:	08 e2       	ldi	r16, 0x28	; 40
    433c:	15 e0       	ldi	r17, 0x05	; 5
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	4d e2       	ldi	r20, 0x2D	; 45
    4344:	50 e0       	ldi	r21, 0x00	; 0
    4346:	6d e6       	ldi	r22, 0x6D	; 109
    4348:	77 e1       	ldi	r23, 0x17	; 23
    434a:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <_serialReplyBufferHandle>
    434e:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <_serialReplyBufferHandle+0x1>
    4352:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
    4356:	8d e6       	ldi	r24, 0x6D	; 109
    4358:	97 e1       	ldi	r25, 0x17	; 23
    435a:	02 c0       	rjmp	.+4      	; 0x4360 <_uploadMessage+0xaa>
    435c:	80 e0       	ldi	r24, 0x00	; 0
    435e:	90 e0       	ldi	r25, 0x00	; 0
    4360:	df 91       	pop	r29
    4362:	cf 91       	pop	r28
    4364:	1f 91       	pop	r17
    4366:	0f 91       	pop	r16
    4368:	08 95       	ret

0000436a <_reply2ReturnCode>:
    436a:	2f 92       	push	r2
    436c:	3f 92       	push	r3
    436e:	4f 92       	push	r4
    4370:	5f 92       	push	r5
    4372:	6f 92       	push	r6
    4374:	7f 92       	push	r7
    4376:	8f 92       	push	r8
    4378:	9f 92       	push	r9
    437a:	af 92       	push	r10
    437c:	bf 92       	push	r11
    437e:	cf 92       	push	r12
    4380:	df 92       	push	r13
    4382:	ef 92       	push	r14
    4384:	ff 92       	push	r15
    4386:	0f 93       	push	r16
    4388:	1f 93       	push	r17
    438a:	cf 93       	push	r28
    438c:	df 93       	push	r29
    438e:	5c 01       	movw	r10, r24
    4390:	fc 01       	movw	r30, r24
    4392:	01 90       	ld	r0, Z+
    4394:	00 20       	and	r0, r0
    4396:	e9 f7       	brne	.-6      	; 0x4392 <_reply2ReturnCode+0x28>
    4398:	31 97       	sbiw	r30, 0x01	; 1
    439a:	6f 01       	movw	r12, r30
    439c:	c8 1a       	sub	r12, r24
    439e:	d9 0a       	sbc	r13, r25
    43a0:	5c 2c       	mov	r5, r12
    43a2:	0f 2e       	mov	r0, r31
    43a4:	f2 e8       	ldi	r31, 0x82	; 130
    43a6:	8f 2e       	mov	r8, r31
    43a8:	f7 e0       	ldi	r31, 0x07	; 7
    43aa:	9f 2e       	mov	r9, r31
    43ac:	f0 2d       	mov	r31, r0
    43ae:	e1 2c       	mov	r14, r1
    43b0:	f1 2c       	mov	r15, r1
    43b2:	4c 2c       	mov	r4, r12
    43b4:	37 01       	movw	r6, r14
    43b6:	f4 01       	movw	r30, r8
    43b8:	01 81       	ldd	r16, Z+1	; 0x01
    43ba:	12 81       	ldd	r17, Z+2	; 0x02
    43bc:	e8 01       	movw	r28, r16
    43be:	09 90       	ld	r0, Y+
    43c0:	00 20       	and	r0, r0
    43c2:	e9 f7       	brne	.-6      	; 0x43be <_reply2ReturnCode+0x54>
    43c4:	21 97       	sbiw	r28, 0x01	; 1
    43c6:	c0 1b       	sub	r28, r16
    43c8:	d1 0b       	sbc	r29, r17
    43ca:	3c 2e       	mov	r3, r28
    43cc:	f9 e0       	ldi	r31, 0x09	; 9
    43ce:	cf 16       	cp	r12, r31
    43d0:	d1 04       	cpc	r13, r1
    43d2:	58 f0       	brcs	.+22     	; 0x43ea <_reply2ReturnCode+0x80>
    43d4:	f4 01       	movw	r30, r8
    43d6:	20 80       	ld	r2, Z
    43d8:	fe e0       	ldi	r31, 0x0E	; 14
    43da:	2f 12       	cpse	r2, r31
    43dc:	06 c0       	rjmp	.+12     	; 0x43ea <_reply2ReturnCode+0x80>
    43de:	b8 01       	movw	r22, r16
    43e0:	c5 01       	movw	r24, r10
    43e2:	0e 94 9b 31 	call	0x6336	; 0x6336 <strcasestr>
    43e6:	89 2b       	or	r24, r25
    43e8:	09 f5       	brne	.+66     	; 0x442c <_reply2ReturnCode+0xc2>
    43ea:	44 2d       	mov	r20, r4
    43ec:	35 14       	cp	r3, r5
    43ee:	08 f4       	brcc	.+2      	; 0x43f2 <_reply2ReturnCode+0x88>
    43f0:	4c 2f       	mov	r20, r28
    43f2:	50 e0       	ldi	r21, 0x00	; 0
    43f4:	b8 01       	movw	r22, r16
    43f6:	c5 01       	movw	r24, r10
    43f8:	0e 94 d2 31 	call	0x63a4	; 0x63a4 <strncasecmp>
    43fc:	89 2b       	or	r24, r25
    43fe:	49 f4       	brne	.+18     	; 0x4412 <_reply2ReturnCode+0xa8>
    4400:	f3 01       	movw	r30, r6
    4402:	ee 0f       	add	r30, r30
    4404:	ff 1f       	adc	r31, r31
    4406:	e6 0d       	add	r30, r6
    4408:	f7 1d       	adc	r31, r7
    440a:	ee 57       	subi	r30, 0x7E	; 126
    440c:	f8 4f       	sbci	r31, 0xF8	; 248
    440e:	20 80       	ld	r2, Z
    4410:	0d c0       	rjmp	.+26     	; 0x442c <_reply2ReturnCode+0xc2>
    4412:	8f ef       	ldi	r24, 0xFF	; 255
    4414:	e8 1a       	sub	r14, r24
    4416:	f8 0a       	sbc	r15, r24
    4418:	e3 e0       	ldi	r30, 0x03	; 3
    441a:	8e 0e       	add	r8, r30
    441c:	91 1c       	adc	r9, r1
    441e:	f1 e1       	ldi	r31, 0x11	; 17
    4420:	ef 16       	cp	r14, r31
    4422:	f1 04       	cpc	r15, r1
    4424:	39 f6       	brne	.-114    	; 0x43b4 <_reply2ReturnCode+0x4a>
    4426:	68 94       	set
    4428:	22 24       	eor	r2, r2
    442a:	24 f8       	bld	r2, 4
    442c:	82 2d       	mov	r24, r2
    442e:	df 91       	pop	r29
    4430:	cf 91       	pop	r28
    4432:	1f 91       	pop	r17
    4434:	0f 91       	pop	r16
    4436:	ff 90       	pop	r15
    4438:	ef 90       	pop	r14
    443a:	df 90       	pop	r13
    443c:	cf 90       	pop	r12
    443e:	bf 90       	pop	r11
    4440:	af 90       	pop	r10
    4442:	9f 90       	pop	r9
    4444:	8f 90       	pop	r8
    4446:	7f 90       	pop	r7
    4448:	6f 90       	pop	r6
    444a:	5f 90       	pop	r5
    444c:	4f 90       	pop	r4
    444e:	3f 90       	pop	r3
    4450:	2f 90       	pop	r2
    4452:	08 95       	ret

00004454 <_uploadMessageRc>:
    4454:	30 df       	rcall	.-416    	; 0x42b6 <_uploadMessage>
    4456:	89 cf       	rjmp	.-238    	; 0x436a <_reply2ReturnCode>
    4458:	08 95       	ret

0000445a <lora_driver_flushBuffers>:
    445a:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <_serialReplyBufferHandle>
    445e:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <_serialReplyBufferHandle+0x1>
    4462:	0c 94 1d 0a 	jmp	0x143a	; 0x143a <xStreamBufferReset>
    4466:	08 95       	ret

00004468 <lora_driver_initialise>:
    4468:	8f 92       	push	r8
    446a:	9f 92       	push	r9
    446c:	af 92       	push	r10
    446e:	cf 92       	push	r12
    4470:	ef 92       	push	r14
    4472:	0f 93       	push	r16
    4474:	1f 93       	push	r17
    4476:	cf 93       	push	r28
    4478:	c8 2f       	mov	r28, r24
    447a:	8b 01       	movw	r16, r22
    447c:	41 e0       	ldi	r20, 0x01	; 1
    447e:	60 e0       	ldi	r22, 0x00	; 0
    4480:	70 e0       	ldi	r23, 0x00	; 0
    4482:	88 ec       	ldi	r24, 0xC8	; 200
    4484:	90 e0       	ldi	r25, 0x00	; 0
    4486:	0e 94 e8 09 	call	0x13d0	; 0x13d0 <xStreamBufferGenericCreate>
    448a:	90 93 e5 16 	sts	0x16E5, r25	; 0x8016e5 <_serialReplyBufferHandle+0x1>
    448e:	80 93 e4 16 	sts	0x16E4, r24	; 0x8016e4 <_serialReplyBufferHandle>
    4492:	10 93 e3 16 	sts	0x16E3, r17	; 0x8016e3 <_downlinkMessageBuffer+0x1>
    4496:	00 93 e2 16 	sts	0x16E2, r16	; 0x8016e2 <_downlinkMessageBuffer>
    449a:	0f 2e       	mov	r0, r31
    449c:	f5 e1       	ldi	r31, 0x15	; 21
    449e:	8f 2e       	mov	r8, r31
    44a0:	f1 e2       	ldi	r31, 0x21	; 33
    44a2:	9f 2e       	mov	r9, r31
    44a4:	f0 2d       	mov	r31, r0
    44a6:	68 94       	set
    44a8:	aa 24       	eor	r10, r10
    44aa:	a6 f8       	bld	r10, 6
    44ac:	68 94       	set
    44ae:	cc 24       	eor	r12, r12
    44b0:	c6 f8       	bld	r12, 6
    44b2:	e1 2c       	mov	r14, r1
    44b4:	00 e0       	ldi	r16, 0x00	; 0
    44b6:	23 e0       	ldi	r18, 0x03	; 3
    44b8:	40 e0       	ldi	r20, 0x00	; 0
    44ba:	51 ee       	ldi	r21, 0xE1	; 225
    44bc:	60 e0       	ldi	r22, 0x00	; 0
    44be:	70 e0       	ldi	r23, 0x00	; 0
    44c0:	8c 2f       	mov	r24, r28
    44c2:	de d3       	rcall	.+1980   	; 0x4c80 <serial_create>
    44c4:	90 93 e7 16 	sts	0x16E7, r25	; 0x8016e7 <_rn2483_serial+0x1>
    44c8:	80 93 e6 16 	sts	0x16E6, r24	; 0x8016e6 <_rn2483_serial>
    44cc:	e7 e0       	ldi	r30, 0x07	; 7
    44ce:	f1 e0       	ldi	r31, 0x01	; 1
    44d0:	80 81       	ld	r24, Z
    44d2:	80 61       	ori	r24, 0x10	; 16
    44d4:	80 83       	st	Z, r24
    44d6:	cf 91       	pop	r28
    44d8:	1f 91       	pop	r17
    44da:	0f 91       	pop	r16
    44dc:	ef 90       	pop	r14
    44de:	cf 90       	pop	r12
    44e0:	af 90       	pop	r10
    44e2:	9f 90       	pop	r9
    44e4:	8f 90       	pop	r8
    44e6:	08 95       	ret

000044e8 <lora_driver_resetRn2483>:
    44e8:	88 23       	and	r24, r24
    44ea:	31 f0       	breq	.+12     	; 0x44f8 <lora_driver_resetRn2483+0x10>
    44ec:	e8 e0       	ldi	r30, 0x08	; 8
    44ee:	f1 e0       	ldi	r31, 0x01	; 1
    44f0:	80 81       	ld	r24, Z
    44f2:	8f 7e       	andi	r24, 0xEF	; 239
    44f4:	80 83       	st	Z, r24
    44f6:	08 95       	ret
    44f8:	e8 e0       	ldi	r30, 0x08	; 8
    44fa:	f1 e0       	ldi	r31, 0x01	; 1
    44fc:	80 81       	ld	r24, Z
    44fe:	80 61       	ori	r24, 0x10	; 16
    4500:	80 83       	st	Z, r24
    4502:	08 95       	ret

00004504 <lora_driver_rn2483FactoryReset>:
    4504:	60 e0       	ldi	r22, 0x00	; 0
    4506:	70 e0       	ldi	r23, 0x00	; 0
    4508:	88 e0       	ldi	r24, 0x08	; 8
    450a:	95 e0       	ldi	r25, 0x05	; 5
    450c:	d4 de       	rcall	.-600    	; 0x42b6 <_uploadMessage>
    450e:	ed e6       	ldi	r30, 0x6D	; 109
    4510:	f7 e1       	ldi	r31, 0x17	; 23
    4512:	01 90       	ld	r0, Z+
    4514:	00 20       	and	r0, r0
    4516:	e9 f7       	brne	.-6      	; 0x4512 <lora_driver_rn2483FactoryReset+0xe>
    4518:	31 97       	sbiw	r30, 0x01	; 1
    451a:	ed 56       	subi	r30, 0x6D	; 109
    451c:	f7 41       	sbci	r31, 0x17	; 23
    451e:	81 e0       	ldi	r24, 0x01	; 1
    4520:	75 97       	sbiw	r30, 0x15	; 21
    4522:	08 f0       	brcs	.+2      	; 0x4526 <lora_driver_rn2483FactoryReset+0x22>
    4524:	80 e0       	ldi	r24, 0x00	; 0
    4526:	08 95       	ret

00004528 <lora_driver_getRn2483Hweui>:
    4528:	cf 93       	push	r28
    452a:	df 93       	push	r29
    452c:	ec 01       	movw	r28, r24
    452e:	60 e0       	ldi	r22, 0x00	; 0
    4530:	70 e0       	ldi	r23, 0x00	; 0
    4532:	89 e1       	ldi	r24, 0x19	; 25
    4534:	95 e0       	ldi	r25, 0x05	; 5
    4536:	bf de       	rcall	.-642    	; 0x42b6 <_uploadMessage>
    4538:	ed e6       	ldi	r30, 0x6D	; 109
    453a:	f7 e1       	ldi	r31, 0x17	; 23
    453c:	01 90       	ld	r0, Z+
    453e:	00 20       	and	r0, r0
    4540:	e9 f7       	brne	.-6      	; 0x453c <lora_driver_getRn2483Hweui+0x14>
    4542:	ee 57       	subi	r30, 0x7E	; 126
    4544:	f7 41       	sbci	r31, 0x17	; 23
    4546:	39 f4       	brne	.+14     	; 0x4556 <lora_driver_getRn2483Hweui+0x2e>
    4548:	6d e6       	ldi	r22, 0x6D	; 109
    454a:	77 e1       	ldi	r23, 0x17	; 23
    454c:	ce 01       	movw	r24, r28
    454e:	0e 94 cb 31 	call	0x6396	; 0x6396 <strcpy>
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	02 c0       	rjmp	.+4      	; 0x455a <lora_driver_getRn2483Hweui+0x32>
    4556:	18 82       	st	Y, r1
    4558:	81 e0       	ldi	r24, 0x01	; 1
    455a:	df 91       	pop	r29
    455c:	cf 91       	pop	r28
    455e:	08 95       	ret

00004560 <lora_driver_setDeviceIdentifier>:
    4560:	fc 01       	movw	r30, r24
    4562:	01 90       	ld	r0, Z+
    4564:	00 20       	and	r0, r0
    4566:	e9 f7       	brne	.-6      	; 0x4562 <lora_driver_setDeviceIdentifier+0x2>
    4568:	9f 01       	movw	r18, r30
    456a:	21 51       	subi	r18, 0x11	; 17
    456c:	31 09       	sbc	r19, r1
    456e:	28 17       	cp	r18, r24
    4570:	39 07       	cpc	r19, r25
    4572:	29 f4       	brne	.+10     	; 0x457e <lora_driver_setDeviceIdentifier+0x1e>
    4574:	bc 01       	movw	r22, r24
    4576:	87 e4       	ldi	r24, 0x47	; 71
    4578:	95 e0       	ldi	r25, 0x05	; 5
    457a:	6c cf       	rjmp	.-296    	; 0x4454 <_uploadMessageRc>
    457c:	08 95       	ret
    457e:	89 e0       	ldi	r24, 0x09	; 9
    4580:	08 95       	ret

00004582 <lora_driver_setApplicationIdentifier>:
    4582:	fc 01       	movw	r30, r24
    4584:	01 90       	ld	r0, Z+
    4586:	00 20       	and	r0, r0
    4588:	e9 f7       	brne	.-6      	; 0x4584 <lora_driver_setApplicationIdentifier+0x2>
    458a:	9f 01       	movw	r18, r30
    458c:	21 51       	subi	r18, 0x11	; 17
    458e:	31 09       	sbc	r19, r1
    4590:	28 17       	cp	r18, r24
    4592:	39 07       	cpc	r19, r25
    4594:	29 f4       	brne	.+10     	; 0x45a0 <lora_driver_setApplicationIdentifier+0x1e>
    4596:	bc 01       	movw	r22, r24
    4598:	86 e5       	ldi	r24, 0x56	; 86
    459a:	95 e0       	ldi	r25, 0x05	; 5
    459c:	5b cf       	rjmp	.-330    	; 0x4454 <_uploadMessageRc>
    459e:	08 95       	ret
    45a0:	89 e0       	ldi	r24, 0x09	; 9
    45a2:	08 95       	ret

000045a4 <lora_driver_setApplicationKey>:
    45a4:	fc 01       	movw	r30, r24
    45a6:	01 90       	ld	r0, Z+
    45a8:	00 20       	and	r0, r0
    45aa:	e9 f7       	brne	.-6      	; 0x45a6 <lora_driver_setApplicationKey+0x2>
    45ac:	9f 01       	movw	r18, r30
    45ae:	21 52       	subi	r18, 0x21	; 33
    45b0:	31 09       	sbc	r19, r1
    45b2:	28 17       	cp	r18, r24
    45b4:	39 07       	cpc	r19, r25
    45b6:	29 f4       	brne	.+10     	; 0x45c2 <lora_driver_setApplicationKey+0x1e>
    45b8:	bc 01       	movw	r22, r24
    45ba:	85 e6       	ldi	r24, 0x65	; 101
    45bc:	95 e0       	ldi	r25, 0x05	; 5
    45be:	4a cf       	rjmp	.-364    	; 0x4454 <_uploadMessageRc>
    45c0:	08 95       	ret
    45c2:	89 e0       	ldi	r24, 0x09	; 9
    45c4:	08 95       	ret

000045c6 <lora_driver_saveMac>:
    45c6:	60 e0       	ldi	r22, 0x00	; 0
    45c8:	70 e0       	ldi	r23, 0x00	; 0
    45ca:	84 ea       	ldi	r24, 0xA4	; 164
    45cc:	95 e0       	ldi	r25, 0x05	; 5
    45ce:	42 cf       	rjmp	.-380    	; 0x4454 <_uploadMessageRc>
    45d0:	08 95       	ret

000045d2 <lora_driver_join>:
    45d2:	0f 93       	push	r16
    45d4:	1f 93       	push	r17
    45d6:	e8 2f       	mov	r30, r24
    45d8:	f0 e0       	ldi	r31, 0x00	; 0
    45da:	ee 0f       	add	r30, r30
    45dc:	ff 1f       	adc	r31, r31
    45de:	e2 58       	subi	r30, 0x82	; 130
    45e0:	f8 4f       	sbci	r31, 0xF8	; 248
    45e2:	60 81       	ld	r22, Z
    45e4:	71 81       	ldd	r23, Z+1	; 0x01
    45e6:	8d ea       	ldi	r24, 0xAD	; 173
    45e8:	95 e0       	ldi	r25, 0x05	; 5
    45ea:	34 df       	rcall	.-408    	; 0x4454 <_uploadMessageRc>
    45ec:	81 11       	cpse	r24, r1
    45ee:	14 c0       	rjmp	.+40     	; 0x4618 <lora_driver_join+0x46>
    45f0:	08 e2       	ldi	r16, 0x28	; 40
    45f2:	15 e0       	ldi	r17, 0x05	; 5
    45f4:	20 e0       	ldi	r18, 0x00	; 0
    45f6:	30 e0       	ldi	r19, 0x00	; 0
    45f8:	4d e2       	ldi	r20, 0x2D	; 45
    45fa:	50 e0       	ldi	r21, 0x00	; 0
    45fc:	6d e6       	ldi	r22, 0x6D	; 109
    45fe:	77 e1       	ldi	r23, 0x17	; 23
    4600:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <_serialReplyBufferHandle>
    4604:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <_serialReplyBufferHandle+0x1>
    4608:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
    460c:	88 23       	and	r24, r24
    460e:	21 f0       	breq	.+8      	; 0x4618 <lora_driver_join+0x46>
    4610:	8d e6       	ldi	r24, 0x6D	; 109
    4612:	97 e1       	ldi	r25, 0x17	; 23
    4614:	aa de       	rcall	.-684    	; 0x436a <_reply2ReturnCode>
    4616:	03 c0       	rjmp	.+6      	; 0x461e <lora_driver_join+0x4c>
    4618:	8d e6       	ldi	r24, 0x6D	; 109
    461a:	97 e1       	ldi	r25, 0x17	; 23
    461c:	a6 de       	rcall	.-692    	; 0x436a <_reply2ReturnCode>
    461e:	1f 91       	pop	r17
    4620:	0f 91       	pop	r16
    4622:	08 95       	ret

00004624 <lora_driver_sendUploadMessage>:
    4624:	0f 93       	push	r16
    4626:	1f 93       	push	r17
    4628:	cf 93       	push	r28
    462a:	df 93       	push	r29
    462c:	1f 92       	push	r1
    462e:	cd b7       	in	r28, 0x3d	; 61
    4630:	de b7       	in	r29, 0x3e	; 62
    4632:	db 01       	movw	r26, r22
    4634:	11 96       	adiw	r26, 0x01	; 1
    4636:	9c 91       	ld	r25, X
    4638:	11 97       	sbiw	r26, 0x01	; 1
    463a:	95 31       	cpi	r25, 0x15	; 21
    463c:	08 f0       	brcs	.+2      	; 0x4640 <lora_driver_sendUploadMessage+0x1c>
    463e:	b4 c0       	rjmp	.+360    	; 0x47a8 <lora_driver_sendUploadMessage+0x184>
    4640:	99 23       	and	r25, r25
    4642:	81 f1       	breq	.+96     	; 0x46a4 <lora_driver_sendUploadMessage+0x80>
    4644:	60 e0       	ldi	r22, 0x00	; 0
    4646:	70 e0       	ldi	r23, 0x00	; 0
    4648:	27 2f       	mov	r18, r23
    464a:	30 e0       	ldi	r19, 0x00	; 0
    464c:	46 2f       	mov	r20, r22
    464e:	50 e0       	ldi	r21, 0x00	; 0
    4650:	fd 01       	movw	r30, r26
    4652:	e4 0f       	add	r30, r20
    4654:	f5 1f       	adc	r31, r21
    4656:	92 81       	ldd	r25, Z+2	; 0x02
    4658:	92 95       	swap	r25
    465a:	9f 70       	andi	r25, 0x0F	; 15
    465c:	9a 30       	cpi	r25, 0x0A	; 10
    465e:	10 f0       	brcs	.+4      	; 0x4664 <lora_driver_sendUploadMessage+0x40>
    4660:	99 5c       	subi	r25, 0xC9	; 201
    4662:	01 c0       	rjmp	.+2      	; 0x4666 <lora_driver_sendUploadMessage+0x42>
    4664:	90 5d       	subi	r25, 0xD0	; 208
    4666:	f9 01       	movw	r30, r18
    4668:	e2 50       	subi	r30, 0x02	; 2
    466a:	f9 4e       	sbci	r31, 0xE9	; 233
    466c:	90 83       	st	Z, r25
    466e:	2f 5f       	subi	r18, 0xFF	; 255
    4670:	3f 4f       	sbci	r19, 0xFF	; 255
    4672:	fd 01       	movw	r30, r26
    4674:	e4 0f       	add	r30, r20
    4676:	f5 1f       	adc	r31, r21
    4678:	92 81       	ldd	r25, Z+2	; 0x02
    467a:	9f 70       	andi	r25, 0x0F	; 15
    467c:	49 2f       	mov	r20, r25
    467e:	50 e0       	ldi	r21, 0x00	; 0
    4680:	4a 30       	cpi	r20, 0x0A	; 10
    4682:	51 05       	cpc	r21, r1
    4684:	14 f0       	brlt	.+4      	; 0x468a <lora_driver_sendUploadMessage+0x66>
    4686:	99 5c       	subi	r25, 0xC9	; 201
    4688:	01 c0       	rjmp	.+2      	; 0x468c <lora_driver_sendUploadMessage+0x68>
    468a:	90 5d       	subi	r25, 0xD0	; 208
    468c:	f9 01       	movw	r30, r18
    468e:	e2 50       	subi	r30, 0x02	; 2
    4690:	f9 4e       	sbci	r31, 0xE9	; 233
    4692:	90 83       	st	Z, r25
    4694:	7e 5f       	subi	r23, 0xFE	; 254
    4696:	6f 5f       	subi	r22, 0xFF	; 255
    4698:	11 96       	adiw	r26, 0x01	; 1
    469a:	9c 91       	ld	r25, X
    469c:	11 97       	sbiw	r26, 0x01	; 1
    469e:	69 17       	cp	r22, r25
    46a0:	98 f2       	brcs	.-90     	; 0x4648 <lora_driver_sendUploadMessage+0x24>
    46a2:	01 c0       	rjmp	.+2      	; 0x46a6 <lora_driver_sendUploadMessage+0x82>
    46a4:	70 e0       	ldi	r23, 0x00	; 0
    46a6:	e7 2f       	mov	r30, r23
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	e2 50       	subi	r30, 0x02	; 2
    46ac:	f9 4e       	sbci	r31, 0xE9	; 233
    46ae:	10 82       	st	Z, r1
    46b0:	4c 91       	ld	r20, X
    46b2:	81 11       	cpse	r24, r1
    46b4:	03 c0       	rjmp	.+6      	; 0x46bc <lora_driver_sendUploadMessage+0x98>
    46b6:	86 eb       	ldi	r24, 0xB6	; 182
    46b8:	95 e0       	ldi	r25, 0x05	; 5
    46ba:	02 c0       	rjmp	.+4      	; 0x46c0 <lora_driver_sendUploadMessage+0x9c>
    46bc:	88 eb       	ldi	r24, 0xB8	; 184
    46be:	95 e0       	ldi	r25, 0x05	; 5
    46c0:	2e ef       	ldi	r18, 0xFE	; 254
    46c2:	36 e1       	ldi	r19, 0x16	; 22
    46c4:	3f 93       	push	r19
    46c6:	2f 93       	push	r18
    46c8:	1f 92       	push	r1
    46ca:	4f 93       	push	r20
    46cc:	9f 93       	push	r25
    46ce:	8f 93       	push	r24
    46d0:	8c eb       	ldi	r24, 0xBC	; 188
    46d2:	95 e0       	ldi	r25, 0x05	; 5
    46d4:	9f 93       	push	r25
    46d6:	8f 93       	push	r24
    46d8:	80 e4       	ldi	r24, 0x40	; 64
    46da:	97 e1       	ldi	r25, 0x17	; 23
    46dc:	9f 93       	push	r25
    46de:	8f 93       	push	r24
    46e0:	0e 94 37 32 	call	0x646e	; 0x646e <sprintf>
    46e4:	60 e0       	ldi	r22, 0x00	; 0
    46e6:	70 e0       	ldi	r23, 0x00	; 0
    46e8:	80 e4       	ldi	r24, 0x40	; 64
    46ea:	97 e1       	ldi	r25, 0x17	; 23
    46ec:	b3 de       	rcall	.-666    	; 0x4454 <_uploadMessageRc>
    46ee:	0f b6       	in	r0, 0x3f	; 63
    46f0:	f8 94       	cli
    46f2:	de bf       	out	0x3e, r29	; 62
    46f4:	0f be       	out	0x3f, r0	; 63
    46f6:	cd bf       	out	0x3d, r28	; 61
    46f8:	81 11       	cpse	r24, r1
    46fa:	59 c0       	rjmp	.+178    	; 0x47ae <lora_driver_sendUploadMessage+0x18a>
    46fc:	08 e2       	ldi	r16, 0x28	; 40
    46fe:	15 e0       	ldi	r17, 0x05	; 5
    4700:	20 e0       	ldi	r18, 0x00	; 0
    4702:	30 e0       	ldi	r19, 0x00	; 0
    4704:	4d e2       	ldi	r20, 0x2D	; 45
    4706:	50 e0       	ldi	r21, 0x00	; 0
    4708:	6d e6       	ldi	r22, 0x6D	; 109
    470a:	77 e1       	ldi	r23, 0x17	; 23
    470c:	80 91 e4 16 	lds	r24, 0x16E4	; 0x8016e4 <_serialReplyBufferHandle>
    4710:	90 91 e5 16 	lds	r25, 0x16E5	; 0x8016e5 <_serialReplyBufferHandle+0x1>
    4714:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <xStreamBufferReceive>
    4718:	88 23       	and	r24, r24
    471a:	09 f4       	brne	.+2      	; 0x471e <lora_driver_sendUploadMessage+0xfa>
    471c:	47 c0       	rjmp	.+142    	; 0x47ac <lora_driver_sendUploadMessage+0x188>
    471e:	8d e6       	ldi	r24, 0x6D	; 109
    4720:	97 e1       	ldi	r25, 0x17	; 23
    4722:	23 de       	rcall	.-954    	; 0x436a <_reply2ReturnCode>
    4724:	8e 30       	cpi	r24, 0x0E	; 14
    4726:	09 f0       	breq	.+2      	; 0x472a <lora_driver_sendUploadMessage+0x106>
    4728:	42 c0       	rjmp	.+132    	; 0x47ae <lora_driver_sendUploadMessage+0x18a>
    472a:	87 e0       	ldi	r24, 0x07	; 7
    472c:	89 83       	std	Y+1, r24	; 0x01
    472e:	80 91 e2 16 	lds	r24, 0x16E2	; 0x8016e2 <_downlinkMessageBuffer>
    4732:	90 91 e3 16 	lds	r25, 0x16E3	; 0x8016e3 <_downlinkMessageBuffer+0x1>
    4736:	89 2b       	or	r24, r25
    4738:	a9 f1       	breq	.+106    	; 0x47a4 <lora_driver_sendUploadMessage+0x180>
    473a:	be 01       	movw	r22, r28
    473c:	6f 5f       	subi	r22, 0xFF	; 255
    473e:	7f 4f       	sbci	r23, 0xFF	; 255
    4740:	8d e6       	ldi	r24, 0x6D	; 109
    4742:	97 e1       	ldi	r25, 0x17	; 23
    4744:	68 d1       	rcall	.+720    	; 0x4a16 <decode_port_no>
    4746:	80 93 e8 16 	sts	0x16E8, r24	; 0x8016e8 <_downlinkPayload>
    474a:	e9 81       	ldd	r30, Y+1	; 0x01
    474c:	f0 e0       	ldi	r31, 0x00	; 0
    474e:	e3 59       	subi	r30, 0x93	; 147
    4750:	f8 4e       	sbci	r31, 0xE8	; 232
    4752:	df 01       	movw	r26, r30
    4754:	0d 90       	ld	r0, X+
    4756:	00 20       	and	r0, r0
    4758:	e9 f7       	brne	.-6      	; 0x4754 <lora_driver_sendUploadMessage+0x130>
    475a:	11 97       	sbiw	r26, 0x01	; 1
    475c:	ae 1b       	sub	r26, r30
    475e:	bf 0b       	sbc	r27, r31
    4760:	aa 23       	and	r26, r26
    4762:	91 f0       	breq	.+36     	; 0x4788 <lora_driver_sendUploadMessage+0x164>
    4764:	bb 27       	eor	r27, r27
    4766:	cd 01       	movw	r24, r26
    4768:	01 97       	sbiw	r24, 0x01	; 1
    476a:	9c 01       	movw	r18, r24
    476c:	12 f4       	brpl	.+4      	; 0x4772 <lora_driver_sendUploadMessage+0x14e>
    476e:	2f 5f       	subi	r18, 0xFF	; 255
    4770:	3f 4f       	sbci	r19, 0xFF	; 255
    4772:	35 95       	asr	r19
    4774:	27 95       	ror	r18
    4776:	20 93 e9 16 	sts	0x16E9, r18	; 0x8016e9 <_downlinkPayload+0x1>
    477a:	af 01       	movw	r20, r30
    477c:	4f 5f       	subi	r20, 0xFF	; 255
    477e:	5f 4f       	sbci	r21, 0xFF	; 255
    4780:	64 e1       	ldi	r22, 0x14	; 20
    4782:	8a ee       	ldi	r24, 0xEA	; 234
    4784:	96 e1       	ldi	r25, 0x16	; 22
    4786:	73 d1       	rcall	.+742    	; 0x4a6e <decode_hexadecimal_string_bytes>
    4788:	01 e0       	ldi	r16, 0x01	; 1
    478a:	10 e0       	ldi	r17, 0x00	; 0
    478c:	20 e0       	ldi	r18, 0x00	; 0
    478e:	30 e0       	ldi	r19, 0x00	; 0
    4790:	46 e1       	ldi	r20, 0x16	; 22
    4792:	50 e0       	ldi	r21, 0x00	; 0
    4794:	68 ee       	ldi	r22, 0xE8	; 232
    4796:	76 e1       	ldi	r23, 0x16	; 22
    4798:	80 91 e2 16 	lds	r24, 0x16E2	; 0x8016e2 <_downlinkMessageBuffer>
    479c:	90 91 e3 16 	lds	r25, 0x16E3	; 0x8016e3 <_downlinkMessageBuffer+0x1>
    47a0:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <xStreamBufferSend>
    47a4:	8e e0       	ldi	r24, 0x0E	; 14
    47a6:	03 c0       	rjmp	.+6      	; 0x47ae <lora_driver_sendUploadMessage+0x18a>
    47a8:	84 e1       	ldi	r24, 0x14	; 20
    47aa:	01 c0       	rjmp	.+2      	; 0x47ae <lora_driver_sendUploadMessage+0x18a>
    47ac:	80 e0       	ldi	r24, 0x00	; 0
    47ae:	0f 90       	pop	r0
    47b0:	df 91       	pop	r29
    47b2:	cf 91       	pop	r28
    47b4:	1f 91       	pop	r17
    47b6:	0f 91       	pop	r16
    47b8:	08 95       	ret

000047ba <lora_driver_setAdaptiveDataRate>:
    47ba:	81 30       	cpi	r24, 0x01	; 1
    47bc:	19 f0       	breq	.+6      	; 0x47c4 <lora_driver_setAdaptiveDataRate+0xa>
    47be:	6c ec       	ldi	r22, 0xCC	; 204
    47c0:	75 e0       	ldi	r23, 0x05	; 5
    47c2:	02 c0       	rjmp	.+4      	; 0x47c8 <lora_driver_setAdaptiveDataRate+0xe>
    47c4:	65 ea       	ldi	r22, 0xA5	; 165
    47c6:	76 e0       	ldi	r23, 0x06	; 6
    47c8:	80 ed       	ldi	r24, 0xD0	; 208
    47ca:	95 e0       	ldi	r25, 0x05	; 5
    47cc:	43 ce       	rjmp	.-890    	; 0x4454 <_uploadMessageRc>
    47ce:	08 95       	ret

000047d0 <lora_driver_setReceiveDelay>:
    47d0:	9f 93       	push	r25
    47d2:	8f 93       	push	r24
    47d4:	81 e0       	ldi	r24, 0x01	; 1
    47d6:	96 e0       	ldi	r25, 0x06	; 6
    47d8:	9f 93       	push	r25
    47da:	8f 93       	push	r24
    47dc:	80 e4       	ldi	r24, 0x40	; 64
    47de:	97 e1       	ldi	r25, 0x17	; 23
    47e0:	9f 93       	push	r25
    47e2:	8f 93       	push	r24
    47e4:	0e 94 37 32 	call	0x646e	; 0x646e <sprintf>
    47e8:	60 e0       	ldi	r22, 0x00	; 0
    47ea:	70 e0       	ldi	r23, 0x00	; 0
    47ec:	80 e4       	ldi	r24, 0x40	; 64
    47ee:	97 e1       	ldi	r25, 0x17	; 23
    47f0:	31 de       	rcall	.-926    	; 0x4454 <_uploadMessageRc>
    47f2:	0f 90       	pop	r0
    47f4:	0f 90       	pop	r0
    47f6:	0f 90       	pop	r0
    47f8:	0f 90       	pop	r0
    47fa:	0f 90       	pop	r0
    47fc:	0f 90       	pop	r0
    47fe:	08 95       	ret

00004800 <lora_driver_configureToEu868>:
    4800:	2f 92       	push	r2
    4802:	3f 92       	push	r3
    4804:	4f 92       	push	r4
    4806:	5f 92       	push	r5
    4808:	6f 92       	push	r6
    480a:	7f 92       	push	r7
    480c:	8f 92       	push	r8
    480e:	9f 92       	push	r9
    4810:	af 92       	push	r10
    4812:	bf 92       	push	r11
    4814:	cf 92       	push	r12
    4816:	df 92       	push	r13
    4818:	ef 92       	push	r14
    481a:	ff 92       	push	r15
    481c:	0f 93       	push	r16
    481e:	1f 93       	push	r17
    4820:	cf 93       	push	r28
    4822:	df 93       	push	r29
    4824:	cd b7       	in	r28, 0x3d	; 61
    4826:	de b7       	in	r29, 0x3e	; 62
    4828:	a0 97       	sbiw	r28, 0x20	; 32
    482a:	0f b6       	in	r0, 0x3f	; 63
    482c:	f8 94       	cli
    482e:	de bf       	out	0x3e, r29	; 62
    4830:	0f be       	out	0x3f, r0	; 63
    4832:	cd bf       	out	0x3d, r28	; 61
    4834:	6e e2       	ldi	r22, 0x2E	; 46
    4836:	76 e0       	ldi	r23, 0x06	; 6
    4838:	8a e3       	ldi	r24, 0x3A	; 58
    483a:	96 e0       	ldi	r25, 0x06	; 6
    483c:	3c dd       	rcall	.-1416   	; 0x42b6 <_uploadMessage>
    483e:	95 dd       	rcall	.-1238   	; 0x436a <_reply2ReturnCode>
    4840:	81 11       	cpse	r24, r1
    4842:	a3 c0       	rjmp	.+326    	; 0x498a <lora_driver_configureToEu868+0x18a>
    4844:	80 e2       	ldi	r24, 0x20	; 32
    4846:	ec e2       	ldi	r30, 0x2C	; 44
    4848:	f2 e0       	ldi	r31, 0x02	; 2
    484a:	de 01       	movw	r26, r28
    484c:	11 96       	adiw	r26, 0x01	; 1
    484e:	01 90       	ld	r0, Z+
    4850:	0d 92       	st	X+, r0
    4852:	8a 95       	dec	r24
    4854:	e1 f7       	brne	.-8      	; 0x484e <lora_driver_configureToEu868+0x4e>
    4856:	9e 01       	movw	r18, r28
    4858:	2f 5f       	subi	r18, 0xFF	; 255
    485a:	3f 4f       	sbci	r19, 0xFF	; 255
    485c:	69 01       	movw	r12, r18
    485e:	e1 2c       	mov	r14, r1
    4860:	f1 2c       	mov	r15, r1
    4862:	0f 2e       	mov	r0, r31
    4864:	f6 e4       	ldi	r31, 0x46	; 70
    4866:	af 2e       	mov	r10, r31
    4868:	f6 e0       	ldi	r31, 0x06	; 6
    486a:	bf 2e       	mov	r11, r31
    486c:	f0 2d       	mov	r31, r0
    486e:	00 e4       	ldi	r16, 0x40	; 64
    4870:	17 e1       	ldi	r17, 0x17	; 23
    4872:	0f 2e       	mov	r0, r31
    4874:	ff e5       	ldi	r31, 0x5F	; 95
    4876:	4f 2e       	mov	r4, r31
    4878:	f6 e0       	ldi	r31, 0x06	; 6
    487a:	5f 2e       	mov	r5, r31
    487c:	f0 2d       	mov	r31, r0
    487e:	0f 2e       	mov	r0, r31
    4880:	f6 e7       	ldi	r31, 0x76	; 118
    4882:	8f 2e       	mov	r8, r31
    4884:	f6 e0       	ldi	r31, 0x06	; 6
    4886:	9f 2e       	mov	r9, r31
    4888:	f0 2d       	mov	r31, r0
    488a:	0f 2e       	mov	r0, r31
    488c:	f0 e9       	ldi	r31, 0x90	; 144
    488e:	6f 2e       	mov	r6, r31
    4890:	f6 e0       	ldi	r31, 0x06	; 6
    4892:	7f 2e       	mov	r7, r31
    4894:	f0 2d       	mov	r31, r0
    4896:	3e 2c       	mov	r3, r14
    4898:	2f 2c       	mov	r2, r15
    489a:	ff 92       	push	r15
    489c:	ef 92       	push	r14
    489e:	bf 92       	push	r11
    48a0:	af 92       	push	r10
    48a2:	1f 93       	push	r17
    48a4:	0f 93       	push	r16
    48a6:	0e 94 37 32 	call	0x646e	; 0x646e <sprintf>
    48aa:	60 e0       	ldi	r22, 0x00	; 0
    48ac:	70 e0       	ldi	r23, 0x00	; 0
    48ae:	c8 01       	movw	r24, r16
    48b0:	02 dd       	rcall	.-1532   	; 0x42b6 <_uploadMessage>
    48b2:	5b dd       	rcall	.-1354   	; 0x436a <_reply2ReturnCode>
    48b4:	0f 90       	pop	r0
    48b6:	0f 90       	pop	r0
    48b8:	0f 90       	pop	r0
    48ba:	0f 90       	pop	r0
    48bc:	0f 90       	pop	r0
    48be:	0f 90       	pop	r0
    48c0:	81 11       	cpse	r24, r1
    48c2:	63 c0       	rjmp	.+198    	; 0x498a <lora_driver_configureToEu868+0x18a>
    48c4:	32 e0       	ldi	r19, 0x02	; 2
    48c6:	3e 15       	cp	r19, r14
    48c8:	e8 f4       	brcc	.+58     	; 0x4904 <lora_driver_configureToEu868+0x104>
    48ca:	f6 01       	movw	r30, r12
    48cc:	83 81       	ldd	r24, Z+3	; 0x03
    48ce:	8f 93       	push	r24
    48d0:	82 81       	ldd	r24, Z+2	; 0x02
    48d2:	8f 93       	push	r24
    48d4:	81 81       	ldd	r24, Z+1	; 0x01
    48d6:	8f 93       	push	r24
    48d8:	80 81       	ld	r24, Z
    48da:	8f 93       	push	r24
    48dc:	ff 92       	push	r15
    48de:	ef 92       	push	r14
    48e0:	5f 92       	push	r5
    48e2:	4f 92       	push	r4
    48e4:	1f 93       	push	r17
    48e6:	0f 93       	push	r16
    48e8:	0e 94 37 32 	call	0x646e	; 0x646e <sprintf>
    48ec:	60 e0       	ldi	r22, 0x00	; 0
    48ee:	70 e0       	ldi	r23, 0x00	; 0
    48f0:	c8 01       	movw	r24, r16
    48f2:	e1 dc       	rcall	.-1598   	; 0x42b6 <_uploadMessage>
    48f4:	3a dd       	rcall	.-1420   	; 0x436a <_reply2ReturnCode>
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	f8 94       	cli
    48fa:	de bf       	out	0x3e, r29	; 62
    48fc:	0f be       	out	0x3f, r0	; 63
    48fe:	cd bf       	out	0x3d, r28	; 61
    4900:	81 11       	cpse	r24, r1
    4902:	43 c0       	rjmp	.+134    	; 0x498a <lora_driver_configureToEu868+0x18a>
    4904:	2f 92       	push	r2
    4906:	3f 92       	push	r3
    4908:	9f 92       	push	r9
    490a:	8f 92       	push	r8
    490c:	1f 93       	push	r17
    490e:	0f 93       	push	r16
    4910:	0e 94 37 32 	call	0x646e	; 0x646e <sprintf>
    4914:	60 e0       	ldi	r22, 0x00	; 0
    4916:	70 e0       	ldi	r23, 0x00	; 0
    4918:	c8 01       	movw	r24, r16
    491a:	cd dc       	rcall	.-1638   	; 0x42b6 <_uploadMessage>
    491c:	26 dd       	rcall	.-1460   	; 0x436a <_reply2ReturnCode>
    491e:	0f 90       	pop	r0
    4920:	0f 90       	pop	r0
    4922:	0f 90       	pop	r0
    4924:	0f 90       	pop	r0
    4926:	0f 90       	pop	r0
    4928:	0f 90       	pop	r0
    492a:	81 11       	cpse	r24, r1
    492c:	2e c0       	rjmp	.+92     	; 0x498a <lora_driver_configureToEu868+0x18a>
    492e:	2f 92       	push	r2
    4930:	3f 92       	push	r3
    4932:	7f 92       	push	r7
    4934:	6f 92       	push	r6
    4936:	1f 93       	push	r17
    4938:	0f 93       	push	r16
    493a:	0e 94 37 32 	call	0x646e	; 0x646e <sprintf>
    493e:	60 e0       	ldi	r22, 0x00	; 0
    4940:	70 e0       	ldi	r23, 0x00	; 0
    4942:	c8 01       	movw	r24, r16
    4944:	b8 dc       	rcall	.-1680   	; 0x42b6 <_uploadMessage>
    4946:	11 dd       	rcall	.-1502   	; 0x436a <_reply2ReturnCode>
    4948:	0f 90       	pop	r0
    494a:	0f 90       	pop	r0
    494c:	0f 90       	pop	r0
    494e:	0f 90       	pop	r0
    4950:	0f 90       	pop	r0
    4952:	0f 90       	pop	r0
    4954:	81 11       	cpse	r24, r1
    4956:	19 c0       	rjmp	.+50     	; 0x498a <lora_driver_configureToEu868+0x18a>
    4958:	3f ef       	ldi	r19, 0xFF	; 255
    495a:	e3 1a       	sub	r14, r19
    495c:	f3 0a       	sbc	r15, r19
    495e:	84 e0       	ldi	r24, 0x04	; 4
    4960:	c8 0e       	add	r12, r24
    4962:	d1 1c       	adc	r13, r1
    4964:	98 e0       	ldi	r25, 0x08	; 8
    4966:	e9 16       	cp	r14, r25
    4968:	f1 04       	cpc	r15, r1
    496a:	09 f0       	breq	.+2      	; 0x496e <lora_driver_configureToEu868+0x16e>
    496c:	94 cf       	rjmp	.-216    	; 0x4896 <lora_driver_configureToEu868+0x96>
    496e:	60 e0       	ldi	r22, 0x00	; 0
    4970:	70 e0       	ldi	r23, 0x00	; 0
    4972:	88 ea       	ldi	r24, 0xA8	; 168
    4974:	96 e0       	ldi	r25, 0x06	; 6
    4976:	9f dc       	rcall	.-1730   	; 0x42b6 <_uploadMessage>
    4978:	f8 dc       	rcall	.-1552   	; 0x436a <_reply2ReturnCode>
    497a:	81 11       	cpse	r24, r1
    497c:	06 c0       	rjmp	.+12     	; 0x498a <lora_driver_configureToEu868+0x18a>
    497e:	60 e0       	ldi	r22, 0x00	; 0
    4980:	70 e0       	ldi	r23, 0x00	; 0
    4982:	89 eb       	ldi	r24, 0xB9	; 185
    4984:	96 e0       	ldi	r25, 0x06	; 6
    4986:	97 dc       	rcall	.-1746   	; 0x42b6 <_uploadMessage>
    4988:	f0 dc       	rcall	.-1568   	; 0x436a <_reply2ReturnCode>
    498a:	a0 96       	adiw	r28, 0x20	; 32
    498c:	0f b6       	in	r0, 0x3f	; 63
    498e:	f8 94       	cli
    4990:	de bf       	out	0x3e, r29	; 62
    4992:	0f be       	out	0x3f, r0	; 63
    4994:	cd bf       	out	0x3d, r28	; 61
    4996:	df 91       	pop	r29
    4998:	cf 91       	pop	r28
    499a:	1f 91       	pop	r17
    499c:	0f 91       	pop	r16
    499e:	ff 90       	pop	r15
    49a0:	ef 90       	pop	r14
    49a2:	df 90       	pop	r13
    49a4:	cf 90       	pop	r12
    49a6:	bf 90       	pop	r11
    49a8:	af 90       	pop	r10
    49aa:	9f 90       	pop	r9
    49ac:	8f 90       	pop	r8
    49ae:	7f 90       	pop	r7
    49b0:	6f 90       	pop	r6
    49b2:	5f 90       	pop	r5
    49b4:	4f 90       	pop	r4
    49b6:	3f 90       	pop	r3
    49b8:	2f 90       	pop	r2
    49ba:	08 95       	ret

000049bc <lora_driver_setOtaaIdentity>:
    49bc:	ef 92       	push	r14
    49be:	ff 92       	push	r15
    49c0:	0f 93       	push	r16
    49c2:	1f 93       	push	r17
    49c4:	cf 93       	push	r28
    49c6:	df 93       	push	r29
    49c8:	ec 01       	movw	r28, r24
    49ca:	8b 01       	movw	r16, r22
    49cc:	7a 01       	movw	r14, r20
    49ce:	81 e0       	ldi	r24, 0x01	; 1
    49d0:	f4 de       	rcall	.-536    	; 0x47ba <lora_driver_setAdaptiveDataRate>
    49d2:	81 11       	cpse	r24, r1
    49d4:	0d c0       	rjmp	.+26     	; 0x49f0 <lora_driver_setOtaaIdentity+0x34>
    49d6:	ce 01       	movw	r24, r28
    49d8:	d4 dd       	rcall	.-1112   	; 0x4582 <lora_driver_setApplicationIdentifier>
    49da:	81 11       	cpse	r24, r1
    49dc:	09 c0       	rjmp	.+18     	; 0x49f0 <lora_driver_setOtaaIdentity+0x34>
    49de:	c8 01       	movw	r24, r16
    49e0:	e1 dd       	rcall	.-1086   	; 0x45a4 <lora_driver_setApplicationKey>
    49e2:	81 11       	cpse	r24, r1
    49e4:	05 c0       	rjmp	.+10     	; 0x49f0 <lora_driver_setOtaaIdentity+0x34>
    49e6:	c7 01       	movw	r24, r14
    49e8:	bb dd       	rcall	.-1162   	; 0x4560 <lora_driver_setDeviceIdentifier>
    49ea:	81 11       	cpse	r24, r1
    49ec:	01 c0       	rjmp	.+2      	; 0x49f0 <lora_driver_setOtaaIdentity+0x34>
    49ee:	eb dd       	rcall	.-1066   	; 0x45c6 <lora_driver_saveMac>
    49f0:	df 91       	pop	r29
    49f2:	cf 91       	pop	r28
    49f4:	1f 91       	pop	r17
    49f6:	0f 91       	pop	r16
    49f8:	ff 90       	pop	r15
    49fa:	ef 90       	pop	r14
    49fc:	08 95       	ret

000049fe <lora_driver_mapReturnCodeToText>:
    49fe:	90 e0       	ldi	r25, 0x00	; 0
    4a00:	fc 01       	movw	r30, r24
    4a02:	ee 0f       	add	r30, r30
    4a04:	ff 1f       	adc	r31, r31
    4a06:	8e 0f       	add	r24, r30
    4a08:	9f 1f       	adc	r25, r31
    4a0a:	fc 01       	movw	r30, r24
    4a0c:	ee 57       	subi	r30, 0x7E	; 126
    4a0e:	f8 4f       	sbci	r31, 0xF8	; 248
    4a10:	81 81       	ldd	r24, Z+1	; 0x01
    4a12:	92 81       	ldd	r25, Z+2	; 0x02
    4a14:	08 95       	ret

00004a16 <decode_port_no>:
    4a16:	dc 01       	movw	r26, r24
    4a18:	00 97       	sbiw	r24, 0x00	; 0
    4a1a:	29 f1       	breq	.+74     	; 0x4a66 <decode_port_no+0x50>
    4a1c:	fb 01       	movw	r30, r22
    4a1e:	20 81       	ld	r18, Z
    4a20:	fc 01       	movw	r30, r24
    4a22:	01 90       	ld	r0, Z+
    4a24:	00 20       	and	r0, r0
    4a26:	e9 f7       	brne	.-6      	; 0x4a22 <decode_port_no+0xc>
    4a28:	31 97       	sbiw	r30, 0x01	; 1
    4a2a:	e8 1b       	sub	r30, r24
    4a2c:	f9 0b       	sbc	r31, r25
    4a2e:	82 2f       	mov	r24, r18
    4a30:	90 e0       	ldi	r25, 0x00	; 0
    4a32:	e8 17       	cp	r30, r24
    4a34:	f9 07       	cpc	r31, r25
    4a36:	c8 f0       	brcs	.+50     	; 0x4a6a <decode_port_no+0x54>
    4a38:	80 e0       	ldi	r24, 0x00	; 0
    4a3a:	08 c0       	rjmp	.+16     	; 0x4a4c <decode_port_no+0x36>
    4a3c:	88 0f       	add	r24, r24
    4a3e:	38 2f       	mov	r19, r24
    4a40:	33 0f       	add	r19, r19
    4a42:	33 0f       	add	r19, r19
    4a44:	83 0f       	add	r24, r19
    4a46:	80 53       	subi	r24, 0x30	; 48
    4a48:	89 0f       	add	r24, r25
    4a4a:	2f 5f       	subi	r18, 0xFF	; 255
    4a4c:	fd 01       	movw	r30, r26
    4a4e:	e2 0f       	add	r30, r18
    4a50:	f1 1d       	adc	r31, r1
    4a52:	90 81       	ld	r25, Z
    4a54:	30 ed       	ldi	r19, 0xD0	; 208
    4a56:	39 0f       	add	r19, r25
    4a58:	3a 30       	cpi	r19, 0x0A	; 10
    4a5a:	10 f4       	brcc	.+4      	; 0x4a60 <decode_port_no+0x4a>
    4a5c:	91 11       	cpse	r25, r1
    4a5e:	ee cf       	rjmp	.-36     	; 0x4a3c <decode_port_no+0x26>
    4a60:	fb 01       	movw	r30, r22
    4a62:	20 83       	st	Z, r18
    4a64:	08 95       	ret
    4a66:	80 e0       	ldi	r24, 0x00	; 0
    4a68:	08 95       	ret
    4a6a:	80 e0       	ldi	r24, 0x00	; 0
    4a6c:	08 95       	ret

00004a6e <decode_hexadecimal_string_bytes>:
    4a6e:	0f 93       	push	r16
    4a70:	1f 93       	push	r17
    4a72:	cf 93       	push	r28
    4a74:	df 93       	push	r29
    4a76:	dc 01       	movw	r26, r24
    4a78:	ea 01       	movw	r28, r20
    4a7a:	20 97       	sbiw	r28, 0x00	; 0
    4a7c:	e1 f1       	breq	.+120    	; 0x4af6 <decode_hexadecimal_string_bytes+0x88>
    4a7e:	fa 01       	movw	r30, r20
    4a80:	01 90       	ld	r0, Z+
    4a82:	00 20       	and	r0, r0
    4a84:	e9 f7       	brne	.-6      	; 0x4a80 <decode_hexadecimal_string_bytes+0x12>
    4a86:	31 97       	sbiw	r30, 0x01	; 1
    4a88:	e4 1b       	sub	r30, r20
    4a8a:	f5 0b       	sbc	r31, r21
    4a8c:	32 97       	sbiw	r30, 0x02	; 2
    4a8e:	10 f5       	brcc	.+68     	; 0x4ad4 <decode_hexadecimal_string_bytes+0x66>
    4a90:	32 c0       	rjmp	.+100    	; 0x4af6 <decode_hexadecimal_string_bytes+0x88>
    4a92:	8d 01       	movw	r16, r26
    4a94:	04 0f       	add	r16, r20
    4a96:	15 1f       	adc	r17, r21
    4a98:	30 e0       	ldi	r19, 0x00	; 0
    4a9a:	ae 01       	movw	r20, r28
    4a9c:	42 0f       	add	r20, r18
    4a9e:	53 1f       	adc	r21, r19
    4aa0:	fa 01       	movw	r30, r20
    4aa2:	90 81       	ld	r25, Z
    4aa4:	91 34       	cpi	r25, 0x41	; 65
    4aa6:	28 f0       	brcs	.+10     	; 0x4ab2 <decode_hexadecimal_string_bytes+0x44>
    4aa8:	97 53       	subi	r25, 0x37	; 55
    4aaa:	59 2f       	mov	r21, r25
    4aac:	52 95       	swap	r21
    4aae:	50 7f       	andi	r21, 0xF0	; 240
    4ab0:	03 c0       	rjmp	.+6      	; 0x4ab8 <decode_hexadecimal_string_bytes+0x4a>
    4ab2:	59 2f       	mov	r21, r25
    4ab4:	52 95       	swap	r21
    4ab6:	50 7f       	andi	r21, 0xF0	; 240
    4ab8:	2c 0f       	add	r18, r28
    4aba:	3d 1f       	adc	r19, r29
    4abc:	f9 01       	movw	r30, r18
    4abe:	91 81       	ldd	r25, Z+1	; 0x01
    4ac0:	91 34       	cpi	r25, 0x41	; 65
    4ac2:	10 f0       	brcs	.+4      	; 0x4ac8 <decode_hexadecimal_string_bytes+0x5a>
    4ac4:	97 53       	subi	r25, 0x37	; 55
    4ac6:	01 c0       	rjmp	.+2      	; 0x4aca <decode_hexadecimal_string_bytes+0x5c>
    4ac8:	90 53       	subi	r25, 0x30	; 48
    4aca:	95 0f       	add	r25, r21
    4acc:	f8 01       	movw	r30, r16
    4ace:	90 83       	st	Z, r25
    4ad0:	8f 5f       	subi	r24, 0xFF	; 255
    4ad2:	01 c0       	rjmp	.+2      	; 0x4ad6 <decode_hexadecimal_string_bytes+0x68>
    4ad4:	80 e0       	ldi	r24, 0x00	; 0
    4ad6:	28 2f       	mov	r18, r24
    4ad8:	22 0f       	add	r18, r18
    4ada:	48 2f       	mov	r20, r24
    4adc:	50 e0       	ldi	r21, 0x00	; 0
    4ade:	fe 01       	movw	r30, r28
    4ae0:	01 90       	ld	r0, Z+
    4ae2:	00 20       	and	r0, r0
    4ae4:	e9 f7       	brne	.-6      	; 0x4ae0 <decode_hexadecimal_string_bytes+0x72>
    4ae6:	31 97       	sbiw	r30, 0x01	; 1
    4ae8:	ec 1b       	sub	r30, r28
    4aea:	fd 0b       	sbc	r31, r29
    4aec:	4e 17       	cp	r20, r30
    4aee:	5f 07       	cpc	r21, r31
    4af0:	10 f4       	brcc	.+4      	; 0x4af6 <decode_hexadecimal_string_bytes+0x88>
    4af2:	86 13       	cpse	r24, r22
    4af4:	ce cf       	rjmp	.-100    	; 0x4a92 <decode_hexadecimal_string_bytes+0x24>
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
    4afa:	1f 91       	pop	r17
    4afc:	0f 91       	pop	r16
    4afe:	08 95       	ret

00004b00 <_serialCallBack>:
    4b00:	80 91 9d 17 	lds	r24, 0x179D	; 0x80179d <crc_sum.1945>
    4b04:	86 0f       	add	r24, r22
    4b06:	80 93 9d 17 	sts	0x179D, r24	; 0x80179d <crc_sum.1945>
    4b0a:	90 91 a0 17 	lds	r25, 0x17A0	; 0x8017a0 <_mh_state>
    4b0e:	91 30       	cpi	r25, 0x01	; 1
    4b10:	79 f0       	breq	.+30     	; 0x4b30 <_serialCallBack+0x30>
    4b12:	28 f0       	brcs	.+10     	; 0x4b1e <_serialCallBack+0x1e>
    4b14:	92 30       	cpi	r25, 0x02	; 2
    4b16:	a9 f0       	breq	.+42     	; 0x4b42 <_serialCallBack+0x42>
    4b18:	93 30       	cpi	r25, 0x03	; 3
    4b1a:	19 f1       	breq	.+70     	; 0x4b62 <_serialCallBack+0x62>
    4b1c:	08 95       	ret
    4b1e:	6f 3f       	cpi	r22, 0xFF	; 255
    4b20:	09 f0       	breq	.+2      	; 0x4b24 <_serialCallBack+0x24>
    4b22:	48 c0       	rjmp	.+144    	; 0x4bb4 <_serialCallBack+0xb4>
    4b24:	10 92 9d 17 	sts	0x179D, r1	; 0x80179d <crc_sum.1945>
    4b28:	81 e0       	ldi	r24, 0x01	; 1
    4b2a:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <_mh_state>
    4b2e:	08 95       	ret
    4b30:	66 38       	cpi	r22, 0x86	; 134
    4b32:	09 f0       	breq	.+2      	; 0x4b36 <_serialCallBack+0x36>
    4b34:	3f c0       	rjmp	.+126    	; 0x4bb4 <_serialCallBack+0xb4>
    4b36:	10 92 9c 17 	sts	0x179C, r1	; 0x80179c <inDex.1943>
    4b3a:	82 e0       	ldi	r24, 0x02	; 2
    4b3c:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <_mh_state>
    4b40:	08 95       	ret
    4b42:	e0 91 9c 17 	lds	r30, 0x179C	; 0x80179c <inDex.1943>
    4b46:	81 e0       	ldi	r24, 0x01	; 1
    4b48:	8e 0f       	add	r24, r30
    4b4a:	80 93 9c 17 	sts	0x179C, r24	; 0x80179c <inDex.1943>
    4b4e:	f0 e0       	ldi	r31, 0x00	; 0
    4b50:	e6 56       	subi	r30, 0x66	; 102
    4b52:	f8 4e       	sbci	r31, 0xE8	; 232
    4b54:	60 83       	st	Z, r22
    4b56:	82 30       	cpi	r24, 0x02	; 2
    4b58:	69 f5       	brne	.+90     	; 0x4bb4 <_serialCallBack+0xb4>
    4b5a:	83 e0       	ldi	r24, 0x03	; 3
    4b5c:	80 93 a0 17 	sts	0x17A0, r24	; 0x8017a0 <_mh_state>
    4b60:	08 95       	ret
    4b62:	90 91 9c 17 	lds	r25, 0x179C	; 0x80179c <inDex.1943>
    4b66:	21 e0       	ldi	r18, 0x01	; 1
    4b68:	29 0f       	add	r18, r25
    4b6a:	20 93 9c 17 	sts	0x179C, r18	; 0x80179c <inDex.1943>
    4b6e:	96 30       	cpi	r25, 0x06	; 6
    4b70:	09 f5       	brne	.+66     	; 0x4bb4 <_serialCallBack+0xb4>
    4b72:	81 11       	cpse	r24, r1
    4b74:	0e c0       	rjmp	.+28     	; 0x4b92 <_serialCallBack+0x92>
    4b76:	ea e9       	ldi	r30, 0x9A	; 154
    4b78:	f7 e1       	ldi	r31, 0x17	; 23
    4b7a:	80 81       	ld	r24, Z
    4b7c:	90 e0       	ldi	r25, 0x00	; 0
    4b7e:	98 2f       	mov	r25, r24
    4b80:	88 27       	eor	r24, r24
    4b82:	21 81       	ldd	r18, Z+1	; 0x01
    4b84:	82 0f       	add	r24, r18
    4b86:	91 1d       	adc	r25, r1
    4b88:	90 93 a2 17 	sts	0x17A2, r25	; 0x8017a2 <_ppm+0x1>
    4b8c:	80 93 a1 17 	sts	0x17A1, r24	; 0x8017a1 <_ppm>
    4b90:	04 c0       	rjmp	.+8      	; 0x4b9a <_serialCallBack+0x9a>
    4b92:	10 92 a2 17 	sts	0x17A2, r1	; 0x8017a2 <_ppm+0x1>
    4b96:	10 92 a1 17 	sts	0x17A1, r1	; 0x8017a1 <_ppm>
    4b9a:	10 92 a0 17 	sts	0x17A0, r1	; 0x8017a0 <_mh_state>
    4b9e:	e0 91 9e 17 	lds	r30, 0x179E	; 0x80179e <_appCallBack>
    4ba2:	f0 91 9f 17 	lds	r31, 0x179F	; 0x80179f <_appCallBack+0x1>
    4ba6:	30 97       	sbiw	r30, 0x00	; 0
    4ba8:	29 f0       	breq	.+10     	; 0x4bb4 <_serialCallBack+0xb4>
    4baa:	80 91 a1 17 	lds	r24, 0x17A1	; 0x8017a1 <_ppm>
    4bae:	90 91 a2 17 	lds	r25, 0x17A2	; 0x8017a2 <_ppm+0x1>
    4bb2:	19 95       	eicall
    4bb4:	08 95       	ret

00004bb6 <mh_z19_initialise>:
    4bb6:	8f 92       	push	r8
    4bb8:	9f 92       	push	r9
    4bba:	af 92       	push	r10
    4bbc:	cf 92       	push	r12
    4bbe:	ef 92       	push	r14
    4bc0:	0f 93       	push	r16
    4bc2:	0f 2e       	mov	r0, r31
    4bc4:	f0 e8       	ldi	r31, 0x80	; 128
    4bc6:	8f 2e       	mov	r8, r31
    4bc8:	f5 e2       	ldi	r31, 0x25	; 37
    4bca:	9f 2e       	mov	r9, r31
    4bcc:	f0 2d       	mov	r31, r0
    4bce:	68 94       	set
    4bd0:	aa 24       	eor	r10, r10
    4bd2:	a4 f8       	bld	r10, 4
    4bd4:	68 94       	set
    4bd6:	cc 24       	eor	r12, r12
    4bd8:	c4 f8       	bld	r12, 4
    4bda:	e1 2c       	mov	r14, r1
    4bdc:	00 e0       	ldi	r16, 0x00	; 0
    4bde:	23 e0       	ldi	r18, 0x03	; 3
    4be0:	40 e8       	ldi	r20, 0x80	; 128
    4be2:	55 e2       	ldi	r21, 0x25	; 37
    4be4:	60 e0       	ldi	r22, 0x00	; 0
    4be6:	70 e0       	ldi	r23, 0x00	; 0
    4be8:	4b d0       	rcall	.+150    	; 0x4c80 <serial_create>
    4bea:	90 93 a4 17 	sts	0x17A4, r25	; 0x8017a4 <_serial+0x1>
    4bee:	80 93 a3 17 	sts	0x17A3, r24	; 0x8017a3 <_serial>
    4bf2:	0f 91       	pop	r16
    4bf4:	ef 90       	pop	r14
    4bf6:	cf 90       	pop	r12
    4bf8:	af 90       	pop	r10
    4bfa:	9f 90       	pop	r9
    4bfc:	8f 90       	pop	r8
    4bfe:	08 95       	ret

00004c00 <mh_z19_takeMeassuring>:
    4c00:	cf 93       	push	r28
    4c02:	df 93       	push	r29
    4c04:	cd b7       	in	r28, 0x3d	; 61
    4c06:	de b7       	in	r29, 0x3e	; 62
    4c08:	29 97       	sbiw	r28, 0x09	; 9
    4c0a:	0f b6       	in	r0, 0x3f	; 63
    4c0c:	f8 94       	cli
    4c0e:	de bf       	out	0x3e, r29	; 62
    4c10:	0f be       	out	0x3f, r0	; 63
    4c12:	cd bf       	out	0x3d, r28	; 61
    4c14:	89 e0       	ldi	r24, 0x09	; 9
    4c16:	ec e4       	ldi	r30, 0x4C	; 76
    4c18:	f2 e0       	ldi	r31, 0x02	; 2
    4c1a:	9e 01       	movw	r18, r28
    4c1c:	2f 5f       	subi	r18, 0xFF	; 255
    4c1e:	3f 4f       	sbci	r19, 0xFF	; 255
    4c20:	d9 01       	movw	r26, r18
    4c22:	01 90       	ld	r0, Z+
    4c24:	0d 92       	st	X+, r0
    4c26:	8a 95       	dec	r24
    4c28:	e1 f7       	brne	.-8      	; 0x4c22 <mh_z19_takeMeassuring+0x22>
    4c2a:	10 92 a2 17 	sts	0x17A2, r1	; 0x8017a2 <_ppm+0x1>
    4c2e:	10 92 a1 17 	sts	0x17A1, r1	; 0x8017a1 <_ppm>
    4c32:	80 91 a3 17 	lds	r24, 0x17A3	; 0x8017a3 <_serial>
    4c36:	90 91 a4 17 	lds	r25, 0x17A4	; 0x8017a4 <_serial+0x1>
    4c3a:	00 97       	sbiw	r24, 0x00	; 0
    4c3c:	31 f0       	breq	.+12     	; 0x4c4a <mh_z19_takeMeassuring+0x4a>
    4c3e:	42 2f       	mov	r20, r18
    4c40:	53 2f       	mov	r21, r19
    4c42:	69 e0       	ldi	r22, 0x09	; 9
    4c44:	ef d0       	rcall	.+478    	; 0x4e24 <serial_sendBytes>
    4c46:	80 e0       	ldi	r24, 0x00	; 0
    4c48:	01 c0       	rjmp	.+2      	; 0x4c4c <mh_z19_takeMeassuring+0x4c>
    4c4a:	82 e0       	ldi	r24, 0x02	; 2
    4c4c:	29 96       	adiw	r28, 0x09	; 9
    4c4e:	0f b6       	in	r0, 0x3f	; 63
    4c50:	f8 94       	cli
    4c52:	de bf       	out	0x3e, r29	; 62
    4c54:	0f be       	out	0x3f, r0	; 63
    4c56:	cd bf       	out	0x3d, r28	; 61
    4c58:	df 91       	pop	r29
    4c5a:	cf 91       	pop	r28
    4c5c:	08 95       	ret

00004c5e <mh_z19_getCo2Ppm>:
    4c5e:	20 91 a1 17 	lds	r18, 0x17A1	; 0x8017a1 <_ppm>
    4c62:	30 91 a2 17 	lds	r19, 0x17A2	; 0x8017a2 <_ppm+0x1>
    4c66:	21 15       	cp	r18, r1
    4c68:	31 05       	cpc	r19, r1
    4c6a:	29 f4       	brne	.+10     	; 0x4c76 <mh_z19_getCo2Ppm+0x18>
    4c6c:	fc 01       	movw	r30, r24
    4c6e:	11 82       	std	Z+1, r1	; 0x01
    4c70:	10 82       	st	Z, r1
    4c72:	81 e0       	ldi	r24, 0x01	; 1
    4c74:	08 95       	ret
    4c76:	fc 01       	movw	r30, r24
    4c78:	31 83       	std	Z+1, r19	; 0x01
    4c7a:	20 83       	st	Z, r18
    4c7c:	80 e0       	ldi	r24, 0x00	; 0
    4c7e:	08 95       	ret

00004c80 <serial_create>:
    4c80:	2f 92       	push	r2
    4c82:	3f 92       	push	r3
    4c84:	4f 92       	push	r4
    4c86:	5f 92       	push	r5
    4c88:	6f 92       	push	r6
    4c8a:	7f 92       	push	r7
    4c8c:	8f 92       	push	r8
    4c8e:	9f 92       	push	r9
    4c90:	af 92       	push	r10
    4c92:	cf 92       	push	r12
    4c94:	ef 92       	push	r14
    4c96:	ff 92       	push	r15
    4c98:	0f 93       	push	r16
    4c9a:	1f 93       	push	r17
    4c9c:	cf 93       	push	r28
    4c9e:	df 93       	push	r29
    4ca0:	cd b7       	in	r28, 0x3d	; 61
    4ca2:	de b7       	in	r29, 0x3e	; 62
    4ca4:	f8 2e       	mov	r15, r24
    4ca6:	2a 01       	movw	r4, r20
    4ca8:	3b 01       	movw	r6, r22
    4caa:	88 e0       	ldi	r24, 0x08	; 8
    4cac:	90 e0       	ldi	r25, 0x00	; 0
    4cae:	0e 94 66 30 	call	0x60cc	; 0x60cc <malloc>
    4cb2:	8c 01       	movw	r16, r24
    4cb4:	8f 2d       	mov	r24, r15
    4cb6:	90 e0       	ldi	r25, 0x00	; 0
    4cb8:	fc 01       	movw	r30, r24
    4cba:	ee 0f       	add	r30, r30
    4cbc:	ff 1f       	adc	r31, r31
    4cbe:	eb 55       	subi	r30, 0x5B	; 91
    4cc0:	f8 4e       	sbci	r31, 0xE8	; 232
    4cc2:	11 83       	std	Z+1, r17	; 0x01
    4cc4:	00 83       	st	Z, r16
    4cc6:	01 15       	cp	r16, r1
    4cc8:	11 05       	cpc	r17, r1
    4cca:	09 f4       	brne	.+2      	; 0x4cce <serial_create+0x4e>
    4ccc:	6e c0       	rjmp	.+220    	; 0x4daa <serial_create+0x12a>
    4cce:	88 0f       	add	r24, r24
    4cd0:	99 1f       	adc	r25, r25
    4cd2:	fc 01       	movw	r30, r24
    4cd4:	eb 5e       	subi	r30, 0xEB	; 235
    4cd6:	fd 4f       	sbci	r31, 0xFD	; 253
    4cd8:	80 81       	ld	r24, Z
    4cda:	91 81       	ldd	r25, Z+1	; 0x01
    4cdc:	d8 01       	movw	r26, r16
    4cde:	8d 93       	st	X+, r24
    4ce0:	9c 93       	st	X, r25
    4ce2:	8c 2d       	mov	r24, r12
    4ce4:	90 e0       	ldi	r25, 0x00	; 0
    4ce6:	88 0f       	add	r24, r24
    4ce8:	99 1f       	adc	r25, r25
    4cea:	88 0f       	add	r24, r24
    4cec:	99 1f       	adc	r25, r25
    4cee:	0e 94 66 30 	call	0x60cc	; 0x60cc <malloc>
    4cf2:	1c 01       	movw	r2, r24
    4cf4:	86 e0       	ldi	r24, 0x06	; 6
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	0e 94 66 30 	call	0x60cc	; 0x60cc <malloc>
    4cfc:	7c 01       	movw	r14, r24
    4cfe:	4c 2d       	mov	r20, r12
    4d00:	b1 01       	movw	r22, r2
    4d02:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <fifo_init>
    4d06:	f8 01       	movw	r30, r16
    4d08:	f5 82       	std	Z+5, r15	; 0x05
    4d0a:	e4 82       	std	Z+4, r14	; 0x04
    4d0c:	8a 2d       	mov	r24, r10
    4d0e:	90 e0       	ldi	r25, 0x00	; 0
    4d10:	88 0f       	add	r24, r24
    4d12:	99 1f       	adc	r25, r25
    4d14:	88 0f       	add	r24, r24
    4d16:	99 1f       	adc	r25, r25
    4d18:	0e 94 66 30 	call	0x60cc	; 0x60cc <malloc>
    4d1c:	1c 01       	movw	r2, r24
    4d1e:	86 e0       	ldi	r24, 0x06	; 6
    4d20:	90 e0       	ldi	r25, 0x00	; 0
    4d22:	0e 94 66 30 	call	0x60cc	; 0x60cc <malloc>
    4d26:	7c 01       	movw	r14, r24
    4d28:	4a 2d       	mov	r20, r10
    4d2a:	b1 01       	movw	r22, r2
    4d2c:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <fifo_init>
    4d30:	d8 01       	movw	r26, r16
    4d32:	13 96       	adiw	r26, 0x03	; 3
    4d34:	fc 92       	st	X, r15
    4d36:	ee 92       	st	-X, r14
    4d38:	12 97       	sbiw	r26, 0x02	; 2
    4d3a:	17 96       	adiw	r26, 0x07	; 7
    4d3c:	9c 92       	st	X, r9
    4d3e:	8e 92       	st	-X, r8
    4d40:	16 97       	sbiw	r26, 0x06	; 6
    4d42:	ff b6       	in	r15, 0x3f	; 63
    4d44:	f8 94       	cli
    4d46:	ed 91       	ld	r30, X+
    4d48:	fc 91       	ld	r31, X
    4d4a:	11 97       	sbiw	r26, 0x01	; 1
    4d4c:	36 97       	sbiw	r30, 0x06	; 6
    4d4e:	80 81       	ld	r24, Z
    4d50:	82 60       	ori	r24, 0x02	; 2
    4d52:	80 83       	st	Z, r24
    4d54:	8d 90       	ld	r8, X+
    4d56:	9c 90       	ld	r9, X
    4d58:	c3 01       	movw	r24, r6
    4d5a:	b2 01       	movw	r22, r4
    4d5c:	18 d8       	rcall	.-4048   	; 0x3d8e <__floatunsisf>
    4d5e:	20 e0       	ldi	r18, 0x00	; 0
    4d60:	30 e0       	ldi	r19, 0x00	; 0
    4d62:	40 e0       	ldi	r20, 0x00	; 0
    4d64:	51 e4       	ldi	r21, 0x41	; 65
    4d66:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <__mulsf3>
    4d6a:	9b 01       	movw	r18, r22
    4d6c:	ac 01       	movw	r20, r24
    4d6e:	60 e0       	ldi	r22, 0x00	; 0
    4d70:	74 e2       	ldi	r23, 0x24	; 36
    4d72:	84 e7       	ldi	r24, 0x74	; 116
    4d74:	9b e4       	ldi	r25, 0x4B	; 75
    4d76:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <__divsf3>
    4d7a:	20 e0       	ldi	r18, 0x00	; 0
    4d7c:	30 e0       	ldi	r19, 0x00	; 0
    4d7e:	40 e8       	ldi	r20, 0x80	; 128
    4d80:	5f e3       	ldi	r21, 0x3F	; 63
    4d82:	0e 94 dc 2e 	call	0x5db8	; 0x5db8 <__subsf3>
    4d86:	0e 94 9b 1e 	call	0x3d36	; 0x3d36 <__fixunssfsi>
    4d8a:	f4 01       	movw	r30, r8
    4d8c:	32 97       	sbiw	r30, 0x02	; 2
    4d8e:	60 83       	st	Z, r22
    4d90:	d8 01       	movw	r26, r16
    4d92:	ed 91       	ld	r30, X+
    4d94:	fc 91       	ld	r31, X
    4d96:	11 97       	sbiw	r26, 0x01	; 1
    4d98:	35 97       	sbiw	r30, 0x05	; 5
    4d9a:	88 e9       	ldi	r24, 0x98	; 152
    4d9c:	80 83       	st	Z, r24
    4d9e:	ed 91       	ld	r30, X+
    4da0:	fc 91       	ld	r31, X
    4da2:	34 97       	sbiw	r30, 0x04	; 4
    4da4:	86 e0       	ldi	r24, 0x06	; 6
    4da6:	80 83       	st	Z, r24
    4da8:	ff be       	out	0x3f, r15	; 63
    4daa:	c8 01       	movw	r24, r16
    4dac:	df 91       	pop	r29
    4dae:	cf 91       	pop	r28
    4db0:	1f 91       	pop	r17
    4db2:	0f 91       	pop	r16
    4db4:	ff 90       	pop	r15
    4db6:	ef 90       	pop	r14
    4db8:	cf 90       	pop	r12
    4dba:	af 90       	pop	r10
    4dbc:	9f 90       	pop	r9
    4dbe:	8f 90       	pop	r8
    4dc0:	7f 90       	pop	r7
    4dc2:	6f 90       	pop	r6
    4dc4:	5f 90       	pop	r5
    4dc6:	4f 90       	pop	r4
    4dc8:	3f 90       	pop	r3
    4dca:	2f 90       	pop	r2
    4dcc:	08 95       	ret

00004dce <serial_sendByte>:
    4dce:	cf 93       	push	r28
    4dd0:	df 93       	push	r29
    4dd2:	dc 01       	movw	r26, r24
    4dd4:	89 2b       	or	r24, r25
    4dd6:	01 f1       	breq	.+64     	; 0x4e18 <serial_sendByte+0x4a>
    4dd8:	12 96       	adiw	r26, 0x02	; 2
    4dda:	ed 91       	ld	r30, X+
    4ddc:	fc 91       	ld	r31, X
    4dde:	13 97       	sbiw	r26, 0x03	; 3
    4de0:	93 81       	ldd	r25, Z+3	; 0x03
    4de2:	82 81       	ldd	r24, Z+2	; 0x02
    4de4:	25 81       	ldd	r18, Z+5	; 0x05
    4de6:	98 1b       	sub	r25, r24
    4de8:	92 23       	and	r25, r18
    4dea:	84 81       	ldd	r24, Z+4	; 0x04
    4dec:	98 17       	cp	r25, r24
    4dee:	b1 f0       	breq	.+44     	; 0x4e1c <serial_sendByte+0x4e>
    4df0:	83 81       	ldd	r24, Z+3	; 0x03
    4df2:	26 95       	lsr	r18
    4df4:	28 23       	and	r18, r24
    4df6:	c0 81       	ld	r28, Z
    4df8:	d1 81       	ldd	r29, Z+1	; 0x01
    4dfa:	c2 0f       	add	r28, r18
    4dfc:	d1 1d       	adc	r29, r1
    4dfe:	68 83       	st	Y, r22
    4e00:	8f 5f       	subi	r24, 0xFF	; 255
    4e02:	95 81       	ldd	r25, Z+5	; 0x05
    4e04:	89 23       	and	r24, r25
    4e06:	83 83       	std	Z+3, r24	; 0x03
    4e08:	ed 91       	ld	r30, X+
    4e0a:	fc 91       	ld	r31, X
    4e0c:	35 97       	sbiw	r30, 0x05	; 5
    4e0e:	80 81       	ld	r24, Z
    4e10:	80 62       	ori	r24, 0x20	; 32
    4e12:	80 83       	st	Z, r24
    4e14:	80 e0       	ldi	r24, 0x00	; 0
    4e16:	03 c0       	rjmp	.+6      	; 0x4e1e <serial_sendByte+0x50>
    4e18:	81 e0       	ldi	r24, 0x01	; 1
    4e1a:	01 c0       	rjmp	.+2      	; 0x4e1e <serial_sendByte+0x50>
    4e1c:	82 e0       	ldi	r24, 0x02	; 2
    4e1e:	df 91       	pop	r29
    4e20:	cf 91       	pop	r28
    4e22:	08 95       	ret

00004e24 <serial_sendBytes>:
    4e24:	ef 92       	push	r14
    4e26:	ff 92       	push	r15
    4e28:	0f 93       	push	r16
    4e2a:	1f 93       	push	r17
    4e2c:	cf 93       	push	r28
    4e2e:	df 93       	push	r29
    4e30:	7c 01       	movw	r14, r24
    4e32:	00 97       	sbiw	r24, 0x00	; 0
    4e34:	09 f4       	brne	.+2      	; 0x4e38 <serial_sendBytes+0x14>
    4e36:	41 c0       	rjmp	.+130    	; 0x4eba <serial_sendBytes+0x96>
    4e38:	dc 01       	movw	r26, r24
    4e3a:	12 96       	adiw	r26, 0x02	; 2
    4e3c:	ed 91       	ld	r30, X+
    4e3e:	fc 91       	ld	r31, X
    4e40:	13 97       	sbiw	r26, 0x03	; 3
    4e42:	93 81       	ldd	r25, Z+3	; 0x03
    4e44:	82 81       	ldd	r24, Z+2	; 0x02
    4e46:	98 1b       	sub	r25, r24
    4e48:	85 81       	ldd	r24, Z+5	; 0x05
    4e4a:	98 23       	and	r25, r24
    4e4c:	84 81       	ldd	r24, Z+4	; 0x04
    4e4e:	89 1b       	sub	r24, r25
    4e50:	86 17       	cp	r24, r22
    4e52:	a8 f1       	brcs	.+106    	; 0x4ebe <serial_sendBytes+0x9a>
    4e54:	66 23       	and	r22, r22
    4e56:	41 f1       	breq	.+80     	; 0x4ea8 <serial_sendBytes+0x84>
    4e58:	84 2f       	mov	r24, r20
    4e5a:	95 2f       	mov	r25, r21
    4e5c:	dc 01       	movw	r26, r24
    4e5e:	61 50       	subi	r22, 0x01	; 1
    4e60:	46 2f       	mov	r20, r22
    4e62:	50 e0       	ldi	r21, 0x00	; 0
    4e64:	4f 5f       	subi	r20, 0xFF	; 255
    4e66:	5f 4f       	sbci	r21, 0xFF	; 255
    4e68:	48 0f       	add	r20, r24
    4e6a:	59 1f       	adc	r21, r25
    4e6c:	e7 01       	movw	r28, r14
    4e6e:	ea 81       	ldd	r30, Y+2	; 0x02
    4e70:	fb 81       	ldd	r31, Y+3	; 0x03
    4e72:	93 81       	ldd	r25, Z+3	; 0x03
    4e74:	82 81       	ldd	r24, Z+2	; 0x02
    4e76:	25 81       	ldd	r18, Z+5	; 0x05
    4e78:	98 1b       	sub	r25, r24
    4e7a:	92 23       	and	r25, r18
    4e7c:	84 81       	ldd	r24, Z+4	; 0x04
    4e7e:	98 17       	cp	r25, r24
    4e80:	79 f0       	breq	.+30     	; 0x4ea0 <serial_sendBytes+0x7c>
    4e82:	8c 91       	ld	r24, X
    4e84:	93 81       	ldd	r25, Z+3	; 0x03
    4e86:	26 95       	lsr	r18
    4e88:	29 23       	and	r18, r25
    4e8a:	60 81       	ld	r22, Z
    4e8c:	71 81       	ldd	r23, Z+1	; 0x01
    4e8e:	8b 01       	movw	r16, r22
    4e90:	02 0f       	add	r16, r18
    4e92:	11 1d       	adc	r17, r1
    4e94:	e8 01       	movw	r28, r16
    4e96:	88 83       	st	Y, r24
    4e98:	9f 5f       	subi	r25, 0xFF	; 255
    4e9a:	85 81       	ldd	r24, Z+5	; 0x05
    4e9c:	98 23       	and	r25, r24
    4e9e:	93 83       	std	Z+3, r25	; 0x03
    4ea0:	11 96       	adiw	r26, 0x01	; 1
    4ea2:	a4 17       	cp	r26, r20
    4ea4:	b5 07       	cpc	r27, r21
    4ea6:	11 f7       	brne	.-60     	; 0x4e6c <serial_sendBytes+0x48>
    4ea8:	d7 01       	movw	r26, r14
    4eaa:	ed 91       	ld	r30, X+
    4eac:	fc 91       	ld	r31, X
    4eae:	35 97       	sbiw	r30, 0x05	; 5
    4eb0:	80 81       	ld	r24, Z
    4eb2:	80 62       	ori	r24, 0x20	; 32
    4eb4:	80 83       	st	Z, r24
    4eb6:	80 e0       	ldi	r24, 0x00	; 0
    4eb8:	03 c0       	rjmp	.+6      	; 0x4ec0 <serial_sendBytes+0x9c>
    4eba:	81 e0       	ldi	r24, 0x01	; 1
    4ebc:	01 c0       	rjmp	.+2      	; 0x4ec0 <serial_sendBytes+0x9c>
    4ebe:	82 e0       	ldi	r24, 0x02	; 2
    4ec0:	df 91       	pop	r29
    4ec2:	cf 91       	pop	r28
    4ec4:	1f 91       	pop	r17
    4ec6:	0f 91       	pop	r16
    4ec8:	ff 90       	pop	r15
    4eca:	ef 90       	pop	r14
    4ecc:	08 95       	ret

00004ece <serial_getByte>:
    4ece:	00 97       	sbiw	r24, 0x00	; 0
    4ed0:	d1 f0       	breq	.+52     	; 0x4f06 <serial_getByte+0x38>
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	14 96       	adiw	r26, 0x04	; 4
    4ed6:	ed 91       	ld	r30, X+
    4ed8:	fc 91       	ld	r31, X
    4eda:	15 97       	sbiw	r26, 0x05	; 5
    4edc:	93 81       	ldd	r25, Z+3	; 0x03
    4ede:	82 81       	ldd	r24, Z+2	; 0x02
    4ee0:	98 17       	cp	r25, r24
    4ee2:	99 f0       	breq	.+38     	; 0x4f0a <serial_getByte+0x3c>
    4ee4:	92 81       	ldd	r25, Z+2	; 0x02
    4ee6:	85 81       	ldd	r24, Z+5	; 0x05
    4ee8:	86 95       	lsr	r24
    4eea:	89 23       	and	r24, r25
    4eec:	a0 81       	ld	r26, Z
    4eee:	b1 81       	ldd	r27, Z+1	; 0x01
    4ef0:	a8 0f       	add	r26, r24
    4ef2:	b1 1d       	adc	r27, r1
    4ef4:	8c 91       	ld	r24, X
    4ef6:	db 01       	movw	r26, r22
    4ef8:	8c 93       	st	X, r24
    4efa:	9f 5f       	subi	r25, 0xFF	; 255
    4efc:	85 81       	ldd	r24, Z+5	; 0x05
    4efe:	98 23       	and	r25, r24
    4f00:	92 83       	std	Z+2, r25	; 0x02
    4f02:	80 e0       	ldi	r24, 0x00	; 0
    4f04:	08 95       	ret
    4f06:	81 e0       	ldi	r24, 0x01	; 1
    4f08:	08 95       	ret
    4f0a:	83 e0       	ldi	r24, 0x03	; 3
    4f0c:	08 95       	ret

00004f0e <__vector_25>:
    4f0e:	1f 92       	push	r1
    4f10:	0f 92       	push	r0
    4f12:	0f b6       	in	r0, 0x3f	; 63
    4f14:	0f 92       	push	r0
    4f16:	11 24       	eor	r1, r1
    4f18:	0b b6       	in	r0, 0x3b	; 59
    4f1a:	0f 92       	push	r0
    4f1c:	2f 93       	push	r18
    4f1e:	3f 93       	push	r19
    4f20:	4f 93       	push	r20
    4f22:	5f 93       	push	r21
    4f24:	6f 93       	push	r22
    4f26:	7f 93       	push	r23
    4f28:	8f 93       	push	r24
    4f2a:	9f 93       	push	r25
    4f2c:	af 93       	push	r26
    4f2e:	bf 93       	push	r27
    4f30:	cf 93       	push	r28
    4f32:	df 93       	push	r29
    4f34:	ef 93       	push	r30
    4f36:	ff 93       	push	r31
    4f38:	a0 91 a5 17 	lds	r26, 0x17A5	; 0x8017a5 <_ser_handle>
    4f3c:	b0 91 a6 17 	lds	r27, 0x17A6	; 0x8017a6 <_ser_handle+0x1>
    4f40:	10 97       	sbiw	r26, 0x00	; 0
    4f42:	11 f1       	breq	.+68     	; 0x4f88 <__vector_25+0x7a>
    4f44:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    4f48:	14 96       	adiw	r26, 0x04	; 4
    4f4a:	ed 91       	ld	r30, X+
    4f4c:	fc 91       	ld	r31, X
    4f4e:	15 97       	sbiw	r26, 0x05	; 5
    4f50:	93 81       	ldd	r25, Z+3	; 0x03
    4f52:	82 81       	ldd	r24, Z+2	; 0x02
    4f54:	25 81       	ldd	r18, Z+5	; 0x05
    4f56:	98 1b       	sub	r25, r24
    4f58:	92 23       	and	r25, r18
    4f5a:	84 81       	ldd	r24, Z+4	; 0x04
    4f5c:	98 17       	cp	r25, r24
    4f5e:	61 f0       	breq	.+24     	; 0x4f78 <__vector_25+0x6a>
    4f60:	83 81       	ldd	r24, Z+3	; 0x03
    4f62:	26 95       	lsr	r18
    4f64:	28 23       	and	r18, r24
    4f66:	c0 81       	ld	r28, Z
    4f68:	d1 81       	ldd	r29, Z+1	; 0x01
    4f6a:	c2 0f       	add	r28, r18
    4f6c:	d1 1d       	adc	r29, r1
    4f6e:	68 83       	st	Y, r22
    4f70:	8f 5f       	subi	r24, 0xFF	; 255
    4f72:	95 81       	ldd	r25, Z+5	; 0x05
    4f74:	89 23       	and	r24, r25
    4f76:	83 83       	std	Z+3, r24	; 0x03
    4f78:	16 96       	adiw	r26, 0x06	; 6
    4f7a:	ed 91       	ld	r30, X+
    4f7c:	fc 91       	ld	r31, X
    4f7e:	17 97       	sbiw	r26, 0x07	; 7
    4f80:	30 97       	sbiw	r30, 0x00	; 0
    4f82:	11 f0       	breq	.+4      	; 0x4f88 <__vector_25+0x7a>
    4f84:	cd 01       	movw	r24, r26
    4f86:	19 95       	eicall
    4f88:	ff 91       	pop	r31
    4f8a:	ef 91       	pop	r30
    4f8c:	df 91       	pop	r29
    4f8e:	cf 91       	pop	r28
    4f90:	bf 91       	pop	r27
    4f92:	af 91       	pop	r26
    4f94:	9f 91       	pop	r25
    4f96:	8f 91       	pop	r24
    4f98:	7f 91       	pop	r23
    4f9a:	6f 91       	pop	r22
    4f9c:	5f 91       	pop	r21
    4f9e:	4f 91       	pop	r20
    4fa0:	3f 91       	pop	r19
    4fa2:	2f 91       	pop	r18
    4fa4:	0f 90       	pop	r0
    4fa6:	0b be       	out	0x3b, r0	; 59
    4fa8:	0f 90       	pop	r0
    4faa:	0f be       	out	0x3f, r0	; 63
    4fac:	0f 90       	pop	r0
    4fae:	1f 90       	pop	r1
    4fb0:	18 95       	reti

00004fb2 <__vector_26>:
    4fb2:	1f 92       	push	r1
    4fb4:	0f 92       	push	r0
    4fb6:	0f b6       	in	r0, 0x3f	; 63
    4fb8:	0f 92       	push	r0
    4fba:	11 24       	eor	r1, r1
    4fbc:	0b b6       	in	r0, 0x3b	; 59
    4fbe:	0f 92       	push	r0
    4fc0:	2f 93       	push	r18
    4fc2:	8f 93       	push	r24
    4fc4:	9f 93       	push	r25
    4fc6:	af 93       	push	r26
    4fc8:	bf 93       	push	r27
    4fca:	ef 93       	push	r30
    4fcc:	ff 93       	push	r31
    4fce:	e0 91 a5 17 	lds	r30, 0x17A5	; 0x8017a5 <_ser_handle>
    4fd2:	f0 91 a6 17 	lds	r31, 0x17A6	; 0x8017a6 <_ser_handle+0x1>
    4fd6:	30 97       	sbiw	r30, 0x00	; 0
    4fd8:	b9 f0       	breq	.+46     	; 0x5008 <__vector_26+0x56>
    4fda:	02 80       	ldd	r0, Z+2	; 0x02
    4fdc:	f3 81       	ldd	r31, Z+3	; 0x03
    4fde:	e0 2d       	mov	r30, r0
    4fe0:	93 81       	ldd	r25, Z+3	; 0x03
    4fe2:	82 81       	ldd	r24, Z+2	; 0x02
    4fe4:	98 17       	cp	r25, r24
    4fe6:	b1 f0       	breq	.+44     	; 0x5014 <__vector_26+0x62>
    4fe8:	92 81       	ldd	r25, Z+2	; 0x02
    4fea:	85 81       	ldd	r24, Z+5	; 0x05
    4fec:	28 2f       	mov	r18, r24
    4fee:	26 95       	lsr	r18
    4ff0:	29 23       	and	r18, r25
    4ff2:	a0 81       	ld	r26, Z
    4ff4:	b1 81       	ldd	r27, Z+1	; 0x01
    4ff6:	a2 0f       	add	r26, r18
    4ff8:	b1 1d       	adc	r27, r1
    4ffa:	2c 91       	ld	r18, X
    4ffc:	9f 5f       	subi	r25, 0xFF	; 255
    4ffe:	89 23       	and	r24, r25
    5000:	82 83       	std	Z+2, r24	; 0x02
    5002:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    5006:	0b c0       	rjmp	.+22     	; 0x501e <__vector_26+0x6c>
    5008:	e1 ec       	ldi	r30, 0xC1	; 193
    500a:	f0 e0       	ldi	r31, 0x00	; 0
    500c:	80 81       	ld	r24, Z
    500e:	8f 7d       	andi	r24, 0xDF	; 223
    5010:	80 83       	st	Z, r24
    5012:	05 c0       	rjmp	.+10     	; 0x501e <__vector_26+0x6c>
    5014:	e1 ec       	ldi	r30, 0xC1	; 193
    5016:	f0 e0       	ldi	r31, 0x00	; 0
    5018:	80 81       	ld	r24, Z
    501a:	8f 7d       	andi	r24, 0xDF	; 223
    501c:	80 83       	st	Z, r24
    501e:	ff 91       	pop	r31
    5020:	ef 91       	pop	r30
    5022:	bf 91       	pop	r27
    5024:	af 91       	pop	r26
    5026:	9f 91       	pop	r25
    5028:	8f 91       	pop	r24
    502a:	2f 91       	pop	r18
    502c:	0f 90       	pop	r0
    502e:	0b be       	out	0x3b, r0	; 59
    5030:	0f 90       	pop	r0
    5032:	0f be       	out	0x3f, r0	; 63
    5034:	0f 90       	pop	r0
    5036:	1f 90       	pop	r1
    5038:	18 95       	reti

0000503a <__vector_36>:
    503a:	1f 92       	push	r1
    503c:	0f 92       	push	r0
    503e:	0f b6       	in	r0, 0x3f	; 63
    5040:	0f 92       	push	r0
    5042:	11 24       	eor	r1, r1
    5044:	0b b6       	in	r0, 0x3b	; 59
    5046:	0f 92       	push	r0
    5048:	2f 93       	push	r18
    504a:	3f 93       	push	r19
    504c:	4f 93       	push	r20
    504e:	5f 93       	push	r21
    5050:	6f 93       	push	r22
    5052:	7f 93       	push	r23
    5054:	8f 93       	push	r24
    5056:	9f 93       	push	r25
    5058:	af 93       	push	r26
    505a:	bf 93       	push	r27
    505c:	cf 93       	push	r28
    505e:	df 93       	push	r29
    5060:	ef 93       	push	r30
    5062:	ff 93       	push	r31
    5064:	a0 91 a7 17 	lds	r26, 0x17A7	; 0x8017a7 <_ser_handle+0x2>
    5068:	b0 91 a8 17 	lds	r27, 0x17A8	; 0x8017a8 <_ser_handle+0x3>
    506c:	10 97       	sbiw	r26, 0x00	; 0
    506e:	11 f1       	breq	.+68     	; 0x50b4 <__vector_36+0x7a>
    5070:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5074:	14 96       	adiw	r26, 0x04	; 4
    5076:	ed 91       	ld	r30, X+
    5078:	fc 91       	ld	r31, X
    507a:	15 97       	sbiw	r26, 0x05	; 5
    507c:	93 81       	ldd	r25, Z+3	; 0x03
    507e:	82 81       	ldd	r24, Z+2	; 0x02
    5080:	25 81       	ldd	r18, Z+5	; 0x05
    5082:	98 1b       	sub	r25, r24
    5084:	92 23       	and	r25, r18
    5086:	84 81       	ldd	r24, Z+4	; 0x04
    5088:	98 17       	cp	r25, r24
    508a:	61 f0       	breq	.+24     	; 0x50a4 <__vector_36+0x6a>
    508c:	83 81       	ldd	r24, Z+3	; 0x03
    508e:	26 95       	lsr	r18
    5090:	28 23       	and	r18, r24
    5092:	c0 81       	ld	r28, Z
    5094:	d1 81       	ldd	r29, Z+1	; 0x01
    5096:	c2 0f       	add	r28, r18
    5098:	d1 1d       	adc	r29, r1
    509a:	68 83       	st	Y, r22
    509c:	8f 5f       	subi	r24, 0xFF	; 255
    509e:	95 81       	ldd	r25, Z+5	; 0x05
    50a0:	89 23       	and	r24, r25
    50a2:	83 83       	std	Z+3, r24	; 0x03
    50a4:	16 96       	adiw	r26, 0x06	; 6
    50a6:	ed 91       	ld	r30, X+
    50a8:	fc 91       	ld	r31, X
    50aa:	17 97       	sbiw	r26, 0x07	; 7
    50ac:	30 97       	sbiw	r30, 0x00	; 0
    50ae:	11 f0       	breq	.+4      	; 0x50b4 <__vector_36+0x7a>
    50b0:	cd 01       	movw	r24, r26
    50b2:	19 95       	eicall
    50b4:	ff 91       	pop	r31
    50b6:	ef 91       	pop	r30
    50b8:	df 91       	pop	r29
    50ba:	cf 91       	pop	r28
    50bc:	bf 91       	pop	r27
    50be:	af 91       	pop	r26
    50c0:	9f 91       	pop	r25
    50c2:	8f 91       	pop	r24
    50c4:	7f 91       	pop	r23
    50c6:	6f 91       	pop	r22
    50c8:	5f 91       	pop	r21
    50ca:	4f 91       	pop	r20
    50cc:	3f 91       	pop	r19
    50ce:	2f 91       	pop	r18
    50d0:	0f 90       	pop	r0
    50d2:	0b be       	out	0x3b, r0	; 59
    50d4:	0f 90       	pop	r0
    50d6:	0f be       	out	0x3f, r0	; 63
    50d8:	0f 90       	pop	r0
    50da:	1f 90       	pop	r1
    50dc:	18 95       	reti

000050de <__vector_37>:
    50de:	1f 92       	push	r1
    50e0:	0f 92       	push	r0
    50e2:	0f b6       	in	r0, 0x3f	; 63
    50e4:	0f 92       	push	r0
    50e6:	11 24       	eor	r1, r1
    50e8:	0b b6       	in	r0, 0x3b	; 59
    50ea:	0f 92       	push	r0
    50ec:	2f 93       	push	r18
    50ee:	8f 93       	push	r24
    50f0:	9f 93       	push	r25
    50f2:	af 93       	push	r26
    50f4:	bf 93       	push	r27
    50f6:	ef 93       	push	r30
    50f8:	ff 93       	push	r31
    50fa:	e0 91 a7 17 	lds	r30, 0x17A7	; 0x8017a7 <_ser_handle+0x2>
    50fe:	f0 91 a8 17 	lds	r31, 0x17A8	; 0x8017a8 <_ser_handle+0x3>
    5102:	30 97       	sbiw	r30, 0x00	; 0
    5104:	b9 f0       	breq	.+46     	; 0x5134 <__vector_37+0x56>
    5106:	02 80       	ldd	r0, Z+2	; 0x02
    5108:	f3 81       	ldd	r31, Z+3	; 0x03
    510a:	e0 2d       	mov	r30, r0
    510c:	93 81       	ldd	r25, Z+3	; 0x03
    510e:	82 81       	ldd	r24, Z+2	; 0x02
    5110:	98 17       	cp	r25, r24
    5112:	b1 f0       	breq	.+44     	; 0x5140 <__vector_37+0x62>
    5114:	92 81       	ldd	r25, Z+2	; 0x02
    5116:	85 81       	ldd	r24, Z+5	; 0x05
    5118:	28 2f       	mov	r18, r24
    511a:	26 95       	lsr	r18
    511c:	29 23       	and	r18, r25
    511e:	a0 81       	ld	r26, Z
    5120:	b1 81       	ldd	r27, Z+1	; 0x01
    5122:	a2 0f       	add	r26, r18
    5124:	b1 1d       	adc	r27, r1
    5126:	2c 91       	ld	r18, X
    5128:	9f 5f       	subi	r25, 0xFF	; 255
    512a:	89 23       	and	r24, r25
    512c:	82 83       	std	Z+2, r24	; 0x02
    512e:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    5132:	0b c0       	rjmp	.+22     	; 0x514a <__vector_37+0x6c>
    5134:	e9 ec       	ldi	r30, 0xC9	; 201
    5136:	f0 e0       	ldi	r31, 0x00	; 0
    5138:	80 81       	ld	r24, Z
    513a:	8f 7d       	andi	r24, 0xDF	; 223
    513c:	80 83       	st	Z, r24
    513e:	05 c0       	rjmp	.+10     	; 0x514a <__vector_37+0x6c>
    5140:	e9 ec       	ldi	r30, 0xC9	; 201
    5142:	f0 e0       	ldi	r31, 0x00	; 0
    5144:	80 81       	ld	r24, Z
    5146:	8f 7d       	andi	r24, 0xDF	; 223
    5148:	80 83       	st	Z, r24
    514a:	ff 91       	pop	r31
    514c:	ef 91       	pop	r30
    514e:	bf 91       	pop	r27
    5150:	af 91       	pop	r26
    5152:	9f 91       	pop	r25
    5154:	8f 91       	pop	r24
    5156:	2f 91       	pop	r18
    5158:	0f 90       	pop	r0
    515a:	0b be       	out	0x3b, r0	; 59
    515c:	0f 90       	pop	r0
    515e:	0f be       	out	0x3f, r0	; 63
    5160:	0f 90       	pop	r0
    5162:	1f 90       	pop	r1
    5164:	18 95       	reti

00005166 <__vector_51>:
    5166:	1f 92       	push	r1
    5168:	0f 92       	push	r0
    516a:	0f b6       	in	r0, 0x3f	; 63
    516c:	0f 92       	push	r0
    516e:	11 24       	eor	r1, r1
    5170:	0b b6       	in	r0, 0x3b	; 59
    5172:	0f 92       	push	r0
    5174:	2f 93       	push	r18
    5176:	3f 93       	push	r19
    5178:	4f 93       	push	r20
    517a:	5f 93       	push	r21
    517c:	6f 93       	push	r22
    517e:	7f 93       	push	r23
    5180:	8f 93       	push	r24
    5182:	9f 93       	push	r25
    5184:	af 93       	push	r26
    5186:	bf 93       	push	r27
    5188:	cf 93       	push	r28
    518a:	df 93       	push	r29
    518c:	ef 93       	push	r30
    518e:	ff 93       	push	r31
    5190:	a0 91 a9 17 	lds	r26, 0x17A9	; 0x8017a9 <_ser_handle+0x4>
    5194:	b0 91 aa 17 	lds	r27, 0x17AA	; 0x8017aa <_ser_handle+0x5>
    5198:	10 97       	sbiw	r26, 0x00	; 0
    519a:	11 f1       	breq	.+68     	; 0x51e0 <__vector_51+0x7a>
    519c:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    51a0:	14 96       	adiw	r26, 0x04	; 4
    51a2:	ed 91       	ld	r30, X+
    51a4:	fc 91       	ld	r31, X
    51a6:	15 97       	sbiw	r26, 0x05	; 5
    51a8:	93 81       	ldd	r25, Z+3	; 0x03
    51aa:	82 81       	ldd	r24, Z+2	; 0x02
    51ac:	25 81       	ldd	r18, Z+5	; 0x05
    51ae:	98 1b       	sub	r25, r24
    51b0:	92 23       	and	r25, r18
    51b2:	84 81       	ldd	r24, Z+4	; 0x04
    51b4:	98 17       	cp	r25, r24
    51b6:	61 f0       	breq	.+24     	; 0x51d0 <__vector_51+0x6a>
    51b8:	83 81       	ldd	r24, Z+3	; 0x03
    51ba:	26 95       	lsr	r18
    51bc:	28 23       	and	r18, r24
    51be:	c0 81       	ld	r28, Z
    51c0:	d1 81       	ldd	r29, Z+1	; 0x01
    51c2:	c2 0f       	add	r28, r18
    51c4:	d1 1d       	adc	r29, r1
    51c6:	68 83       	st	Y, r22
    51c8:	8f 5f       	subi	r24, 0xFF	; 255
    51ca:	95 81       	ldd	r25, Z+5	; 0x05
    51cc:	89 23       	and	r24, r25
    51ce:	83 83       	std	Z+3, r24	; 0x03
    51d0:	16 96       	adiw	r26, 0x06	; 6
    51d2:	ed 91       	ld	r30, X+
    51d4:	fc 91       	ld	r31, X
    51d6:	17 97       	sbiw	r26, 0x07	; 7
    51d8:	30 97       	sbiw	r30, 0x00	; 0
    51da:	11 f0       	breq	.+4      	; 0x51e0 <__vector_51+0x7a>
    51dc:	cd 01       	movw	r24, r26
    51de:	19 95       	eicall
    51e0:	ff 91       	pop	r31
    51e2:	ef 91       	pop	r30
    51e4:	df 91       	pop	r29
    51e6:	cf 91       	pop	r28
    51e8:	bf 91       	pop	r27
    51ea:	af 91       	pop	r26
    51ec:	9f 91       	pop	r25
    51ee:	8f 91       	pop	r24
    51f0:	7f 91       	pop	r23
    51f2:	6f 91       	pop	r22
    51f4:	5f 91       	pop	r21
    51f6:	4f 91       	pop	r20
    51f8:	3f 91       	pop	r19
    51fa:	2f 91       	pop	r18
    51fc:	0f 90       	pop	r0
    51fe:	0b be       	out	0x3b, r0	; 59
    5200:	0f 90       	pop	r0
    5202:	0f be       	out	0x3f, r0	; 63
    5204:	0f 90       	pop	r0
    5206:	1f 90       	pop	r1
    5208:	18 95       	reti

0000520a <__vector_52>:
    520a:	1f 92       	push	r1
    520c:	0f 92       	push	r0
    520e:	0f b6       	in	r0, 0x3f	; 63
    5210:	0f 92       	push	r0
    5212:	11 24       	eor	r1, r1
    5214:	0b b6       	in	r0, 0x3b	; 59
    5216:	0f 92       	push	r0
    5218:	2f 93       	push	r18
    521a:	8f 93       	push	r24
    521c:	9f 93       	push	r25
    521e:	af 93       	push	r26
    5220:	bf 93       	push	r27
    5222:	ef 93       	push	r30
    5224:	ff 93       	push	r31
    5226:	e0 91 a9 17 	lds	r30, 0x17A9	; 0x8017a9 <_ser_handle+0x4>
    522a:	f0 91 aa 17 	lds	r31, 0x17AA	; 0x8017aa <_ser_handle+0x5>
    522e:	30 97       	sbiw	r30, 0x00	; 0
    5230:	b9 f0       	breq	.+46     	; 0x5260 <__vector_52+0x56>
    5232:	02 80       	ldd	r0, Z+2	; 0x02
    5234:	f3 81       	ldd	r31, Z+3	; 0x03
    5236:	e0 2d       	mov	r30, r0
    5238:	93 81       	ldd	r25, Z+3	; 0x03
    523a:	82 81       	ldd	r24, Z+2	; 0x02
    523c:	98 17       	cp	r25, r24
    523e:	b1 f0       	breq	.+44     	; 0x526c <__vector_52+0x62>
    5240:	92 81       	ldd	r25, Z+2	; 0x02
    5242:	85 81       	ldd	r24, Z+5	; 0x05
    5244:	28 2f       	mov	r18, r24
    5246:	26 95       	lsr	r18
    5248:	29 23       	and	r18, r25
    524a:	a0 81       	ld	r26, Z
    524c:	b1 81       	ldd	r27, Z+1	; 0x01
    524e:	a2 0f       	add	r26, r18
    5250:	b1 1d       	adc	r27, r1
    5252:	2c 91       	ld	r18, X
    5254:	9f 5f       	subi	r25, 0xFF	; 255
    5256:	89 23       	and	r24, r25
    5258:	82 83       	std	Z+2, r24	; 0x02
    525a:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    525e:	0b c0       	rjmp	.+22     	; 0x5276 <__vector_52+0x6c>
    5260:	e1 ed       	ldi	r30, 0xD1	; 209
    5262:	f0 e0       	ldi	r31, 0x00	; 0
    5264:	80 81       	ld	r24, Z
    5266:	8f 7d       	andi	r24, 0xDF	; 223
    5268:	80 83       	st	Z, r24
    526a:	05 c0       	rjmp	.+10     	; 0x5276 <__vector_52+0x6c>
    526c:	e1 ed       	ldi	r30, 0xD1	; 209
    526e:	f0 e0       	ldi	r31, 0x00	; 0
    5270:	80 81       	ld	r24, Z
    5272:	8f 7d       	andi	r24, 0xDF	; 223
    5274:	80 83       	st	Z, r24
    5276:	ff 91       	pop	r31
    5278:	ef 91       	pop	r30
    527a:	bf 91       	pop	r27
    527c:	af 91       	pop	r26
    527e:	9f 91       	pop	r25
    5280:	8f 91       	pop	r24
    5282:	2f 91       	pop	r18
    5284:	0f 90       	pop	r0
    5286:	0b be       	out	0x3b, r0	; 59
    5288:	0f 90       	pop	r0
    528a:	0f be       	out	0x3f, r0	; 63
    528c:	0f 90       	pop	r0
    528e:	1f 90       	pop	r1
    5290:	18 95       	reti

00005292 <__vector_54>:
    5292:	1f 92       	push	r1
    5294:	0f 92       	push	r0
    5296:	0f b6       	in	r0, 0x3f	; 63
    5298:	0f 92       	push	r0
    529a:	11 24       	eor	r1, r1
    529c:	0b b6       	in	r0, 0x3b	; 59
    529e:	0f 92       	push	r0
    52a0:	2f 93       	push	r18
    52a2:	3f 93       	push	r19
    52a4:	4f 93       	push	r20
    52a6:	5f 93       	push	r21
    52a8:	6f 93       	push	r22
    52aa:	7f 93       	push	r23
    52ac:	8f 93       	push	r24
    52ae:	9f 93       	push	r25
    52b0:	af 93       	push	r26
    52b2:	bf 93       	push	r27
    52b4:	cf 93       	push	r28
    52b6:	df 93       	push	r29
    52b8:	ef 93       	push	r30
    52ba:	ff 93       	push	r31
    52bc:	a0 91 ab 17 	lds	r26, 0x17AB	; 0x8017ab <_ser_handle+0x6>
    52c0:	b0 91 ac 17 	lds	r27, 0x17AC	; 0x8017ac <_ser_handle+0x7>
    52c4:	10 97       	sbiw	r26, 0x00	; 0
    52c6:	11 f1       	breq	.+68     	; 0x530c <__vector_54+0x7a>
    52c8:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    52cc:	14 96       	adiw	r26, 0x04	; 4
    52ce:	ed 91       	ld	r30, X+
    52d0:	fc 91       	ld	r31, X
    52d2:	15 97       	sbiw	r26, 0x05	; 5
    52d4:	93 81       	ldd	r25, Z+3	; 0x03
    52d6:	82 81       	ldd	r24, Z+2	; 0x02
    52d8:	25 81       	ldd	r18, Z+5	; 0x05
    52da:	98 1b       	sub	r25, r24
    52dc:	92 23       	and	r25, r18
    52de:	84 81       	ldd	r24, Z+4	; 0x04
    52e0:	98 17       	cp	r25, r24
    52e2:	61 f0       	breq	.+24     	; 0x52fc <__vector_54+0x6a>
    52e4:	83 81       	ldd	r24, Z+3	; 0x03
    52e6:	26 95       	lsr	r18
    52e8:	28 23       	and	r18, r24
    52ea:	c0 81       	ld	r28, Z
    52ec:	d1 81       	ldd	r29, Z+1	; 0x01
    52ee:	c2 0f       	add	r28, r18
    52f0:	d1 1d       	adc	r29, r1
    52f2:	68 83       	st	Y, r22
    52f4:	8f 5f       	subi	r24, 0xFF	; 255
    52f6:	95 81       	ldd	r25, Z+5	; 0x05
    52f8:	89 23       	and	r24, r25
    52fa:	83 83       	std	Z+3, r24	; 0x03
    52fc:	16 96       	adiw	r26, 0x06	; 6
    52fe:	ed 91       	ld	r30, X+
    5300:	fc 91       	ld	r31, X
    5302:	17 97       	sbiw	r26, 0x07	; 7
    5304:	30 97       	sbiw	r30, 0x00	; 0
    5306:	11 f0       	breq	.+4      	; 0x530c <__vector_54+0x7a>
    5308:	cd 01       	movw	r24, r26
    530a:	19 95       	eicall
    530c:	ff 91       	pop	r31
    530e:	ef 91       	pop	r30
    5310:	df 91       	pop	r29
    5312:	cf 91       	pop	r28
    5314:	bf 91       	pop	r27
    5316:	af 91       	pop	r26
    5318:	9f 91       	pop	r25
    531a:	8f 91       	pop	r24
    531c:	7f 91       	pop	r23
    531e:	6f 91       	pop	r22
    5320:	5f 91       	pop	r21
    5322:	4f 91       	pop	r20
    5324:	3f 91       	pop	r19
    5326:	2f 91       	pop	r18
    5328:	0f 90       	pop	r0
    532a:	0b be       	out	0x3b, r0	; 59
    532c:	0f 90       	pop	r0
    532e:	0f be       	out	0x3f, r0	; 63
    5330:	0f 90       	pop	r0
    5332:	1f 90       	pop	r1
    5334:	18 95       	reti

00005336 <__vector_55>:
    5336:	1f 92       	push	r1
    5338:	0f 92       	push	r0
    533a:	0f b6       	in	r0, 0x3f	; 63
    533c:	0f 92       	push	r0
    533e:	11 24       	eor	r1, r1
    5340:	0b b6       	in	r0, 0x3b	; 59
    5342:	0f 92       	push	r0
    5344:	2f 93       	push	r18
    5346:	8f 93       	push	r24
    5348:	9f 93       	push	r25
    534a:	af 93       	push	r26
    534c:	bf 93       	push	r27
    534e:	ef 93       	push	r30
    5350:	ff 93       	push	r31
    5352:	e0 91 ab 17 	lds	r30, 0x17AB	; 0x8017ab <_ser_handle+0x6>
    5356:	f0 91 ac 17 	lds	r31, 0x17AC	; 0x8017ac <_ser_handle+0x7>
    535a:	30 97       	sbiw	r30, 0x00	; 0
    535c:	b9 f0       	breq	.+46     	; 0x538c <__vector_55+0x56>
    535e:	02 80       	ldd	r0, Z+2	; 0x02
    5360:	f3 81       	ldd	r31, Z+3	; 0x03
    5362:	e0 2d       	mov	r30, r0
    5364:	93 81       	ldd	r25, Z+3	; 0x03
    5366:	82 81       	ldd	r24, Z+2	; 0x02
    5368:	98 17       	cp	r25, r24
    536a:	b1 f0       	breq	.+44     	; 0x5398 <__vector_55+0x62>
    536c:	92 81       	ldd	r25, Z+2	; 0x02
    536e:	85 81       	ldd	r24, Z+5	; 0x05
    5370:	28 2f       	mov	r18, r24
    5372:	26 95       	lsr	r18
    5374:	29 23       	and	r18, r25
    5376:	a0 81       	ld	r26, Z
    5378:	b1 81       	ldd	r27, Z+1	; 0x01
    537a:	a2 0f       	add	r26, r18
    537c:	b1 1d       	adc	r27, r1
    537e:	2c 91       	ld	r18, X
    5380:	9f 5f       	subi	r25, 0xFF	; 255
    5382:	89 23       	and	r24, r25
    5384:	82 83       	std	Z+2, r24	; 0x02
    5386:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    538a:	0b c0       	rjmp	.+22     	; 0x53a2 <__vector_55+0x6c>
    538c:	e1 e3       	ldi	r30, 0x31	; 49
    538e:	f1 e0       	ldi	r31, 0x01	; 1
    5390:	80 81       	ld	r24, Z
    5392:	8f 7d       	andi	r24, 0xDF	; 223
    5394:	80 83       	st	Z, r24
    5396:	05 c0       	rjmp	.+10     	; 0x53a2 <__vector_55+0x6c>
    5398:	e1 e3       	ldi	r30, 0x31	; 49
    539a:	f1 e0       	ldi	r31, 0x01	; 1
    539c:	80 81       	ld	r24, Z
    539e:	8f 7d       	andi	r24, 0xDF	; 223
    53a0:	80 83       	st	Z, r24
    53a2:	ff 91       	pop	r31
    53a4:	ef 91       	pop	r30
    53a6:	bf 91       	pop	r27
    53a8:	af 91       	pop	r26
    53aa:	9f 91       	pop	r25
    53ac:	8f 91       	pop	r24
    53ae:	2f 91       	pop	r18
    53b0:	0f 90       	pop	r0
    53b2:	0b be       	out	0x3b, r0	; 59
    53b4:	0f 90       	pop	r0
    53b6:	0f be       	out	0x3f, r0	; 63
    53b8:	0f 90       	pop	r0
    53ba:	1f 90       	pop	r1
    53bc:	18 95       	reti

000053be <usart_getchar>:
    53be:	cf 93       	push	r28
    53c0:	df 93       	push	r29
    53c2:	1f 92       	push	r1
    53c4:	cd b7       	in	r28, 0x3d	; 61
    53c6:	de b7       	in	r29, 0x3e	; 62
    53c8:	be 01       	movw	r22, r28
    53ca:	6f 5f       	subi	r22, 0xFF	; 255
    53cc:	7f 4f       	sbci	r23, 0xFF	; 255
    53ce:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_com_serial_instance>
    53d2:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_com_serial_instance+0x1>
    53d6:	7b dd       	rcall	.-1290   	; 0x4ece <serial_getByte>
    53d8:	81 11       	cpse	r24, r1
    53da:	f6 cf       	rjmp	.-20     	; 0x53c8 <usart_getchar+0xa>
    53dc:	89 81       	ldd	r24, Y+1	; 0x01
    53de:	90 e0       	ldi	r25, 0x00	; 0
    53e0:	0f 90       	pop	r0
    53e2:	df 91       	pop	r29
    53e4:	cf 91       	pop	r28
    53e6:	08 95       	ret

000053e8 <usart_putchar>:
    53e8:	68 2f       	mov	r22, r24
    53ea:	80 91 ad 17 	lds	r24, 0x17AD	; 0x8017ad <_com_serial_instance>
    53ee:	90 91 ae 17 	lds	r25, 0x17AE	; 0x8017ae <_com_serial_instance+0x1>
    53f2:	ed dc       	rcall	.-1574   	; 0x4dce <serial_sendByte>
    53f4:	80 e0       	ldi	r24, 0x00	; 0
    53f6:	90 e0       	ldi	r25, 0x00	; 0
    53f8:	08 95       	ret

000053fa <stdio_initialise>:
    53fa:	8f 92       	push	r8
    53fc:	9f 92       	push	r9
    53fe:	af 92       	push	r10
    5400:	cf 92       	push	r12
    5402:	ef 92       	push	r14
    5404:	0f 93       	push	r16
    5406:	81 2c       	mov	r8, r1
    5408:	91 2c       	mov	r9, r1
    540a:	68 94       	set
    540c:	aa 24       	eor	r10, r10
    540e:	a7 f8       	bld	r10, 7
    5410:	68 94       	set
    5412:	cc 24       	eor	r12, r12
    5414:	c7 f8       	bld	r12, 7
    5416:	e1 2c       	mov	r14, r1
    5418:	00 e0       	ldi	r16, 0x00	; 0
    541a:	23 e0       	ldi	r18, 0x03	; 3
    541c:	40 e0       	ldi	r20, 0x00	; 0
    541e:	51 ee       	ldi	r21, 0xE1	; 225
    5420:	60 e0       	ldi	r22, 0x00	; 0
    5422:	70 e0       	ldi	r23, 0x00	; 0
    5424:	2d dc       	rcall	.-1958   	; 0x4c80 <serial_create>
    5426:	90 93 ae 17 	sts	0x17AE, r25	; 0x8017ae <_com_serial_instance+0x1>
    542a:	80 93 ad 17 	sts	0x17AD, r24	; 0x8017ad <_com_serial_instance>
    542e:	e0 ef       	ldi	r30, 0xF0	; 240
    5430:	f7 e1       	ldi	r31, 0x17	; 23
    5432:	8d e1       	ldi	r24, 0x1D	; 29
    5434:	92 e0       	ldi	r25, 0x02	; 2
    5436:	91 83       	std	Z+1, r25	; 0x01
    5438:	80 83       	st	Z, r24
    543a:	93 83       	std	Z+3, r25	; 0x03
    543c:	82 83       	std	Z+2, r24	; 0x02
    543e:	0f 91       	pop	r16
    5440:	ef 90       	pop	r14
    5442:	cf 90       	pop	r12
    5444:	af 90       	pop	r10
    5446:	9f 90       	pop	r9
    5448:	8f 90       	pop	r8
    544a:	08 95       	ret

0000544c <_select_instance>:
    544c:	e0 91 af 17 	lds	r30, 0x17AF	; 0x8017af <_this>
    5450:	f0 91 b0 17 	lds	r31, 0x17B0	; 0x8017b0 <_this+0x1>
    5454:	30 97       	sbiw	r30, 0x00	; 0
    5456:	f9 f0       	breq	.+62     	; 0x5496 <_select_instance+0x4a>
    5458:	a0 81       	ld	r26, Z
    545a:	b1 81       	ldd	r27, Z+1	; 0x01
    545c:	10 97       	sbiw	r26, 0x00	; 0
    545e:	d9 f0       	breq	.+54     	; 0x5496 <_select_instance+0x4a>
    5460:	23 81       	ldd	r18, Z+3	; 0x03
    5462:	21 30       	cpi	r18, 0x01	; 1
    5464:	69 f4       	brne	.+26     	; 0x5480 <_select_instance+0x34>
    5466:	4c 91       	ld	r20, X
    5468:	21 e0       	ldi	r18, 0x01	; 1
    546a:	30 e0       	ldi	r19, 0x00	; 0
    546c:	02 80       	ldd	r0, Z+2	; 0x02
    546e:	02 c0       	rjmp	.+4      	; 0x5474 <_select_instance+0x28>
    5470:	22 0f       	add	r18, r18
    5472:	33 1f       	adc	r19, r19
    5474:	0a 94       	dec	r0
    5476:	e2 f7       	brpl	.-8      	; 0x5470 <_select_instance+0x24>
    5478:	20 95       	com	r18
    547a:	24 23       	and	r18, r20
    547c:	2c 93       	st	X, r18
    547e:	0b c0       	rjmp	.+22     	; 0x5496 <_select_instance+0x4a>
    5480:	4c 91       	ld	r20, X
    5482:	21 e0       	ldi	r18, 0x01	; 1
    5484:	30 e0       	ldi	r19, 0x00	; 0
    5486:	02 80       	ldd	r0, Z+2	; 0x02
    5488:	02 c0       	rjmp	.+4      	; 0x548e <_select_instance+0x42>
    548a:	22 0f       	add	r18, r18
    548c:	33 1f       	adc	r19, r19
    548e:	0a 94       	dec	r0
    5490:	e2 f7       	brpl	.-8      	; 0x548a <_select_instance+0x3e>
    5492:	24 2b       	or	r18, r20
    5494:	2c 93       	st	X, r18
    5496:	90 93 b0 17 	sts	0x17B0, r25	; 0x8017b0 <_this+0x1>
    549a:	80 93 af 17 	sts	0x17AF, r24	; 0x8017af <_this>
    549e:	00 97       	sbiw	r24, 0x00	; 0
    54a0:	69 f0       	breq	.+26     	; 0x54bc <_select_instance+0x70>
    54a2:	10 92 b1 17 	sts	0x17B1, r1	; 0x8017b1 <_spi_active>
    54a6:	2c b5       	in	r18, 0x2c	; 44
    54a8:	2f 73       	andi	r18, 0x3F	; 63
    54aa:	2c bd       	out	0x2c, r18	; 44
    54ac:	fc 01       	movw	r30, r24
    54ae:	24 81       	ldd	r18, Z+4	; 0x04
    54b0:	2c bd       	out	0x2c, r18	; 44
    54b2:	85 81       	ldd	r24, Z+5	; 0x05
    54b4:	8d bd       	out	0x2d, r24	; 45
    54b6:	8c b5       	in	r24, 0x2c	; 44
    54b8:	80 64       	ori	r24, 0x40	; 64
    54ba:	8c bd       	out	0x2c, r24	; 44
    54bc:	08 95       	ret

000054be <spi_sendByte>:
    54be:	1f 93       	push	r17
    54c0:	cf 93       	push	r28
    54c2:	df 93       	push	r29
    54c4:	00 97       	sbiw	r24, 0x00	; 0
    54c6:	09 f4       	brne	.+2      	; 0x54ca <spi_sendByte+0xc>
    54c8:	6a c0       	rjmp	.+212    	; 0x559e <spi_sendByte+0xe0>
    54ca:	16 2f       	mov	r17, r22
    54cc:	ec 01       	movw	r28, r24
    54ce:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_this>
    54d2:	90 91 b0 17 	lds	r25, 0x17B0	; 0x8017b0 <_this+0x1>
    54d6:	c8 17       	cp	r28, r24
    54d8:	d9 07       	cpc	r29, r25
    54da:	11 f0       	breq	.+4      	; 0x54e0 <spi_sendByte+0x22>
    54dc:	ce 01       	movw	r24, r28
    54de:	b6 df       	rcall	.-148    	; 0x544c <_select_instance>
    54e0:	8f b7       	in	r24, 0x3f	; 63
    54e2:	2f b7       	in	r18, 0x3f	; 63
    54e4:	f8 94       	cli
    54e6:	80 91 b1 17 	lds	r24, 0x17B1	; 0x8017b1 <_spi_active>
    54ea:	81 11       	cpse	r24, r1
    54ec:	31 c0       	rjmp	.+98     	; 0x5550 <spi_sendByte+0x92>
    54ee:	81 e0       	ldi	r24, 0x01	; 1
    54f0:	80 93 b1 17 	sts	0x17B1, r24	; 0x8017b1 <_spi_active>
    54f4:	a0 91 af 17 	lds	r26, 0x17AF	; 0x8017af <_this>
    54f8:	b0 91 b0 17 	lds	r27, 0x17B0	; 0x8017b0 <_this+0x1>
    54fc:	ed 91       	ld	r30, X+
    54fe:	fc 91       	ld	r31, X
    5500:	11 97       	sbiw	r26, 0x01	; 1
    5502:	30 97       	sbiw	r30, 0x00	; 0
    5504:	f9 f0       	breq	.+62     	; 0x5544 <spi_sendByte+0x86>
    5506:	13 96       	adiw	r26, 0x03	; 3
    5508:	8c 91       	ld	r24, X
    550a:	13 97       	sbiw	r26, 0x03	; 3
    550c:	81 30       	cpi	r24, 0x01	; 1
    550e:	69 f4       	brne	.+26     	; 0x552a <spi_sendByte+0x6c>
    5510:	30 81       	ld	r19, Z
    5512:	81 e0       	ldi	r24, 0x01	; 1
    5514:	90 e0       	ldi	r25, 0x00	; 0
    5516:	12 96       	adiw	r26, 0x02	; 2
    5518:	0c 90       	ld	r0, X
    551a:	02 c0       	rjmp	.+4      	; 0x5520 <spi_sendByte+0x62>
    551c:	88 0f       	add	r24, r24
    551e:	99 1f       	adc	r25, r25
    5520:	0a 94       	dec	r0
    5522:	e2 f7       	brpl	.-8      	; 0x551c <spi_sendByte+0x5e>
    5524:	83 2b       	or	r24, r19
    5526:	80 83       	st	Z, r24
    5528:	0d c0       	rjmp	.+26     	; 0x5544 <spi_sendByte+0x86>
    552a:	30 81       	ld	r19, Z
    552c:	81 e0       	ldi	r24, 0x01	; 1
    552e:	90 e0       	ldi	r25, 0x00	; 0
    5530:	12 96       	adiw	r26, 0x02	; 2
    5532:	0c 90       	ld	r0, X
    5534:	02 c0       	rjmp	.+4      	; 0x553a <spi_sendByte+0x7c>
    5536:	88 0f       	add	r24, r24
    5538:	99 1f       	adc	r25, r25
    553a:	0a 94       	dec	r0
    553c:	e2 f7       	brpl	.-8      	; 0x5536 <spi_sendByte+0x78>
    553e:	80 95       	com	r24
    5540:	83 23       	and	r24, r19
    5542:	80 83       	st	Z, r24
    5544:	8c b5       	in	r24, 0x2c	; 44
    5546:	80 68       	ori	r24, 0x80	; 128
    5548:	8c bd       	out	0x2c, r24	; 44
    554a:	1e bd       	out	0x2e, r17	; 46
    554c:	80 e0       	ldi	r24, 0x00	; 0
    554e:	25 c0       	rjmp	.+74     	; 0x559a <spi_sendByte+0xdc>
    5550:	ee 81       	ldd	r30, Y+6	; 0x06
    5552:	ff 81       	ldd	r31, Y+7	; 0x07
    5554:	30 97       	sbiw	r30, 0x00	; 0
    5556:	e1 f0       	breq	.+56     	; 0x5590 <spi_sendByte+0xd2>
    5558:	34 81       	ldd	r19, Z+4	; 0x04
    555a:	83 81       	ldd	r24, Z+3	; 0x03
    555c:	42 81       	ldd	r20, Z+2	; 0x02
    555e:	95 81       	ldd	r25, Z+5	; 0x05
    5560:	84 1b       	sub	r24, r20
    5562:	89 23       	and	r24, r25
    5564:	38 17       	cp	r19, r24
    5566:	b1 f0       	breq	.+44     	; 0x5594 <spi_sendByte+0xd6>
    5568:	83 81       	ldd	r24, Z+3	; 0x03
    556a:	42 81       	ldd	r20, Z+2	; 0x02
    556c:	84 1b       	sub	r24, r20
    556e:	89 23       	and	r24, r25
    5570:	38 17       	cp	r19, r24
    5572:	91 f0       	breq	.+36     	; 0x5598 <spi_sendByte+0xda>
    5574:	83 81       	ldd	r24, Z+3	; 0x03
    5576:	96 95       	lsr	r25
    5578:	98 23       	and	r25, r24
    557a:	a0 81       	ld	r26, Z
    557c:	b1 81       	ldd	r27, Z+1	; 0x01
    557e:	a9 0f       	add	r26, r25
    5580:	b1 1d       	adc	r27, r1
    5582:	1c 93       	st	X, r17
    5584:	8f 5f       	subi	r24, 0xFF	; 255
    5586:	95 81       	ldd	r25, Z+5	; 0x05
    5588:	89 23       	and	r24, r25
    558a:	83 83       	std	Z+3, r24	; 0x03
    558c:	80 e0       	ldi	r24, 0x00	; 0
    558e:	05 c0       	rjmp	.+10     	; 0x559a <spi_sendByte+0xdc>
    5590:	82 e0       	ldi	r24, 0x02	; 2
    5592:	03 c0       	rjmp	.+6      	; 0x559a <spi_sendByte+0xdc>
    5594:	81 e0       	ldi	r24, 0x01	; 1
    5596:	01 c0       	rjmp	.+2      	; 0x559a <spi_sendByte+0xdc>
    5598:	80 e0       	ldi	r24, 0x00	; 0
    559a:	2f bf       	out	0x3f, r18	; 63
    559c:	01 c0       	rjmp	.+2      	; 0x55a0 <spi_sendByte+0xe2>
    559e:	83 e0       	ldi	r24, 0x03	; 3
    55a0:	df 91       	pop	r29
    55a2:	cf 91       	pop	r28
    55a4:	1f 91       	pop	r17
    55a6:	08 95       	ret

000055a8 <__vector_24>:
    55a8:	1f 92       	push	r1
    55aa:	0f 92       	push	r0
    55ac:	0f b6       	in	r0, 0x3f	; 63
    55ae:	0f 92       	push	r0
    55b0:	11 24       	eor	r1, r1
    55b2:	0b b6       	in	r0, 0x3b	; 59
    55b4:	0f 92       	push	r0
    55b6:	2f 93       	push	r18
    55b8:	3f 93       	push	r19
    55ba:	4f 93       	push	r20
    55bc:	5f 93       	push	r21
    55be:	6f 93       	push	r22
    55c0:	7f 93       	push	r23
    55c2:	8f 93       	push	r24
    55c4:	9f 93       	push	r25
    55c6:	af 93       	push	r26
    55c8:	bf 93       	push	r27
    55ca:	cf 93       	push	r28
    55cc:	df 93       	push	r29
    55ce:	ef 93       	push	r30
    55d0:	ff 93       	push	r31
    55d2:	6e b5       	in	r22, 0x2e	; 46
    55d4:	a0 91 af 17 	lds	r26, 0x17AF	; 0x8017af <_this>
    55d8:	b0 91 b0 17 	lds	r27, 0x17B0	; 0x8017b0 <_this+0x1>
    55dc:	18 96       	adiw	r26, 0x08	; 8
    55de:	ed 91       	ld	r30, X+
    55e0:	fc 91       	ld	r31, X
    55e2:	19 97       	sbiw	r26, 0x09	; 9
    55e4:	30 97       	sbiw	r30, 0x00	; 0
    55e6:	a1 f0       	breq	.+40     	; 0x5610 <__vector_24+0x68>
    55e8:	83 81       	ldd	r24, Z+3	; 0x03
    55ea:	22 81       	ldd	r18, Z+2	; 0x02
    55ec:	95 81       	ldd	r25, Z+5	; 0x05
    55ee:	82 1b       	sub	r24, r18
    55f0:	89 23       	and	r24, r25
    55f2:	24 81       	ldd	r18, Z+4	; 0x04
    55f4:	82 17       	cp	r24, r18
    55f6:	61 f0       	breq	.+24     	; 0x5610 <__vector_24+0x68>
    55f8:	83 81       	ldd	r24, Z+3	; 0x03
    55fa:	96 95       	lsr	r25
    55fc:	98 23       	and	r25, r24
    55fe:	c0 81       	ld	r28, Z
    5600:	d1 81       	ldd	r29, Z+1	; 0x01
    5602:	c9 0f       	add	r28, r25
    5604:	d1 1d       	adc	r29, r1
    5606:	68 83       	st	Y, r22
    5608:	8f 5f       	subi	r24, 0xFF	; 255
    560a:	95 81       	ldd	r25, Z+5	; 0x05
    560c:	89 23       	and	r24, r25
    560e:	83 83       	std	Z+3, r24	; 0x03
    5610:	16 96       	adiw	r26, 0x06	; 6
    5612:	ed 91       	ld	r30, X+
    5614:	fc 91       	ld	r31, X
    5616:	17 97       	sbiw	r26, 0x07	; 7
    5618:	30 97       	sbiw	r30, 0x00	; 0
    561a:	99 f0       	breq	.+38     	; 0x5642 <__vector_24+0x9a>
    561c:	93 81       	ldd	r25, Z+3	; 0x03
    561e:	82 81       	ldd	r24, Z+2	; 0x02
    5620:	98 17       	cp	r25, r24
    5622:	79 f0       	breq	.+30     	; 0x5642 <__vector_24+0x9a>
    5624:	92 81       	ldd	r25, Z+2	; 0x02
    5626:	85 81       	ldd	r24, Z+5	; 0x05
    5628:	28 2f       	mov	r18, r24
    562a:	26 95       	lsr	r18
    562c:	29 23       	and	r18, r25
    562e:	a0 81       	ld	r26, Z
    5630:	b1 81       	ldd	r27, Z+1	; 0x01
    5632:	a2 0f       	add	r26, r18
    5634:	b1 1d       	adc	r27, r1
    5636:	2c 91       	ld	r18, X
    5638:	9f 5f       	subi	r25, 0xFF	; 255
    563a:	89 23       	and	r24, r25
    563c:	82 83       	std	Z+2, r24	; 0x02
    563e:	2e bd       	out	0x2e, r18	; 46
    5640:	2d c0       	rjmp	.+90     	; 0x569c <__vector_24+0xf4>
    5642:	8c b5       	in	r24, 0x2c	; 44
    5644:	8f 77       	andi	r24, 0x7F	; 127
    5646:	8c bd       	out	0x2c, r24	; 44
    5648:	10 92 b1 17 	sts	0x17B1, r1	; 0x8017b1 <_spi_active>
    564c:	a0 91 af 17 	lds	r26, 0x17AF	; 0x8017af <_this>
    5650:	b0 91 b0 17 	lds	r27, 0x17B0	; 0x8017b0 <_this+0x1>
    5654:	ed 91       	ld	r30, X+
    5656:	fc 91       	ld	r31, X
    5658:	11 97       	sbiw	r26, 0x01	; 1
    565a:	30 97       	sbiw	r30, 0x00	; 0
    565c:	f9 f0       	breq	.+62     	; 0x569c <__vector_24+0xf4>
    565e:	13 96       	adiw	r26, 0x03	; 3
    5660:	8c 91       	ld	r24, X
    5662:	13 97       	sbiw	r26, 0x03	; 3
    5664:	81 30       	cpi	r24, 0x01	; 1
    5666:	71 f4       	brne	.+28     	; 0x5684 <__vector_24+0xdc>
    5668:	20 81       	ld	r18, Z
    566a:	81 e0       	ldi	r24, 0x01	; 1
    566c:	90 e0       	ldi	r25, 0x00	; 0
    566e:	12 96       	adiw	r26, 0x02	; 2
    5670:	0c 90       	ld	r0, X
    5672:	02 c0       	rjmp	.+4      	; 0x5678 <__vector_24+0xd0>
    5674:	88 0f       	add	r24, r24
    5676:	99 1f       	adc	r25, r25
    5678:	0a 94       	dec	r0
    567a:	e2 f7       	brpl	.-8      	; 0x5674 <__vector_24+0xcc>
    567c:	80 95       	com	r24
    567e:	82 23       	and	r24, r18
    5680:	80 83       	st	Z, r24
    5682:	0c c0       	rjmp	.+24     	; 0x569c <__vector_24+0xf4>
    5684:	20 81       	ld	r18, Z
    5686:	81 e0       	ldi	r24, 0x01	; 1
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	12 96       	adiw	r26, 0x02	; 2
    568c:	0c 90       	ld	r0, X
    568e:	02 c0       	rjmp	.+4      	; 0x5694 <__vector_24+0xec>
    5690:	88 0f       	add	r24, r24
    5692:	99 1f       	adc	r25, r25
    5694:	0a 94       	dec	r0
    5696:	e2 f7       	brpl	.-8      	; 0x5690 <__vector_24+0xe8>
    5698:	82 2b       	or	r24, r18
    569a:	80 83       	st	Z, r24
    569c:	80 91 af 17 	lds	r24, 0x17AF	; 0x8017af <_this>
    56a0:	90 91 b0 17 	lds	r25, 0x17B0	; 0x8017b0 <_this+0x1>
    56a4:	dc 01       	movw	r26, r24
    56a6:	1a 96       	adiw	r26, 0x0a	; 10
    56a8:	ed 91       	ld	r30, X+
    56aa:	fc 91       	ld	r31, X
    56ac:	1b 97       	sbiw	r26, 0x0b	; 11
    56ae:	30 97       	sbiw	r30, 0x00	; 0
    56b0:	09 f0       	breq	.+2      	; 0x56b4 <__vector_24+0x10c>
    56b2:	19 95       	eicall
    56b4:	ff 91       	pop	r31
    56b6:	ef 91       	pop	r30
    56b8:	df 91       	pop	r29
    56ba:	cf 91       	pop	r28
    56bc:	bf 91       	pop	r27
    56be:	af 91       	pop	r26
    56c0:	9f 91       	pop	r25
    56c2:	8f 91       	pop	r24
    56c4:	7f 91       	pop	r23
    56c6:	6f 91       	pop	r22
    56c8:	5f 91       	pop	r21
    56ca:	4f 91       	pop	r20
    56cc:	3f 91       	pop	r19
    56ce:	2f 91       	pop	r18
    56d0:	0f 90       	pop	r0
    56d2:	0b be       	out	0x3b, r0	; 59
    56d4:	0f 90       	pop	r0
    56d6:	0f be       	out	0x3f, r0	; 63
    56d8:	0f 90       	pop	r0
    56da:	1f 90       	pop	r1
    56dc:	18 95       	reti

000056de <_turn_off>:
    56de:	90 e0       	ldi	r25, 0x00	; 0
    56e0:	fc 01       	movw	r30, r24
    56e2:	ee 0f       	add	r30, r30
    56e4:	ff 1f       	adc	r31, r31
    56e6:	e8 0f       	add	r30, r24
    56e8:	f9 1f       	adc	r31, r25
    56ea:	ee 0f       	add	r30, r30
    56ec:	ff 1f       	adc	r31, r31
    56ee:	ee 54       	subi	r30, 0x4E	; 78
    56f0:	f8 4e       	sbci	r31, 0xE8	; 232
    56f2:	23 81       	ldd	r18, Z+3	; 0x03
    56f4:	21 11       	cpse	r18, r1
    56f6:	1f c0       	rjmp	.+62     	; 0x5736 <_turn_off+0x58>
    56f8:	9c 01       	movw	r18, r24
    56fa:	22 0f       	add	r18, r18
    56fc:	33 1f       	adc	r19, r19
    56fe:	f9 01       	movw	r30, r18
    5700:	e8 0f       	add	r30, r24
    5702:	f9 1f       	adc	r31, r25
    5704:	ee 0f       	add	r30, r30
    5706:	ff 1f       	adc	r31, r31
    5708:	ee 54       	subi	r30, 0x4E	; 78
    570a:	f8 4e       	sbci	r31, 0xE8	; 232
    570c:	a0 81       	ld	r26, Z
    570e:	b1 81       	ldd	r27, Z+1	; 0x01
    5710:	4c 91       	ld	r20, X
    5712:	f9 01       	movw	r30, r18
    5714:	e8 0f       	add	r30, r24
    5716:	f9 1f       	adc	r31, r25
    5718:	ee 0f       	add	r30, r30
    571a:	ff 1f       	adc	r31, r31
    571c:	ee 54       	subi	r30, 0x4E	; 78
    571e:	f8 4e       	sbci	r31, 0xE8	; 232
    5720:	81 e0       	ldi	r24, 0x01	; 1
    5722:	90 e0       	ldi	r25, 0x00	; 0
    5724:	02 80       	ldd	r0, Z+2	; 0x02
    5726:	02 c0       	rjmp	.+4      	; 0x572c <_turn_off+0x4e>
    5728:	88 0f       	add	r24, r24
    572a:	99 1f       	adc	r25, r25
    572c:	0a 94       	dec	r0
    572e:	e2 f7       	brpl	.-8      	; 0x5728 <_turn_off+0x4a>
    5730:	84 2b       	or	r24, r20
    5732:	8c 93       	st	X, r24
    5734:	08 95       	ret
    5736:	fc 01       	movw	r30, r24
    5738:	ee 0f       	add	r30, r30
    573a:	ff 1f       	adc	r31, r31
    573c:	df 01       	movw	r26, r30
    573e:	a8 0f       	add	r26, r24
    5740:	b9 1f       	adc	r27, r25
    5742:	aa 0f       	add	r26, r26
    5744:	bb 1f       	adc	r27, r27
    5746:	ae 54       	subi	r26, 0x4E	; 78
    5748:	b8 4e       	sbci	r27, 0xE8	; 232
    574a:	0d 90       	ld	r0, X+
    574c:	bc 91       	ld	r27, X
    574e:	a0 2d       	mov	r26, r0
    5750:	2c 91       	ld	r18, X
    5752:	e8 0f       	add	r30, r24
    5754:	f9 1f       	adc	r31, r25
    5756:	ee 0f       	add	r30, r30
    5758:	ff 1f       	adc	r31, r31
    575a:	ee 54       	subi	r30, 0x4E	; 78
    575c:	f8 4e       	sbci	r31, 0xE8	; 232
    575e:	81 e0       	ldi	r24, 0x01	; 1
    5760:	90 e0       	ldi	r25, 0x00	; 0
    5762:	02 80       	ldd	r0, Z+2	; 0x02
    5764:	02 c0       	rjmp	.+4      	; 0x576a <_turn_off+0x8c>
    5766:	88 0f       	add	r24, r24
    5768:	99 1f       	adc	r25, r25
    576a:	0a 94       	dec	r0
    576c:	e2 f7       	brpl	.-8      	; 0x5766 <_turn_off+0x88>
    576e:	80 95       	com	r24
    5770:	82 23       	and	r24, r18
    5772:	8c 93       	st	X, r24
    5774:	08 95       	ret

00005776 <_turn_on>:
    5776:	90 e0       	ldi	r25, 0x00	; 0
    5778:	fc 01       	movw	r30, r24
    577a:	ee 0f       	add	r30, r30
    577c:	ff 1f       	adc	r31, r31
    577e:	e8 0f       	add	r30, r24
    5780:	f9 1f       	adc	r31, r25
    5782:	ee 0f       	add	r30, r30
    5784:	ff 1f       	adc	r31, r31
    5786:	ee 54       	subi	r30, 0x4E	; 78
    5788:	f8 4e       	sbci	r31, 0xE8	; 232
    578a:	23 81       	ldd	r18, Z+3	; 0x03
    578c:	21 11       	cpse	r18, r1
    578e:	20 c0       	rjmp	.+64     	; 0x57d0 <_turn_on+0x5a>
    5790:	9c 01       	movw	r18, r24
    5792:	22 0f       	add	r18, r18
    5794:	33 1f       	adc	r19, r19
    5796:	f9 01       	movw	r30, r18
    5798:	e8 0f       	add	r30, r24
    579a:	f9 1f       	adc	r31, r25
    579c:	ee 0f       	add	r30, r30
    579e:	ff 1f       	adc	r31, r31
    57a0:	ee 54       	subi	r30, 0x4E	; 78
    57a2:	f8 4e       	sbci	r31, 0xE8	; 232
    57a4:	a0 81       	ld	r26, Z
    57a6:	b1 81       	ldd	r27, Z+1	; 0x01
    57a8:	4c 91       	ld	r20, X
    57aa:	f9 01       	movw	r30, r18
    57ac:	e8 0f       	add	r30, r24
    57ae:	f9 1f       	adc	r31, r25
    57b0:	ee 0f       	add	r30, r30
    57b2:	ff 1f       	adc	r31, r31
    57b4:	ee 54       	subi	r30, 0x4E	; 78
    57b6:	f8 4e       	sbci	r31, 0xE8	; 232
    57b8:	81 e0       	ldi	r24, 0x01	; 1
    57ba:	90 e0       	ldi	r25, 0x00	; 0
    57bc:	02 80       	ldd	r0, Z+2	; 0x02
    57be:	02 c0       	rjmp	.+4      	; 0x57c4 <_turn_on+0x4e>
    57c0:	88 0f       	add	r24, r24
    57c2:	99 1f       	adc	r25, r25
    57c4:	0a 94       	dec	r0
    57c6:	e2 f7       	brpl	.-8      	; 0x57c0 <_turn_on+0x4a>
    57c8:	80 95       	com	r24
    57ca:	84 23       	and	r24, r20
    57cc:	8c 93       	st	X, r24
    57ce:	08 95       	ret
    57d0:	fc 01       	movw	r30, r24
    57d2:	ee 0f       	add	r30, r30
    57d4:	ff 1f       	adc	r31, r31
    57d6:	df 01       	movw	r26, r30
    57d8:	a8 0f       	add	r26, r24
    57da:	b9 1f       	adc	r27, r25
    57dc:	aa 0f       	add	r26, r26
    57de:	bb 1f       	adc	r27, r27
    57e0:	ae 54       	subi	r26, 0x4E	; 78
    57e2:	b8 4e       	sbci	r27, 0xE8	; 232
    57e4:	0d 90       	ld	r0, X+
    57e6:	bc 91       	ld	r27, X
    57e8:	a0 2d       	mov	r26, r0
    57ea:	2c 91       	ld	r18, X
    57ec:	e8 0f       	add	r30, r24
    57ee:	f9 1f       	adc	r31, r25
    57f0:	ee 0f       	add	r30, r30
    57f2:	ff 1f       	adc	r31, r31
    57f4:	ee 54       	subi	r30, 0x4E	; 78
    57f6:	f8 4e       	sbci	r31, 0xE8	; 232
    57f8:	81 e0       	ldi	r24, 0x01	; 1
    57fa:	90 e0       	ldi	r25, 0x00	; 0
    57fc:	02 80       	ldd	r0, Z+2	; 0x02
    57fe:	02 c0       	rjmp	.+4      	; 0x5804 <_turn_on+0x8e>
    5800:	88 0f       	add	r24, r24
    5802:	99 1f       	adc	r25, r25
    5804:	0a 94       	dec	r0
    5806:	e2 f7       	brpl	.-8      	; 0x5800 <_turn_on+0x8a>
    5808:	82 2b       	or	r24, r18
    580a:	8c 93       	st	X, r24
    580c:	08 95       	ret

0000580e <_hal_led_task>:
    580e:	cc 24       	eor	r12, r12
    5810:	c3 94       	inc	r12
    5812:	d1 2c       	mov	r13, r1
    5814:	68 94       	set
    5816:	bb 24       	eor	r11, r11
    5818:	b2 f8       	bld	r11, 2
    581a:	c2 eb       	ldi	r28, 0xB2	; 178
    581c:	d7 e1       	ldi	r29, 0x17	; 23
    581e:	10 e0       	ldi	r17, 0x00	; 0
    5820:	8c 81       	ldd	r24, Y+4	; 0x04
    5822:	81 30       	cpi	r24, 0x01	; 1
    5824:	81 f0       	breq	.+32     	; 0x5846 <_hal_led_task+0x38>
    5826:	18 f1       	brcs	.+70     	; 0x586e <_hal_led_task+0x60>
    5828:	82 30       	cpi	r24, 0x02	; 2
    582a:	61 f5       	brne	.+88     	; 0x5884 <_hal_led_task+0x76>
    582c:	e8 81       	ld	r30, Y
    582e:	f9 81       	ldd	r31, Y+1	; 0x01
    5830:	20 81       	ld	r18, Z
    5832:	c6 01       	movw	r24, r12
    5834:	0a 80       	ldd	r0, Y+2	; 0x02
    5836:	02 c0       	rjmp	.+4      	; 0x583c <_hal_led_task+0x2e>
    5838:	88 0f       	add	r24, r24
    583a:	99 1f       	adc	r25, r25
    583c:	0a 94       	dec	r0
    583e:	e2 f7       	brpl	.-8      	; 0x5838 <_hal_led_task+0x2a>
    5840:	82 27       	eor	r24, r18
    5842:	80 83       	st	Z, r24
    5844:	1f c0       	rjmp	.+62     	; 0x5884 <_hal_led_task+0x76>
    5846:	8d 81       	ldd	r24, Y+5	; 0x05
    5848:	8f 5f       	subi	r24, 0xFF	; 255
    584a:	86 30       	cpi	r24, 0x06	; 6
    584c:	10 f4       	brcc	.+4      	; 0x5852 <_hal_led_task+0x44>
    584e:	8d 83       	std	Y+5, r24	; 0x05
    5850:	19 c0       	rjmp	.+50     	; 0x5884 <_hal_led_task+0x76>
    5852:	1d 82       	std	Y+5, r1	; 0x05
    5854:	e8 81       	ld	r30, Y
    5856:	f9 81       	ldd	r31, Y+1	; 0x01
    5858:	20 81       	ld	r18, Z
    585a:	c6 01       	movw	r24, r12
    585c:	0a 80       	ldd	r0, Y+2	; 0x02
    585e:	02 c0       	rjmp	.+4      	; 0x5864 <_hal_led_task+0x56>
    5860:	88 0f       	add	r24, r24
    5862:	99 1f       	adc	r25, r25
    5864:	0a 94       	dec	r0
    5866:	e2 f7       	brpl	.-8      	; 0x5860 <_hal_led_task+0x52>
    5868:	82 27       	eor	r24, r18
    586a:	80 83       	st	Z, r24
    586c:	0b c0       	rjmp	.+22     	; 0x5884 <_hal_led_task+0x76>
    586e:	0d 81       	ldd	r16, Y+5	; 0x05
    5870:	00 23       	and	r16, r16
    5872:	29 f0       	breq	.+10     	; 0x587e <_hal_led_task+0x70>
    5874:	81 2f       	mov	r24, r17
    5876:	7f df       	rcall	.-258    	; 0x5776 <_turn_on>
    5878:	01 50       	subi	r16, 0x01	; 1
    587a:	0d 83       	std	Y+5, r16	; 0x05
    587c:	03 c0       	rjmp	.+6      	; 0x5884 <_hal_led_task+0x76>
    587e:	bc 82       	std	Y+4, r11	; 0x04
    5880:	81 2f       	mov	r24, r17
    5882:	2d df       	rcall	.-422    	; 0x56de <_turn_off>
    5884:	1f 5f       	subi	r17, 0xFF	; 255
    5886:	26 96       	adiw	r28, 0x06	; 6
    5888:	14 30       	cpi	r17, 0x04	; 4
    588a:	51 f6       	brne	.-108    	; 0x5820 <_hal_led_task+0x12>
    588c:	6c e0       	ldi	r22, 0x0C	; 12
    588e:	70 e0       	ldi	r23, 0x00	; 0
    5890:	80 e0       	ldi	r24, 0x00	; 0
    5892:	90 e0       	ldi	r25, 0x00	; 0
    5894:	0e 94 e6 10 	call	0x21cc	; 0x21cc <vTaskDelay>
    5898:	c0 cf       	rjmp	.-128    	; 0x581a <_hal_led_task+0xc>

0000589a <status_leds_initialise>:
    589a:	ef 92       	push	r14
    589c:	ff 92       	push	r15
    589e:	0f 93       	push	r16
    58a0:	1f 93       	push	r17
    58a2:	cf 93       	push	r28
    58a4:	df 93       	push	r29
    58a6:	08 2f       	mov	r16, r24
    58a8:	80 e4       	ldi	r24, 0x40	; 64
    58aa:	87 b9       	out	0x07, r24	; 7
    58ac:	c2 eb       	ldi	r28, 0xB2	; 178
    58ae:	d7 e1       	ldi	r29, 0x17	; 23
    58b0:	0f 2e       	mov	r0, r31
    58b2:	f8 e2       	ldi	r31, 0x28	; 40
    58b4:	ef 2e       	mov	r14, r31
    58b6:	f1 2c       	mov	r15, r1
    58b8:	f0 2d       	mov	r31, r0
    58ba:	f9 82       	std	Y+1, r15	; 0x01
    58bc:	e8 82       	st	Y, r14
    58be:	86 e0       	ldi	r24, 0x06	; 6
    58c0:	8a 83       	std	Y+2, r24	; 0x02
    58c2:	1b 82       	std	Y+3, r1	; 0x03
    58c4:	14 e0       	ldi	r17, 0x04	; 4
    58c6:	1c 83       	std	Y+4, r17	; 0x04
    58c8:	80 e0       	ldi	r24, 0x00	; 0
    58ca:	09 df       	rcall	.-494    	; 0x56de <_turn_off>
    58cc:	80 e8       	ldi	r24, 0x80	; 128
    58ce:	87 b9       	out	0x07, r24	; 7
    58d0:	ff 82       	std	Y+7, r15	; 0x07
    58d2:	ee 82       	std	Y+6, r14	; 0x06
    58d4:	87 e0       	ldi	r24, 0x07	; 7
    58d6:	88 87       	std	Y+8, r24	; 0x08
    58d8:	19 86       	std	Y+9, r1	; 0x09
    58da:	1a 87       	std	Y+10, r17	; 0x0a
    58dc:	81 e0       	ldi	r24, 0x01	; 1
    58de:	ff de       	rcall	.-514    	; 0x56de <_turn_off>
    58e0:	80 e2       	ldi	r24, 0x20	; 32
    58e2:	83 bb       	out	0x13, r24	; 19
    58e4:	84 e3       	ldi	r24, 0x34	; 52
    58e6:	90 e0       	ldi	r25, 0x00	; 0
    58e8:	9d 87       	std	Y+13, r25	; 0x0d
    58ea:	8c 87       	std	Y+12, r24	; 0x0c
    58ec:	85 e0       	ldi	r24, 0x05	; 5
    58ee:	8e 87       	std	Y+14, r24	; 0x0e
    58f0:	1f 86       	std	Y+15, r1	; 0x0f
    58f2:	18 8b       	std	Y+16, r17	; 0x10
    58f4:	82 e0       	ldi	r24, 0x02	; 2
    58f6:	f3 de       	rcall	.-538    	; 0x56de <_turn_off>
    58f8:	80 e1       	ldi	r24, 0x10	; 16
    58fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
    58fe:	82 e0       	ldi	r24, 0x02	; 2
    5900:	91 e0       	ldi	r25, 0x01	; 1
    5902:	9b 8b       	std	Y+19, r25	; 0x13
    5904:	8a 8b       	std	Y+18, r24	; 0x12
    5906:	1c 8b       	std	Y+20, r17	; 0x14
    5908:	1d 8a       	std	Y+21, r1	; 0x15
    590a:	1e 8b       	std	Y+22, r17	; 0x16
    590c:	83 e0       	ldi	r24, 0x03	; 3
    590e:	e7 de       	rcall	.-562    	; 0x56de <_turn_off>
    5910:	e1 2c       	mov	r14, r1
    5912:	f1 2c       	mov	r15, r1
    5914:	20 e0       	ldi	r18, 0x00	; 0
    5916:	30 e0       	ldi	r19, 0x00	; 0
    5918:	40 ec       	ldi	r20, 0xC0	; 192
    591a:	50 e0       	ldi	r21, 0x00	; 0
    591c:	65 eb       	ldi	r22, 0xB5	; 181
    591e:	77 e0       	ldi	r23, 0x07	; 7
    5920:	87 e0       	ldi	r24, 0x07	; 7
    5922:	9c e2       	ldi	r25, 0x2C	; 44
    5924:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <xTaskCreate>
    5928:	df 91       	pop	r29
    592a:	cf 91       	pop	r28
    592c:	1f 91       	pop	r17
    592e:	0f 91       	pop	r16
    5930:	ff 90       	pop	r15
    5932:	ef 90       	pop	r14
    5934:	08 95       	ret

00005936 <status_leds_slowBlink>:
    5936:	cf 93       	push	r28
    5938:	df 93       	push	r29
    593a:	90 e0       	ldi	r25, 0x00	; 0
    593c:	fc 01       	movw	r30, r24
    593e:	ee 0f       	add	r30, r30
    5940:	ff 1f       	adc	r31, r31
    5942:	df 01       	movw	r26, r30
    5944:	a8 0f       	add	r26, r24
    5946:	b9 1f       	adc	r27, r25
    5948:	aa 0f       	add	r26, r26
    594a:	bb 1f       	adc	r27, r27
    594c:	ae 54       	subi	r26, 0x4E	; 78
    594e:	b8 4e       	sbci	r27, 0xE8	; 232
    5950:	cd 91       	ld	r28, X+
    5952:	dc 91       	ld	r29, X
    5954:	11 97       	sbiw	r26, 0x01	; 1
    5956:	48 81       	ld	r20, Y
    5958:	21 e0       	ldi	r18, 0x01	; 1
    595a:	30 e0       	ldi	r19, 0x00	; 0
    595c:	12 96       	adiw	r26, 0x02	; 2
    595e:	0c 90       	ld	r0, X
    5960:	12 97       	sbiw	r26, 0x02	; 2
    5962:	02 c0       	rjmp	.+4      	; 0x5968 <status_leds_slowBlink+0x32>
    5964:	22 0f       	add	r18, r18
    5966:	33 1f       	adc	r19, r19
    5968:	0a 94       	dec	r0
    596a:	e2 f7       	brpl	.-8      	; 0x5964 <status_leds_slowBlink+0x2e>
    596c:	24 27       	eor	r18, r20
    596e:	28 83       	st	Y, r18
    5970:	fd 01       	movw	r30, r26
    5972:	81 e0       	ldi	r24, 0x01	; 1
    5974:	84 83       	std	Z+4, r24	; 0x04
    5976:	df 91       	pop	r29
    5978:	cf 91       	pop	r28
    597a:	08 95       	ret

0000597c <status_leds_fastBlink>:
    597c:	cf 93       	push	r28
    597e:	df 93       	push	r29
    5980:	90 e0       	ldi	r25, 0x00	; 0
    5982:	fc 01       	movw	r30, r24
    5984:	ee 0f       	add	r30, r30
    5986:	ff 1f       	adc	r31, r31
    5988:	df 01       	movw	r26, r30
    598a:	a8 0f       	add	r26, r24
    598c:	b9 1f       	adc	r27, r25
    598e:	aa 0f       	add	r26, r26
    5990:	bb 1f       	adc	r27, r27
    5992:	ae 54       	subi	r26, 0x4E	; 78
    5994:	b8 4e       	sbci	r27, 0xE8	; 232
    5996:	cd 91       	ld	r28, X+
    5998:	dc 91       	ld	r29, X
    599a:	11 97       	sbiw	r26, 0x01	; 1
    599c:	48 81       	ld	r20, Y
    599e:	21 e0       	ldi	r18, 0x01	; 1
    59a0:	30 e0       	ldi	r19, 0x00	; 0
    59a2:	12 96       	adiw	r26, 0x02	; 2
    59a4:	0c 90       	ld	r0, X
    59a6:	12 97       	sbiw	r26, 0x02	; 2
    59a8:	02 c0       	rjmp	.+4      	; 0x59ae <status_leds_fastBlink+0x32>
    59aa:	22 0f       	add	r18, r18
    59ac:	33 1f       	adc	r19, r19
    59ae:	0a 94       	dec	r0
    59b0:	e2 f7       	brpl	.-8      	; 0x59aa <status_leds_fastBlink+0x2e>
    59b2:	24 27       	eor	r18, r20
    59b4:	28 83       	st	Y, r18
    59b6:	fd 01       	movw	r30, r26
    59b8:	82 e0       	ldi	r24, 0x02	; 2
    59ba:	84 83       	std	Z+4, r24	; 0x04
    59bc:	df 91       	pop	r29
    59be:	cf 91       	pop	r28
    59c0:	08 95       	ret

000059c2 <status_leds_ledOn>:
    59c2:	28 2f       	mov	r18, r24
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	f9 01       	movw	r30, r18
    59c8:	ee 0f       	add	r30, r30
    59ca:	ff 1f       	adc	r31, r31
    59cc:	e2 0f       	add	r30, r18
    59ce:	f3 1f       	adc	r31, r19
    59d0:	ee 0f       	add	r30, r30
    59d2:	ff 1f       	adc	r31, r31
    59d4:	ee 54       	subi	r30, 0x4E	; 78
    59d6:	f8 4e       	sbci	r31, 0xE8	; 232
    59d8:	93 e0       	ldi	r25, 0x03	; 3
    59da:	94 83       	std	Z+4, r25	; 0x04
    59dc:	cc ce       	rjmp	.-616    	; 0x5776 <_turn_on>
    59de:	08 95       	ret

000059e0 <status_leds_ledOff>:
    59e0:	28 2f       	mov	r18, r24
    59e2:	30 e0       	ldi	r19, 0x00	; 0
    59e4:	f9 01       	movw	r30, r18
    59e6:	ee 0f       	add	r30, r30
    59e8:	ff 1f       	adc	r31, r31
    59ea:	e2 0f       	add	r30, r18
    59ec:	f3 1f       	adc	r31, r19
    59ee:	ee 0f       	add	r30, r30
    59f0:	ff 1f       	adc	r31, r31
    59f2:	ee 54       	subi	r30, 0x4E	; 78
    59f4:	f8 4e       	sbci	r31, 0xE8	; 232
    59f6:	94 e0       	ldi	r25, 0x04	; 4
    59f8:	94 83       	std	Z+4, r25	; 0x04
    59fa:	71 ce       	rjmp	.-798    	; 0x56de <_turn_off>
    59fc:	08 95       	ret

000059fe <status_leds_longPuls>:
    59fe:	90 e0       	ldi	r25, 0x00	; 0
    5a00:	fc 01       	movw	r30, r24
    5a02:	ee 0f       	add	r30, r30
    5a04:	ff 1f       	adc	r31, r31
    5a06:	df 01       	movw	r26, r30
    5a08:	a8 0f       	add	r26, r24
    5a0a:	b9 1f       	adc	r27, r25
    5a0c:	aa 0f       	add	r26, r26
    5a0e:	bb 1f       	adc	r27, r27
    5a10:	ae 54       	subi	r26, 0x4E	; 78
    5a12:	b8 4e       	sbci	r27, 0xE8	; 232
    5a14:	26 e0       	ldi	r18, 0x06	; 6
    5a16:	15 96       	adiw	r26, 0x05	; 5
    5a18:	2c 93       	st	X, r18
    5a1a:	15 97       	sbiw	r26, 0x05	; 5
    5a1c:	fd 01       	movw	r30, r26
    5a1e:	14 82       	std	Z+4, r1	; 0x04
    5a20:	08 95       	ret

00005a22 <status_leds_shortPuls>:
    5a22:	90 e0       	ldi	r25, 0x00	; 0
    5a24:	fc 01       	movw	r30, r24
    5a26:	ee 0f       	add	r30, r30
    5a28:	ff 1f       	adc	r31, r31
    5a2a:	df 01       	movw	r26, r30
    5a2c:	a8 0f       	add	r26, r24
    5a2e:	b9 1f       	adc	r27, r25
    5a30:	aa 0f       	add	r26, r26
    5a32:	bb 1f       	adc	r27, r27
    5a34:	ae 54       	subi	r26, 0x4E	; 78
    5a36:	b8 4e       	sbci	r27, 0xE8	; 232
    5a38:	15 96       	adiw	r26, 0x05	; 5
    5a3a:	1c 92       	st	X, r1
    5a3c:	15 97       	sbiw	r26, 0x05	; 5
    5a3e:	fd 01       	movw	r30, r26
    5a40:	14 82       	std	Z+4, r1	; 0x04
    5a42:	08 95       	ret

00005a44 <_initTwiInterface>:
    5a44:	80 91 d8 17 	lds	r24, 0x17D8	; 0x8017d8 <_twiIsInitiated>
    5a48:	81 11       	cpse	r24, r1
    5a4a:	0c c0       	rjmp	.+24     	; 0x5a64 <_initTwiInterface+0x20>
    5a4c:	8c e0       	ldi	r24, 0x0C	; 12
    5a4e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5a52:	8f ef       	ldi	r24, 0xFF	; 255
    5a54:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5a58:	84 e0       	ldi	r24, 0x04	; 4
    5a5a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5a5e:	81 e0       	ldi	r24, 0x01	; 1
    5a60:	80 93 d8 17 	sts	0x17D8, r24	; 0x8017d8 <_twiIsInitiated>
    5a64:	08 95       	ret

00005a66 <twiCreate>:
    5a66:	af 92       	push	r10
    5a68:	bf 92       	push	r11
    5a6a:	cf 92       	push	r12
    5a6c:	df 92       	push	r13
    5a6e:	ef 92       	push	r14
    5a70:	ff 92       	push	r15
    5a72:	0f 93       	push	r16
    5a74:	1f 93       	push	r17
    5a76:	cf 93       	push	r28
    5a78:	df 93       	push	r29
    5a7a:	a8 2e       	mov	r10, r24
    5a7c:	b6 2e       	mov	r11, r22
    5a7e:	69 01       	movw	r12, r18
    5a80:	7a 01       	movw	r14, r20
    5a82:	84 e0       	ldi	r24, 0x04	; 4
    5a84:	90 e0       	ldi	r25, 0x00	; 0
    5a86:	22 d3       	rcall	.+1604   	; 0x60cc <malloc>
    5a88:	ec 01       	movw	r28, r24
    5a8a:	89 2b       	or	r24, r25
    5a8c:	61 f1       	breq	.+88     	; 0x5ae6 <twiCreate+0x80>
    5a8e:	a8 82       	st	Y, r10
    5a90:	81 e0       	ldi	r24, 0x01	; 1
    5a92:	b8 12       	cpse	r11, r24
    5a94:	12 c0       	rjmp	.+36     	; 0x5aba <twiCreate+0x54>
    5a96:	c7 01       	movw	r24, r14
    5a98:	b6 01       	movw	r22, r12
    5a9a:	20 ea       	ldi	r18, 0xA0	; 160
    5a9c:	36 e8       	ldi	r19, 0x86	; 134
    5a9e:	41 e0       	ldi	r20, 0x01	; 1
    5aa0:	50 e0       	ldi	r21, 0x00	; 0
    5aa2:	ea d2       	rcall	.+1492   	; 0x6078 <__udivmodsi4>
    5aa4:	da 01       	movw	r26, r20
    5aa6:	c9 01       	movw	r24, r18
    5aa8:	40 97       	sbiw	r24, 0x10	; 16
    5aaa:	a1 09       	sbc	r26, r1
    5aac:	b1 09       	sbc	r27, r1
    5aae:	b6 95       	lsr	r27
    5ab0:	a7 95       	ror	r26
    5ab2:	97 95       	ror	r25
    5ab4:	87 95       	ror	r24
    5ab6:	89 83       	std	Y+1, r24	; 0x01
    5ab8:	11 c0       	rjmp	.+34     	; 0x5adc <twiCreate+0x76>
    5aba:	c7 01       	movw	r24, r14
    5abc:	b6 01       	movw	r22, r12
    5abe:	20 e8       	ldi	r18, 0x80	; 128
    5ac0:	3a e1       	ldi	r19, 0x1A	; 26
    5ac2:	46 e0       	ldi	r20, 0x06	; 6
    5ac4:	50 e0       	ldi	r21, 0x00	; 0
    5ac6:	d8 d2       	rcall	.+1456   	; 0x6078 <__udivmodsi4>
    5ac8:	da 01       	movw	r26, r20
    5aca:	c9 01       	movw	r24, r18
    5acc:	40 97       	sbiw	r24, 0x10	; 16
    5ace:	a1 09       	sbc	r26, r1
    5ad0:	b1 09       	sbc	r27, r1
    5ad2:	b6 95       	lsr	r27
    5ad4:	a7 95       	ror	r26
    5ad6:	97 95       	ror	r25
    5ad8:	87 95       	ror	r24
    5ada:	89 83       	std	Y+1, r24	; 0x01
    5adc:	1b 83       	std	Y+3, r17	; 0x03
    5ade:	0a 83       	std	Y+2, r16	; 0x02
    5ae0:	8c 2f       	mov	r24, r28
    5ae2:	9d 2f       	mov	r25, r29
    5ae4:	02 c0       	rjmp	.+4      	; 0x5aea <twiCreate+0x84>
    5ae6:	80 e0       	ldi	r24, 0x00	; 0
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
    5aea:	df 91       	pop	r29
    5aec:	cf 91       	pop	r28
    5aee:	1f 91       	pop	r17
    5af0:	0f 91       	pop	r16
    5af2:	ff 90       	pop	r15
    5af4:	ef 90       	pop	r14
    5af6:	df 90       	pop	r13
    5af8:	cf 90       	pop	r12
    5afa:	bf 90       	pop	r11
    5afc:	af 90       	pop	r10
    5afe:	08 95       	ret

00005b00 <twiIsBusy>:
    5b00:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5b04:	81 70       	andi	r24, 0x01	; 1
    5b06:	08 95       	ret

00005b08 <twiTransmit>:
    5b08:	ff 92       	push	r15
    5b0a:	0f 93       	push	r16
    5b0c:	1f 93       	push	r17
    5b0e:	cf 93       	push	r28
    5b10:	df 93       	push	r29
    5b12:	00 97       	sbiw	r24, 0x00	; 0
    5b14:	d1 f1       	breq	.+116    	; 0x5b8a <twiTransmit+0x82>
    5b16:	4a 30       	cpi	r20, 0x0A	; 10
    5b18:	d0 f5       	brcc	.+116    	; 0x5b8e <twiTransmit+0x86>
    5b1a:	f4 2e       	mov	r15, r20
    5b1c:	8b 01       	movw	r16, r22
    5b1e:	ec 01       	movw	r28, r24
    5b20:	ef df       	rcall	.-34     	; 0x5b00 <twiIsBusy>
    5b22:	81 11       	cpse	r24, r1
    5b24:	36 c0       	rjmp	.+108    	; 0x5b92 <twiTransmit+0x8a>
    5b26:	80 91 cb 17 	lds	r24, 0x17CB	; 0x8017cb <_twiCurrentHandler>
    5b2a:	90 91 cc 17 	lds	r25, 0x17CC	; 0x8017cc <_twiCurrentHandler+0x1>
    5b2e:	c8 17       	cp	r28, r24
    5b30:	d9 07       	cpc	r29, r25
    5b32:	41 f0       	breq	.+16     	; 0x5b44 <twiTransmit+0x3c>
    5b34:	87 df       	rcall	.-242    	; 0x5a44 <_initTwiInterface>
    5b36:	89 81       	ldd	r24, Y+1	; 0x01
    5b38:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5b3c:	d0 93 cc 17 	sts	0x17CC, r29	; 0x8017cc <_twiCurrentHandler+0x1>
    5b40:	c0 93 cb 17 	sts	0x17CB, r28	; 0x8017cb <_twiCurrentHandler>
    5b44:	81 e0       	ldi	r24, 0x01	; 1
    5b46:	8f 0d       	add	r24, r15
    5b48:	80 93 cd 17 	sts	0x17CD, r24	; 0x8017cd <_twiMessageLen>
    5b4c:	88 81       	ld	r24, Y
    5b4e:	88 0f       	add	r24, r24
    5b50:	80 93 ce 17 	sts	0x17CE, r24	; 0x8017ce <_twiMessageBuffer>
    5b54:	ff 20       	and	r15, r15
    5b56:	89 f0       	breq	.+34     	; 0x5b7a <twiTransmit+0x72>
    5b58:	f8 01       	movw	r30, r16
    5b5a:	af ec       	ldi	r26, 0xCF	; 207
    5b5c:	b7 e1       	ldi	r27, 0x17	; 23
    5b5e:	4f ef       	ldi	r20, 0xFF	; 255
    5b60:	4f 0d       	add	r20, r15
    5b62:	64 2f       	mov	r22, r20
    5b64:	70 e0       	ldi	r23, 0x00	; 0
    5b66:	cb 01       	movw	r24, r22
    5b68:	01 96       	adiw	r24, 0x01	; 1
    5b6a:	b8 01       	movw	r22, r16
    5b6c:	68 0f       	add	r22, r24
    5b6e:	79 1f       	adc	r23, r25
    5b70:	81 91       	ld	r24, Z+
    5b72:	8d 93       	st	X+, r24
    5b74:	e6 17       	cp	r30, r22
    5b76:	f7 07       	cpc	r31, r23
    5b78:	d9 f7       	brne	.-10     	; 0x5b70 <twiTransmit+0x68>
    5b7a:	88 ef       	ldi	r24, 0xF8	; 248
    5b7c:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <_twiCurrentState>
    5b80:	85 ea       	ldi	r24, 0xA5	; 165
    5b82:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5b86:	84 e0       	ldi	r24, 0x04	; 4
    5b88:	05 c0       	rjmp	.+10     	; 0x5b94 <twiTransmit+0x8c>
    5b8a:	86 e0       	ldi	r24, 0x06	; 6
    5b8c:	03 c0       	rjmp	.+6      	; 0x5b94 <twiTransmit+0x8c>
    5b8e:	87 e0       	ldi	r24, 0x07	; 7
    5b90:	01 c0       	rjmp	.+2      	; 0x5b94 <twiTransmit+0x8c>
    5b92:	82 e0       	ldi	r24, 0x02	; 2
    5b94:	df 91       	pop	r29
    5b96:	cf 91       	pop	r28
    5b98:	1f 91       	pop	r17
    5b9a:	0f 91       	pop	r16
    5b9c:	ff 90       	pop	r15
    5b9e:	08 95       	ret

00005ba0 <twiReceive>:
    5ba0:	1f 93       	push	r17
    5ba2:	cf 93       	push	r28
    5ba4:	df 93       	push	r29
    5ba6:	00 97       	sbiw	r24, 0x00	; 0
    5ba8:	29 f1       	breq	.+74     	; 0x5bf4 <twiReceive+0x54>
    5baa:	6b 30       	cpi	r22, 0x0B	; 11
    5bac:	28 f5       	brcc	.+74     	; 0x5bf8 <twiReceive+0x58>
    5bae:	16 2f       	mov	r17, r22
    5bb0:	ec 01       	movw	r28, r24
    5bb2:	a6 df       	rcall	.-180    	; 0x5b00 <twiIsBusy>
    5bb4:	81 11       	cpse	r24, r1
    5bb6:	22 c0       	rjmp	.+68     	; 0x5bfc <twiReceive+0x5c>
    5bb8:	80 91 cb 17 	lds	r24, 0x17CB	; 0x8017cb <_twiCurrentHandler>
    5bbc:	90 91 cc 17 	lds	r25, 0x17CC	; 0x8017cc <_twiCurrentHandler+0x1>
    5bc0:	c8 17       	cp	r28, r24
    5bc2:	d9 07       	cpc	r29, r25
    5bc4:	41 f0       	breq	.+16     	; 0x5bd6 <twiReceive+0x36>
    5bc6:	3e df       	rcall	.-388    	; 0x5a44 <_initTwiInterface>
    5bc8:	89 81       	ldd	r24, Y+1	; 0x01
    5bca:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    5bce:	d0 93 cc 17 	sts	0x17CC, r29	; 0x8017cc <_twiCurrentHandler+0x1>
    5bd2:	c0 93 cb 17 	sts	0x17CB, r28	; 0x8017cb <_twiCurrentHandler>
    5bd6:	10 93 cd 17 	sts	0x17CD, r17	; 0x8017cd <_twiMessageLen>
    5bda:	88 81       	ld	r24, Y
    5bdc:	88 0f       	add	r24, r24
    5bde:	81 60       	ori	r24, 0x01	; 1
    5be0:	80 93 ce 17 	sts	0x17CE, r24	; 0x8017ce <_twiMessageBuffer>
    5be4:	88 ef       	ldi	r24, 0xF8	; 248
    5be6:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <_twiCurrentState>
    5bea:	85 ea       	ldi	r24, 0xA5	; 165
    5bec:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5bf0:	85 e0       	ldi	r24, 0x05	; 5
    5bf2:	05 c0       	rjmp	.+10     	; 0x5bfe <twiReceive+0x5e>
    5bf4:	86 e0       	ldi	r24, 0x06	; 6
    5bf6:	03 c0       	rjmp	.+6      	; 0x5bfe <twiReceive+0x5e>
    5bf8:	87 e0       	ldi	r24, 0x07	; 7
    5bfa:	01 c0       	rjmp	.+2      	; 0x5bfe <twiReceive+0x5e>
    5bfc:	82 e0       	ldi	r24, 0x02	; 2
    5bfe:	df 91       	pop	r29
    5c00:	cf 91       	pop	r28
    5c02:	1f 91       	pop	r17
    5c04:	08 95       	ret

00005c06 <__vector_39>:
    5c06:	1f 92       	push	r1
    5c08:	0f 92       	push	r0
    5c0a:	0f b6       	in	r0, 0x3f	; 63
    5c0c:	0f 92       	push	r0
    5c0e:	11 24       	eor	r1, r1
    5c10:	0b b6       	in	r0, 0x3b	; 59
    5c12:	0f 92       	push	r0
    5c14:	2f 93       	push	r18
    5c16:	3f 93       	push	r19
    5c18:	4f 93       	push	r20
    5c1a:	5f 93       	push	r21
    5c1c:	6f 93       	push	r22
    5c1e:	7f 93       	push	r23
    5c20:	8f 93       	push	r24
    5c22:	9f 93       	push	r25
    5c24:	af 93       	push	r26
    5c26:	bf 93       	push	r27
    5c28:	ef 93       	push	r30
    5c2a:	ff 93       	push	r31
    5c2c:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5c30:	8e 2f       	mov	r24, r30
    5c32:	90 e0       	ldi	r25, 0x00	; 0
    5c34:	fc 01       	movw	r30, r24
    5c36:	38 97       	sbiw	r30, 0x08	; 8
    5c38:	e1 35       	cpi	r30, 0x51	; 81
    5c3a:	f1 05       	cpc	r31, r1
    5c3c:	08 f0       	brcs	.+2      	; 0x5c40 <__vector_39+0x3a>
    5c3e:	75 c0       	rjmp	.+234    	; 0x5d2a <__vector_39+0x124>
    5c40:	88 27       	eor	r24, r24
    5c42:	e4 58       	subi	r30, 0x84	; 132
    5c44:	ff 4f       	sbci	r31, 0xFF	; 255
    5c46:	8f 4f       	sbci	r24, 0xFF	; 255
    5c48:	39 c2       	rjmp	.+1138   	; 0x60bc <__tablejump2__>
    5c4a:	10 92 ca 17 	sts	0x17CA, r1	; 0x8017ca <_index.1885>
    5c4e:	e0 91 ca 17 	lds	r30, 0x17CA	; 0x8017ca <_index.1885>
    5c52:	80 91 cd 17 	lds	r24, 0x17CD	; 0x8017cd <_twiMessageLen>
    5c56:	e8 17       	cp	r30, r24
    5c58:	70 f4       	brcc	.+28     	; 0x5c76 <__vector_39+0x70>
    5c5a:	81 e0       	ldi	r24, 0x01	; 1
    5c5c:	8e 0f       	add	r24, r30
    5c5e:	80 93 ca 17 	sts	0x17CA, r24	; 0x8017ca <_index.1885>
    5c62:	f0 e0       	ldi	r31, 0x00	; 0
    5c64:	e2 53       	subi	r30, 0x32	; 50
    5c66:	f8 4e       	sbci	r31, 0xE8	; 232
    5c68:	80 81       	ld	r24, Z
    5c6a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5c6e:	85 e8       	ldi	r24, 0x85	; 133
    5c70:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5c74:	72 c0       	rjmp	.+228    	; 0x5d5a <__vector_39+0x154>
    5c76:	84 e9       	ldi	r24, 0x94	; 148
    5c78:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5c7c:	80 91 cb 17 	lds	r24, 0x17CB	; 0x8017cb <_twiCurrentHandler>
    5c80:	90 91 cc 17 	lds	r25, 0x17CC	; 0x8017cc <_twiCurrentHandler+0x1>
    5c84:	dc 01       	movw	r26, r24
    5c86:	12 96       	adiw	r26, 0x02	; 2
    5c88:	ed 91       	ld	r30, X+
    5c8a:	fc 91       	ld	r31, X
    5c8c:	13 97       	sbiw	r26, 0x03	; 3
    5c8e:	30 97       	sbiw	r30, 0x00	; 0
    5c90:	09 f4       	brne	.+2      	; 0x5c94 <__vector_39+0x8e>
    5c92:	63 c0       	rjmp	.+198    	; 0x5d5a <__vector_39+0x154>
    5c94:	20 e0       	ldi	r18, 0x00	; 0
    5c96:	40 e0       	ldi	r20, 0x00	; 0
    5c98:	50 e0       	ldi	r21, 0x00	; 0
    5c9a:	64 e0       	ldi	r22, 0x04	; 4
    5c9c:	19 95       	eicall
    5c9e:	5d c0       	rjmp	.+186    	; 0x5d5a <__vector_39+0x154>
    5ca0:	e0 91 ca 17 	lds	r30, 0x17CA	; 0x8017ca <_index.1885>
    5ca4:	81 e0       	ldi	r24, 0x01	; 1
    5ca6:	8e 0f       	add	r24, r30
    5ca8:	80 93 ca 17 	sts	0x17CA, r24	; 0x8017ca <_index.1885>
    5cac:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5cb0:	f0 e0       	ldi	r31, 0x00	; 0
    5cb2:	e2 53       	subi	r30, 0x32	; 50
    5cb4:	f8 4e       	sbci	r31, 0xE8	; 232
    5cb6:	80 83       	st	Z, r24
    5cb8:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5cbc:	80 34       	cpi	r24, 0x40	; 64
    5cbe:	11 f4       	brne	.+4      	; 0x5cc4 <__vector_39+0xbe>
    5cc0:	10 92 ca 17 	sts	0x17CA, r1	; 0x8017ca <_index.1885>
    5cc4:	20 91 ca 17 	lds	r18, 0x17CA	; 0x8017ca <_index.1885>
    5cc8:	30 e0       	ldi	r19, 0x00	; 0
    5cca:	80 91 cd 17 	lds	r24, 0x17CD	; 0x8017cd <_twiMessageLen>
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	01 97       	sbiw	r24, 0x01	; 1
    5cd2:	28 17       	cp	r18, r24
    5cd4:	39 07       	cpc	r19, r25
    5cd6:	24 f4       	brge	.+8      	; 0x5ce0 <__vector_39+0xda>
    5cd8:	85 ec       	ldi	r24, 0xC5	; 197
    5cda:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5cde:	3d c0       	rjmp	.+122    	; 0x5d5a <__vector_39+0x154>
    5ce0:	85 e8       	ldi	r24, 0x85	; 133
    5ce2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5ce6:	39 c0       	rjmp	.+114    	; 0x5d5a <__vector_39+0x154>
    5ce8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    5cec:	e0 91 ca 17 	lds	r30, 0x17CA	; 0x8017ca <_index.1885>
    5cf0:	f0 e0       	ldi	r31, 0x00	; 0
    5cf2:	e2 53       	subi	r30, 0x32	; 50
    5cf4:	f8 4e       	sbci	r31, 0xE8	; 232
    5cf6:	80 83       	st	Z, r24
    5cf8:	84 e9       	ldi	r24, 0x94	; 148
    5cfa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5cfe:	80 91 cb 17 	lds	r24, 0x17CB	; 0x8017cb <_twiCurrentHandler>
    5d02:	90 91 cc 17 	lds	r25, 0x17CC	; 0x8017cc <_twiCurrentHandler+0x1>
    5d06:	dc 01       	movw	r26, r24
    5d08:	12 96       	adiw	r26, 0x02	; 2
    5d0a:	ed 91       	ld	r30, X+
    5d0c:	fc 91       	ld	r31, X
    5d0e:	13 97       	sbiw	r26, 0x03	; 3
    5d10:	30 97       	sbiw	r30, 0x00	; 0
    5d12:	19 f1       	breq	.+70     	; 0x5d5a <__vector_39+0x154>
    5d14:	20 91 cd 17 	lds	r18, 0x17CD	; 0x8017cd <_twiMessageLen>
    5d18:	4e ec       	ldi	r20, 0xCE	; 206
    5d1a:	57 e1       	ldi	r21, 0x17	; 23
    5d1c:	65 e0       	ldi	r22, 0x05	; 5
    5d1e:	19 95       	eicall
    5d20:	1c c0       	rjmp	.+56     	; 0x5d5a <__vector_39+0x154>
    5d22:	85 ea       	ldi	r24, 0xA5	; 165
    5d24:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5d28:	18 c0       	rjmp	.+48     	; 0x5d5a <__vector_39+0x154>
    5d2a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    5d2e:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <_twiCurrentState>
    5d32:	84 e0       	ldi	r24, 0x04	; 4
    5d34:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    5d38:	80 91 cb 17 	lds	r24, 0x17CB	; 0x8017cb <_twiCurrentHandler>
    5d3c:	90 91 cc 17 	lds	r25, 0x17CC	; 0x8017cc <_twiCurrentHandler+0x1>
    5d40:	dc 01       	movw	r26, r24
    5d42:	12 96       	adiw	r26, 0x02	; 2
    5d44:	ed 91       	ld	r30, X+
    5d46:	fc 91       	ld	r31, X
    5d48:	13 97       	sbiw	r26, 0x03	; 3
    5d4a:	30 97       	sbiw	r30, 0x00	; 0
    5d4c:	31 f0       	breq	.+12     	; 0x5d5a <__vector_39+0x154>
    5d4e:	20 e0       	ldi	r18, 0x00	; 0
    5d50:	40 e0       	ldi	r20, 0x00	; 0
    5d52:	50 e0       	ldi	r21, 0x00	; 0
    5d54:	60 91 2b 02 	lds	r22, 0x022B	; 0x80022b <_twiCurrentState>
    5d58:	19 95       	eicall
    5d5a:	ff 91       	pop	r31
    5d5c:	ef 91       	pop	r30
    5d5e:	bf 91       	pop	r27
    5d60:	af 91       	pop	r26
    5d62:	9f 91       	pop	r25
    5d64:	8f 91       	pop	r24
    5d66:	7f 91       	pop	r23
    5d68:	6f 91       	pop	r22
    5d6a:	5f 91       	pop	r21
    5d6c:	4f 91       	pop	r20
    5d6e:	3f 91       	pop	r19
    5d70:	2f 91       	pop	r18
    5d72:	0f 90       	pop	r0
    5d74:	0b be       	out	0x3b, r0	; 59
    5d76:	0f 90       	pop	r0
    5d78:	0f be       	out	0x3f, r0	; 63
    5d7a:	0f 90       	pop	r0
    5d7c:	1f 90       	pop	r1
    5d7e:	18 95       	reti

00005d80 <fifo_init>:
    5d80:	fc 01       	movw	r30, r24
    5d82:	41 11       	cpse	r20, r1
    5d84:	01 c0       	rjmp	.+2      	; 0x5d88 <fifo_init+0x8>
    5d86:	c3 d2       	rcall	.+1414   	; 0x630e <abort>
    5d88:	84 2f       	mov	r24, r20
    5d8a:	90 e0       	ldi	r25, 0x00	; 0
    5d8c:	9c 01       	movw	r18, r24
    5d8e:	21 50       	subi	r18, 0x01	; 1
    5d90:	31 09       	sbc	r19, r1
    5d92:	82 23       	and	r24, r18
    5d94:	93 23       	and	r25, r19
    5d96:	89 2b       	or	r24, r25
    5d98:	09 f0       	breq	.+2      	; 0x5d9c <fifo_init+0x1c>
    5d9a:	b9 d2       	rcall	.+1394   	; 0x630e <abort>
    5d9c:	41 38       	cpi	r20, 0x81	; 129
    5d9e:	08 f0       	brcs	.+2      	; 0x5da2 <fifo_init+0x22>
    5da0:	b6 d2       	rcall	.+1388   	; 0x630e <abort>
    5da2:	12 82       	std	Z+2, r1	; 0x02
    5da4:	13 82       	std	Z+3, r1	; 0x03
    5da6:	44 83       	std	Z+4, r20	; 0x04
    5da8:	44 0f       	add	r20, r20
    5daa:	41 50       	subi	r20, 0x01	; 1
    5dac:	45 83       	std	Z+5, r20	; 0x05
    5dae:	71 83       	std	Z+1, r23	; 0x01
    5db0:	60 83       	st	Z, r22
    5db2:	80 e0       	ldi	r24, 0x00	; 0
    5db4:	90 e0       	ldi	r25, 0x00	; 0
    5db6:	08 95       	ret

00005db8 <__subsf3>:
    5db8:	50 58       	subi	r21, 0x80	; 128

00005dba <__addsf3>:
    5dba:	bb 27       	eor	r27, r27
    5dbc:	aa 27       	eor	r26, r26
    5dbe:	0e d0       	rcall	.+28     	; 0x5ddc <__addsf3x>
    5dc0:	e4 c0       	rjmp	.+456    	; 0x5f8a <__fp_round>
    5dc2:	d5 d0       	rcall	.+426    	; 0x5f6e <__fp_pscA>
    5dc4:	30 f0       	brcs	.+12     	; 0x5dd2 <__addsf3+0x18>
    5dc6:	da d0       	rcall	.+436    	; 0x5f7c <__fp_pscB>
    5dc8:	20 f0       	brcs	.+8      	; 0x5dd2 <__addsf3+0x18>
    5dca:	31 f4       	brne	.+12     	; 0x5dd8 <__addsf3+0x1e>
    5dcc:	9f 3f       	cpi	r25, 0xFF	; 255
    5dce:	11 f4       	brne	.+4      	; 0x5dd4 <__addsf3+0x1a>
    5dd0:	1e f4       	brtc	.+6      	; 0x5dd8 <__addsf3+0x1e>
    5dd2:	ca c0       	rjmp	.+404    	; 0x5f68 <__fp_nan>
    5dd4:	0e f4       	brtc	.+2      	; 0x5dd8 <__addsf3+0x1e>
    5dd6:	e0 95       	com	r30
    5dd8:	e7 fb       	bst	r30, 7
    5dda:	c0 c0       	rjmp	.+384    	; 0x5f5c <__fp_inf>

00005ddc <__addsf3x>:
    5ddc:	e9 2f       	mov	r30, r25
    5dde:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__fp_split3>
    5de2:	78 f3       	brcs	.-34     	; 0x5dc2 <__addsf3+0x8>
    5de4:	ba 17       	cp	r27, r26
    5de6:	62 07       	cpc	r22, r18
    5de8:	73 07       	cpc	r23, r19
    5dea:	84 07       	cpc	r24, r20
    5dec:	95 07       	cpc	r25, r21
    5dee:	20 f0       	brcs	.+8      	; 0x5df8 <__addsf3x+0x1c>
    5df0:	79 f4       	brne	.+30     	; 0x5e10 <__addsf3x+0x34>
    5df2:	a6 f5       	brtc	.+104    	; 0x5e5c <__addsf3x+0x80>
    5df4:	0c 94 4a 1f 	jmp	0x3e94	; 0x3e94 <__fp_zero>
    5df8:	0e f4       	brtc	.+2      	; 0x5dfc <__addsf3x+0x20>
    5dfa:	e0 95       	com	r30
    5dfc:	0b 2e       	mov	r0, r27
    5dfe:	ba 2f       	mov	r27, r26
    5e00:	a0 2d       	mov	r26, r0
    5e02:	0b 01       	movw	r0, r22
    5e04:	b9 01       	movw	r22, r18
    5e06:	90 01       	movw	r18, r0
    5e08:	0c 01       	movw	r0, r24
    5e0a:	ca 01       	movw	r24, r20
    5e0c:	a0 01       	movw	r20, r0
    5e0e:	11 24       	eor	r1, r1
    5e10:	ff 27       	eor	r31, r31
    5e12:	59 1b       	sub	r21, r25
    5e14:	99 f0       	breq	.+38     	; 0x5e3c <__addsf3x+0x60>
    5e16:	59 3f       	cpi	r21, 0xF9	; 249
    5e18:	50 f4       	brcc	.+20     	; 0x5e2e <__addsf3x+0x52>
    5e1a:	50 3e       	cpi	r21, 0xE0	; 224
    5e1c:	68 f1       	brcs	.+90     	; 0x5e78 <__addsf3x+0x9c>
    5e1e:	1a 16       	cp	r1, r26
    5e20:	f0 40       	sbci	r31, 0x00	; 0
    5e22:	a2 2f       	mov	r26, r18
    5e24:	23 2f       	mov	r18, r19
    5e26:	34 2f       	mov	r19, r20
    5e28:	44 27       	eor	r20, r20
    5e2a:	58 5f       	subi	r21, 0xF8	; 248
    5e2c:	f3 cf       	rjmp	.-26     	; 0x5e14 <__addsf3x+0x38>
    5e2e:	46 95       	lsr	r20
    5e30:	37 95       	ror	r19
    5e32:	27 95       	ror	r18
    5e34:	a7 95       	ror	r26
    5e36:	f0 40       	sbci	r31, 0x00	; 0
    5e38:	53 95       	inc	r21
    5e3a:	c9 f7       	brne	.-14     	; 0x5e2e <__addsf3x+0x52>
    5e3c:	7e f4       	brtc	.+30     	; 0x5e5c <__addsf3x+0x80>
    5e3e:	1f 16       	cp	r1, r31
    5e40:	ba 0b       	sbc	r27, r26
    5e42:	62 0b       	sbc	r22, r18
    5e44:	73 0b       	sbc	r23, r19
    5e46:	84 0b       	sbc	r24, r20
    5e48:	ba f0       	brmi	.+46     	; 0x5e78 <__addsf3x+0x9c>
    5e4a:	91 50       	subi	r25, 0x01	; 1
    5e4c:	a1 f0       	breq	.+40     	; 0x5e76 <__addsf3x+0x9a>
    5e4e:	ff 0f       	add	r31, r31
    5e50:	bb 1f       	adc	r27, r27
    5e52:	66 1f       	adc	r22, r22
    5e54:	77 1f       	adc	r23, r23
    5e56:	88 1f       	adc	r24, r24
    5e58:	c2 f7       	brpl	.-16     	; 0x5e4a <__addsf3x+0x6e>
    5e5a:	0e c0       	rjmp	.+28     	; 0x5e78 <__addsf3x+0x9c>
    5e5c:	ba 0f       	add	r27, r26
    5e5e:	62 1f       	adc	r22, r18
    5e60:	73 1f       	adc	r23, r19
    5e62:	84 1f       	adc	r24, r20
    5e64:	48 f4       	brcc	.+18     	; 0x5e78 <__addsf3x+0x9c>
    5e66:	87 95       	ror	r24
    5e68:	77 95       	ror	r23
    5e6a:	67 95       	ror	r22
    5e6c:	b7 95       	ror	r27
    5e6e:	f7 95       	ror	r31
    5e70:	9e 3f       	cpi	r25, 0xFE	; 254
    5e72:	08 f0       	brcs	.+2      	; 0x5e76 <__addsf3x+0x9a>
    5e74:	b1 cf       	rjmp	.-158    	; 0x5dd8 <__addsf3+0x1e>
    5e76:	93 95       	inc	r25
    5e78:	88 0f       	add	r24, r24
    5e7a:	08 f0       	brcs	.+2      	; 0x5e7e <__addsf3x+0xa2>
    5e7c:	99 27       	eor	r25, r25
    5e7e:	ee 0f       	add	r30, r30
    5e80:	97 95       	ror	r25
    5e82:	87 95       	ror	r24
    5e84:	08 95       	ret

00005e86 <__divsf3>:
    5e86:	0d d0       	rcall	.+26     	; 0x5ea2 <__divsf3x>
    5e88:	80 c0       	rjmp	.+256    	; 0x5f8a <__fp_round>
    5e8a:	78 d0       	rcall	.+240    	; 0x5f7c <__fp_pscB>
    5e8c:	48 f0       	brcs	.+18     	; 0x5ea0 <__divsf3+0x1a>
    5e8e:	6f d0       	rcall	.+222    	; 0x5f6e <__fp_pscA>
    5e90:	38 f0       	brcs	.+14     	; 0x5ea0 <__divsf3+0x1a>
    5e92:	21 f4       	brne	.+8      	; 0x5e9c <__divsf3+0x16>
    5e94:	5f 3f       	cpi	r21, 0xFF	; 255
    5e96:	21 f0       	breq	.+8      	; 0x5ea0 <__divsf3+0x1a>
    5e98:	61 c0       	rjmp	.+194    	; 0x5f5c <__fp_inf>
    5e9a:	51 11       	cpse	r21, r1
    5e9c:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__fp_szero>
    5ea0:	63 c0       	rjmp	.+198    	; 0x5f68 <__fp_nan>

00005ea2 <__divsf3x>:
    5ea2:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__fp_split3>
    5ea6:	88 f3       	brcs	.-30     	; 0x5e8a <__divsf3+0x4>

00005ea8 <__divsf3_pse>:
    5ea8:	99 23       	and	r25, r25
    5eaa:	b9 f3       	breq	.-18     	; 0x5e9a <__divsf3+0x14>
    5eac:	55 23       	and	r21, r21
    5eae:	a1 f3       	breq	.-24     	; 0x5e98 <__divsf3+0x12>
    5eb0:	95 1b       	sub	r25, r21
    5eb2:	55 0b       	sbc	r21, r21
    5eb4:	bb 27       	eor	r27, r27
    5eb6:	aa 27       	eor	r26, r26
    5eb8:	62 17       	cp	r22, r18
    5eba:	73 07       	cpc	r23, r19
    5ebc:	84 07       	cpc	r24, r20
    5ebe:	38 f0       	brcs	.+14     	; 0x5ece <__divsf3_pse+0x26>
    5ec0:	9f 5f       	subi	r25, 0xFF	; 255
    5ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    5ec4:	22 0f       	add	r18, r18
    5ec6:	33 1f       	adc	r19, r19
    5ec8:	44 1f       	adc	r20, r20
    5eca:	aa 1f       	adc	r26, r26
    5ecc:	a9 f3       	breq	.-22     	; 0x5eb8 <__divsf3_pse+0x10>
    5ece:	34 d0       	rcall	.+104    	; 0x5f38 <__divsf3_pse+0x90>
    5ed0:	0e 2e       	mov	r0, r30
    5ed2:	3a f0       	brmi	.+14     	; 0x5ee2 <__divsf3_pse+0x3a>
    5ed4:	e0 e8       	ldi	r30, 0x80	; 128
    5ed6:	31 d0       	rcall	.+98     	; 0x5f3a <__divsf3_pse+0x92>
    5ed8:	91 50       	subi	r25, 0x01	; 1
    5eda:	50 40       	sbci	r21, 0x00	; 0
    5edc:	e6 95       	lsr	r30
    5ede:	00 1c       	adc	r0, r0
    5ee0:	ca f7       	brpl	.-14     	; 0x5ed4 <__divsf3_pse+0x2c>
    5ee2:	2a d0       	rcall	.+84     	; 0x5f38 <__divsf3_pse+0x90>
    5ee4:	fe 2f       	mov	r31, r30
    5ee6:	28 d0       	rcall	.+80     	; 0x5f38 <__divsf3_pse+0x90>
    5ee8:	66 0f       	add	r22, r22
    5eea:	77 1f       	adc	r23, r23
    5eec:	88 1f       	adc	r24, r24
    5eee:	bb 1f       	adc	r27, r27
    5ef0:	26 17       	cp	r18, r22
    5ef2:	37 07       	cpc	r19, r23
    5ef4:	48 07       	cpc	r20, r24
    5ef6:	ab 07       	cpc	r26, r27
    5ef8:	b0 e8       	ldi	r27, 0x80	; 128
    5efa:	09 f0       	breq	.+2      	; 0x5efe <__divsf3_pse+0x56>
    5efc:	bb 0b       	sbc	r27, r27
    5efe:	80 2d       	mov	r24, r0
    5f00:	bf 01       	movw	r22, r30
    5f02:	ff 27       	eor	r31, r31
    5f04:	93 58       	subi	r25, 0x83	; 131
    5f06:	5f 4f       	sbci	r21, 0xFF	; 255
    5f08:	32 f0       	brmi	.+12     	; 0x5f16 <__divsf3_pse+0x6e>
    5f0a:	9e 3f       	cpi	r25, 0xFE	; 254
    5f0c:	51 05       	cpc	r21, r1
    5f0e:	70 f0       	brcs	.+28     	; 0x5f2c <__divsf3_pse+0x84>
    5f10:	25 c0       	rjmp	.+74     	; 0x5f5c <__fp_inf>
    5f12:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__fp_szero>
    5f16:	5f 3f       	cpi	r21, 0xFF	; 255
    5f18:	e4 f3       	brlt	.-8      	; 0x5f12 <__divsf3_pse+0x6a>
    5f1a:	98 3e       	cpi	r25, 0xE8	; 232
    5f1c:	d4 f3       	brlt	.-12     	; 0x5f12 <__divsf3_pse+0x6a>
    5f1e:	86 95       	lsr	r24
    5f20:	77 95       	ror	r23
    5f22:	67 95       	ror	r22
    5f24:	b7 95       	ror	r27
    5f26:	f7 95       	ror	r31
    5f28:	9f 5f       	subi	r25, 0xFF	; 255
    5f2a:	c9 f7       	brne	.-14     	; 0x5f1e <__divsf3_pse+0x76>
    5f2c:	88 0f       	add	r24, r24
    5f2e:	91 1d       	adc	r25, r1
    5f30:	96 95       	lsr	r25
    5f32:	87 95       	ror	r24
    5f34:	97 f9       	bld	r25, 7
    5f36:	08 95       	ret
    5f38:	e1 e0       	ldi	r30, 0x01	; 1
    5f3a:	66 0f       	add	r22, r22
    5f3c:	77 1f       	adc	r23, r23
    5f3e:	88 1f       	adc	r24, r24
    5f40:	bb 1f       	adc	r27, r27
    5f42:	62 17       	cp	r22, r18
    5f44:	73 07       	cpc	r23, r19
    5f46:	84 07       	cpc	r24, r20
    5f48:	ba 07       	cpc	r27, r26
    5f4a:	20 f0       	brcs	.+8      	; 0x5f54 <__divsf3_pse+0xac>
    5f4c:	62 1b       	sub	r22, r18
    5f4e:	73 0b       	sbc	r23, r19
    5f50:	84 0b       	sbc	r24, r20
    5f52:	ba 0b       	sbc	r27, r26
    5f54:	ee 1f       	adc	r30, r30
    5f56:	88 f7       	brcc	.-30     	; 0x5f3a <__divsf3_pse+0x92>
    5f58:	e0 95       	com	r30
    5f5a:	08 95       	ret

00005f5c <__fp_inf>:
    5f5c:	97 f9       	bld	r25, 7
    5f5e:	9f 67       	ori	r25, 0x7F	; 127
    5f60:	80 e8       	ldi	r24, 0x80	; 128
    5f62:	70 e0       	ldi	r23, 0x00	; 0
    5f64:	60 e0       	ldi	r22, 0x00	; 0
    5f66:	08 95       	ret

00005f68 <__fp_nan>:
    5f68:	9f ef       	ldi	r25, 0xFF	; 255
    5f6a:	80 ec       	ldi	r24, 0xC0	; 192
    5f6c:	08 95       	ret

00005f6e <__fp_pscA>:
    5f6e:	00 24       	eor	r0, r0
    5f70:	0a 94       	dec	r0
    5f72:	16 16       	cp	r1, r22
    5f74:	17 06       	cpc	r1, r23
    5f76:	18 06       	cpc	r1, r24
    5f78:	09 06       	cpc	r0, r25
    5f7a:	08 95       	ret

00005f7c <__fp_pscB>:
    5f7c:	00 24       	eor	r0, r0
    5f7e:	0a 94       	dec	r0
    5f80:	12 16       	cp	r1, r18
    5f82:	13 06       	cpc	r1, r19
    5f84:	14 06       	cpc	r1, r20
    5f86:	05 06       	cpc	r0, r21
    5f88:	08 95       	ret

00005f8a <__fp_round>:
    5f8a:	09 2e       	mov	r0, r25
    5f8c:	03 94       	inc	r0
    5f8e:	00 0c       	add	r0, r0
    5f90:	11 f4       	brne	.+4      	; 0x5f96 <__fp_round+0xc>
    5f92:	88 23       	and	r24, r24
    5f94:	52 f0       	brmi	.+20     	; 0x5faa <__fp_round+0x20>
    5f96:	bb 0f       	add	r27, r27
    5f98:	40 f4       	brcc	.+16     	; 0x5faa <__fp_round+0x20>
    5f9a:	bf 2b       	or	r27, r31
    5f9c:	11 f4       	brne	.+4      	; 0x5fa2 <__fp_round+0x18>
    5f9e:	60 ff       	sbrs	r22, 0
    5fa0:	04 c0       	rjmp	.+8      	; 0x5faa <__fp_round+0x20>
    5fa2:	6f 5f       	subi	r22, 0xFF	; 255
    5fa4:	7f 4f       	sbci	r23, 0xFF	; 255
    5fa6:	8f 4f       	sbci	r24, 0xFF	; 255
    5fa8:	9f 4f       	sbci	r25, 0xFF	; 255
    5faa:	08 95       	ret

00005fac <__mulsf3>:
    5fac:	0c d0       	rcall	.+24     	; 0x5fc6 <__mulsf3x>
    5fae:	ed cf       	rjmp	.-38     	; 0x5f8a <__fp_round>
    5fb0:	de df       	rcall	.-68     	; 0x5f6e <__fp_pscA>
    5fb2:	28 f0       	brcs	.+10     	; 0x5fbe <__mulsf3+0x12>
    5fb4:	e3 df       	rcall	.-58     	; 0x5f7c <__fp_pscB>
    5fb6:	18 f0       	brcs	.+6      	; 0x5fbe <__mulsf3+0x12>
    5fb8:	95 23       	and	r25, r21
    5fba:	09 f0       	breq	.+2      	; 0x5fbe <__mulsf3+0x12>
    5fbc:	cf cf       	rjmp	.-98     	; 0x5f5c <__fp_inf>
    5fbe:	d4 cf       	rjmp	.-88     	; 0x5f68 <__fp_nan>
    5fc0:	11 24       	eor	r1, r1
    5fc2:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__fp_szero>

00005fc6 <__mulsf3x>:
    5fc6:	0e 94 28 1f 	call	0x3e50	; 0x3e50 <__fp_split3>
    5fca:	90 f3       	brcs	.-28     	; 0x5fb0 <__mulsf3+0x4>

00005fcc <__mulsf3_pse>:
    5fcc:	95 9f       	mul	r25, r21
    5fce:	c1 f3       	breq	.-16     	; 0x5fc0 <__mulsf3+0x14>
    5fd0:	95 0f       	add	r25, r21
    5fd2:	50 e0       	ldi	r21, 0x00	; 0
    5fd4:	55 1f       	adc	r21, r21
    5fd6:	62 9f       	mul	r22, r18
    5fd8:	f0 01       	movw	r30, r0
    5fda:	72 9f       	mul	r23, r18
    5fdc:	bb 27       	eor	r27, r27
    5fde:	f0 0d       	add	r31, r0
    5fe0:	b1 1d       	adc	r27, r1
    5fe2:	63 9f       	mul	r22, r19
    5fe4:	aa 27       	eor	r26, r26
    5fe6:	f0 0d       	add	r31, r0
    5fe8:	b1 1d       	adc	r27, r1
    5fea:	aa 1f       	adc	r26, r26
    5fec:	64 9f       	mul	r22, r20
    5fee:	66 27       	eor	r22, r22
    5ff0:	b0 0d       	add	r27, r0
    5ff2:	a1 1d       	adc	r26, r1
    5ff4:	66 1f       	adc	r22, r22
    5ff6:	82 9f       	mul	r24, r18
    5ff8:	22 27       	eor	r18, r18
    5ffa:	b0 0d       	add	r27, r0
    5ffc:	a1 1d       	adc	r26, r1
    5ffe:	62 1f       	adc	r22, r18
    6000:	73 9f       	mul	r23, r19
    6002:	b0 0d       	add	r27, r0
    6004:	a1 1d       	adc	r26, r1
    6006:	62 1f       	adc	r22, r18
    6008:	83 9f       	mul	r24, r19
    600a:	a0 0d       	add	r26, r0
    600c:	61 1d       	adc	r22, r1
    600e:	22 1f       	adc	r18, r18
    6010:	74 9f       	mul	r23, r20
    6012:	33 27       	eor	r19, r19
    6014:	a0 0d       	add	r26, r0
    6016:	61 1d       	adc	r22, r1
    6018:	23 1f       	adc	r18, r19
    601a:	84 9f       	mul	r24, r20
    601c:	60 0d       	add	r22, r0
    601e:	21 1d       	adc	r18, r1
    6020:	82 2f       	mov	r24, r18
    6022:	76 2f       	mov	r23, r22
    6024:	6a 2f       	mov	r22, r26
    6026:	11 24       	eor	r1, r1
    6028:	9f 57       	subi	r25, 0x7F	; 127
    602a:	50 40       	sbci	r21, 0x00	; 0
    602c:	92 f0       	brmi	.+36     	; 0x6052 <__mulsf3_pse+0x86>
    602e:	e9 f0       	breq	.+58     	; 0x606a <__mulsf3_pse+0x9e>
    6030:	88 23       	and	r24, r24
    6032:	4a f0       	brmi	.+18     	; 0x6046 <__mulsf3_pse+0x7a>
    6034:	ee 0f       	add	r30, r30
    6036:	ff 1f       	adc	r31, r31
    6038:	bb 1f       	adc	r27, r27
    603a:	66 1f       	adc	r22, r22
    603c:	77 1f       	adc	r23, r23
    603e:	88 1f       	adc	r24, r24
    6040:	91 50       	subi	r25, 0x01	; 1
    6042:	50 40       	sbci	r21, 0x00	; 0
    6044:	a9 f7       	brne	.-22     	; 0x6030 <__mulsf3_pse+0x64>
    6046:	9e 3f       	cpi	r25, 0xFE	; 254
    6048:	51 05       	cpc	r21, r1
    604a:	78 f0       	brcs	.+30     	; 0x606a <__mulsf3_pse+0x9e>
    604c:	87 cf       	rjmp	.-242    	; 0x5f5c <__fp_inf>
    604e:	0c 94 4b 1f 	jmp	0x3e96	; 0x3e96 <__fp_szero>
    6052:	5f 3f       	cpi	r21, 0xFF	; 255
    6054:	e4 f3       	brlt	.-8      	; 0x604e <__mulsf3_pse+0x82>
    6056:	98 3e       	cpi	r25, 0xE8	; 232
    6058:	d4 f3       	brlt	.-12     	; 0x604e <__mulsf3_pse+0x82>
    605a:	86 95       	lsr	r24
    605c:	77 95       	ror	r23
    605e:	67 95       	ror	r22
    6060:	b7 95       	ror	r27
    6062:	f7 95       	ror	r31
    6064:	e7 95       	ror	r30
    6066:	9f 5f       	subi	r25, 0xFF	; 255
    6068:	c1 f7       	brne	.-16     	; 0x605a <__mulsf3_pse+0x8e>
    606a:	fe 2b       	or	r31, r30
    606c:	88 0f       	add	r24, r24
    606e:	91 1d       	adc	r25, r1
    6070:	96 95       	lsr	r25
    6072:	87 95       	ror	r24
    6074:	97 f9       	bld	r25, 7
    6076:	08 95       	ret

00006078 <__udivmodsi4>:
    6078:	a1 e2       	ldi	r26, 0x21	; 33
    607a:	1a 2e       	mov	r1, r26
    607c:	aa 1b       	sub	r26, r26
    607e:	bb 1b       	sub	r27, r27
    6080:	fd 01       	movw	r30, r26
    6082:	0d c0       	rjmp	.+26     	; 0x609e <__udivmodsi4_ep>

00006084 <__udivmodsi4_loop>:
    6084:	aa 1f       	adc	r26, r26
    6086:	bb 1f       	adc	r27, r27
    6088:	ee 1f       	adc	r30, r30
    608a:	ff 1f       	adc	r31, r31
    608c:	a2 17       	cp	r26, r18
    608e:	b3 07       	cpc	r27, r19
    6090:	e4 07       	cpc	r30, r20
    6092:	f5 07       	cpc	r31, r21
    6094:	20 f0       	brcs	.+8      	; 0x609e <__udivmodsi4_ep>
    6096:	a2 1b       	sub	r26, r18
    6098:	b3 0b       	sbc	r27, r19
    609a:	e4 0b       	sbc	r30, r20
    609c:	f5 0b       	sbc	r31, r21

0000609e <__udivmodsi4_ep>:
    609e:	66 1f       	adc	r22, r22
    60a0:	77 1f       	adc	r23, r23
    60a2:	88 1f       	adc	r24, r24
    60a4:	99 1f       	adc	r25, r25
    60a6:	1a 94       	dec	r1
    60a8:	69 f7       	brne	.-38     	; 0x6084 <__udivmodsi4_loop>
    60aa:	60 95       	com	r22
    60ac:	70 95       	com	r23
    60ae:	80 95       	com	r24
    60b0:	90 95       	com	r25
    60b2:	9b 01       	movw	r18, r22
    60b4:	ac 01       	movw	r20, r24
    60b6:	bd 01       	movw	r22, r26
    60b8:	cf 01       	movw	r24, r30
    60ba:	08 95       	ret

000060bc <__tablejump2__>:
    60bc:	ee 0f       	add	r30, r30
    60be:	ff 1f       	adc	r31, r31
    60c0:	88 1f       	adc	r24, r24
    60c2:	8b bf       	out	0x3b, r24	; 59
    60c4:	07 90       	elpm	r0, Z+
    60c6:	f6 91       	elpm	r31, Z
    60c8:	e0 2d       	mov	r30, r0
    60ca:	19 94       	eijmp

000060cc <malloc>:
    60cc:	0f 93       	push	r16
    60ce:	1f 93       	push	r17
    60d0:	cf 93       	push	r28
    60d2:	df 93       	push	r29
    60d4:	82 30       	cpi	r24, 0x02	; 2
    60d6:	91 05       	cpc	r25, r1
    60d8:	10 f4       	brcc	.+4      	; 0x60de <malloc+0x12>
    60da:	82 e0       	ldi	r24, 0x02	; 2
    60dc:	90 e0       	ldi	r25, 0x00	; 0
    60de:	e0 91 ee 17 	lds	r30, 0x17EE	; 0x8017ee <__flp>
    60e2:	f0 91 ef 17 	lds	r31, 0x17EF	; 0x8017ef <__flp+0x1>
    60e6:	20 e0       	ldi	r18, 0x00	; 0
    60e8:	30 e0       	ldi	r19, 0x00	; 0
    60ea:	a0 e0       	ldi	r26, 0x00	; 0
    60ec:	b0 e0       	ldi	r27, 0x00	; 0
    60ee:	30 97       	sbiw	r30, 0x00	; 0
    60f0:	19 f1       	breq	.+70     	; 0x6138 <malloc+0x6c>
    60f2:	40 81       	ld	r20, Z
    60f4:	51 81       	ldd	r21, Z+1	; 0x01
    60f6:	02 81       	ldd	r16, Z+2	; 0x02
    60f8:	13 81       	ldd	r17, Z+3	; 0x03
    60fa:	48 17       	cp	r20, r24
    60fc:	59 07       	cpc	r21, r25
    60fe:	c8 f0       	brcs	.+50     	; 0x6132 <malloc+0x66>
    6100:	84 17       	cp	r24, r20
    6102:	95 07       	cpc	r25, r21
    6104:	69 f4       	brne	.+26     	; 0x6120 <malloc+0x54>
    6106:	10 97       	sbiw	r26, 0x00	; 0
    6108:	31 f0       	breq	.+12     	; 0x6116 <malloc+0x4a>
    610a:	12 96       	adiw	r26, 0x02	; 2
    610c:	0c 93       	st	X, r16
    610e:	12 97       	sbiw	r26, 0x02	; 2
    6110:	13 96       	adiw	r26, 0x03	; 3
    6112:	1c 93       	st	X, r17
    6114:	27 c0       	rjmp	.+78     	; 0x6164 <malloc+0x98>
    6116:	00 93 ee 17 	sts	0x17EE, r16	; 0x8017ee <__flp>
    611a:	10 93 ef 17 	sts	0x17EF, r17	; 0x8017ef <__flp+0x1>
    611e:	22 c0       	rjmp	.+68     	; 0x6164 <malloc+0x98>
    6120:	21 15       	cp	r18, r1
    6122:	31 05       	cpc	r19, r1
    6124:	19 f0       	breq	.+6      	; 0x612c <malloc+0x60>
    6126:	42 17       	cp	r20, r18
    6128:	53 07       	cpc	r21, r19
    612a:	18 f4       	brcc	.+6      	; 0x6132 <malloc+0x66>
    612c:	9a 01       	movw	r18, r20
    612e:	bd 01       	movw	r22, r26
    6130:	ef 01       	movw	r28, r30
    6132:	df 01       	movw	r26, r30
    6134:	f8 01       	movw	r30, r16
    6136:	db cf       	rjmp	.-74     	; 0x60ee <malloc+0x22>
    6138:	21 15       	cp	r18, r1
    613a:	31 05       	cpc	r19, r1
    613c:	f9 f0       	breq	.+62     	; 0x617c <malloc+0xb0>
    613e:	28 1b       	sub	r18, r24
    6140:	39 0b       	sbc	r19, r25
    6142:	24 30       	cpi	r18, 0x04	; 4
    6144:	31 05       	cpc	r19, r1
    6146:	80 f4       	brcc	.+32     	; 0x6168 <malloc+0x9c>
    6148:	8a 81       	ldd	r24, Y+2	; 0x02
    614a:	9b 81       	ldd	r25, Y+3	; 0x03
    614c:	61 15       	cp	r22, r1
    614e:	71 05       	cpc	r23, r1
    6150:	21 f0       	breq	.+8      	; 0x615a <malloc+0x8e>
    6152:	fb 01       	movw	r30, r22
    6154:	93 83       	std	Z+3, r25	; 0x03
    6156:	82 83       	std	Z+2, r24	; 0x02
    6158:	04 c0       	rjmp	.+8      	; 0x6162 <malloc+0x96>
    615a:	90 93 ef 17 	sts	0x17EF, r25	; 0x8017ef <__flp+0x1>
    615e:	80 93 ee 17 	sts	0x17EE, r24	; 0x8017ee <__flp>
    6162:	fe 01       	movw	r30, r28
    6164:	32 96       	adiw	r30, 0x02	; 2
    6166:	44 c0       	rjmp	.+136    	; 0x61f0 <malloc+0x124>
    6168:	fe 01       	movw	r30, r28
    616a:	e2 0f       	add	r30, r18
    616c:	f3 1f       	adc	r31, r19
    616e:	81 93       	st	Z+, r24
    6170:	91 93       	st	Z+, r25
    6172:	22 50       	subi	r18, 0x02	; 2
    6174:	31 09       	sbc	r19, r1
    6176:	39 83       	std	Y+1, r19	; 0x01
    6178:	28 83       	st	Y, r18
    617a:	3a c0       	rjmp	.+116    	; 0x61f0 <malloc+0x124>
    617c:	20 91 ec 17 	lds	r18, 0x17EC	; 0x8017ec <__brkval>
    6180:	30 91 ed 17 	lds	r19, 0x17ED	; 0x8017ed <__brkval+0x1>
    6184:	23 2b       	or	r18, r19
    6186:	41 f4       	brne	.+16     	; 0x6198 <malloc+0xcc>
    6188:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    618c:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    6190:	30 93 ed 17 	sts	0x17ED, r19	; 0x8017ed <__brkval+0x1>
    6194:	20 93 ec 17 	sts	0x17EC, r18	; 0x8017ec <__brkval>
    6198:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
    619c:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    61a0:	21 15       	cp	r18, r1
    61a2:	31 05       	cpc	r19, r1
    61a4:	41 f4       	brne	.+16     	; 0x61b6 <malloc+0xea>
    61a6:	2d b7       	in	r18, 0x3d	; 61
    61a8:	3e b7       	in	r19, 0x3e	; 62
    61aa:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    61ae:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    61b2:	24 1b       	sub	r18, r20
    61b4:	35 0b       	sbc	r19, r21
    61b6:	e0 91 ec 17 	lds	r30, 0x17EC	; 0x8017ec <__brkval>
    61ba:	f0 91 ed 17 	lds	r31, 0x17ED	; 0x8017ed <__brkval+0x1>
    61be:	e2 17       	cp	r30, r18
    61c0:	f3 07       	cpc	r31, r19
    61c2:	a0 f4       	brcc	.+40     	; 0x61ec <malloc+0x120>
    61c4:	2e 1b       	sub	r18, r30
    61c6:	3f 0b       	sbc	r19, r31
    61c8:	28 17       	cp	r18, r24
    61ca:	39 07       	cpc	r19, r25
    61cc:	78 f0       	brcs	.+30     	; 0x61ec <malloc+0x120>
    61ce:	ac 01       	movw	r20, r24
    61d0:	4e 5f       	subi	r20, 0xFE	; 254
    61d2:	5f 4f       	sbci	r21, 0xFF	; 255
    61d4:	24 17       	cp	r18, r20
    61d6:	35 07       	cpc	r19, r21
    61d8:	48 f0       	brcs	.+18     	; 0x61ec <malloc+0x120>
    61da:	4e 0f       	add	r20, r30
    61dc:	5f 1f       	adc	r21, r31
    61de:	50 93 ed 17 	sts	0x17ED, r21	; 0x8017ed <__brkval+0x1>
    61e2:	40 93 ec 17 	sts	0x17EC, r20	; 0x8017ec <__brkval>
    61e6:	81 93       	st	Z+, r24
    61e8:	91 93       	st	Z+, r25
    61ea:	02 c0       	rjmp	.+4      	; 0x61f0 <malloc+0x124>
    61ec:	e0 e0       	ldi	r30, 0x00	; 0
    61ee:	f0 e0       	ldi	r31, 0x00	; 0
    61f0:	cf 01       	movw	r24, r30
    61f2:	df 91       	pop	r29
    61f4:	cf 91       	pop	r28
    61f6:	1f 91       	pop	r17
    61f8:	0f 91       	pop	r16
    61fa:	08 95       	ret

000061fc <free>:
    61fc:	cf 93       	push	r28
    61fe:	df 93       	push	r29
    6200:	00 97       	sbiw	r24, 0x00	; 0
    6202:	09 f4       	brne	.+2      	; 0x6206 <free+0xa>
    6204:	81 c0       	rjmp	.+258    	; 0x6308 <free+0x10c>
    6206:	fc 01       	movw	r30, r24
    6208:	32 97       	sbiw	r30, 0x02	; 2
    620a:	13 82       	std	Z+3, r1	; 0x03
    620c:	12 82       	std	Z+2, r1	; 0x02
    620e:	a0 91 ee 17 	lds	r26, 0x17EE	; 0x8017ee <__flp>
    6212:	b0 91 ef 17 	lds	r27, 0x17EF	; 0x8017ef <__flp+0x1>
    6216:	10 97       	sbiw	r26, 0x00	; 0
    6218:	81 f4       	brne	.+32     	; 0x623a <free+0x3e>
    621a:	20 81       	ld	r18, Z
    621c:	31 81       	ldd	r19, Z+1	; 0x01
    621e:	82 0f       	add	r24, r18
    6220:	93 1f       	adc	r25, r19
    6222:	20 91 ec 17 	lds	r18, 0x17EC	; 0x8017ec <__brkval>
    6226:	30 91 ed 17 	lds	r19, 0x17ED	; 0x8017ed <__brkval+0x1>
    622a:	28 17       	cp	r18, r24
    622c:	39 07       	cpc	r19, r25
    622e:	51 f5       	brne	.+84     	; 0x6284 <free+0x88>
    6230:	f0 93 ed 17 	sts	0x17ED, r31	; 0x8017ed <__brkval+0x1>
    6234:	e0 93 ec 17 	sts	0x17EC, r30	; 0x8017ec <__brkval>
    6238:	67 c0       	rjmp	.+206    	; 0x6308 <free+0x10c>
    623a:	ed 01       	movw	r28, r26
    623c:	20 e0       	ldi	r18, 0x00	; 0
    623e:	30 e0       	ldi	r19, 0x00	; 0
    6240:	ce 17       	cp	r28, r30
    6242:	df 07       	cpc	r29, r31
    6244:	40 f4       	brcc	.+16     	; 0x6256 <free+0x5a>
    6246:	4a 81       	ldd	r20, Y+2	; 0x02
    6248:	5b 81       	ldd	r21, Y+3	; 0x03
    624a:	9e 01       	movw	r18, r28
    624c:	41 15       	cp	r20, r1
    624e:	51 05       	cpc	r21, r1
    6250:	f1 f0       	breq	.+60     	; 0x628e <free+0x92>
    6252:	ea 01       	movw	r28, r20
    6254:	f5 cf       	rjmp	.-22     	; 0x6240 <free+0x44>
    6256:	d3 83       	std	Z+3, r29	; 0x03
    6258:	c2 83       	std	Z+2, r28	; 0x02
    625a:	40 81       	ld	r20, Z
    625c:	51 81       	ldd	r21, Z+1	; 0x01
    625e:	84 0f       	add	r24, r20
    6260:	95 1f       	adc	r25, r21
    6262:	c8 17       	cp	r28, r24
    6264:	d9 07       	cpc	r29, r25
    6266:	59 f4       	brne	.+22     	; 0x627e <free+0x82>
    6268:	88 81       	ld	r24, Y
    626a:	99 81       	ldd	r25, Y+1	; 0x01
    626c:	84 0f       	add	r24, r20
    626e:	95 1f       	adc	r25, r21
    6270:	02 96       	adiw	r24, 0x02	; 2
    6272:	91 83       	std	Z+1, r25	; 0x01
    6274:	80 83       	st	Z, r24
    6276:	8a 81       	ldd	r24, Y+2	; 0x02
    6278:	9b 81       	ldd	r25, Y+3	; 0x03
    627a:	93 83       	std	Z+3, r25	; 0x03
    627c:	82 83       	std	Z+2, r24	; 0x02
    627e:	21 15       	cp	r18, r1
    6280:	31 05       	cpc	r19, r1
    6282:	29 f4       	brne	.+10     	; 0x628e <free+0x92>
    6284:	f0 93 ef 17 	sts	0x17EF, r31	; 0x8017ef <__flp+0x1>
    6288:	e0 93 ee 17 	sts	0x17EE, r30	; 0x8017ee <__flp>
    628c:	3d c0       	rjmp	.+122    	; 0x6308 <free+0x10c>
    628e:	e9 01       	movw	r28, r18
    6290:	fb 83       	std	Y+3, r31	; 0x03
    6292:	ea 83       	std	Y+2, r30	; 0x02
    6294:	49 91       	ld	r20, Y+
    6296:	59 91       	ld	r21, Y+
    6298:	c4 0f       	add	r28, r20
    629a:	d5 1f       	adc	r29, r21
    629c:	ec 17       	cp	r30, r28
    629e:	fd 07       	cpc	r31, r29
    62a0:	61 f4       	brne	.+24     	; 0x62ba <free+0xbe>
    62a2:	80 81       	ld	r24, Z
    62a4:	91 81       	ldd	r25, Z+1	; 0x01
    62a6:	84 0f       	add	r24, r20
    62a8:	95 1f       	adc	r25, r21
    62aa:	02 96       	adiw	r24, 0x02	; 2
    62ac:	e9 01       	movw	r28, r18
    62ae:	99 83       	std	Y+1, r25	; 0x01
    62b0:	88 83       	st	Y, r24
    62b2:	82 81       	ldd	r24, Z+2	; 0x02
    62b4:	93 81       	ldd	r25, Z+3	; 0x03
    62b6:	9b 83       	std	Y+3, r25	; 0x03
    62b8:	8a 83       	std	Y+2, r24	; 0x02
    62ba:	e0 e0       	ldi	r30, 0x00	; 0
    62bc:	f0 e0       	ldi	r31, 0x00	; 0
    62be:	12 96       	adiw	r26, 0x02	; 2
    62c0:	8d 91       	ld	r24, X+
    62c2:	9c 91       	ld	r25, X
    62c4:	13 97       	sbiw	r26, 0x03	; 3
    62c6:	00 97       	sbiw	r24, 0x00	; 0
    62c8:	19 f0       	breq	.+6      	; 0x62d0 <free+0xd4>
    62ca:	fd 01       	movw	r30, r26
    62cc:	dc 01       	movw	r26, r24
    62ce:	f7 cf       	rjmp	.-18     	; 0x62be <free+0xc2>
    62d0:	8d 91       	ld	r24, X+
    62d2:	9c 91       	ld	r25, X
    62d4:	11 97       	sbiw	r26, 0x01	; 1
    62d6:	9d 01       	movw	r18, r26
    62d8:	2e 5f       	subi	r18, 0xFE	; 254
    62da:	3f 4f       	sbci	r19, 0xFF	; 255
    62dc:	82 0f       	add	r24, r18
    62de:	93 1f       	adc	r25, r19
    62e0:	20 91 ec 17 	lds	r18, 0x17EC	; 0x8017ec <__brkval>
    62e4:	30 91 ed 17 	lds	r19, 0x17ED	; 0x8017ed <__brkval+0x1>
    62e8:	28 17       	cp	r18, r24
    62ea:	39 07       	cpc	r19, r25
    62ec:	69 f4       	brne	.+26     	; 0x6308 <free+0x10c>
    62ee:	30 97       	sbiw	r30, 0x00	; 0
    62f0:	29 f4       	brne	.+10     	; 0x62fc <free+0x100>
    62f2:	10 92 ef 17 	sts	0x17EF, r1	; 0x8017ef <__flp+0x1>
    62f6:	10 92 ee 17 	sts	0x17EE, r1	; 0x8017ee <__flp>
    62fa:	02 c0       	rjmp	.+4      	; 0x6300 <free+0x104>
    62fc:	13 82       	std	Z+3, r1	; 0x03
    62fe:	12 82       	std	Z+2, r1	; 0x02
    6300:	b0 93 ed 17 	sts	0x17ED, r27	; 0x8017ed <__brkval+0x1>
    6304:	a0 93 ec 17 	sts	0x17EC, r26	; 0x8017ec <__brkval>
    6308:	df 91       	pop	r29
    630a:	cf 91       	pop	r28
    630c:	08 95       	ret

0000630e <abort>:
    630e:	81 e0       	ldi	r24, 0x01	; 1
    6310:	90 e0       	ldi	r25, 0x00	; 0
    6312:	f8 94       	cli
    6314:	a4 c3       	rjmp	.+1864   	; 0x6a5e <_exit>

00006316 <memcpy>:
    6316:	fb 01       	movw	r30, r22
    6318:	dc 01       	movw	r26, r24
    631a:	02 c0       	rjmp	.+4      	; 0x6320 <memcpy+0xa>
    631c:	01 90       	ld	r0, Z+
    631e:	0d 92       	st	X+, r0
    6320:	41 50       	subi	r20, 0x01	; 1
    6322:	50 40       	sbci	r21, 0x00	; 0
    6324:	d8 f7       	brcc	.-10     	; 0x631c <memcpy+0x6>
    6326:	08 95       	ret

00006328 <memset>:
    6328:	dc 01       	movw	r26, r24
    632a:	01 c0       	rjmp	.+2      	; 0x632e <memset+0x6>
    632c:	6d 93       	st	X+, r22
    632e:	41 50       	subi	r20, 0x01	; 1
    6330:	50 40       	sbci	r21, 0x00	; 0
    6332:	e0 f7       	brcc	.-8      	; 0x632c <memset+0x4>
    6334:	08 95       	ret

00006336 <strcasestr>:
    6336:	fb 01       	movw	r30, r22
    6338:	51 91       	ld	r21, Z+
    633a:	55 23       	and	r21, r21
    633c:	b1 f0       	breq	.+44     	; 0x636a <strcasestr+0x34>
    633e:	bf 01       	movw	r22, r30
    6340:	dc 01       	movw	r26, r24
    6342:	05 2e       	mov	r0, r21
    6344:	4d 91       	ld	r20, X+
    6346:	44 23       	and	r20, r20
    6348:	69 f0       	breq	.+26     	; 0x6364 <strcasestr+0x2e>
    634a:	10 d0       	rcall	.+32     	; 0x636c <strcasestr+0x36>
    634c:	d9 f7       	brne	.-10     	; 0x6344 <strcasestr+0xe>
    634e:	cd 01       	movw	r24, r26
    6350:	01 90       	ld	r0, Z+
    6352:	00 20       	and	r0, r0
    6354:	49 f0       	breq	.+18     	; 0x6368 <strcasestr+0x32>
    6356:	4d 91       	ld	r20, X+
    6358:	41 11       	cpse	r20, r1
    635a:	08 d0       	rcall	.+16     	; 0x636c <strcasestr+0x36>
    635c:	c9 f3       	breq	.-14     	; 0x6350 <strcasestr+0x1a>
    635e:	fb 01       	movw	r30, r22
    6360:	41 11       	cpse	r20, r1
    6362:	ee cf       	rjmp	.-36     	; 0x6340 <strcasestr+0xa>
    6364:	81 e0       	ldi	r24, 0x01	; 1
    6366:	90 e0       	ldi	r25, 0x00	; 0
    6368:	01 97       	sbiw	r24, 0x01	; 1
    636a:	08 95       	ret
    636c:	40 25       	eor	r20, r0
    636e:	39 f0       	breq	.+14     	; 0x637e <strcasestr+0x48>
    6370:	40 32       	cpi	r20, 0x20	; 32
    6372:	29 f4       	brne	.+10     	; 0x637e <strcasestr+0x48>
    6374:	40 29       	or	r20, r0
    6376:	4b 57       	subi	r20, 0x7B	; 123
    6378:	46 5e       	subi	r20, 0xE6	; 230
    637a:	08 f0       	brcs	.+2      	; 0x637e <strcasestr+0x48>
    637c:	18 94       	sez
    637e:	08 95       	ret

00006380 <strcat>:
    6380:	fb 01       	movw	r30, r22
    6382:	dc 01       	movw	r26, r24
    6384:	0d 90       	ld	r0, X+
    6386:	00 20       	and	r0, r0
    6388:	e9 f7       	brne	.-6      	; 0x6384 <strcat+0x4>
    638a:	11 97       	sbiw	r26, 0x01	; 1
    638c:	01 90       	ld	r0, Z+
    638e:	0d 92       	st	X+, r0
    6390:	00 20       	and	r0, r0
    6392:	e1 f7       	brne	.-8      	; 0x638c <strcat+0xc>
    6394:	08 95       	ret

00006396 <strcpy>:
    6396:	fb 01       	movw	r30, r22
    6398:	dc 01       	movw	r26, r24
    639a:	01 90       	ld	r0, Z+
    639c:	0d 92       	st	X+, r0
    639e:	00 20       	and	r0, r0
    63a0:	e1 f7       	brne	.-8      	; 0x639a <strcpy+0x4>
    63a2:	08 95       	ret

000063a4 <strncasecmp>:
    63a4:	fb 01       	movw	r30, r22
    63a6:	dc 01       	movw	r26, r24
    63a8:	41 50       	subi	r20, 0x01	; 1
    63aa:	50 40       	sbci	r21, 0x00	; 0
    63ac:	88 f0       	brcs	.+34     	; 0x63d0 <strncasecmp+0x2c>
    63ae:	8d 91       	ld	r24, X+
    63b0:	81 34       	cpi	r24, 0x41	; 65
    63b2:	1c f0       	brlt	.+6      	; 0x63ba <strncasecmp+0x16>
    63b4:	8b 35       	cpi	r24, 0x5B	; 91
    63b6:	0c f4       	brge	.+2      	; 0x63ba <strncasecmp+0x16>
    63b8:	80 5e       	subi	r24, 0xE0	; 224
    63ba:	61 91       	ld	r22, Z+
    63bc:	61 34       	cpi	r22, 0x41	; 65
    63be:	1c f0       	brlt	.+6      	; 0x63c6 <strncasecmp+0x22>
    63c0:	6b 35       	cpi	r22, 0x5B	; 91
    63c2:	0c f4       	brge	.+2      	; 0x63c6 <strncasecmp+0x22>
    63c4:	60 5e       	subi	r22, 0xE0	; 224
    63c6:	86 1b       	sub	r24, r22
    63c8:	61 11       	cpse	r22, r1
    63ca:	71 f3       	breq	.-36     	; 0x63a8 <strncasecmp+0x4>
    63cc:	99 0b       	sbc	r25, r25
    63ce:	08 95       	ret
    63d0:	88 1b       	sub	r24, r24
    63d2:	fc cf       	rjmp	.-8      	; 0x63cc <strncasecmp+0x28>

000063d4 <strupr>:
    63d4:	dc 01       	movw	r26, r24
    63d6:	6c 91       	ld	r22, X
    63d8:	61 56       	subi	r22, 0x61	; 97
    63da:	6a 31       	cpi	r22, 0x1A	; 26
    63dc:	08 f0       	brcs	.+2      	; 0x63e0 <strupr+0xc>
    63de:	60 5e       	subi	r22, 0xE0	; 224
    63e0:	6f 5b       	subi	r22, 0xBF	; 191
    63e2:	6d 93       	st	X+, r22
    63e4:	c1 f7       	brne	.-16     	; 0x63d6 <strupr+0x2>
    63e6:	08 95       	ret

000063e8 <printf>:
    63e8:	cf 93       	push	r28
    63ea:	df 93       	push	r29
    63ec:	cd b7       	in	r28, 0x3d	; 61
    63ee:	de b7       	in	r29, 0x3e	; 62
    63f0:	ae 01       	movw	r20, r28
    63f2:	4a 5f       	subi	r20, 0xFA	; 250
    63f4:	5f 4f       	sbci	r21, 0xFF	; 255
    63f6:	fa 01       	movw	r30, r20
    63f8:	61 91       	ld	r22, Z+
    63fa:	71 91       	ld	r23, Z+
    63fc:	af 01       	movw	r20, r30
    63fe:	80 91 f2 17 	lds	r24, 0x17F2	; 0x8017f2 <__iob+0x2>
    6402:	90 91 f3 17 	lds	r25, 0x17F3	; 0x8017f3 <__iob+0x3>
    6406:	68 d0       	rcall	.+208    	; 0x64d8 <vfprintf>
    6408:	df 91       	pop	r29
    640a:	cf 91       	pop	r28
    640c:	08 95       	ret

0000640e <puts>:
    640e:	0f 93       	push	r16
    6410:	1f 93       	push	r17
    6412:	cf 93       	push	r28
    6414:	df 93       	push	r29
    6416:	e0 91 f2 17 	lds	r30, 0x17F2	; 0x8017f2 <__iob+0x2>
    641a:	f0 91 f3 17 	lds	r31, 0x17F3	; 0x8017f3 <__iob+0x3>
    641e:	23 81       	ldd	r18, Z+3	; 0x03
    6420:	21 ff       	sbrs	r18, 1
    6422:	1b c0       	rjmp	.+54     	; 0x645a <puts+0x4c>
    6424:	8c 01       	movw	r16, r24
    6426:	d0 e0       	ldi	r29, 0x00	; 0
    6428:	c0 e0       	ldi	r28, 0x00	; 0
    642a:	f8 01       	movw	r30, r16
    642c:	81 91       	ld	r24, Z+
    642e:	8f 01       	movw	r16, r30
    6430:	60 91 f2 17 	lds	r22, 0x17F2	; 0x8017f2 <__iob+0x2>
    6434:	70 91 f3 17 	lds	r23, 0x17F3	; 0x8017f3 <__iob+0x3>
    6438:	db 01       	movw	r26, r22
    643a:	18 96       	adiw	r26, 0x08	; 8
    643c:	ed 91       	ld	r30, X+
    643e:	fc 91       	ld	r31, X
    6440:	19 97       	sbiw	r26, 0x09	; 9
    6442:	88 23       	and	r24, r24
    6444:	31 f0       	breq	.+12     	; 0x6452 <puts+0x44>
    6446:	19 95       	eicall
    6448:	89 2b       	or	r24, r25
    644a:	79 f3       	breq	.-34     	; 0x642a <puts+0x1c>
    644c:	df ef       	ldi	r29, 0xFF	; 255
    644e:	cf ef       	ldi	r28, 0xFF	; 255
    6450:	ec cf       	rjmp	.-40     	; 0x642a <puts+0x1c>
    6452:	8a e0       	ldi	r24, 0x0A	; 10
    6454:	19 95       	eicall
    6456:	89 2b       	or	r24, r25
    6458:	19 f0       	breq	.+6      	; 0x6460 <puts+0x52>
    645a:	8f ef       	ldi	r24, 0xFF	; 255
    645c:	9f ef       	ldi	r25, 0xFF	; 255
    645e:	02 c0       	rjmp	.+4      	; 0x6464 <puts+0x56>
    6460:	8d 2f       	mov	r24, r29
    6462:	9c 2f       	mov	r25, r28
    6464:	df 91       	pop	r29
    6466:	cf 91       	pop	r28
    6468:	1f 91       	pop	r17
    646a:	0f 91       	pop	r16
    646c:	08 95       	ret

0000646e <sprintf>:
    646e:	0f 93       	push	r16
    6470:	1f 93       	push	r17
    6472:	cf 93       	push	r28
    6474:	df 93       	push	r29
    6476:	cd b7       	in	r28, 0x3d	; 61
    6478:	de b7       	in	r29, 0x3e	; 62
    647a:	2e 97       	sbiw	r28, 0x0e	; 14
    647c:	0f b6       	in	r0, 0x3f	; 63
    647e:	f8 94       	cli
    6480:	de bf       	out	0x3e, r29	; 62
    6482:	0f be       	out	0x3f, r0	; 63
    6484:	cd bf       	out	0x3d, r28	; 61
    6486:	0e 89       	ldd	r16, Y+22	; 0x16
    6488:	1f 89       	ldd	r17, Y+23	; 0x17
    648a:	86 e0       	ldi	r24, 0x06	; 6
    648c:	8c 83       	std	Y+4, r24	; 0x04
    648e:	1a 83       	std	Y+2, r17	; 0x02
    6490:	09 83       	std	Y+1, r16	; 0x01
    6492:	8f ef       	ldi	r24, 0xFF	; 255
    6494:	9f e7       	ldi	r25, 0x7F	; 127
    6496:	9e 83       	std	Y+6, r25	; 0x06
    6498:	8d 83       	std	Y+5, r24	; 0x05
    649a:	ae 01       	movw	r20, r28
    649c:	46 5e       	subi	r20, 0xE6	; 230
    649e:	5f 4f       	sbci	r21, 0xFF	; 255
    64a0:	68 8d       	ldd	r22, Y+24	; 0x18
    64a2:	79 8d       	ldd	r23, Y+25	; 0x19
    64a4:	ce 01       	movw	r24, r28
    64a6:	01 96       	adiw	r24, 0x01	; 1
    64a8:	17 d0       	rcall	.+46     	; 0x64d8 <vfprintf>
    64aa:	ef 81       	ldd	r30, Y+7	; 0x07
    64ac:	f8 85       	ldd	r31, Y+8	; 0x08
    64ae:	e0 0f       	add	r30, r16
    64b0:	f1 1f       	adc	r31, r17
    64b2:	10 82       	st	Z, r1
    64b4:	2e 96       	adiw	r28, 0x0e	; 14
    64b6:	0f b6       	in	r0, 0x3f	; 63
    64b8:	f8 94       	cli
    64ba:	de bf       	out	0x3e, r29	; 62
    64bc:	0f be       	out	0x3f, r0	; 63
    64be:	cd bf       	out	0x3d, r28	; 61
    64c0:	df 91       	pop	r29
    64c2:	cf 91       	pop	r28
    64c4:	1f 91       	pop	r17
    64c6:	0f 91       	pop	r16
    64c8:	08 95       	ret

000064ca <vprintf>:
    64ca:	ab 01       	movw	r20, r22
    64cc:	bc 01       	movw	r22, r24
    64ce:	80 91 f2 17 	lds	r24, 0x17F2	; 0x8017f2 <__iob+0x2>
    64d2:	90 91 f3 17 	lds	r25, 0x17F3	; 0x8017f3 <__iob+0x3>
    64d6:	00 c0       	rjmp	.+0      	; 0x64d8 <vfprintf>

000064d8 <vfprintf>:
    64d8:	2f 92       	push	r2
    64da:	3f 92       	push	r3
    64dc:	4f 92       	push	r4
    64de:	5f 92       	push	r5
    64e0:	6f 92       	push	r6
    64e2:	7f 92       	push	r7
    64e4:	8f 92       	push	r8
    64e6:	9f 92       	push	r9
    64e8:	af 92       	push	r10
    64ea:	bf 92       	push	r11
    64ec:	cf 92       	push	r12
    64ee:	df 92       	push	r13
    64f0:	ef 92       	push	r14
    64f2:	ff 92       	push	r15
    64f4:	0f 93       	push	r16
    64f6:	1f 93       	push	r17
    64f8:	cf 93       	push	r28
    64fa:	df 93       	push	r29
    64fc:	cd b7       	in	r28, 0x3d	; 61
    64fe:	de b7       	in	r29, 0x3e	; 62
    6500:	2b 97       	sbiw	r28, 0x0b	; 11
    6502:	0f b6       	in	r0, 0x3f	; 63
    6504:	f8 94       	cli
    6506:	de bf       	out	0x3e, r29	; 62
    6508:	0f be       	out	0x3f, r0	; 63
    650a:	cd bf       	out	0x3d, r28	; 61
    650c:	6c 01       	movw	r12, r24
    650e:	7b 01       	movw	r14, r22
    6510:	8a 01       	movw	r16, r20
    6512:	fc 01       	movw	r30, r24
    6514:	17 82       	std	Z+7, r1	; 0x07
    6516:	16 82       	std	Z+6, r1	; 0x06
    6518:	83 81       	ldd	r24, Z+3	; 0x03
    651a:	81 ff       	sbrs	r24, 1
    651c:	bf c1       	rjmp	.+894    	; 0x689c <vfprintf+0x3c4>
    651e:	ce 01       	movw	r24, r28
    6520:	01 96       	adiw	r24, 0x01	; 1
    6522:	3c 01       	movw	r6, r24
    6524:	f6 01       	movw	r30, r12
    6526:	93 81       	ldd	r25, Z+3	; 0x03
    6528:	f7 01       	movw	r30, r14
    652a:	93 fd       	sbrc	r25, 3
    652c:	85 91       	lpm	r24, Z+
    652e:	93 ff       	sbrs	r25, 3
    6530:	81 91       	ld	r24, Z+
    6532:	7f 01       	movw	r14, r30
    6534:	88 23       	and	r24, r24
    6536:	09 f4       	brne	.+2      	; 0x653a <vfprintf+0x62>
    6538:	ad c1       	rjmp	.+858    	; 0x6894 <vfprintf+0x3bc>
    653a:	85 32       	cpi	r24, 0x25	; 37
    653c:	39 f4       	brne	.+14     	; 0x654c <vfprintf+0x74>
    653e:	93 fd       	sbrc	r25, 3
    6540:	85 91       	lpm	r24, Z+
    6542:	93 ff       	sbrs	r25, 3
    6544:	81 91       	ld	r24, Z+
    6546:	7f 01       	movw	r14, r30
    6548:	85 32       	cpi	r24, 0x25	; 37
    654a:	21 f4       	brne	.+8      	; 0x6554 <vfprintf+0x7c>
    654c:	b6 01       	movw	r22, r12
    654e:	90 e0       	ldi	r25, 0x00	; 0
    6550:	d6 d1       	rcall	.+940    	; 0x68fe <fputc>
    6552:	e8 cf       	rjmp	.-48     	; 0x6524 <vfprintf+0x4c>
    6554:	91 2c       	mov	r9, r1
    6556:	21 2c       	mov	r2, r1
    6558:	31 2c       	mov	r3, r1
    655a:	ff e1       	ldi	r31, 0x1F	; 31
    655c:	f3 15       	cp	r31, r3
    655e:	d8 f0       	brcs	.+54     	; 0x6596 <vfprintf+0xbe>
    6560:	8b 32       	cpi	r24, 0x2B	; 43
    6562:	79 f0       	breq	.+30     	; 0x6582 <vfprintf+0xaa>
    6564:	38 f4       	brcc	.+14     	; 0x6574 <vfprintf+0x9c>
    6566:	80 32       	cpi	r24, 0x20	; 32
    6568:	79 f0       	breq	.+30     	; 0x6588 <vfprintf+0xb0>
    656a:	83 32       	cpi	r24, 0x23	; 35
    656c:	a1 f4       	brne	.+40     	; 0x6596 <vfprintf+0xbe>
    656e:	23 2d       	mov	r18, r3
    6570:	20 61       	ori	r18, 0x10	; 16
    6572:	1d c0       	rjmp	.+58     	; 0x65ae <vfprintf+0xd6>
    6574:	8d 32       	cpi	r24, 0x2D	; 45
    6576:	61 f0       	breq	.+24     	; 0x6590 <vfprintf+0xb8>
    6578:	80 33       	cpi	r24, 0x30	; 48
    657a:	69 f4       	brne	.+26     	; 0x6596 <vfprintf+0xbe>
    657c:	23 2d       	mov	r18, r3
    657e:	21 60       	ori	r18, 0x01	; 1
    6580:	16 c0       	rjmp	.+44     	; 0x65ae <vfprintf+0xd6>
    6582:	83 2d       	mov	r24, r3
    6584:	82 60       	ori	r24, 0x02	; 2
    6586:	38 2e       	mov	r3, r24
    6588:	e3 2d       	mov	r30, r3
    658a:	e4 60       	ori	r30, 0x04	; 4
    658c:	3e 2e       	mov	r3, r30
    658e:	2a c0       	rjmp	.+84     	; 0x65e4 <vfprintf+0x10c>
    6590:	f3 2d       	mov	r31, r3
    6592:	f8 60       	ori	r31, 0x08	; 8
    6594:	1d c0       	rjmp	.+58     	; 0x65d0 <vfprintf+0xf8>
    6596:	37 fc       	sbrc	r3, 7
    6598:	2d c0       	rjmp	.+90     	; 0x65f4 <vfprintf+0x11c>
    659a:	20 ed       	ldi	r18, 0xD0	; 208
    659c:	28 0f       	add	r18, r24
    659e:	2a 30       	cpi	r18, 0x0A	; 10
    65a0:	40 f0       	brcs	.+16     	; 0x65b2 <vfprintf+0xda>
    65a2:	8e 32       	cpi	r24, 0x2E	; 46
    65a4:	b9 f4       	brne	.+46     	; 0x65d4 <vfprintf+0xfc>
    65a6:	36 fc       	sbrc	r3, 6
    65a8:	75 c1       	rjmp	.+746    	; 0x6894 <vfprintf+0x3bc>
    65aa:	23 2d       	mov	r18, r3
    65ac:	20 64       	ori	r18, 0x40	; 64
    65ae:	32 2e       	mov	r3, r18
    65b0:	19 c0       	rjmp	.+50     	; 0x65e4 <vfprintf+0x10c>
    65b2:	36 fe       	sbrs	r3, 6
    65b4:	06 c0       	rjmp	.+12     	; 0x65c2 <vfprintf+0xea>
    65b6:	8a e0       	ldi	r24, 0x0A	; 10
    65b8:	98 9e       	mul	r9, r24
    65ba:	20 0d       	add	r18, r0
    65bc:	11 24       	eor	r1, r1
    65be:	92 2e       	mov	r9, r18
    65c0:	11 c0       	rjmp	.+34     	; 0x65e4 <vfprintf+0x10c>
    65c2:	ea e0       	ldi	r30, 0x0A	; 10
    65c4:	2e 9e       	mul	r2, r30
    65c6:	20 0d       	add	r18, r0
    65c8:	11 24       	eor	r1, r1
    65ca:	22 2e       	mov	r2, r18
    65cc:	f3 2d       	mov	r31, r3
    65ce:	f0 62       	ori	r31, 0x20	; 32
    65d0:	3f 2e       	mov	r3, r31
    65d2:	08 c0       	rjmp	.+16     	; 0x65e4 <vfprintf+0x10c>
    65d4:	8c 36       	cpi	r24, 0x6C	; 108
    65d6:	21 f4       	brne	.+8      	; 0x65e0 <vfprintf+0x108>
    65d8:	83 2d       	mov	r24, r3
    65da:	80 68       	ori	r24, 0x80	; 128
    65dc:	38 2e       	mov	r3, r24
    65de:	02 c0       	rjmp	.+4      	; 0x65e4 <vfprintf+0x10c>
    65e0:	88 36       	cpi	r24, 0x68	; 104
    65e2:	41 f4       	brne	.+16     	; 0x65f4 <vfprintf+0x11c>
    65e4:	f7 01       	movw	r30, r14
    65e6:	93 fd       	sbrc	r25, 3
    65e8:	85 91       	lpm	r24, Z+
    65ea:	93 ff       	sbrs	r25, 3
    65ec:	81 91       	ld	r24, Z+
    65ee:	7f 01       	movw	r14, r30
    65f0:	81 11       	cpse	r24, r1
    65f2:	b3 cf       	rjmp	.-154    	; 0x655a <vfprintf+0x82>
    65f4:	98 2f       	mov	r25, r24
    65f6:	9f 7d       	andi	r25, 0xDF	; 223
    65f8:	95 54       	subi	r25, 0x45	; 69
    65fa:	93 30       	cpi	r25, 0x03	; 3
    65fc:	28 f4       	brcc	.+10     	; 0x6608 <vfprintf+0x130>
    65fe:	0c 5f       	subi	r16, 0xFC	; 252
    6600:	1f 4f       	sbci	r17, 0xFF	; 255
    6602:	9f e3       	ldi	r25, 0x3F	; 63
    6604:	99 83       	std	Y+1, r25	; 0x01
    6606:	0d c0       	rjmp	.+26     	; 0x6622 <vfprintf+0x14a>
    6608:	83 36       	cpi	r24, 0x63	; 99
    660a:	31 f0       	breq	.+12     	; 0x6618 <vfprintf+0x140>
    660c:	83 37       	cpi	r24, 0x73	; 115
    660e:	71 f0       	breq	.+28     	; 0x662c <vfprintf+0x154>
    6610:	83 35       	cpi	r24, 0x53	; 83
    6612:	09 f0       	breq	.+2      	; 0x6616 <vfprintf+0x13e>
    6614:	55 c0       	rjmp	.+170    	; 0x66c0 <vfprintf+0x1e8>
    6616:	20 c0       	rjmp	.+64     	; 0x6658 <vfprintf+0x180>
    6618:	f8 01       	movw	r30, r16
    661a:	80 81       	ld	r24, Z
    661c:	89 83       	std	Y+1, r24	; 0x01
    661e:	0e 5f       	subi	r16, 0xFE	; 254
    6620:	1f 4f       	sbci	r17, 0xFF	; 255
    6622:	88 24       	eor	r8, r8
    6624:	83 94       	inc	r8
    6626:	91 2c       	mov	r9, r1
    6628:	53 01       	movw	r10, r6
    662a:	12 c0       	rjmp	.+36     	; 0x6650 <vfprintf+0x178>
    662c:	28 01       	movw	r4, r16
    662e:	f2 e0       	ldi	r31, 0x02	; 2
    6630:	4f 0e       	add	r4, r31
    6632:	51 1c       	adc	r5, r1
    6634:	f8 01       	movw	r30, r16
    6636:	a0 80       	ld	r10, Z
    6638:	b1 80       	ldd	r11, Z+1	; 0x01
    663a:	36 fe       	sbrs	r3, 6
    663c:	03 c0       	rjmp	.+6      	; 0x6644 <vfprintf+0x16c>
    663e:	69 2d       	mov	r22, r9
    6640:	70 e0       	ldi	r23, 0x00	; 0
    6642:	02 c0       	rjmp	.+4      	; 0x6648 <vfprintf+0x170>
    6644:	6f ef       	ldi	r22, 0xFF	; 255
    6646:	7f ef       	ldi	r23, 0xFF	; 255
    6648:	c5 01       	movw	r24, r10
    664a:	4e d1       	rcall	.+668    	; 0x68e8 <strnlen>
    664c:	4c 01       	movw	r8, r24
    664e:	82 01       	movw	r16, r4
    6650:	f3 2d       	mov	r31, r3
    6652:	ff 77       	andi	r31, 0x7F	; 127
    6654:	3f 2e       	mov	r3, r31
    6656:	15 c0       	rjmp	.+42     	; 0x6682 <vfprintf+0x1aa>
    6658:	28 01       	movw	r4, r16
    665a:	22 e0       	ldi	r18, 0x02	; 2
    665c:	42 0e       	add	r4, r18
    665e:	51 1c       	adc	r5, r1
    6660:	f8 01       	movw	r30, r16
    6662:	a0 80       	ld	r10, Z
    6664:	b1 80       	ldd	r11, Z+1	; 0x01
    6666:	36 fe       	sbrs	r3, 6
    6668:	03 c0       	rjmp	.+6      	; 0x6670 <vfprintf+0x198>
    666a:	69 2d       	mov	r22, r9
    666c:	70 e0       	ldi	r23, 0x00	; 0
    666e:	02 c0       	rjmp	.+4      	; 0x6674 <vfprintf+0x19c>
    6670:	6f ef       	ldi	r22, 0xFF	; 255
    6672:	7f ef       	ldi	r23, 0xFF	; 255
    6674:	c5 01       	movw	r24, r10
    6676:	2d d1       	rcall	.+602    	; 0x68d2 <strnlen_P>
    6678:	4c 01       	movw	r8, r24
    667a:	f3 2d       	mov	r31, r3
    667c:	f0 68       	ori	r31, 0x80	; 128
    667e:	3f 2e       	mov	r3, r31
    6680:	82 01       	movw	r16, r4
    6682:	33 fc       	sbrc	r3, 3
    6684:	19 c0       	rjmp	.+50     	; 0x66b8 <vfprintf+0x1e0>
    6686:	82 2d       	mov	r24, r2
    6688:	90 e0       	ldi	r25, 0x00	; 0
    668a:	88 16       	cp	r8, r24
    668c:	99 06       	cpc	r9, r25
    668e:	a0 f4       	brcc	.+40     	; 0x66b8 <vfprintf+0x1e0>
    6690:	b6 01       	movw	r22, r12
    6692:	80 e2       	ldi	r24, 0x20	; 32
    6694:	90 e0       	ldi	r25, 0x00	; 0
    6696:	33 d1       	rcall	.+614    	; 0x68fe <fputc>
    6698:	2a 94       	dec	r2
    669a:	f5 cf       	rjmp	.-22     	; 0x6686 <vfprintf+0x1ae>
    669c:	f5 01       	movw	r30, r10
    669e:	37 fc       	sbrc	r3, 7
    66a0:	85 91       	lpm	r24, Z+
    66a2:	37 fe       	sbrs	r3, 7
    66a4:	81 91       	ld	r24, Z+
    66a6:	5f 01       	movw	r10, r30
    66a8:	b6 01       	movw	r22, r12
    66aa:	90 e0       	ldi	r25, 0x00	; 0
    66ac:	28 d1       	rcall	.+592    	; 0x68fe <fputc>
    66ae:	21 10       	cpse	r2, r1
    66b0:	2a 94       	dec	r2
    66b2:	21 e0       	ldi	r18, 0x01	; 1
    66b4:	82 1a       	sub	r8, r18
    66b6:	91 08       	sbc	r9, r1
    66b8:	81 14       	cp	r8, r1
    66ba:	91 04       	cpc	r9, r1
    66bc:	79 f7       	brne	.-34     	; 0x669c <vfprintf+0x1c4>
    66be:	e1 c0       	rjmp	.+450    	; 0x6882 <vfprintf+0x3aa>
    66c0:	84 36       	cpi	r24, 0x64	; 100
    66c2:	11 f0       	breq	.+4      	; 0x66c8 <vfprintf+0x1f0>
    66c4:	89 36       	cpi	r24, 0x69	; 105
    66c6:	39 f5       	brne	.+78     	; 0x6716 <vfprintf+0x23e>
    66c8:	f8 01       	movw	r30, r16
    66ca:	37 fe       	sbrs	r3, 7
    66cc:	07 c0       	rjmp	.+14     	; 0x66dc <vfprintf+0x204>
    66ce:	60 81       	ld	r22, Z
    66d0:	71 81       	ldd	r23, Z+1	; 0x01
    66d2:	82 81       	ldd	r24, Z+2	; 0x02
    66d4:	93 81       	ldd	r25, Z+3	; 0x03
    66d6:	0c 5f       	subi	r16, 0xFC	; 252
    66d8:	1f 4f       	sbci	r17, 0xFF	; 255
    66da:	08 c0       	rjmp	.+16     	; 0x66ec <vfprintf+0x214>
    66dc:	60 81       	ld	r22, Z
    66de:	71 81       	ldd	r23, Z+1	; 0x01
    66e0:	07 2e       	mov	r0, r23
    66e2:	00 0c       	add	r0, r0
    66e4:	88 0b       	sbc	r24, r24
    66e6:	99 0b       	sbc	r25, r25
    66e8:	0e 5f       	subi	r16, 0xFE	; 254
    66ea:	1f 4f       	sbci	r17, 0xFF	; 255
    66ec:	f3 2d       	mov	r31, r3
    66ee:	ff 76       	andi	r31, 0x6F	; 111
    66f0:	3f 2e       	mov	r3, r31
    66f2:	97 ff       	sbrs	r25, 7
    66f4:	09 c0       	rjmp	.+18     	; 0x6708 <vfprintf+0x230>
    66f6:	90 95       	com	r25
    66f8:	80 95       	com	r24
    66fa:	70 95       	com	r23
    66fc:	61 95       	neg	r22
    66fe:	7f 4f       	sbci	r23, 0xFF	; 255
    6700:	8f 4f       	sbci	r24, 0xFF	; 255
    6702:	9f 4f       	sbci	r25, 0xFF	; 255
    6704:	f0 68       	ori	r31, 0x80	; 128
    6706:	3f 2e       	mov	r3, r31
    6708:	2a e0       	ldi	r18, 0x0A	; 10
    670a:	30 e0       	ldi	r19, 0x00	; 0
    670c:	a3 01       	movw	r20, r6
    670e:	33 d1       	rcall	.+614    	; 0x6976 <__ultoa_invert>
    6710:	88 2e       	mov	r8, r24
    6712:	86 18       	sub	r8, r6
    6714:	44 c0       	rjmp	.+136    	; 0x679e <vfprintf+0x2c6>
    6716:	85 37       	cpi	r24, 0x75	; 117
    6718:	31 f4       	brne	.+12     	; 0x6726 <vfprintf+0x24e>
    671a:	23 2d       	mov	r18, r3
    671c:	2f 7e       	andi	r18, 0xEF	; 239
    671e:	b2 2e       	mov	r11, r18
    6720:	2a e0       	ldi	r18, 0x0A	; 10
    6722:	30 e0       	ldi	r19, 0x00	; 0
    6724:	25 c0       	rjmp	.+74     	; 0x6770 <vfprintf+0x298>
    6726:	93 2d       	mov	r25, r3
    6728:	99 7f       	andi	r25, 0xF9	; 249
    672a:	b9 2e       	mov	r11, r25
    672c:	8f 36       	cpi	r24, 0x6F	; 111
    672e:	c1 f0       	breq	.+48     	; 0x6760 <vfprintf+0x288>
    6730:	18 f4       	brcc	.+6      	; 0x6738 <vfprintf+0x260>
    6732:	88 35       	cpi	r24, 0x58	; 88
    6734:	79 f0       	breq	.+30     	; 0x6754 <vfprintf+0x27c>
    6736:	ae c0       	rjmp	.+348    	; 0x6894 <vfprintf+0x3bc>
    6738:	80 37       	cpi	r24, 0x70	; 112
    673a:	19 f0       	breq	.+6      	; 0x6742 <vfprintf+0x26a>
    673c:	88 37       	cpi	r24, 0x78	; 120
    673e:	21 f0       	breq	.+8      	; 0x6748 <vfprintf+0x270>
    6740:	a9 c0       	rjmp	.+338    	; 0x6894 <vfprintf+0x3bc>
    6742:	e9 2f       	mov	r30, r25
    6744:	e0 61       	ori	r30, 0x10	; 16
    6746:	be 2e       	mov	r11, r30
    6748:	b4 fe       	sbrs	r11, 4
    674a:	0d c0       	rjmp	.+26     	; 0x6766 <vfprintf+0x28e>
    674c:	fb 2d       	mov	r31, r11
    674e:	f4 60       	ori	r31, 0x04	; 4
    6750:	bf 2e       	mov	r11, r31
    6752:	09 c0       	rjmp	.+18     	; 0x6766 <vfprintf+0x28e>
    6754:	34 fe       	sbrs	r3, 4
    6756:	0a c0       	rjmp	.+20     	; 0x676c <vfprintf+0x294>
    6758:	29 2f       	mov	r18, r25
    675a:	26 60       	ori	r18, 0x06	; 6
    675c:	b2 2e       	mov	r11, r18
    675e:	06 c0       	rjmp	.+12     	; 0x676c <vfprintf+0x294>
    6760:	28 e0       	ldi	r18, 0x08	; 8
    6762:	30 e0       	ldi	r19, 0x00	; 0
    6764:	05 c0       	rjmp	.+10     	; 0x6770 <vfprintf+0x298>
    6766:	20 e1       	ldi	r18, 0x10	; 16
    6768:	30 e0       	ldi	r19, 0x00	; 0
    676a:	02 c0       	rjmp	.+4      	; 0x6770 <vfprintf+0x298>
    676c:	20 e1       	ldi	r18, 0x10	; 16
    676e:	32 e0       	ldi	r19, 0x02	; 2
    6770:	f8 01       	movw	r30, r16
    6772:	b7 fe       	sbrs	r11, 7
    6774:	07 c0       	rjmp	.+14     	; 0x6784 <vfprintf+0x2ac>
    6776:	60 81       	ld	r22, Z
    6778:	71 81       	ldd	r23, Z+1	; 0x01
    677a:	82 81       	ldd	r24, Z+2	; 0x02
    677c:	93 81       	ldd	r25, Z+3	; 0x03
    677e:	0c 5f       	subi	r16, 0xFC	; 252
    6780:	1f 4f       	sbci	r17, 0xFF	; 255
    6782:	06 c0       	rjmp	.+12     	; 0x6790 <vfprintf+0x2b8>
    6784:	60 81       	ld	r22, Z
    6786:	71 81       	ldd	r23, Z+1	; 0x01
    6788:	80 e0       	ldi	r24, 0x00	; 0
    678a:	90 e0       	ldi	r25, 0x00	; 0
    678c:	0e 5f       	subi	r16, 0xFE	; 254
    678e:	1f 4f       	sbci	r17, 0xFF	; 255
    6790:	a3 01       	movw	r20, r6
    6792:	f1 d0       	rcall	.+482    	; 0x6976 <__ultoa_invert>
    6794:	88 2e       	mov	r8, r24
    6796:	86 18       	sub	r8, r6
    6798:	fb 2d       	mov	r31, r11
    679a:	ff 77       	andi	r31, 0x7F	; 127
    679c:	3f 2e       	mov	r3, r31
    679e:	36 fe       	sbrs	r3, 6
    67a0:	0d c0       	rjmp	.+26     	; 0x67bc <vfprintf+0x2e4>
    67a2:	23 2d       	mov	r18, r3
    67a4:	2e 7f       	andi	r18, 0xFE	; 254
    67a6:	a2 2e       	mov	r10, r18
    67a8:	89 14       	cp	r8, r9
    67aa:	58 f4       	brcc	.+22     	; 0x67c2 <vfprintf+0x2ea>
    67ac:	34 fe       	sbrs	r3, 4
    67ae:	0b c0       	rjmp	.+22     	; 0x67c6 <vfprintf+0x2ee>
    67b0:	32 fc       	sbrc	r3, 2
    67b2:	09 c0       	rjmp	.+18     	; 0x67c6 <vfprintf+0x2ee>
    67b4:	83 2d       	mov	r24, r3
    67b6:	8e 7e       	andi	r24, 0xEE	; 238
    67b8:	a8 2e       	mov	r10, r24
    67ba:	05 c0       	rjmp	.+10     	; 0x67c6 <vfprintf+0x2ee>
    67bc:	b8 2c       	mov	r11, r8
    67be:	a3 2c       	mov	r10, r3
    67c0:	03 c0       	rjmp	.+6      	; 0x67c8 <vfprintf+0x2f0>
    67c2:	b8 2c       	mov	r11, r8
    67c4:	01 c0       	rjmp	.+2      	; 0x67c8 <vfprintf+0x2f0>
    67c6:	b9 2c       	mov	r11, r9
    67c8:	a4 fe       	sbrs	r10, 4
    67ca:	0f c0       	rjmp	.+30     	; 0x67ea <vfprintf+0x312>
    67cc:	fe 01       	movw	r30, r28
    67ce:	e8 0d       	add	r30, r8
    67d0:	f1 1d       	adc	r31, r1
    67d2:	80 81       	ld	r24, Z
    67d4:	80 33       	cpi	r24, 0x30	; 48
    67d6:	21 f4       	brne	.+8      	; 0x67e0 <vfprintf+0x308>
    67d8:	9a 2d       	mov	r25, r10
    67da:	99 7e       	andi	r25, 0xE9	; 233
    67dc:	a9 2e       	mov	r10, r25
    67de:	09 c0       	rjmp	.+18     	; 0x67f2 <vfprintf+0x31a>
    67e0:	a2 fe       	sbrs	r10, 2
    67e2:	06 c0       	rjmp	.+12     	; 0x67f0 <vfprintf+0x318>
    67e4:	b3 94       	inc	r11
    67e6:	b3 94       	inc	r11
    67e8:	04 c0       	rjmp	.+8      	; 0x67f2 <vfprintf+0x31a>
    67ea:	8a 2d       	mov	r24, r10
    67ec:	86 78       	andi	r24, 0x86	; 134
    67ee:	09 f0       	breq	.+2      	; 0x67f2 <vfprintf+0x31a>
    67f0:	b3 94       	inc	r11
    67f2:	a3 fc       	sbrc	r10, 3
    67f4:	10 c0       	rjmp	.+32     	; 0x6816 <vfprintf+0x33e>
    67f6:	a0 fe       	sbrs	r10, 0
    67f8:	06 c0       	rjmp	.+12     	; 0x6806 <vfprintf+0x32e>
    67fa:	b2 14       	cp	r11, r2
    67fc:	80 f4       	brcc	.+32     	; 0x681e <vfprintf+0x346>
    67fe:	28 0c       	add	r2, r8
    6800:	92 2c       	mov	r9, r2
    6802:	9b 18       	sub	r9, r11
    6804:	0d c0       	rjmp	.+26     	; 0x6820 <vfprintf+0x348>
    6806:	b2 14       	cp	r11, r2
    6808:	58 f4       	brcc	.+22     	; 0x6820 <vfprintf+0x348>
    680a:	b6 01       	movw	r22, r12
    680c:	80 e2       	ldi	r24, 0x20	; 32
    680e:	90 e0       	ldi	r25, 0x00	; 0
    6810:	76 d0       	rcall	.+236    	; 0x68fe <fputc>
    6812:	b3 94       	inc	r11
    6814:	f8 cf       	rjmp	.-16     	; 0x6806 <vfprintf+0x32e>
    6816:	b2 14       	cp	r11, r2
    6818:	18 f4       	brcc	.+6      	; 0x6820 <vfprintf+0x348>
    681a:	2b 18       	sub	r2, r11
    681c:	02 c0       	rjmp	.+4      	; 0x6822 <vfprintf+0x34a>
    681e:	98 2c       	mov	r9, r8
    6820:	21 2c       	mov	r2, r1
    6822:	a4 fe       	sbrs	r10, 4
    6824:	0f c0       	rjmp	.+30     	; 0x6844 <vfprintf+0x36c>
    6826:	b6 01       	movw	r22, r12
    6828:	80 e3       	ldi	r24, 0x30	; 48
    682a:	90 e0       	ldi	r25, 0x00	; 0
    682c:	68 d0       	rcall	.+208    	; 0x68fe <fputc>
    682e:	a2 fe       	sbrs	r10, 2
    6830:	16 c0       	rjmp	.+44     	; 0x685e <vfprintf+0x386>
    6832:	a1 fc       	sbrc	r10, 1
    6834:	03 c0       	rjmp	.+6      	; 0x683c <vfprintf+0x364>
    6836:	88 e7       	ldi	r24, 0x78	; 120
    6838:	90 e0       	ldi	r25, 0x00	; 0
    683a:	02 c0       	rjmp	.+4      	; 0x6840 <vfprintf+0x368>
    683c:	88 e5       	ldi	r24, 0x58	; 88
    683e:	90 e0       	ldi	r25, 0x00	; 0
    6840:	b6 01       	movw	r22, r12
    6842:	0c c0       	rjmp	.+24     	; 0x685c <vfprintf+0x384>
    6844:	8a 2d       	mov	r24, r10
    6846:	86 78       	andi	r24, 0x86	; 134
    6848:	51 f0       	breq	.+20     	; 0x685e <vfprintf+0x386>
    684a:	a1 fe       	sbrs	r10, 1
    684c:	02 c0       	rjmp	.+4      	; 0x6852 <vfprintf+0x37a>
    684e:	8b e2       	ldi	r24, 0x2B	; 43
    6850:	01 c0       	rjmp	.+2      	; 0x6854 <vfprintf+0x37c>
    6852:	80 e2       	ldi	r24, 0x20	; 32
    6854:	a7 fc       	sbrc	r10, 7
    6856:	8d e2       	ldi	r24, 0x2D	; 45
    6858:	b6 01       	movw	r22, r12
    685a:	90 e0       	ldi	r25, 0x00	; 0
    685c:	50 d0       	rcall	.+160    	; 0x68fe <fputc>
    685e:	89 14       	cp	r8, r9
    6860:	30 f4       	brcc	.+12     	; 0x686e <vfprintf+0x396>
    6862:	b6 01       	movw	r22, r12
    6864:	80 e3       	ldi	r24, 0x30	; 48
    6866:	90 e0       	ldi	r25, 0x00	; 0
    6868:	4a d0       	rcall	.+148    	; 0x68fe <fputc>
    686a:	9a 94       	dec	r9
    686c:	f8 cf       	rjmp	.-16     	; 0x685e <vfprintf+0x386>
    686e:	8a 94       	dec	r8
    6870:	f3 01       	movw	r30, r6
    6872:	e8 0d       	add	r30, r8
    6874:	f1 1d       	adc	r31, r1
    6876:	80 81       	ld	r24, Z
    6878:	b6 01       	movw	r22, r12
    687a:	90 e0       	ldi	r25, 0x00	; 0
    687c:	40 d0       	rcall	.+128    	; 0x68fe <fputc>
    687e:	81 10       	cpse	r8, r1
    6880:	f6 cf       	rjmp	.-20     	; 0x686e <vfprintf+0x396>
    6882:	22 20       	and	r2, r2
    6884:	09 f4       	brne	.+2      	; 0x6888 <vfprintf+0x3b0>
    6886:	4e ce       	rjmp	.-868    	; 0x6524 <vfprintf+0x4c>
    6888:	b6 01       	movw	r22, r12
    688a:	80 e2       	ldi	r24, 0x20	; 32
    688c:	90 e0       	ldi	r25, 0x00	; 0
    688e:	37 d0       	rcall	.+110    	; 0x68fe <fputc>
    6890:	2a 94       	dec	r2
    6892:	f7 cf       	rjmp	.-18     	; 0x6882 <vfprintf+0x3aa>
    6894:	f6 01       	movw	r30, r12
    6896:	86 81       	ldd	r24, Z+6	; 0x06
    6898:	97 81       	ldd	r25, Z+7	; 0x07
    689a:	02 c0       	rjmp	.+4      	; 0x68a0 <vfprintf+0x3c8>
    689c:	8f ef       	ldi	r24, 0xFF	; 255
    689e:	9f ef       	ldi	r25, 0xFF	; 255
    68a0:	2b 96       	adiw	r28, 0x0b	; 11
    68a2:	0f b6       	in	r0, 0x3f	; 63
    68a4:	f8 94       	cli
    68a6:	de bf       	out	0x3e, r29	; 62
    68a8:	0f be       	out	0x3f, r0	; 63
    68aa:	cd bf       	out	0x3d, r28	; 61
    68ac:	df 91       	pop	r29
    68ae:	cf 91       	pop	r28
    68b0:	1f 91       	pop	r17
    68b2:	0f 91       	pop	r16
    68b4:	ff 90       	pop	r15
    68b6:	ef 90       	pop	r14
    68b8:	df 90       	pop	r13
    68ba:	cf 90       	pop	r12
    68bc:	bf 90       	pop	r11
    68be:	af 90       	pop	r10
    68c0:	9f 90       	pop	r9
    68c2:	8f 90       	pop	r8
    68c4:	7f 90       	pop	r7
    68c6:	6f 90       	pop	r6
    68c8:	5f 90       	pop	r5
    68ca:	4f 90       	pop	r4
    68cc:	3f 90       	pop	r3
    68ce:	2f 90       	pop	r2
    68d0:	08 95       	ret

000068d2 <strnlen_P>:
    68d2:	fc 01       	movw	r30, r24
    68d4:	05 90       	lpm	r0, Z+
    68d6:	61 50       	subi	r22, 0x01	; 1
    68d8:	70 40       	sbci	r23, 0x00	; 0
    68da:	01 10       	cpse	r0, r1
    68dc:	d8 f7       	brcc	.-10     	; 0x68d4 <strnlen_P+0x2>
    68de:	80 95       	com	r24
    68e0:	90 95       	com	r25
    68e2:	8e 0f       	add	r24, r30
    68e4:	9f 1f       	adc	r25, r31
    68e6:	08 95       	ret

000068e8 <strnlen>:
    68e8:	fc 01       	movw	r30, r24
    68ea:	61 50       	subi	r22, 0x01	; 1
    68ec:	70 40       	sbci	r23, 0x00	; 0
    68ee:	01 90       	ld	r0, Z+
    68f0:	01 10       	cpse	r0, r1
    68f2:	d8 f7       	brcc	.-10     	; 0x68ea <strnlen+0x2>
    68f4:	80 95       	com	r24
    68f6:	90 95       	com	r25
    68f8:	8e 0f       	add	r24, r30
    68fa:	9f 1f       	adc	r25, r31
    68fc:	08 95       	ret

000068fe <fputc>:
    68fe:	0f 93       	push	r16
    6900:	1f 93       	push	r17
    6902:	cf 93       	push	r28
    6904:	df 93       	push	r29
    6906:	fb 01       	movw	r30, r22
    6908:	23 81       	ldd	r18, Z+3	; 0x03
    690a:	21 fd       	sbrc	r18, 1
    690c:	03 c0       	rjmp	.+6      	; 0x6914 <fputc+0x16>
    690e:	8f ef       	ldi	r24, 0xFF	; 255
    6910:	9f ef       	ldi	r25, 0xFF	; 255
    6912:	2c c0       	rjmp	.+88     	; 0x696c <fputc+0x6e>
    6914:	22 ff       	sbrs	r18, 2
    6916:	16 c0       	rjmp	.+44     	; 0x6944 <fputc+0x46>
    6918:	46 81       	ldd	r20, Z+6	; 0x06
    691a:	57 81       	ldd	r21, Z+7	; 0x07
    691c:	24 81       	ldd	r18, Z+4	; 0x04
    691e:	35 81       	ldd	r19, Z+5	; 0x05
    6920:	42 17       	cp	r20, r18
    6922:	53 07       	cpc	r21, r19
    6924:	44 f4       	brge	.+16     	; 0x6936 <fputc+0x38>
    6926:	a0 81       	ld	r26, Z
    6928:	b1 81       	ldd	r27, Z+1	; 0x01
    692a:	9d 01       	movw	r18, r26
    692c:	2f 5f       	subi	r18, 0xFF	; 255
    692e:	3f 4f       	sbci	r19, 0xFF	; 255
    6930:	31 83       	std	Z+1, r19	; 0x01
    6932:	20 83       	st	Z, r18
    6934:	8c 93       	st	X, r24
    6936:	26 81       	ldd	r18, Z+6	; 0x06
    6938:	37 81       	ldd	r19, Z+7	; 0x07
    693a:	2f 5f       	subi	r18, 0xFF	; 255
    693c:	3f 4f       	sbci	r19, 0xFF	; 255
    693e:	37 83       	std	Z+7, r19	; 0x07
    6940:	26 83       	std	Z+6, r18	; 0x06
    6942:	14 c0       	rjmp	.+40     	; 0x696c <fputc+0x6e>
    6944:	8b 01       	movw	r16, r22
    6946:	ec 01       	movw	r28, r24
    6948:	fb 01       	movw	r30, r22
    694a:	00 84       	ldd	r0, Z+8	; 0x08
    694c:	f1 85       	ldd	r31, Z+9	; 0x09
    694e:	e0 2d       	mov	r30, r0
    6950:	19 95       	eicall
    6952:	89 2b       	or	r24, r25
    6954:	e1 f6       	brne	.-72     	; 0x690e <fputc+0x10>
    6956:	d8 01       	movw	r26, r16
    6958:	16 96       	adiw	r26, 0x06	; 6
    695a:	8d 91       	ld	r24, X+
    695c:	9c 91       	ld	r25, X
    695e:	17 97       	sbiw	r26, 0x07	; 7
    6960:	01 96       	adiw	r24, 0x01	; 1
    6962:	17 96       	adiw	r26, 0x07	; 7
    6964:	9c 93       	st	X, r25
    6966:	8e 93       	st	-X, r24
    6968:	16 97       	sbiw	r26, 0x06	; 6
    696a:	ce 01       	movw	r24, r28
    696c:	df 91       	pop	r29
    696e:	cf 91       	pop	r28
    6970:	1f 91       	pop	r17
    6972:	0f 91       	pop	r16
    6974:	08 95       	ret

00006976 <__ultoa_invert>:
    6976:	fa 01       	movw	r30, r20
    6978:	aa 27       	eor	r26, r26
    697a:	28 30       	cpi	r18, 0x08	; 8
    697c:	51 f1       	breq	.+84     	; 0x69d2 <__ultoa_invert+0x5c>
    697e:	20 31       	cpi	r18, 0x10	; 16
    6980:	81 f1       	breq	.+96     	; 0x69e2 <__ultoa_invert+0x6c>
    6982:	e8 94       	clt
    6984:	6f 93       	push	r22
    6986:	6e 7f       	andi	r22, 0xFE	; 254
    6988:	6e 5f       	subi	r22, 0xFE	; 254
    698a:	7f 4f       	sbci	r23, 0xFF	; 255
    698c:	8f 4f       	sbci	r24, 0xFF	; 255
    698e:	9f 4f       	sbci	r25, 0xFF	; 255
    6990:	af 4f       	sbci	r26, 0xFF	; 255
    6992:	b1 e0       	ldi	r27, 0x01	; 1
    6994:	3e d0       	rcall	.+124    	; 0x6a12 <__ultoa_invert+0x9c>
    6996:	b4 e0       	ldi	r27, 0x04	; 4
    6998:	3c d0       	rcall	.+120    	; 0x6a12 <__ultoa_invert+0x9c>
    699a:	67 0f       	add	r22, r23
    699c:	78 1f       	adc	r23, r24
    699e:	89 1f       	adc	r24, r25
    69a0:	9a 1f       	adc	r25, r26
    69a2:	a1 1d       	adc	r26, r1
    69a4:	68 0f       	add	r22, r24
    69a6:	79 1f       	adc	r23, r25
    69a8:	8a 1f       	adc	r24, r26
    69aa:	91 1d       	adc	r25, r1
    69ac:	a1 1d       	adc	r26, r1
    69ae:	6a 0f       	add	r22, r26
    69b0:	71 1d       	adc	r23, r1
    69b2:	81 1d       	adc	r24, r1
    69b4:	91 1d       	adc	r25, r1
    69b6:	a1 1d       	adc	r26, r1
    69b8:	20 d0       	rcall	.+64     	; 0x69fa <__ultoa_invert+0x84>
    69ba:	09 f4       	brne	.+2      	; 0x69be <__ultoa_invert+0x48>
    69bc:	68 94       	set
    69be:	3f 91       	pop	r19
    69c0:	2a e0       	ldi	r18, 0x0A	; 10
    69c2:	26 9f       	mul	r18, r22
    69c4:	11 24       	eor	r1, r1
    69c6:	30 19       	sub	r19, r0
    69c8:	30 5d       	subi	r19, 0xD0	; 208
    69ca:	31 93       	st	Z+, r19
    69cc:	de f6       	brtc	.-74     	; 0x6984 <__ultoa_invert+0xe>
    69ce:	cf 01       	movw	r24, r30
    69d0:	08 95       	ret
    69d2:	46 2f       	mov	r20, r22
    69d4:	47 70       	andi	r20, 0x07	; 7
    69d6:	40 5d       	subi	r20, 0xD0	; 208
    69d8:	41 93       	st	Z+, r20
    69da:	b3 e0       	ldi	r27, 0x03	; 3
    69dc:	0f d0       	rcall	.+30     	; 0x69fc <__ultoa_invert+0x86>
    69de:	c9 f7       	brne	.-14     	; 0x69d2 <__ultoa_invert+0x5c>
    69e0:	f6 cf       	rjmp	.-20     	; 0x69ce <__ultoa_invert+0x58>
    69e2:	46 2f       	mov	r20, r22
    69e4:	4f 70       	andi	r20, 0x0F	; 15
    69e6:	40 5d       	subi	r20, 0xD0	; 208
    69e8:	4a 33       	cpi	r20, 0x3A	; 58
    69ea:	18 f0       	brcs	.+6      	; 0x69f2 <__ultoa_invert+0x7c>
    69ec:	49 5d       	subi	r20, 0xD9	; 217
    69ee:	31 fd       	sbrc	r19, 1
    69f0:	40 52       	subi	r20, 0x20	; 32
    69f2:	41 93       	st	Z+, r20
    69f4:	02 d0       	rcall	.+4      	; 0x69fa <__ultoa_invert+0x84>
    69f6:	a9 f7       	brne	.-22     	; 0x69e2 <__ultoa_invert+0x6c>
    69f8:	ea cf       	rjmp	.-44     	; 0x69ce <__ultoa_invert+0x58>
    69fa:	b4 e0       	ldi	r27, 0x04	; 4
    69fc:	a6 95       	lsr	r26
    69fe:	97 95       	ror	r25
    6a00:	87 95       	ror	r24
    6a02:	77 95       	ror	r23
    6a04:	67 95       	ror	r22
    6a06:	ba 95       	dec	r27
    6a08:	c9 f7       	brne	.-14     	; 0x69fc <__ultoa_invert+0x86>
    6a0a:	00 97       	sbiw	r24, 0x00	; 0
    6a0c:	61 05       	cpc	r22, r1
    6a0e:	71 05       	cpc	r23, r1
    6a10:	08 95       	ret
    6a12:	9b 01       	movw	r18, r22
    6a14:	ac 01       	movw	r20, r24
    6a16:	0a 2e       	mov	r0, r26
    6a18:	06 94       	lsr	r0
    6a1a:	57 95       	ror	r21
    6a1c:	47 95       	ror	r20
    6a1e:	37 95       	ror	r19
    6a20:	27 95       	ror	r18
    6a22:	ba 95       	dec	r27
    6a24:	c9 f7       	brne	.-14     	; 0x6a18 <__ultoa_invert+0xa2>
    6a26:	62 0f       	add	r22, r18
    6a28:	73 1f       	adc	r23, r19
    6a2a:	84 1f       	adc	r24, r20
    6a2c:	95 1f       	adc	r25, r21
    6a2e:	a0 1d       	adc	r26, r0
    6a30:	08 95       	ret

00006a32 <eeprom_read_byte>:
    6a32:	f9 99       	sbic	0x1f, 1	; 31
    6a34:	fe cf       	rjmp	.-4      	; 0x6a32 <eeprom_read_byte>
    6a36:	92 bd       	out	0x22, r25	; 34
    6a38:	81 bd       	out	0x21, r24	; 33
    6a3a:	f8 9a       	sbi	0x1f, 0	; 31
    6a3c:	99 27       	eor	r25, r25
    6a3e:	80 b5       	in	r24, 0x20	; 32
    6a40:	08 95       	ret

00006a42 <eeprom_write_byte>:
    6a42:	26 2f       	mov	r18, r22

00006a44 <eeprom_write_r18>:
    6a44:	f9 99       	sbic	0x1f, 1	; 31
    6a46:	fe cf       	rjmp	.-4      	; 0x6a44 <eeprom_write_r18>
    6a48:	1f ba       	out	0x1f, r1	; 31
    6a4a:	92 bd       	out	0x22, r25	; 34
    6a4c:	81 bd       	out	0x21, r24	; 33
    6a4e:	20 bd       	out	0x20, r18	; 32
    6a50:	0f b6       	in	r0, 0x3f	; 63
    6a52:	f8 94       	cli
    6a54:	fa 9a       	sbi	0x1f, 2	; 31
    6a56:	f9 9a       	sbi	0x1f, 1	; 31
    6a58:	0f be       	out	0x3f, r0	; 63
    6a5a:	01 96       	adiw	r24, 0x01	; 1
    6a5c:	08 95       	ret

00006a5e <_exit>:
    6a5e:	f8 94       	cli

00006a60 <__stop_program>:
    6a60:	ff cf       	rjmp	.-2      	; 0x6a60 <__stop_program>
