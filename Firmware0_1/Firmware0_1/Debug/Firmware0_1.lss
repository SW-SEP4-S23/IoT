
Firmware0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000048c  00800200  000052b8  0000534c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000052b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000fd3  0080068c  0080068c  000057d8  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  000057d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000818  00000000  00000000  000058a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000b719  00000000  00000000  000060bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002bd4  00000000  00000000  000117d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005596  00000000  00000000  000143a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001d6c  00000000  00000000  00019940  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000035df  00000000  00000000  0001b6ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000a60f  00000000  00000000  0001ec8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000900  00000000  00000000  0002929a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	f5 c1       	rjmp	.+1002   	; 0x3ec <__ctors_end>
       2:	00 00       	nop
       4:	14 c2       	rjmp	.+1064   	; 0x42e <__bad_interrupt>
       6:	00 00       	nop
       8:	12 c2       	rjmp	.+1060   	; 0x42e <__bad_interrupt>
       a:	00 00       	nop
       c:	10 c2       	rjmp	.+1056   	; 0x42e <__bad_interrupt>
       e:	00 00       	nop
      10:	0e c2       	rjmp	.+1052   	; 0x42e <__bad_interrupt>
      12:	00 00       	nop
      14:	0c c2       	rjmp	.+1048   	; 0x42e <__bad_interrupt>
      16:	00 00       	nop
      18:	0a c2       	rjmp	.+1044   	; 0x42e <__bad_interrupt>
      1a:	00 00       	nop
      1c:	08 c2       	rjmp	.+1040   	; 0x42e <__bad_interrupt>
      1e:	00 00       	nop
      20:	06 c2       	rjmp	.+1036   	; 0x42e <__bad_interrupt>
      22:	00 00       	nop
      24:	04 c2       	rjmp	.+1032   	; 0x42e <__bad_interrupt>
      26:	00 00       	nop
      28:	02 c2       	rjmp	.+1028   	; 0x42e <__bad_interrupt>
      2a:	00 00       	nop
      2c:	00 c2       	rjmp	.+1024   	; 0x42e <__bad_interrupt>
      2e:	00 00       	nop
      30:	e1 c4       	rjmp	.+2498   	; 0x9f4 <__vector_12>
      32:	00 00       	nop
      34:	fc c1       	rjmp	.+1016   	; 0x42e <__bad_interrupt>
      36:	00 00       	nop
      38:	fa c1       	rjmp	.+1012   	; 0x42e <__bad_interrupt>
      3a:	00 00       	nop
      3c:	f8 c1       	rjmp	.+1008   	; 0x42e <__bad_interrupt>
      3e:	00 00       	nop
      40:	f6 c1       	rjmp	.+1004   	; 0x42e <__bad_interrupt>
      42:	00 00       	nop
      44:	f4 c1       	rjmp	.+1000   	; 0x42e <__bad_interrupt>
      46:	00 00       	nop
      48:	f2 c1       	rjmp	.+996    	; 0x42e <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f0 c1       	rjmp	.+992    	; 0x42e <__bad_interrupt>
      4e:	00 00       	nop
      50:	ee c1       	rjmp	.+988    	; 0x42e <__bad_interrupt>
      52:	00 00       	nop
      54:	ec c1       	rjmp	.+984    	; 0x42e <__bad_interrupt>
      56:	00 00       	nop
      58:	ea c1       	rjmp	.+980    	; 0x42e <__bad_interrupt>
      5a:	00 00       	nop
      5c:	e8 c1       	rjmp	.+976    	; 0x42e <__bad_interrupt>
      5e:	00 00       	nop
      60:	e6 c1       	rjmp	.+972    	; 0x42e <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 58 1e 	jmp	0x3cb0	; 0x3cb0 <__vector_25>
      68:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__vector_26>
      6c:	e0 c1       	rjmp	.+960    	; 0x42e <__bad_interrupt>
      6e:	00 00       	nop
      70:	de c1       	rjmp	.+956    	; 0x42e <__bad_interrupt>
      72:	00 00       	nop
      74:	dc c1       	rjmp	.+952    	; 0x42e <__bad_interrupt>
      76:	00 00       	nop
      78:	da c1       	rjmp	.+948    	; 0x42e <__bad_interrupt>
      7a:	00 00       	nop
      7c:	d8 c1       	rjmp	.+944    	; 0x42e <__bad_interrupt>
      7e:	00 00       	nop
      80:	d6 c1       	rjmp	.+940    	; 0x42e <__bad_interrupt>
      82:	00 00       	nop
      84:	d4 c1       	rjmp	.+936    	; 0x42e <__bad_interrupt>
      86:	00 00       	nop
      88:	d2 c1       	rjmp	.+932    	; 0x42e <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d0 c1       	rjmp	.+928    	; 0x42e <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 ee 1e 	jmp	0x3ddc	; 0x3ddc <__vector_36>
      94:	0c 94 40 1f 	jmp	0x3e80	; 0x3e80 <__vector_37>
      98:	ca c1       	rjmp	.+916    	; 0x42e <__bad_interrupt>
      9a:	00 00       	nop
      9c:	c8 c1       	rjmp	.+912    	; 0x42e <__bad_interrupt>
      9e:	00 00       	nop
      a0:	c6 c1       	rjmp	.+908    	; 0x42e <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c4 c1       	rjmp	.+904    	; 0x42e <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c2 c1       	rjmp	.+900    	; 0x42e <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c0 c1       	rjmp	.+896    	; 0x42e <__bad_interrupt>
      ae:	00 00       	nop
      b0:	be c1       	rjmp	.+892    	; 0x42e <__bad_interrupt>
      b2:	00 00       	nop
      b4:	bc c1       	rjmp	.+888    	; 0x42e <__bad_interrupt>
      b6:	00 00       	nop
      b8:	ba c1       	rjmp	.+884    	; 0x42e <__bad_interrupt>
      ba:	00 00       	nop
      bc:	b8 c1       	rjmp	.+880    	; 0x42e <__bad_interrupt>
      be:	00 00       	nop
      c0:	b6 c1       	rjmp	.+876    	; 0x42e <__bad_interrupt>
      c2:	00 00       	nop
      c4:	b4 c1       	rjmp	.+872    	; 0x42e <__bad_interrupt>
      c6:	00 00       	nop
      c8:	b2 c1       	rjmp	.+868    	; 0x42e <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 84 1f 	jmp	0x3f08	; 0x3f08 <__vector_51>
      d0:	0c 94 d6 1f 	jmp	0x3fac	; 0x3fac <__vector_52>
      d4:	ac c1       	rjmp	.+856    	; 0x42e <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 1a 20 	jmp	0x4034	; 0x4034 <__vector_54>
      dc:	0c 94 6c 20 	jmp	0x40d8	; 0x40d8 <__vector_55>
      e0:	a6 c1       	rjmp	.+844    	; 0x42e <__bad_interrupt>
      e2:	00 00       	nop
      e4:	6d 01       	movw	r12, r26
      e6:	6d 01       	movw	r12, r26
      e8:	6d 01       	movw	r12, r26
      ea:	a7 01       	movw	r20, r14
      ec:	af 01       	movw	r20, r30
      ee:	c5 01       	movw	r24, r10
      f0:	6d 01       	movw	r12, r26
      f2:	6d 01       	movw	r12, r26
      f4:	a7 01       	movw	r20, r14
      f6:	af 01       	movw	r20, r30

000000f8 <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
      f8:	09 e6       	ldi	r16, 0x69	; 105
      fa:	14 e1       	ldi	r17, 0x14	; 20
      fc:	0f 2e       	mov	r0, r31
      fe:	f9 e9       	ldi	r31, 0x99	; 153
     100:	ef 2e       	mov	r14, r31
     102:	f4 e1       	ldi	r31, 0x14	; 20
     104:	ff 2e       	mov	r15, r31
     106:	f0 2d       	mov	r31, r0
     108:	80 91 68 14 	lds	r24, 0x1468	; 0x801468 <uxDeletedTasksWaitingCleanUp>
     10c:	88 23       	and	r24, r24
     10e:	11 f1       	breq	.+68     	; 0x154 <prvIdleTask+0x5c>
     110:	0f b6       	in	r0, 0x3f	; 63
     112:	f8 94       	cli
     114:	0f 92       	push	r0
     116:	d8 01       	movw	r26, r16
     118:	17 96       	adiw	r26, 0x07	; 7
     11a:	ed 91       	ld	r30, X+
     11c:	fc 91       	ld	r31, X
     11e:	18 97       	sbiw	r26, 0x08	; 8
     120:	c0 85       	ldd	r28, Z+8	; 0x08
     122:	d1 85       	ldd	r29, Z+9	; 0x09
     124:	ce 01       	movw	r24, r28
     126:	02 96       	adiw	r24, 0x02	; 2
     128:	25 d3       	rcall	.+1610   	; 0x774 <uxListRemove>
     12a:	80 91 5c 14 	lds	r24, 0x145C	; 0x80145c <uxCurrentNumberOfTasks>
     12e:	81 50       	subi	r24, 0x01	; 1
     130:	80 93 5c 14 	sts	0x145C, r24	; 0x80145c <uxCurrentNumberOfTasks>
     134:	80 91 68 14 	lds	r24, 0x1468	; 0x801468 <uxDeletedTasksWaitingCleanUp>
     138:	81 50       	subi	r24, 0x01	; 1
     13a:	80 93 68 14 	sts	0x1468, r24	; 0x801468 <uxDeletedTasksWaitingCleanUp>
     13e:	0f 90       	pop	r0
     140:	0f be       	out	0x3f, r0	; 63
     142:	8b 8d       	ldd	r24, Y+27	; 0x1b
     144:	9c 8d       	ldd	r25, Y+28	; 0x1c
     146:	8a d2       	rcall	.+1300   	; 0x65c <vPortFree>
     148:	ce 01       	movw	r24, r28
     14a:	88 d2       	rcall	.+1296   	; 0x65c <vPortFree>
     14c:	80 91 68 14 	lds	r24, 0x1468	; 0x801468 <uxDeletedTasksWaitingCleanUp>
     150:	81 11       	cpse	r24, r1
     152:	de cf       	rjmp	.-68     	; 0x110 <prvIdleTask+0x18>
     154:	f7 01       	movw	r30, r14
     156:	80 81       	ld	r24, Z
     158:	82 30       	cpi	r24, 0x02	; 2
     15a:	08 f0       	brcs	.+2      	; 0x15e <prvIdleTask+0x66>
     15c:	85 d3       	rcall	.+1802   	; 0x868 <vPortYield>
     15e:	0e 94 a2 16 	call	0x2d44	; 0x2d44 <vApplicationIdleHook>
     162:	d2 cf       	rjmp	.-92     	; 0x108 <prvIdleTask+0x10>

00000164 <prvTimerTask>:
     164:	cf 93       	push	r28
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     166:	df 93       	push	r29
     168:	cd b7       	in	r28, 0x3d	; 61
     16a:	de b7       	in	r29, 0x3e	; 62
     16c:	60 97       	sbiw	r28, 0x10	; 16
     16e:	0f b6       	in	r0, 0x3f	; 63
     170:	f8 94       	cli
     172:	de bf       	out	0x3e, r29	; 62
     174:	0f be       	out	0x3f, r0	; 63
     176:	cd bf       	out	0x3d, r28	; 61
     178:	ce 01       	movw	r24, r28
     17a:	01 96       	adiw	r24, 0x01	; 1
     17c:	9a 87       	std	Y+10, r25	; 0x0a
     17e:	89 87       	std	Y+9, r24	; 0x09
     180:	81 2c       	mov	r8, r1
     182:	91 2c       	mov	r9, r1
     184:	a1 2c       	mov	r10, r1
     186:	b1 2c       	mov	r11, r1
     188:	69 84       	ldd	r6, Y+9	; 0x09
     18a:	7a 84       	ldd	r7, Y+10	; 0x0a
     18c:	e0 91 13 15 	lds	r30, 0x1513	; 0x801513 <pxCurrentTimerList>
     190:	f0 91 14 15 	lds	r31, 0x1514	; 0x801514 <pxCurrentTimerList+0x1>
     194:	80 81       	ld	r24, Z
     196:	88 23       	and	r24, r24
     198:	09 f4       	brne	.+2      	; 0x19c <prvTimerTask+0x38>
     19a:	0e c1       	rjmp	.+540    	; 0x3b8 <prvTimerTask+0x254>
     19c:	07 80       	ldd	r0, Z+7	; 0x07
     19e:	f0 85       	ldd	r31, Z+8	; 0x08
     1a0:	e0 2d       	mov	r30, r0
     1a2:	20 80       	ld	r2, Z
     1a4:	31 80       	ldd	r3, Z+1	; 0x01
     1a6:	42 80       	ldd	r4, Z+2	; 0x02
     1a8:	53 80       	ldd	r5, Z+3	; 0x03
     1aa:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vTaskSuspendAll>
     1ae:	ce 01       	movw	r24, r28
     1b0:	01 96       	adiw	r24, 0x01	; 1
     1b2:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <prvSampleTimeNow>
     1b6:	6b 87       	std	Y+11, r22	; 0x0b
     1b8:	7c 87       	std	Y+12, r23	; 0x0c
     1ba:	8d 87       	std	Y+13, r24	; 0x0d
     1bc:	9e 87       	std	Y+14, r25	; 0x0e
     1be:	89 81       	ldd	r24, Y+1	; 0x01
     1c0:	81 11       	cpse	r24, r1
     1c2:	64 c0       	rjmp	.+200    	; 0x28c <prvTimerTask+0x128>
     1c4:	8b 85       	ldd	r24, Y+11	; 0x0b
     1c6:	9c 85       	ldd	r25, Y+12	; 0x0c
     1c8:	ad 85       	ldd	r26, Y+13	; 0x0d
     1ca:	be 85       	ldd	r27, Y+14	; 0x0e
     1cc:	82 15       	cp	r24, r2
     1ce:	93 05       	cpc	r25, r3
     1d0:	a4 05       	cpc	r26, r4
     1d2:	b5 05       	cpc	r27, r5
     1d4:	08 f4       	brcc	.+2      	; 0x1d8 <prvTimerTask+0x74>
     1d6:	44 c0       	rjmp	.+136    	; 0x260 <prvTimerTask+0xfc>
     1d8:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <xTaskResumeAll>
     1dc:	e0 91 13 15 	lds	r30, 0x1513	; 0x801513 <pxCurrentTimerList>
     1e0:	f0 91 14 15 	lds	r31, 0x1514	; 0x801514 <pxCurrentTimerList+0x1>
     1e4:	07 80       	ldd	r0, Z+7	; 0x07
     1e6:	f0 85       	ldd	r31, Z+8	; 0x08
     1e8:	e0 2d       	mov	r30, r0
     1ea:	a0 85       	ldd	r26, Z+8	; 0x08
     1ec:	b1 85       	ldd	r27, Z+9	; 0x09
     1ee:	b8 8b       	std	Y+16, r27	; 0x10
     1f0:	af 87       	std	Y+15, r26	; 0x0f
     1f2:	cd 01       	movw	r24, r26
     1f4:	02 96       	adiw	r24, 0x02	; 2
     1f6:	be d2       	rcall	.+1404   	; 0x774 <uxListRemove>
     1f8:	ef 85       	ldd	r30, Y+15	; 0x0f
     1fa:	f8 89       	ldd	r31, Y+16	; 0x10
     1fc:	86 89       	ldd	r24, Z+22	; 0x16
     1fe:	82 ff       	sbrs	r24, 2
     200:	21 c0       	rjmp	.+66     	; 0x244 <prvTimerTask+0xe0>
     202:	46 85       	ldd	r20, Z+14	; 0x0e
     204:	57 85       	ldd	r21, Z+15	; 0x0f
     206:	60 89       	ldd	r22, Z+16	; 0x10
     208:	71 89       	ldd	r23, Z+17	; 0x11
     20a:	42 0d       	add	r20, r2
     20c:	53 1d       	adc	r21, r3
     20e:	64 1d       	adc	r22, r4
     210:	75 1d       	adc	r23, r5
     212:	72 01       	movw	r14, r4
     214:	61 01       	movw	r12, r2
     216:	0b 85       	ldd	r16, Y+11	; 0x0b
     218:	1c 85       	ldd	r17, Y+12	; 0x0c
     21a:	2d 85       	ldd	r18, Y+13	; 0x0d
     21c:	3e 85       	ldd	r19, Y+14	; 0x0e
     21e:	cf 01       	movw	r24, r30
     220:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <prvInsertTimerInActiveList>
     224:	88 23       	and	r24, r24
     226:	99 f0       	breq	.+38     	; 0x24e <prvTimerTask+0xea>
     228:	c8 2c       	mov	r12, r8
     22a:	d9 2c       	mov	r13, r9
     22c:	ea 2c       	mov	r14, r10
     22e:	fb 2c       	mov	r15, r11
     230:	00 e0       	ldi	r16, 0x00	; 0
     232:	10 e0       	ldi	r17, 0x00	; 0
     234:	a2 01       	movw	r20, r4
     236:	91 01       	movw	r18, r2
     238:	60 e0       	ldi	r22, 0x00	; 0
     23a:	8f 85       	ldd	r24, Y+15	; 0x0f
     23c:	98 89       	ldd	r25, Y+16	; 0x10
     23e:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <xTimerGenericCommand>
     242:	05 c0       	rjmp	.+10     	; 0x24e <prvTimerTask+0xea>
     244:	8e 7f       	andi	r24, 0xFE	; 254
     246:	af 85       	ldd	r26, Y+15	; 0x0f
     248:	b8 89       	ldd	r27, Y+16	; 0x10
     24a:	56 96       	adiw	r26, 0x16	; 22
     24c:	8c 93       	st	X, r24
     24e:	af 85       	ldd	r26, Y+15	; 0x0f
     250:	b8 89       	ldd	r27, Y+16	; 0x10
     252:	54 96       	adiw	r26, 0x14	; 20
     254:	ed 91       	ld	r30, X+
     256:	fc 91       	ld	r31, X
     258:	55 97       	sbiw	r26, 0x15	; 21
     25a:	cd 01       	movw	r24, r26
     25c:	19 95       	eicall
     25e:	9e c0       	rjmp	.+316    	; 0x39c <prvTimerTask+0x238>
     260:	20 e0       	ldi	r18, 0x00	; 0
     262:	b2 01       	movw	r22, r4
     264:	a1 01       	movw	r20, r2
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	48 1b       	sub	r20, r24
     270:	59 0b       	sbc	r21, r25
     272:	6a 0b       	sbc	r22, r26
     274:	7b 0b       	sbc	r23, r27
     276:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <xTimerQueue>
     27a:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <xTimerQueue+0x1>
     27e:	80 d6       	rcall	.+3328   	; 0xf80 <vQueueWaitForMessageRestricted>
     280:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <xTaskResumeAll>
     284:	81 11       	cpse	r24, r1
     286:	8a c0       	rjmp	.+276    	; 0x39c <prvTimerTask+0x238>
     288:	ef d2       	rcall	.+1502   	; 0x868 <vPortYield>
     28a:	88 c0       	rjmp	.+272    	; 0x39c <prvTimerTask+0x238>
     28c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <xTaskResumeAll>
     290:	85 c0       	rjmp	.+266    	; 0x39c <prvTimerTask+0x238>
     292:	89 81       	ldd	r24, Y+1	; 0x01
     294:	88 23       	and	r24, r24
     296:	0c f4       	brge	.+2      	; 0x29a <prvTimerTask+0x136>
     298:	81 c0       	rjmp	.+258    	; 0x39c <prvTimerTask+0x238>
     29a:	4e 80       	ldd	r4, Y+6	; 0x06
     29c:	5f 80       	ldd	r5, Y+7	; 0x07
     29e:	d2 01       	movw	r26, r4
     2a0:	1c 96       	adiw	r26, 0x0c	; 12
     2a2:	8d 91       	ld	r24, X+
     2a4:	9c 91       	ld	r25, X
     2a6:	1d 97       	sbiw	r26, 0x0d	; 13
     2a8:	89 2b       	or	r24, r25
     2aa:	19 f0       	breq	.+6      	; 0x2b2 <prvTimerTask+0x14e>
     2ac:	c2 01       	movw	r24, r4
     2ae:	02 96       	adiw	r24, 0x02	; 2
     2b0:	61 d2       	rcall	.+1218   	; 0x774 <uxListRemove>
     2b2:	ce 01       	movw	r24, r28
     2b4:	08 96       	adiw	r24, 0x08	; 8
     2b6:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <prvSampleTimeNow>
     2ba:	8b 01       	movw	r16, r22
     2bc:	9c 01       	movw	r18, r24
     2be:	e9 81       	ldd	r30, Y+1	; 0x01
     2c0:	0e 2e       	mov	r0, r30
     2c2:	00 0c       	add	r0, r0
     2c4:	ff 0b       	sbc	r31, r31
     2c6:	ea 30       	cpi	r30, 0x0A	; 10
     2c8:	f1 05       	cpc	r31, r1
     2ca:	08 f0       	brcs	.+2      	; 0x2ce <prvTimerTask+0x16a>
     2cc:	67 c0       	rjmp	.+206    	; 0x39c <prvTimerTask+0x238>
     2ce:	88 27       	eor	r24, r24
     2d0:	ee 58       	subi	r30, 0x8E	; 142
     2d2:	ff 4f       	sbci	r31, 0xFF	; 255
     2d4:	8f 4f       	sbci	r24, 0xFF	; 255
     2d6:	0c 94 b0 24 	jmp	0x4960	; 0x4960 <__tablejump2__>
     2da:	f2 01       	movw	r30, r4
     2dc:	86 89       	ldd	r24, Z+22	; 0x16
     2de:	81 60       	ori	r24, 0x01	; 1
     2e0:	86 8b       	std	Z+22, r24	; 0x16
     2e2:	ca 80       	ldd	r12, Y+2	; 0x02
     2e4:	db 80       	ldd	r13, Y+3	; 0x03
     2e6:	ec 80       	ldd	r14, Y+4	; 0x04
     2e8:	fd 80       	ldd	r15, Y+5	; 0x05
     2ea:	46 85       	ldd	r20, Z+14	; 0x0e
     2ec:	57 85       	ldd	r21, Z+15	; 0x0f
     2ee:	60 89       	ldd	r22, Z+16	; 0x10
     2f0:	71 89       	ldd	r23, Z+17	; 0x11
     2f2:	4c 0d       	add	r20, r12
     2f4:	5d 1d       	adc	r21, r13
     2f6:	6e 1d       	adc	r22, r14
     2f8:	7f 1d       	adc	r23, r15
     2fa:	c2 01       	movw	r24, r4
     2fc:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <prvInsertTimerInActiveList>
     300:	88 23       	and	r24, r24
     302:	09 f4       	brne	.+2      	; 0x306 <prvTimerTask+0x1a2>
     304:	4b c0       	rjmp	.+150    	; 0x39c <prvTimerTask+0x238>
     306:	d2 01       	movw	r26, r4
     308:	54 96       	adiw	r26, 0x14	; 20
     30a:	ed 91       	ld	r30, X+
     30c:	fc 91       	ld	r31, X
     30e:	55 97       	sbiw	r26, 0x15	; 21
     310:	c2 01       	movw	r24, r4
     312:	19 95       	eicall
     314:	f2 01       	movw	r30, r4
     316:	86 89       	ldd	r24, Z+22	; 0x16
     318:	82 ff       	sbrs	r24, 2
     31a:	40 c0       	rjmp	.+128    	; 0x39c <prvTimerTask+0x238>
     31c:	4a 81       	ldd	r20, Y+2	; 0x02
     31e:	5b 81       	ldd	r21, Y+3	; 0x03
     320:	6c 81       	ldd	r22, Y+4	; 0x04
     322:	7d 81       	ldd	r23, Y+5	; 0x05
     324:	86 85       	ldd	r24, Z+14	; 0x0e
     326:	97 85       	ldd	r25, Z+15	; 0x0f
     328:	a0 89       	ldd	r26, Z+16	; 0x10
     32a:	b1 89       	ldd	r27, Z+17	; 0x11
     32c:	9a 01       	movw	r18, r20
     32e:	ab 01       	movw	r20, r22
     330:	28 0f       	add	r18, r24
     332:	39 1f       	adc	r19, r25
     334:	4a 1f       	adc	r20, r26
     336:	5b 1f       	adc	r21, r27
     338:	c8 2c       	mov	r12, r8
     33a:	d9 2c       	mov	r13, r9
     33c:	ea 2c       	mov	r14, r10
     33e:	fb 2c       	mov	r15, r11
     340:	00 e0       	ldi	r16, 0x00	; 0
     342:	10 e0       	ldi	r17, 0x00	; 0
     344:	60 e0       	ldi	r22, 0x00	; 0
     346:	c2 01       	movw	r24, r4
     348:	0e 94 ad 15 	call	0x2b5a	; 0x2b5a <xTimerGenericCommand>
     34c:	27 c0       	rjmp	.+78     	; 0x39c <prvTimerTask+0x238>
     34e:	d2 01       	movw	r26, r4
     350:	56 96       	adiw	r26, 0x16	; 22
     352:	8c 91       	ld	r24, X
     354:	56 97       	sbiw	r26, 0x16	; 22
     356:	8e 7f       	andi	r24, 0xFE	; 254
     358:	56 96       	adiw	r26, 0x16	; 22
     35a:	8c 93       	st	X, r24
     35c:	1f c0       	rjmp	.+62     	; 0x39c <prvTimerTask+0x238>
     35e:	f2 01       	movw	r30, r4
     360:	86 89       	ldd	r24, Z+22	; 0x16
     362:	81 60       	ori	r24, 0x01	; 1
     364:	86 8b       	std	Z+22, r24	; 0x16
     366:	4a 81       	ldd	r20, Y+2	; 0x02
     368:	5b 81       	ldd	r21, Y+3	; 0x03
     36a:	6c 81       	ldd	r22, Y+4	; 0x04
     36c:	7d 81       	ldd	r23, Y+5	; 0x05
     36e:	46 87       	std	Z+14, r20	; 0x0e
     370:	57 87       	std	Z+15, r21	; 0x0f
     372:	60 8b       	std	Z+16, r22	; 0x10
     374:	71 8b       	std	Z+17, r23	; 0x11
     376:	40 0f       	add	r20, r16
     378:	51 1f       	adc	r21, r17
     37a:	62 1f       	adc	r22, r18
     37c:	73 1f       	adc	r23, r19
     37e:	68 01       	movw	r12, r16
     380:	79 01       	movw	r14, r18
     382:	c2 01       	movw	r24, r4
     384:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <prvInsertTimerInActiveList>
     388:	09 c0       	rjmp	.+18     	; 0x39c <prvTimerTask+0x238>
     38a:	f2 01       	movw	r30, r4
     38c:	86 89       	ldd	r24, Z+22	; 0x16
     38e:	81 fd       	sbrc	r24, 1
     390:	03 c0       	rjmp	.+6      	; 0x398 <prvTimerTask+0x234>
     392:	c2 01       	movw	r24, r4
     394:	63 d1       	rcall	.+710    	; 0x65c <vPortFree>
     396:	02 c0       	rjmp	.+4      	; 0x39c <prvTimerTask+0x238>
     398:	8e 7f       	andi	r24, 0xFE	; 254
     39a:	86 8b       	std	Z+22, r24	; 0x16
     39c:	28 2d       	mov	r18, r8
     39e:	39 2d       	mov	r19, r9
     3a0:	4a 2d       	mov	r20, r10
     3a2:	5b 2d       	mov	r21, r11
     3a4:	66 2d       	mov	r22, r6
     3a6:	77 2d       	mov	r23, r7
     3a8:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <xTimerQueue>
     3ac:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <xTimerQueue+0x1>
     3b0:	4e d5       	rcall	.+2716   	; 0xe4e <xQueueReceive>
     3b2:	81 11       	cpse	r24, r1
     3b4:	6e cf       	rjmp	.-292    	; 0x292 <prvTimerTask+0x12e>
     3b6:	ea ce       	rjmp	.-556    	; 0x18c <prvTimerTask+0x28>
     3b8:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vTaskSuspendAll>
     3bc:	ce 01       	movw	r24, r28
     3be:	01 96       	adiw	r24, 0x01	; 1
     3c0:	0e 94 0b 16 	call	0x2c16	; 0x2c16 <prvSampleTimeNow>
     3c4:	6b 87       	std	Y+11, r22	; 0x0b
     3c6:	7c 87       	std	Y+12, r23	; 0x0c
     3c8:	8d 87       	std	Y+13, r24	; 0x0d
     3ca:	9e 87       	std	Y+14, r25	; 0x0e
     3cc:	89 81       	ldd	r24, Y+1	; 0x01
     3ce:	81 11       	cpse	r24, r1
     3d0:	5d cf       	rjmp	.-326    	; 0x28c <prvTimerTask+0x128>
     3d2:	e0 91 11 15 	lds	r30, 0x1511	; 0x801511 <pxOverflowTimerList>
     3d6:	f0 91 12 15 	lds	r31, 0x1512	; 0x801512 <pxOverflowTimerList+0x1>
     3da:	80 81       	ld	r24, Z
     3dc:	21 e0       	ldi	r18, 0x01	; 1
     3de:	81 11       	cpse	r24, r1
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	28 2c       	mov	r2, r8
     3e4:	39 2c       	mov	r3, r9
     3e6:	4a 2c       	mov	r4, r10
     3e8:	5b 2c       	mov	r5, r11
     3ea:	3b cf       	rjmp	.-394    	; 0x262 <prvTimerTask+0xfe>

000003ec <__ctors_end>:
     3ec:	11 24       	eor	r1, r1
     3ee:	1f be       	out	0x3f, r1	; 63
     3f0:	cf ef       	ldi	r28, 0xFF	; 255
     3f2:	d1 e2       	ldi	r29, 0x21	; 33
     3f4:	de bf       	out	0x3e, r29	; 62
     3f6:	cd bf       	out	0x3d, r28	; 61
     3f8:	00 e0       	ldi	r16, 0x00	; 0
     3fa:	0c bf       	out	0x3c, r16	; 60

000003fc <__do_copy_data>:
     3fc:	16 e0       	ldi	r17, 0x06	; 6
     3fe:	a0 e0       	ldi	r26, 0x00	; 0
     400:	b2 e0       	ldi	r27, 0x02	; 2
     402:	e8 eb       	ldi	r30, 0xB8	; 184
     404:	f2 e5       	ldi	r31, 0x52	; 82
     406:	00 e0       	ldi	r16, 0x00	; 0
     408:	0b bf       	out	0x3b, r16	; 59
     40a:	02 c0       	rjmp	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     40c:	07 90       	elpm	r0, Z+
     40e:	0d 92       	st	X+, r0
     410:	ac 38       	cpi	r26, 0x8C	; 140
     412:	b1 07       	cpc	r27, r17
     414:	d9 f7       	brne	.-10     	; 0x40c <__LOCK_REGION_LENGTH__+0xc>

00000416 <__do_clear_bss>:
     416:	26 e1       	ldi	r18, 0x16	; 22
     418:	ac e8       	ldi	r26, 0x8C	; 140
     41a:	b6 e0       	ldi	r27, 0x06	; 6
     41c:	01 c0       	rjmp	.+2      	; 0x420 <.do_clear_bss_start>

0000041e <.do_clear_bss_loop>:
     41e:	1d 92       	st	X+, r1

00000420 <.do_clear_bss_start>:
     420:	af 35       	cpi	r26, 0x5F	; 95
     422:	b2 07       	cpc	r27, r18
     424:	e1 f7       	brne	.-8      	; 0x41e <.do_clear_bss_loop>
     426:	0e 94 7d 17 	call	0x2efa	; 0x2efa <main>
     42a:	0c 94 5a 29 	jmp	0x52b4	; 0x52b4 <_exit>

0000042e <__bad_interrupt>:
     42e:	e8 cd       	rjmp	.-1072   	; 0x0 <__vectors>

00000430 <trace_init>:
 #include <avr/io.h>
 #include <FreeRTOSConfig.h>
 #include "FreeRTOSTraceDriver.h"

 void trace_init(void)
 {
     430:	08 95       	ret

00000432 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     432:	cf 93       	push	r28
     434:	df 93       	push	r29
     436:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     438:	e8 e9       	ldi	r30, 0x98	; 152
     43a:	f6 e0       	ldi	r31, 0x06	; 6
     43c:	01 c0       	rjmp	.+2      	; 0x440 <prvInsertBlockIntoFreeList+0xe>
     43e:	f9 01       	movw	r30, r18
     440:	20 81       	ld	r18, Z
     442:	31 81       	ldd	r19, Z+1	; 0x01
     444:	2a 17       	cp	r18, r26
     446:	3b 07       	cpc	r19, r27
     448:	d0 f3       	brcs	.-12     	; 0x43e <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     44a:	82 81       	ldd	r24, Z+2	; 0x02
     44c:	93 81       	ldd	r25, Z+3	; 0x03
     44e:	af 01       	movw	r20, r30
     450:	48 0f       	add	r20, r24
     452:	59 1f       	adc	r21, r25
     454:	a4 17       	cp	r26, r20
     456:	b5 07       	cpc	r27, r21
     458:	49 f4       	brne	.+18     	; 0x46c <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     45a:	12 96       	adiw	r26, 0x02	; 2
     45c:	4d 91       	ld	r20, X+
     45e:	5c 91       	ld	r21, X
     460:	13 97       	sbiw	r26, 0x03	; 3
     462:	84 0f       	add	r24, r20
     464:	95 1f       	adc	r25, r21
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     46c:	12 96       	adiw	r26, 0x02	; 2
     46e:	8d 91       	ld	r24, X+
     470:	9c 91       	ld	r25, X
     472:	13 97       	sbiw	r26, 0x03	; 3
     474:	ed 01       	movw	r28, r26
     476:	c8 0f       	add	r28, r24
     478:	d9 1f       	adc	r29, r25
     47a:	2c 17       	cp	r18, r28
     47c:	3d 07       	cpc	r19, r29
     47e:	d9 f4       	brne	.+54     	; 0x4b6 <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     480:	20 91 96 06 	lds	r18, 0x0696	; 0x800696 <pxEnd>
     484:	30 91 97 06 	lds	r19, 0x0697	; 0x800697 <pxEnd+0x1>
     488:	c2 17       	cp	r28, r18
     48a:	d3 07       	cpc	r29, r19
     48c:	81 f0       	breq	.+32     	; 0x4ae <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     48e:	2a 81       	ldd	r18, Y+2	; 0x02
     490:	3b 81       	ldd	r19, Y+3	; 0x03
     492:	82 0f       	add	r24, r18
     494:	93 1f       	adc	r25, r19
     496:	13 96       	adiw	r26, 0x03	; 3
     498:	9c 93       	st	X, r25
     49a:	8e 93       	st	-X, r24
     49c:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     49e:	c0 81       	ld	r28, Z
     4a0:	d1 81       	ldd	r29, Z+1	; 0x01
     4a2:	88 81       	ld	r24, Y
     4a4:	99 81       	ldd	r25, Y+1	; 0x01
     4a6:	11 96       	adiw	r26, 0x01	; 1
     4a8:	9c 93       	st	X, r25
     4aa:	8e 93       	st	-X, r24
     4ac:	07 c0       	rjmp	.+14     	; 0x4bc <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     4ae:	11 96       	adiw	r26, 0x01	; 1
     4b0:	dc 93       	st	X, r29
     4b2:	ce 93       	st	-X, r28
     4b4:	03 c0       	rjmp	.+6      	; 0x4bc <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     4b6:	11 96       	adiw	r26, 0x01	; 1
     4b8:	3c 93       	st	X, r19
     4ba:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     4bc:	ae 17       	cp	r26, r30
     4be:	bf 07       	cpc	r27, r31
     4c0:	11 f0       	breq	.+4      	; 0x4c6 <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     4c2:	b1 83       	std	Z+1, r27	; 0x01
     4c4:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     4c6:	df 91       	pop	r29
     4c8:	cf 91       	pop	r28
     4ca:	08 95       	ret

000004cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     4cc:	cf 92       	push	r12
     4ce:	df 92       	push	r13
     4d0:	ef 92       	push	r14
     4d2:	ff 92       	push	r15
     4d4:	0f 93       	push	r16
     4d6:	1f 93       	push	r17
     4d8:	cf 93       	push	r28
     4da:	df 93       	push	r29
     4dc:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     4de:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     4e2:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <pxEnd>
     4e6:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <pxEnd+0x1>
     4ea:	89 2b       	or	r24, r25
     4ec:	41 f5       	brne	.+80     	; 0x53e <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     4ee:	e8 e9       	ldi	r30, 0x98	; 152
     4f0:	f6 e0       	ldi	r31, 0x06	; 6
     4f2:	ac e9       	ldi	r26, 0x9C	; 156
     4f4:	b6 e0       	ldi	r27, 0x06	; 6
     4f6:	b1 83       	std	Z+1, r27	; 0x01
     4f8:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     4fa:	13 82       	std	Z+3, r1	; 0x03
     4fc:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     4fe:	e4 e4       	ldi	r30, 0x44	; 68
     500:	f4 e1       	ldi	r31, 0x14	; 20
     502:	f0 93 97 06 	sts	0x0697, r31	; 0x800697 <pxEnd+0x1>
     506:	e0 93 96 06 	sts	0x0696, r30	; 0x800696 <pxEnd>
    pxEnd->xBlockSize = 0;
     50a:	13 82       	std	Z+3, r1	; 0x03
     50c:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     50e:	11 82       	std	Z+1, r1	; 0x01
     510:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     512:	88 ea       	ldi	r24, 0xA8	; 168
     514:	9d e0       	ldi	r25, 0x0D	; 13
     516:	13 96       	adiw	r26, 0x03	; 3
     518:	9c 93       	st	X, r25
     51a:	8e 93       	st	-X, r24
     51c:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     51e:	ed 93       	st	X+, r30
     520:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     522:	90 93 93 06 	sts	0x0693, r25	; 0x800693 <xMinimumEverFreeBytesRemaining+0x1>
     526:	80 93 92 06 	sts	0x0692, r24	; 0x800692 <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     52a:	90 93 95 06 	sts	0x0695, r25	; 0x800695 <xFreeBytesRemaining+0x1>
     52e:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     532:	80 e0       	ldi	r24, 0x00	; 0
     534:	90 e8       	ldi	r25, 0x80	; 128
     536:	90 93 8d 06 	sts	0x068D, r25	; 0x80068d <__data_end+0x1>
     53a:	80 93 8c 06 	sts	0x068C, r24	; 0x80068c <__data_end>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     53e:	e0 90 8c 06 	lds	r14, 0x068C	; 0x80068c <__data_end>
     542:	f0 90 8d 06 	lds	r15, 0x068D	; 0x80068d <__data_end+0x1>
     546:	c7 01       	movw	r24, r14
     548:	8c 23       	and	r24, r28
     54a:	9d 23       	and	r25, r29
     54c:	89 2b       	or	r24, r25
     54e:	09 f0       	breq	.+2      	; 0x552 <pvPortMalloc+0x86>
     550:	75 c0       	rjmp	.+234    	; 0x63c <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     552:	20 97       	sbiw	r28, 0x00	; 0
     554:	09 f4       	brne	.+2      	; 0x558 <pvPortMalloc+0x8c>
     556:	75 c0       	rjmp	.+234    	; 0x642 <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     558:	9e 01       	movw	r18, r28
     55a:	2c 5f       	subi	r18, 0xFC	; 252
     55c:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     55e:	c2 17       	cp	r28, r18
     560:	d3 07       	cpc	r29, r19
     562:	08 f0       	brcs	.+2      	; 0x566 <pvPortMalloc+0x9a>
     564:	6e c0       	rjmp	.+220    	; 0x642 <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     566:	21 15       	cp	r18, r1
     568:	31 05       	cpc	r19, r1
     56a:	09 f4       	brne	.+2      	; 0x56e <pvPortMalloc+0xa2>
     56c:	67 c0       	rjmp	.+206    	; 0x63c <pvPortMalloc+0x170>
     56e:	00 91 94 06 	lds	r16, 0x0694	; 0x800694 <xFreeBytesRemaining>
     572:	10 91 95 06 	lds	r17, 0x0695	; 0x800695 <xFreeBytesRemaining+0x1>
     576:	02 17       	cp	r16, r18
     578:	13 07       	cpc	r17, r19
     57a:	08 f4       	brcc	.+2      	; 0x57e <pvPortMalloc+0xb2>
     57c:	5f c0       	rjmp	.+190    	; 0x63c <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     57e:	c0 91 98 06 	lds	r28, 0x0698	; 0x800698 <xStart>
     582:	d0 91 99 06 	lds	r29, 0x0699	; 0x800699 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     586:	e8 e9       	ldi	r30, 0x98	; 152
     588:	f6 e0       	ldi	r31, 0x06	; 6
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     58a:	02 c0       	rjmp	.+4      	; 0x590 <pvPortMalloc+0xc4>
     58c:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
     58e:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     590:	8a 81       	ldd	r24, Y+2	; 0x02
     592:	9b 81       	ldd	r25, Y+3	; 0x03
     594:	82 17       	cp	r24, r18
     596:	93 07       	cpc	r25, r19
     598:	20 f4       	brcc	.+8      	; 0x5a2 <pvPortMalloc+0xd6>
     59a:	88 81       	ld	r24, Y
     59c:	99 81       	ldd	r25, Y+1	; 0x01
     59e:	00 97       	sbiw	r24, 0x00	; 0
     5a0:	a9 f7       	brne	.-22     	; 0x58c <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     5a2:	80 91 96 06 	lds	r24, 0x0696	; 0x800696 <pxEnd>
     5a6:	90 91 97 06 	lds	r25, 0x0697	; 0x800697 <pxEnd+0x1>
     5aa:	c8 17       	cp	r28, r24
     5ac:	d9 07       	cpc	r29, r25
     5ae:	09 f4       	brne	.+2      	; 0x5b2 <pvPortMalloc+0xe6>
     5b0:	45 c0       	rjmp	.+138    	; 0x63c <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     5b2:	c0 80       	ld	r12, Z
     5b4:	d1 80       	ldd	r13, Z+1	; 0x01
     5b6:	84 e0       	ldi	r24, 0x04	; 4
     5b8:	c8 0e       	add	r12, r24
     5ba:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     5bc:	88 81       	ld	r24, Y
     5be:	99 81       	ldd	r25, Y+1	; 0x01
     5c0:	91 83       	std	Z+1, r25	; 0x01
     5c2:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     5c4:	4a 81       	ldd	r20, Y+2	; 0x02
     5c6:	5b 81       	ldd	r21, Y+3	; 0x03
     5c8:	42 1b       	sub	r20, r18
     5ca:	53 0b       	sbc	r21, r19
     5cc:	49 30       	cpi	r20, 0x09	; 9
     5ce:	51 05       	cpc	r21, r1
     5d0:	48 f0       	brcs	.+18     	; 0x5e4 <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     5d2:	ce 01       	movw	r24, r28
     5d4:	82 0f       	add	r24, r18
     5d6:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     5d8:	fc 01       	movw	r30, r24
     5da:	53 83       	std	Z+3, r21	; 0x03
     5dc:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     5de:	3b 83       	std	Y+3, r19	; 0x03
     5e0:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     5e2:	27 df       	rcall	.-434    	; 0x432 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     5e4:	8a 81       	ldd	r24, Y+2	; 0x02
     5e6:	9b 81       	ldd	r25, Y+3	; 0x03
     5e8:	08 1b       	sub	r16, r24
     5ea:	19 0b       	sbc	r17, r25
     5ec:	10 93 95 06 	sts	0x0695, r17	; 0x800695 <xFreeBytesRemaining+0x1>
     5f0:	00 93 94 06 	sts	0x0694, r16	; 0x800694 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     5f4:	20 91 92 06 	lds	r18, 0x0692	; 0x800692 <xMinimumEverFreeBytesRemaining>
     5f8:	30 91 93 06 	lds	r19, 0x0693	; 0x800693 <xMinimumEverFreeBytesRemaining+0x1>
     5fc:	02 17       	cp	r16, r18
     5fe:	13 07       	cpc	r17, r19
     600:	20 f4       	brcc	.+8      	; 0x60a <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     602:	10 93 93 06 	sts	0x0693, r17	; 0x800693 <xMinimumEverFreeBytesRemaining+0x1>
     606:	00 93 92 06 	sts	0x0692, r16	; 0x800692 <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     60a:	e8 2a       	or	r14, r24
     60c:	f9 2a       	or	r15, r25
     60e:	fb 82       	std	Y+3, r15	; 0x03
     610:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     612:	19 82       	std	Y+1, r1	; 0x01
     614:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     616:	80 91 90 06 	lds	r24, 0x0690	; 0x800690 <xNumberOfSuccessfulAllocations>
     61a:	90 91 91 06 	lds	r25, 0x0691	; 0x800691 <xNumberOfSuccessfulAllocations+0x1>
     61e:	01 96       	adiw	r24, 0x01	; 1
     620:	90 93 91 06 	sts	0x0691, r25	; 0x800691 <xNumberOfSuccessfulAllocations+0x1>
     624:	80 93 90 06 	sts	0x0690, r24	; 0x800690 <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     628:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     62c:	c1 14       	cp	r12, r1
     62e:	d1 04       	cpc	r13, r1
     630:	59 f4       	brne	.+22     	; 0x648 <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     632:	0e 94 a8 16 	call	0x2d50	; 0x2d50 <vApplicationMallocFailedHook>
     636:	c1 2c       	mov	r12, r1
     638:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
     63a:	06 c0       	rjmp	.+12     	; 0x648 <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     63c:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <xTaskResumeAll>
     640:	f8 cf       	rjmp	.-16     	; 0x632 <pvPortMalloc+0x166>
     642:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <xTaskResumeAll>
     646:	f5 cf       	rjmp	.-22     	; 0x632 <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     648:	c6 01       	movw	r24, r12
     64a:	df 91       	pop	r29
     64c:	cf 91       	pop	r28
     64e:	1f 91       	pop	r17
     650:	0f 91       	pop	r16
     652:	ff 90       	pop	r15
     654:	ef 90       	pop	r14
     656:	df 90       	pop	r13
     658:	cf 90       	pop	r12
     65a:	08 95       	ret

0000065c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     660:	00 97       	sbiw	r24, 0x00	; 0
     662:	99 f1       	breq	.+102    	; 0x6ca <vPortFree+0x6e>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     664:	fc 01       	movw	r30, r24
     666:	34 97       	sbiw	r30, 0x04	; 4
     668:	22 81       	ldd	r18, Z+2	; 0x02
     66a:	33 81       	ldd	r19, Z+3	; 0x03
     66c:	40 91 8c 06 	lds	r20, 0x068C	; 0x80068c <__data_end>
     670:	50 91 8d 06 	lds	r21, 0x068D	; 0x80068d <__data_end+0x1>
     674:	b9 01       	movw	r22, r18
     676:	64 23       	and	r22, r20
     678:	75 23       	and	r23, r21
     67a:	67 2b       	or	r22, r23
     67c:	31 f1       	breq	.+76     	; 0x6ca <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     67e:	60 81       	ld	r22, Z
     680:	71 81       	ldd	r23, Z+1	; 0x01
     682:	67 2b       	or	r22, r23
     684:	11 f5       	brne	.+68     	; 0x6ca <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     686:	ef 01       	movw	r28, r30
     688:	40 95       	com	r20
     68a:	50 95       	com	r21
     68c:	24 23       	and	r18, r20
     68e:	35 23       	and	r19, r21
     690:	33 83       	std	Z+3, r19	; 0x03
     692:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
     694:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     698:	20 91 94 06 	lds	r18, 0x0694	; 0x800694 <xFreeBytesRemaining>
     69c:	30 91 95 06 	lds	r19, 0x0695	; 0x800695 <xFreeBytesRemaining+0x1>
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
     6a2:	9b 81       	ldd	r25, Y+3	; 0x03
     6a4:	82 0f       	add	r24, r18
     6a6:	93 1f       	adc	r25, r19
     6a8:	90 93 95 06 	sts	0x0695, r25	; 0x800695 <xFreeBytesRemaining+0x1>
     6ac:	80 93 94 06 	sts	0x0694, r24	; 0x800694 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     6b0:	ce 01       	movw	r24, r28
     6b2:	bf de       	rcall	.-642    	; 0x432 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     6b4:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <xNumberOfSuccessfulFrees>
     6b8:	90 91 8f 06 	lds	r25, 0x068F	; 0x80068f <xNumberOfSuccessfulFrees+0x1>
     6bc:	01 96       	adiw	r24, 0x01	; 1
     6be:	90 93 8f 06 	sts	0x068F, r25	; 0x80068f <xNumberOfSuccessfulFrees+0x1>
     6c2:	80 93 8e 06 	sts	0x068E, r24	; 0x80068e <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     6c6:	0e 94 72 0e 	call	0x1ce4	; 0x1ce4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     6ca:	df 91       	pop	r29
     6cc:	cf 91       	pop	r28
     6ce:	08 95       	ret

000006d0 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     6d0:	fc 01       	movw	r30, r24
     6d2:	03 96       	adiw	r24, 0x03	; 3
     6d4:	92 83       	std	Z+2, r25	; 0x02
     6d6:	81 83       	std	Z+1, r24	; 0x01
     6d8:	4f ef       	ldi	r20, 0xFF	; 255
     6da:	5f ef       	ldi	r21, 0xFF	; 255
     6dc:	ba 01       	movw	r22, r20
     6de:	43 83       	std	Z+3, r20	; 0x03
     6e0:	54 83       	std	Z+4, r21	; 0x04
     6e2:	65 83       	std	Z+5, r22	; 0x05
     6e4:	76 83       	std	Z+6, r23	; 0x06
     6e6:	90 87       	std	Z+8, r25	; 0x08
     6e8:	87 83       	std	Z+7, r24	; 0x07
     6ea:	92 87       	std	Z+10, r25	; 0x0a
     6ec:	81 87       	std	Z+9, r24	; 0x09
     6ee:	10 82       	st	Z, r1
     6f0:	08 95       	ret

000006f2 <vListInitialiseItem>:
     6f2:	fc 01       	movw	r30, r24
     6f4:	13 86       	std	Z+11, r1	; 0x0b
     6f6:	12 86       	std	Z+10, r1	; 0x0a
     6f8:	08 95       	ret

000006fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     704:	08 81       	ld	r16, Y
     706:	19 81       	ldd	r17, Y+1	; 0x01
     708:	2a 81       	ldd	r18, Y+2	; 0x02
     70a:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     70c:	0f 3f       	cpi	r16, 0xFF	; 255
     70e:	4f ef       	ldi	r20, 0xFF	; 255
     710:	14 07       	cpc	r17, r20
     712:	24 07       	cpc	r18, r20
     714:	34 07       	cpc	r19, r20
     716:	21 f4       	brne	.+8      	; 0x720 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     718:	fc 01       	movw	r30, r24
     71a:	a1 85       	ldd	r26, Z+9	; 0x09
     71c:	b2 85       	ldd	r27, Z+10	; 0x0a
     71e:	11 c0       	rjmp	.+34     	; 0x742 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     720:	dc 01       	movw	r26, r24
     722:	13 96       	adiw	r26, 0x03	; 3
     724:	01 c0       	rjmp	.+2      	; 0x728 <vListInsert+0x2e>
     726:	df 01       	movw	r26, r30
     728:	14 96       	adiw	r26, 0x04	; 4
     72a:	ed 91       	ld	r30, X+
     72c:	fc 91       	ld	r31, X
     72e:	15 97       	sbiw	r26, 0x05	; 5
     730:	40 81       	ld	r20, Z
     732:	51 81       	ldd	r21, Z+1	; 0x01
     734:	62 81       	ldd	r22, Z+2	; 0x02
     736:	73 81       	ldd	r23, Z+3	; 0x03
     738:	04 17       	cp	r16, r20
     73a:	15 07       	cpc	r17, r21
     73c:	26 07       	cpc	r18, r22
     73e:	37 07       	cpc	r19, r23
     740:	90 f7       	brcc	.-28     	; 0x726 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     742:	14 96       	adiw	r26, 0x04	; 4
     744:	ed 91       	ld	r30, X+
     746:	fc 91       	ld	r31, X
     748:	15 97       	sbiw	r26, 0x05	; 5
     74a:	fd 83       	std	Y+5, r31	; 0x05
     74c:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     74e:	d7 83       	std	Z+7, r29	; 0x07
     750:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     752:	bf 83       	std	Y+7, r27	; 0x07
     754:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     756:	15 96       	adiw	r26, 0x05	; 5
     758:	dc 93       	st	X, r29
     75a:	ce 93       	st	-X, r28
     75c:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     75e:	9b 87       	std	Y+11, r25	; 0x0b
     760:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     762:	fc 01       	movw	r30, r24
     764:	20 81       	ld	r18, Z
     766:	2f 5f       	subi	r18, 0xFF	; 255
     768:	20 83       	st	Z, r18
}
     76a:	df 91       	pop	r29
     76c:	cf 91       	pop	r28
     76e:	1f 91       	pop	r17
     770:	0f 91       	pop	r16
     772:	08 95       	ret

00000774 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     77a:	a2 85       	ldd	r26, Z+10	; 0x0a
     77c:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     77e:	c4 81       	ldd	r28, Z+4	; 0x04
     780:	d5 81       	ldd	r29, Z+5	; 0x05
     782:	86 81       	ldd	r24, Z+6	; 0x06
     784:	97 81       	ldd	r25, Z+7	; 0x07
     786:	9f 83       	std	Y+7, r25	; 0x07
     788:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     78a:	c6 81       	ldd	r28, Z+6	; 0x06
     78c:	d7 81       	ldd	r29, Z+7	; 0x07
     78e:	84 81       	ldd	r24, Z+4	; 0x04
     790:	95 81       	ldd	r25, Z+5	; 0x05
     792:	9d 83       	std	Y+5, r25	; 0x05
     794:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     796:	11 96       	adiw	r26, 0x01	; 1
     798:	8d 91       	ld	r24, X+
     79a:	9c 91       	ld	r25, X
     79c:	12 97       	sbiw	r26, 0x02	; 2
     79e:	e8 17       	cp	r30, r24
     7a0:	f9 07       	cpc	r31, r25
     7a2:	31 f4       	brne	.+12     	; 0x7b0 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     7a4:	86 81       	ldd	r24, Z+6	; 0x06
     7a6:	97 81       	ldd	r25, Z+7	; 0x07
     7a8:	12 96       	adiw	r26, 0x02	; 2
     7aa:	9c 93       	st	X, r25
     7ac:	8e 93       	st	-X, r24
     7ae:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     7b0:	13 86       	std	Z+11, r1	; 0x0b
     7b2:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     7b4:	8c 91       	ld	r24, X
     7b6:	81 50       	subi	r24, 0x01	; 1
     7b8:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     7ba:	8c 91       	ld	r24, X
}
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	08 95       	ret

000007c2 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     7c2:	fc 01       	movw	r30, r24
     7c4:	60 83       	st	Z, r22
     7c6:	31 97       	sbiw	r30, 0x01	; 1
     7c8:	70 83       	st	Z, r23
     7ca:	31 97       	sbiw	r30, 0x01	; 1
     7cc:	10 82       	st	Z, r1
     7ce:	31 97       	sbiw	r30, 0x01	; 1
     7d0:	10 82       	st	Z, r1
     7d2:	31 97       	sbiw	r30, 0x01	; 1
     7d4:	20 e8       	ldi	r18, 0x80	; 128
     7d6:	20 83       	st	Z, r18
     7d8:	31 97       	sbiw	r30, 0x01	; 1
     7da:	10 82       	st	Z, r1
     7dc:	31 97       	sbiw	r30, 0x01	; 1
     7de:	10 82       	st	Z, r1
     7e0:	31 97       	sbiw	r30, 0x01	; 1
     7e2:	10 82       	st	Z, r1
     7e4:	77 97       	sbiw	r30, 0x17	; 23
     7e6:	40 83       	st	Z, r20
     7e8:	31 97       	sbiw	r30, 0x01	; 1
     7ea:	50 83       	st	Z, r21
     7ec:	86 97       	sbiw	r24, 0x26	; 38
     7ee:	08 95       	ret

000007f0 <xPortStartScheduler>:
     7f0:	a8 95       	wdr
     7f2:	90 ec       	ldi	r25, 0xC0	; 192
     7f4:	88 e1       	ldi	r24, 0x18	; 24
     7f6:	0f b6       	in	r0, 0x3f	; 63
     7f8:	f8 94       	cli
     7fa:	a8 95       	wdr
     7fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     800:	0f be       	out	0x3f, r0	; 63
     802:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     806:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
     80a:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
     80e:	cd 91       	ld	r28, X+
     810:	cd bf       	out	0x3d, r28	; 61
     812:	dd 91       	ld	r29, X+
     814:	de bf       	out	0x3e, r29	; 62
     816:	ff 91       	pop	r31
     818:	ef 91       	pop	r30
     81a:	df 91       	pop	r29
     81c:	cf 91       	pop	r28
     81e:	bf 91       	pop	r27
     820:	af 91       	pop	r26
     822:	9f 91       	pop	r25
     824:	8f 91       	pop	r24
     826:	7f 91       	pop	r23
     828:	6f 91       	pop	r22
     82a:	5f 91       	pop	r21
     82c:	4f 91       	pop	r20
     82e:	3f 91       	pop	r19
     830:	2f 91       	pop	r18
     832:	1f 91       	pop	r17
     834:	0f 91       	pop	r16
     836:	ff 90       	pop	r15
     838:	ef 90       	pop	r14
     83a:	df 90       	pop	r13
     83c:	cf 90       	pop	r12
     83e:	bf 90       	pop	r11
     840:	af 90       	pop	r10
     842:	9f 90       	pop	r9
     844:	8f 90       	pop	r8
     846:	7f 90       	pop	r7
     848:	6f 90       	pop	r6
     84a:	5f 90       	pop	r5
     84c:	4f 90       	pop	r4
     84e:	3f 90       	pop	r3
     850:	2f 90       	pop	r2
     852:	1f 90       	pop	r1
     854:	0f 90       	pop	r0
     856:	0c be       	out	0x3c, r0	; 60
     858:	0f 90       	pop	r0
     85a:	0b be       	out	0x3b, r0	; 59
     85c:	0f 90       	pop	r0
     85e:	0f be       	out	0x3f, r0	; 63
     860:	0f 90       	pop	r0
     862:	08 95       	ret
     864:	81 e0       	ldi	r24, 0x01	; 1
     866:	08 95       	ret

00000868 <vPortYield>:
     868:	0f 92       	push	r0
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	0f 92       	push	r0
     870:	0b b6       	in	r0, 0x3b	; 59
     872:	0f 92       	push	r0
     874:	0c b6       	in	r0, 0x3c	; 60
     876:	0f 92       	push	r0
     878:	1f 92       	push	r1
     87a:	11 24       	eor	r1, r1
     87c:	2f 92       	push	r2
     87e:	3f 92       	push	r3
     880:	4f 92       	push	r4
     882:	5f 92       	push	r5
     884:	6f 92       	push	r6
     886:	7f 92       	push	r7
     888:	8f 92       	push	r8
     88a:	9f 92       	push	r9
     88c:	af 92       	push	r10
     88e:	bf 92       	push	r11
     890:	cf 92       	push	r12
     892:	df 92       	push	r13
     894:	ef 92       	push	r14
     896:	ff 92       	push	r15
     898:	0f 93       	push	r16
     89a:	1f 93       	push	r17
     89c:	2f 93       	push	r18
     89e:	3f 93       	push	r19
     8a0:	4f 93       	push	r20
     8a2:	5f 93       	push	r21
     8a4:	6f 93       	push	r22
     8a6:	7f 93       	push	r23
     8a8:	8f 93       	push	r24
     8aa:	9f 93       	push	r25
     8ac:	af 93       	push	r26
     8ae:	bf 93       	push	r27
     8b0:	cf 93       	push	r28
     8b2:	df 93       	push	r29
     8b4:	ef 93       	push	r30
     8b6:	ff 93       	push	r31
     8b8:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
     8bc:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
     8c0:	0d b6       	in	r0, 0x3d	; 61
     8c2:	0d 92       	st	X+, r0
     8c4:	0e b6       	in	r0, 0x3e	; 62
     8c6:	0d 92       	st	X+, r0
     8c8:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vTaskSwitchContext>
     8cc:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
     8d0:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
     8d4:	cd 91       	ld	r28, X+
     8d6:	cd bf       	out	0x3d, r28	; 61
     8d8:	dd 91       	ld	r29, X+
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	ff 91       	pop	r31
     8de:	ef 91       	pop	r30
     8e0:	df 91       	pop	r29
     8e2:	cf 91       	pop	r28
     8e4:	bf 91       	pop	r27
     8e6:	af 91       	pop	r26
     8e8:	9f 91       	pop	r25
     8ea:	8f 91       	pop	r24
     8ec:	7f 91       	pop	r23
     8ee:	6f 91       	pop	r22
     8f0:	5f 91       	pop	r21
     8f2:	4f 91       	pop	r20
     8f4:	3f 91       	pop	r19
     8f6:	2f 91       	pop	r18
     8f8:	1f 91       	pop	r17
     8fa:	0f 91       	pop	r16
     8fc:	ff 90       	pop	r15
     8fe:	ef 90       	pop	r14
     900:	df 90       	pop	r13
     902:	cf 90       	pop	r12
     904:	bf 90       	pop	r11
     906:	af 90       	pop	r10
     908:	9f 90       	pop	r9
     90a:	8f 90       	pop	r8
     90c:	7f 90       	pop	r7
     90e:	6f 90       	pop	r6
     910:	5f 90       	pop	r5
     912:	4f 90       	pop	r4
     914:	3f 90       	pop	r3
     916:	2f 90       	pop	r2
     918:	1f 90       	pop	r1
     91a:	0f 90       	pop	r0
     91c:	0c be       	out	0x3c, r0	; 60
     91e:	0f 90       	pop	r0
     920:	0b be       	out	0x3b, r0	; 59
     922:	0f 90       	pop	r0
     924:	0f be       	out	0x3f, r0	; 63
     926:	0f 90       	pop	r0
     928:	08 95       	ret

0000092a <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     92a:	0f 92       	push	r0
     92c:	0f b6       	in	r0, 0x3f	; 63
     92e:	f8 94       	cli
     930:	0f 92       	push	r0
     932:	0b b6       	in	r0, 0x3b	; 59
     934:	0f 92       	push	r0
     936:	0c b6       	in	r0, 0x3c	; 60
     938:	0f 92       	push	r0
     93a:	1f 92       	push	r1
     93c:	11 24       	eor	r1, r1
     93e:	2f 92       	push	r2
     940:	3f 92       	push	r3
     942:	4f 92       	push	r4
     944:	5f 92       	push	r5
     946:	6f 92       	push	r6
     948:	7f 92       	push	r7
     94a:	8f 92       	push	r8
     94c:	9f 92       	push	r9
     94e:	af 92       	push	r10
     950:	bf 92       	push	r11
     952:	cf 92       	push	r12
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	2f 93       	push	r18
     960:	3f 93       	push	r19
     962:	4f 93       	push	r20
     964:	5f 93       	push	r21
     966:	6f 93       	push	r22
     968:	7f 93       	push	r23
     96a:	8f 93       	push	r24
     96c:	9f 93       	push	r25
     96e:	af 93       	push	r26
     970:	bf 93       	push	r27
     972:	cf 93       	push	r28
     974:	df 93       	push	r29
     976:	ef 93       	push	r30
     978:	ff 93       	push	r31
     97a:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
     97e:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
     982:	0d b6       	in	r0, 0x3d	; 61
     984:	0d 92       	st	X+, r0
     986:	0e b6       	in	r0, 0x3e	; 62
     988:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     98a:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     98c:	0e 94 42 0d 	call	0x1a84	; 0x1a84 <xTaskIncrementTick>
     990:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     992:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     996:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
     99a:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
     99e:	cd 91       	ld	r28, X+
     9a0:	cd bf       	out	0x3d, r28	; 61
     9a2:	dd 91       	ld	r29, X+
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	ff 91       	pop	r31
     9a8:	ef 91       	pop	r30
     9aa:	df 91       	pop	r29
     9ac:	cf 91       	pop	r28
     9ae:	bf 91       	pop	r27
     9b0:	af 91       	pop	r26
     9b2:	9f 91       	pop	r25
     9b4:	8f 91       	pop	r24
     9b6:	7f 91       	pop	r23
     9b8:	6f 91       	pop	r22
     9ba:	5f 91       	pop	r21
     9bc:	4f 91       	pop	r20
     9be:	3f 91       	pop	r19
     9c0:	2f 91       	pop	r18
     9c2:	1f 91       	pop	r17
     9c4:	0f 91       	pop	r16
     9c6:	ff 90       	pop	r15
     9c8:	ef 90       	pop	r14
     9ca:	df 90       	pop	r13
     9cc:	cf 90       	pop	r12
     9ce:	bf 90       	pop	r11
     9d0:	af 90       	pop	r10
     9d2:	9f 90       	pop	r9
     9d4:	8f 90       	pop	r8
     9d6:	7f 90       	pop	r7
     9d8:	6f 90       	pop	r6
     9da:	5f 90       	pop	r5
     9dc:	4f 90       	pop	r4
     9de:	3f 90       	pop	r3
     9e0:	2f 90       	pop	r2
     9e2:	1f 90       	pop	r1
     9e4:	0f 90       	pop	r0
     9e6:	0c be       	out	0x3c, r0	; 60
     9e8:	0f 90       	pop	r0
     9ea:	0b be       	out	0x3b, r0	; 59
     9ec:	0f 90       	pop	r0
     9ee:	0f be       	out	0x3f, r0	; 63
     9f0:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     9f2:	08 95       	ret

000009f4 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     9f4:	9a df       	rcall	.-204    	; 0x92a <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     9f6:	18 95       	reti

000009f8 <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     9f8:	0f b6       	in	r0, 0x3f	; 63
     9fa:	f8 94       	cli
     9fc:	0f 92       	push	r0
     9fe:	fc 01       	movw	r30, r24
     a00:	96 8d       	ldd	r25, Z+30	; 0x1e
     a02:	0f 90       	pop	r0
     a04:	0f be       	out	0x3f, r0	; 63
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	91 11       	cpse	r25, r1
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	08 95       	ret

00000a0e <prvCopyDataToQueue>:
     a0e:	0f 93       	push	r16
     a10:	1f 93       	push	r17
     a12:	cf 93       	push	r28
     a14:	df 93       	push	r29
     a16:	ec 01       	movw	r28, r24
     a18:	04 2f       	mov	r16, r20
     a1a:	1e 8d       	ldd	r17, Y+30	; 0x1e
     a1c:	48 a1       	ldd	r20, Y+32	; 0x20
     a1e:	41 11       	cpse	r20, r1
     a20:	0c c0       	rjmp	.+24     	; 0xa3a <prvCopyDataToQueue+0x2c>
     a22:	88 81       	ld	r24, Y
     a24:	99 81       	ldd	r25, Y+1	; 0x01
     a26:	89 2b       	or	r24, r25
     a28:	09 f0       	breq	.+2      	; 0xa2c <prvCopyDataToQueue+0x1e>
     a2a:	42 c0       	rjmp	.+132    	; 0xab0 <prvCopyDataToQueue+0xa2>
     a2c:	8c 81       	ldd	r24, Y+4	; 0x04
     a2e:	9d 81       	ldd	r25, Y+5	; 0x05
     a30:	0e 94 ec 11 	call	0x23d8	; 0x23d8 <xTaskPriorityDisinherit>
     a34:	1d 82       	std	Y+5, r1	; 0x05
     a36:	1c 82       	std	Y+4, r1	; 0x04
     a38:	42 c0       	rjmp	.+132    	; 0xabe <prvCopyDataToQueue+0xb0>
     a3a:	01 11       	cpse	r16, r1
     a3c:	17 c0       	rjmp	.+46     	; 0xa6c <prvCopyDataToQueue+0x5e>
     a3e:	50 e0       	ldi	r21, 0x00	; 0
     a40:	8a 81       	ldd	r24, Y+2	; 0x02
     a42:	9b 81       	ldd	r25, Y+3	; 0x03
     a44:	0e 94 dd 25 	call	0x4bba	; 0x4bba <memcpy>
     a48:	28 a1       	ldd	r18, Y+32	; 0x20
     a4a:	8a 81       	ldd	r24, Y+2	; 0x02
     a4c:	9b 81       	ldd	r25, Y+3	; 0x03
     a4e:	82 0f       	add	r24, r18
     a50:	91 1d       	adc	r25, r1
     a52:	9b 83       	std	Y+3, r25	; 0x03
     a54:	8a 83       	std	Y+2, r24	; 0x02
     a56:	2c 81       	ldd	r18, Y+4	; 0x04
     a58:	3d 81       	ldd	r19, Y+5	; 0x05
     a5a:	82 17       	cp	r24, r18
     a5c:	93 07       	cpc	r25, r19
     a5e:	50 f1       	brcs	.+84     	; 0xab4 <prvCopyDataToQueue+0xa6>
     a60:	88 81       	ld	r24, Y
     a62:	99 81       	ldd	r25, Y+1	; 0x01
     a64:	9b 83       	std	Y+3, r25	; 0x03
     a66:	8a 83       	std	Y+2, r24	; 0x02
     a68:	80 e0       	ldi	r24, 0x00	; 0
     a6a:	29 c0       	rjmp	.+82     	; 0xabe <prvCopyDataToQueue+0xb0>
     a6c:	50 e0       	ldi	r21, 0x00	; 0
     a6e:	8e 81       	ldd	r24, Y+6	; 0x06
     a70:	9f 81       	ldd	r25, Y+7	; 0x07
     a72:	0e 94 dd 25 	call	0x4bba	; 0x4bba <memcpy>
     a76:	88 a1       	ldd	r24, Y+32	; 0x20
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	91 95       	neg	r25
     a7c:	81 95       	neg	r24
     a7e:	91 09       	sbc	r25, r1
     a80:	2e 81       	ldd	r18, Y+6	; 0x06
     a82:	3f 81       	ldd	r19, Y+7	; 0x07
     a84:	28 0f       	add	r18, r24
     a86:	39 1f       	adc	r19, r25
     a88:	3f 83       	std	Y+7, r19	; 0x07
     a8a:	2e 83       	std	Y+6, r18	; 0x06
     a8c:	48 81       	ld	r20, Y
     a8e:	59 81       	ldd	r21, Y+1	; 0x01
     a90:	24 17       	cp	r18, r20
     a92:	35 07       	cpc	r19, r21
     a94:	30 f4       	brcc	.+12     	; 0xaa2 <prvCopyDataToQueue+0x94>
     a96:	2c 81       	ldd	r18, Y+4	; 0x04
     a98:	3d 81       	ldd	r19, Y+5	; 0x05
     a9a:	82 0f       	add	r24, r18
     a9c:	93 1f       	adc	r25, r19
     a9e:	9f 83       	std	Y+7, r25	; 0x07
     aa0:	8e 83       	std	Y+6, r24	; 0x06
     aa2:	02 30       	cpi	r16, 0x02	; 2
     aa4:	49 f4       	brne	.+18     	; 0xab8 <prvCopyDataToQueue+0xaa>
     aa6:	11 23       	and	r17, r17
     aa8:	49 f0       	breq	.+18     	; 0xabc <prvCopyDataToQueue+0xae>
     aaa:	11 50       	subi	r17, 0x01	; 1
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	07 c0       	rjmp	.+14     	; 0xabe <prvCopyDataToQueue+0xb0>
     ab0:	80 e0       	ldi	r24, 0x00	; 0
     ab2:	05 c0       	rjmp	.+10     	; 0xabe <prvCopyDataToQueue+0xb0>
     ab4:	80 e0       	ldi	r24, 0x00	; 0
     ab6:	03 c0       	rjmp	.+6      	; 0xabe <prvCopyDataToQueue+0xb0>
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	01 c0       	rjmp	.+2      	; 0xabe <prvCopyDataToQueue+0xb0>
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	1f 5f       	subi	r17, 0xFF	; 255
     ac0:	1e 8f       	std	Y+30, r17	; 0x1e
     ac2:	df 91       	pop	r29
     ac4:	cf 91       	pop	r28
     ac6:	1f 91       	pop	r17
     ac8:	0f 91       	pop	r16
     aca:	08 95       	ret

00000acc <prvCopyDataFromQueue>:
     acc:	fc 01       	movw	r30, r24
     ace:	40 a1       	ldd	r20, Z+32	; 0x20
     ad0:	44 23       	and	r20, r20
     ad2:	a9 f0       	breq	.+42     	; 0xafe <prvCopyDataFromQueue+0x32>
     ad4:	50 e0       	ldi	r21, 0x00	; 0
     ad6:	26 81       	ldd	r18, Z+6	; 0x06
     ad8:	37 81       	ldd	r19, Z+7	; 0x07
     ada:	24 0f       	add	r18, r20
     adc:	35 1f       	adc	r19, r21
     ade:	37 83       	std	Z+7, r19	; 0x07
     ae0:	26 83       	std	Z+6, r18	; 0x06
     ae2:	84 81       	ldd	r24, Z+4	; 0x04
     ae4:	95 81       	ldd	r25, Z+5	; 0x05
     ae6:	28 17       	cp	r18, r24
     ae8:	39 07       	cpc	r19, r25
     aea:	20 f0       	brcs	.+8      	; 0xaf4 <prvCopyDataFromQueue+0x28>
     aec:	80 81       	ld	r24, Z
     aee:	91 81       	ldd	r25, Z+1	; 0x01
     af0:	97 83       	std	Z+7, r25	; 0x07
     af2:	86 83       	std	Z+6, r24	; 0x06
     af4:	cb 01       	movw	r24, r22
     af6:	66 81       	ldd	r22, Z+6	; 0x06
     af8:	77 81       	ldd	r23, Z+7	; 0x07
     afa:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <memcpy>
     afe:	08 95       	ret

00000b00 <prvUnlockQueue>:
     b00:	ef 92       	push	r14
     b02:	ff 92       	push	r15
     b04:	0f 93       	push	r16
     b06:	1f 93       	push	r17
     b08:	cf 93       	push	r28
     b0a:	8c 01       	movw	r16, r24
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	0f 92       	push	r0
     b12:	fc 01       	movw	r30, r24
     b14:	c2 a1       	ldd	r28, Z+34	; 0x22
     b16:	1c 16       	cp	r1, r28
     b18:	ac f4       	brge	.+42     	; 0xb44 <prvUnlockQueue+0x44>
     b1a:	83 89       	ldd	r24, Z+19	; 0x13
     b1c:	81 11       	cpse	r24, r1
     b1e:	06 c0       	rjmp	.+12     	; 0xb2c <prvUnlockQueue+0x2c>
     b20:	11 c0       	rjmp	.+34     	; 0xb44 <prvUnlockQueue+0x44>
     b22:	f8 01       	movw	r30, r16
     b24:	83 89       	ldd	r24, Z+19	; 0x13
     b26:	81 11       	cpse	r24, r1
     b28:	05 c0       	rjmp	.+10     	; 0xb34 <prvUnlockQueue+0x34>
     b2a:	0c c0       	rjmp	.+24     	; 0xb44 <prvUnlockQueue+0x44>
     b2c:	78 01       	movw	r14, r16
     b2e:	f3 e1       	ldi	r31, 0x13	; 19
     b30:	ef 0e       	add	r14, r31
     b32:	f1 1c       	adc	r15, r1
     b34:	c7 01       	movw	r24, r14
     b36:	0e 94 a5 10 	call	0x214a	; 0x214a <xTaskRemoveFromEventList>
     b3a:	81 11       	cpse	r24, r1
     b3c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vTaskMissedYield>
     b40:	c1 50       	subi	r28, 0x01	; 1
     b42:	79 f7       	brne	.-34     	; 0xb22 <prvUnlockQueue+0x22>
     b44:	8f ef       	ldi	r24, 0xFF	; 255
     b46:	f8 01       	movw	r30, r16
     b48:	82 a3       	std	Z+34, r24	; 0x22
     b4a:	0f 90       	pop	r0
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	f8 94       	cli
     b52:	0f 92       	push	r0
     b54:	c1 a1       	ldd	r28, Z+33	; 0x21
     b56:	1c 16       	cp	r1, r28
     b58:	ac f4       	brge	.+42     	; 0xb84 <prvUnlockQueue+0x84>
     b5a:	80 85       	ldd	r24, Z+8	; 0x08
     b5c:	81 11       	cpse	r24, r1
     b5e:	06 c0       	rjmp	.+12     	; 0xb6c <prvUnlockQueue+0x6c>
     b60:	11 c0       	rjmp	.+34     	; 0xb84 <prvUnlockQueue+0x84>
     b62:	f8 01       	movw	r30, r16
     b64:	80 85       	ldd	r24, Z+8	; 0x08
     b66:	81 11       	cpse	r24, r1
     b68:	05 c0       	rjmp	.+10     	; 0xb74 <prvUnlockQueue+0x74>
     b6a:	0c c0       	rjmp	.+24     	; 0xb84 <prvUnlockQueue+0x84>
     b6c:	78 01       	movw	r14, r16
     b6e:	f8 e0       	ldi	r31, 0x08	; 8
     b70:	ef 0e       	add	r14, r31
     b72:	f1 1c       	adc	r15, r1
     b74:	c7 01       	movw	r24, r14
     b76:	0e 94 a5 10 	call	0x214a	; 0x214a <xTaskRemoveFromEventList>
     b7a:	81 11       	cpse	r24, r1
     b7c:	0e 94 d5 11 	call	0x23aa	; 0x23aa <vTaskMissedYield>
     b80:	c1 50       	subi	r28, 0x01	; 1
     b82:	79 f7       	brne	.-34     	; 0xb62 <prvUnlockQueue+0x62>
     b84:	8f ef       	ldi	r24, 0xFF	; 255
     b86:	f8 01       	movw	r30, r16
     b88:	81 a3       	std	Z+33, r24	; 0x21
     b8a:	0f 90       	pop	r0
     b8c:	0f be       	out	0x3f, r0	; 63
     b8e:	cf 91       	pop	r28
     b90:	1f 91       	pop	r17
     b92:	0f 91       	pop	r16
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	08 95       	ret

00000b9a <xQueueGenericReset>:
     b9a:	cf 93       	push	r28
     b9c:	df 93       	push	r29
     b9e:	ec 01       	movw	r28, r24
     ba0:	0f b6       	in	r0, 0x3f	; 63
     ba2:	f8 94       	cli
     ba4:	0f 92       	push	r0
     ba6:	e8 81       	ld	r30, Y
     ba8:	f9 81       	ldd	r31, Y+1	; 0x01
     baa:	8f 8d       	ldd	r24, Y+31	; 0x1f
     bac:	28 a1       	ldd	r18, Y+32	; 0x20
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	82 9f       	mul	r24, r18
     bb4:	a0 01       	movw	r20, r0
     bb6:	83 9f       	mul	r24, r19
     bb8:	50 0d       	add	r21, r0
     bba:	92 9f       	mul	r25, r18
     bbc:	50 0d       	add	r21, r0
     bbe:	11 24       	eor	r1, r1
     bc0:	4e 0f       	add	r20, r30
     bc2:	5f 1f       	adc	r21, r31
     bc4:	5d 83       	std	Y+5, r21	; 0x05
     bc6:	4c 83       	std	Y+4, r20	; 0x04
     bc8:	1e 8e       	std	Y+30, r1	; 0x1e
     bca:	fb 83       	std	Y+3, r31	; 0x03
     bcc:	ea 83       	std	Y+2, r30	; 0x02
     bce:	01 97       	sbiw	r24, 0x01	; 1
     bd0:	82 9f       	mul	r24, r18
     bd2:	a0 01       	movw	r20, r0
     bd4:	83 9f       	mul	r24, r19
     bd6:	50 0d       	add	r21, r0
     bd8:	92 9f       	mul	r25, r18
     bda:	50 0d       	add	r21, r0
     bdc:	11 24       	eor	r1, r1
     bde:	cf 01       	movw	r24, r30
     be0:	84 0f       	add	r24, r20
     be2:	95 1f       	adc	r25, r21
     be4:	9f 83       	std	Y+7, r25	; 0x07
     be6:	8e 83       	std	Y+6, r24	; 0x06
     be8:	8f ef       	ldi	r24, 0xFF	; 255
     bea:	89 a3       	std	Y+33, r24	; 0x21
     bec:	8a a3       	std	Y+34, r24	; 0x22
     bee:	61 11       	cpse	r22, r1
     bf0:	0b c0       	rjmp	.+22     	; 0xc08 <xQueueGenericReset+0x6e>
     bf2:	88 85       	ldd	r24, Y+8	; 0x08
     bf4:	88 23       	and	r24, r24
     bf6:	71 f0       	breq	.+28     	; 0xc14 <xQueueGenericReset+0x7a>
     bf8:	ce 01       	movw	r24, r28
     bfa:	08 96       	adiw	r24, 0x08	; 8
     bfc:	0e 94 a5 10 	call	0x214a	; 0x214a <xTaskRemoveFromEventList>
     c00:	88 23       	and	r24, r24
     c02:	41 f0       	breq	.+16     	; 0xc14 <xQueueGenericReset+0x7a>
     c04:	31 de       	rcall	.-926    	; 0x868 <vPortYield>
     c06:	06 c0       	rjmp	.+12     	; 0xc14 <xQueueGenericReset+0x7a>
     c08:	ce 01       	movw	r24, r28
     c0a:	08 96       	adiw	r24, 0x08	; 8
     c0c:	61 dd       	rcall	.-1342   	; 0x6d0 <vListInitialise>
     c0e:	ce 01       	movw	r24, r28
     c10:	43 96       	adiw	r24, 0x13	; 19
     c12:	5e dd       	rcall	.-1348   	; 0x6d0 <vListInitialise>
     c14:	0f 90       	pop	r0
     c16:	0f be       	out	0x3f, r0	; 63
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	df 91       	pop	r29
     c1c:	cf 91       	pop	r28
     c1e:	08 95       	ret

00000c20 <xQueueGenericCreate>:
     c20:	0f 93       	push	r16
     c22:	1f 93       	push	r17
     c24:	cf 93       	push	r28
     c26:	df 93       	push	r29
     c28:	08 2f       	mov	r16, r24
     c2a:	16 2f       	mov	r17, r22
     c2c:	86 9f       	mul	r24, r22
     c2e:	c0 01       	movw	r24, r0
     c30:	11 24       	eor	r1, r1
     c32:	83 96       	adiw	r24, 0x23	; 35
     c34:	4b dc       	rcall	.-1898   	; 0x4cc <pvPortMalloc>
     c36:	ec 01       	movw	r28, r24
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f0       	breq	.+26     	; 0xc56 <xQueueGenericCreate+0x36>
     c3c:	11 11       	cpse	r17, r1
     c3e:	03 c0       	rjmp	.+6      	; 0xc46 <xQueueGenericCreate+0x26>
     c40:	99 83       	std	Y+1, r25	; 0x01
     c42:	88 83       	st	Y, r24
     c44:	03 c0       	rjmp	.+6      	; 0xc4c <xQueueGenericCreate+0x2c>
     c46:	83 96       	adiw	r24, 0x23	; 35
     c48:	99 83       	std	Y+1, r25	; 0x01
     c4a:	88 83       	st	Y, r24
     c4c:	0f 8f       	std	Y+31, r16	; 0x1f
     c4e:	18 a3       	std	Y+32, r17	; 0x20
     c50:	61 e0       	ldi	r22, 0x01	; 1
     c52:	ce 01       	movw	r24, r28
     c54:	a2 df       	rcall	.-188    	; 0xb9a <xQueueGenericReset>
     c56:	ce 01       	movw	r24, r28
     c58:	df 91       	pop	r29
     c5a:	cf 91       	pop	r28
     c5c:	1f 91       	pop	r17
     c5e:	0f 91       	pop	r16
     c60:	08 95       	ret

00000c62 <xQueueGenericSend>:
     c62:	9f 92       	push	r9
     c64:	af 92       	push	r10
     c66:	bf 92       	push	r11
     c68:	cf 92       	push	r12
     c6a:	df 92       	push	r13
     c6c:	ef 92       	push	r14
     c6e:	ff 92       	push	r15
     c70:	0f 93       	push	r16
     c72:	1f 93       	push	r17
     c74:	cf 93       	push	r28
     c76:	df 93       	push	r29
     c78:	cd b7       	in	r28, 0x3d	; 61
     c7a:	de b7       	in	r29, 0x3e	; 62
     c7c:	29 97       	sbiw	r28, 0x09	; 9
     c7e:	0f b6       	in	r0, 0x3f	; 63
     c80:	f8 94       	cli
     c82:	de bf       	out	0x3e, r29	; 62
     c84:	0f be       	out	0x3f, r0	; 63
     c86:	cd bf       	out	0x3d, r28	; 61
     c88:	7c 01       	movw	r14, r24
     c8a:	5b 01       	movw	r10, r22
     c8c:	2e 83       	std	Y+6, r18	; 0x06
     c8e:	3f 83       	std	Y+7, r19	; 0x07
     c90:	48 87       	std	Y+8, r20	; 0x08
     c92:	59 87       	std	Y+9, r21	; 0x09
     c94:	10 e0       	ldi	r17, 0x00	; 0
     c96:	99 24       	eor	r9, r9
     c98:	93 94       	inc	r9
     c9a:	6c 01       	movw	r12, r24
     c9c:	88 e0       	ldi	r24, 0x08	; 8
     c9e:	c8 0e       	add	r12, r24
     ca0:	d1 1c       	adc	r13, r1
     ca2:	0f b6       	in	r0, 0x3f	; 63
     ca4:	f8 94       	cli
     ca6:	0f 92       	push	r0
     ca8:	f7 01       	movw	r30, r14
     caa:	96 8d       	ldd	r25, Z+30	; 0x1e
     cac:	87 8d       	ldd	r24, Z+31	; 0x1f
     cae:	98 17       	cp	r25, r24
     cb0:	10 f0       	brcs	.+4      	; 0xcb6 <xQueueGenericSend+0x54>
     cb2:	02 30       	cpi	r16, 0x02	; 2
     cb4:	b1 f4       	brne	.+44     	; 0xce2 <xQueueGenericSend+0x80>
     cb6:	40 2f       	mov	r20, r16
     cb8:	b5 01       	movw	r22, r10
     cba:	c7 01       	movw	r24, r14
     cbc:	a8 de       	rcall	.-688    	; 0xa0e <prvCopyDataToQueue>
     cbe:	f7 01       	movw	r30, r14
     cc0:	93 89       	ldd	r25, Z+19	; 0x13
     cc2:	99 23       	and	r25, r25
     cc4:	41 f0       	breq	.+16     	; 0xcd6 <xQueueGenericSend+0x74>
     cc6:	c7 01       	movw	r24, r14
     cc8:	43 96       	adiw	r24, 0x13	; 19
     cca:	0e 94 a5 10 	call	0x214a	; 0x214a <xTaskRemoveFromEventList>
     cce:	88 23       	and	r24, r24
     cd0:	21 f0       	breq	.+8      	; 0xcda <xQueueGenericSend+0x78>
     cd2:	ca dd       	rcall	.-1132   	; 0x868 <vPortYield>
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <xQueueGenericSend+0x78>
     cd6:	81 11       	cpse	r24, r1
     cd8:	c7 dd       	rcall	.-1138   	; 0x868 <vPortYield>
     cda:	0f 90       	pop	r0
     cdc:	0f be       	out	0x3f, r0	; 63
     cde:	81 e0       	ldi	r24, 0x01	; 1
     ce0:	4e c0       	rjmp	.+156    	; 0xd7e <xQueueGenericSend+0x11c>
     ce2:	8e 81       	ldd	r24, Y+6	; 0x06
     ce4:	9f 81       	ldd	r25, Y+7	; 0x07
     ce6:	a8 85       	ldd	r26, Y+8	; 0x08
     ce8:	b9 85       	ldd	r27, Y+9	; 0x09
     cea:	89 2b       	or	r24, r25
     cec:	8a 2b       	or	r24, r26
     cee:	8b 2b       	or	r24, r27
     cf0:	21 f4       	brne	.+8      	; 0xcfa <xQueueGenericSend+0x98>
     cf2:	0f 90       	pop	r0
     cf4:	0f be       	out	0x3f, r0	; 63
     cf6:	80 e0       	ldi	r24, 0x00	; 0
     cf8:	42 c0       	rjmp	.+132    	; 0xd7e <xQueueGenericSend+0x11c>
     cfa:	11 11       	cpse	r17, r1
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <xQueueGenericSend+0xa6>
     cfe:	ce 01       	movw	r24, r28
     d00:	01 96       	adiw	r24, 0x01	; 1
     d02:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <vTaskInternalSetTimeOutState>
     d06:	19 2d       	mov	r17, r9
     d08:	0f 90       	pop	r0
     d0a:	0f be       	out	0x3f, r0	; 63
     d0c:	a7 d6       	rcall	.+3406   	; 0x1a5c <vTaskSuspendAll>
     d0e:	0f b6       	in	r0, 0x3f	; 63
     d10:	f8 94       	cli
     d12:	0f 92       	push	r0
     d14:	f7 01       	movw	r30, r14
     d16:	81 a1       	ldd	r24, Z+33	; 0x21
     d18:	8f 3f       	cpi	r24, 0xFF	; 255
     d1a:	09 f4       	brne	.+2      	; 0xd1e <xQueueGenericSend+0xbc>
     d1c:	11 a2       	std	Z+33, r1	; 0x21
     d1e:	f7 01       	movw	r30, r14
     d20:	82 a1       	ldd	r24, Z+34	; 0x22
     d22:	8f 3f       	cpi	r24, 0xFF	; 255
     d24:	09 f4       	brne	.+2      	; 0xd28 <xQueueGenericSend+0xc6>
     d26:	12 a2       	std	Z+34, r1	; 0x22
     d28:	0f 90       	pop	r0
     d2a:	0f be       	out	0x3f, r0	; 63
     d2c:	be 01       	movw	r22, r28
     d2e:	6a 5f       	subi	r22, 0xFA	; 250
     d30:	7f 4f       	sbci	r23, 0xFF	; 255
     d32:	ce 01       	movw	r24, r28
     d34:	01 96       	adiw	r24, 0x01	; 1
     d36:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <xTaskCheckForTimeOut>
     d3a:	81 11       	cpse	r24, r1
     d3c:	1c c0       	rjmp	.+56     	; 0xd76 <xQueueGenericSend+0x114>
     d3e:	0f b6       	in	r0, 0x3f	; 63
     d40:	f8 94       	cli
     d42:	0f 92       	push	r0
     d44:	f7 01       	movw	r30, r14
     d46:	96 8d       	ldd	r25, Z+30	; 0x1e
     d48:	87 8d       	ldd	r24, Z+31	; 0x1f
     d4a:	0f 90       	pop	r0
     d4c:	0f be       	out	0x3f, r0	; 63
     d4e:	98 13       	cpse	r25, r24
     d50:	0e c0       	rjmp	.+28     	; 0xd6e <xQueueGenericSend+0x10c>
     d52:	4e 81       	ldd	r20, Y+6	; 0x06
     d54:	5f 81       	ldd	r21, Y+7	; 0x07
     d56:	68 85       	ldd	r22, Y+8	; 0x08
     d58:	79 85       	ldd	r23, Y+9	; 0x09
     d5a:	c6 01       	movw	r24, r12
     d5c:	0e 94 4c 10 	call	0x2098	; 0x2098 <vTaskPlaceOnEventList>
     d60:	c7 01       	movw	r24, r14
     d62:	ce de       	rcall	.-612    	; 0xb00 <prvUnlockQueue>
     d64:	bf d7       	rcall	.+3966   	; 0x1ce4 <xTaskResumeAll>
     d66:	81 11       	cpse	r24, r1
     d68:	9c cf       	rjmp	.-200    	; 0xca2 <xQueueGenericSend+0x40>
     d6a:	7e dd       	rcall	.-1284   	; 0x868 <vPortYield>
     d6c:	9a cf       	rjmp	.-204    	; 0xca2 <xQueueGenericSend+0x40>
     d6e:	c7 01       	movw	r24, r14
     d70:	c7 de       	rcall	.-626    	; 0xb00 <prvUnlockQueue>
     d72:	b8 d7       	rcall	.+3952   	; 0x1ce4 <xTaskResumeAll>
     d74:	96 cf       	rjmp	.-212    	; 0xca2 <xQueueGenericSend+0x40>
     d76:	c7 01       	movw	r24, r14
     d78:	c3 de       	rcall	.-634    	; 0xb00 <prvUnlockQueue>
     d7a:	b4 d7       	rcall	.+3944   	; 0x1ce4 <xTaskResumeAll>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
     d7e:	29 96       	adiw	r28, 0x09	; 9
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	f8 94       	cli
     d84:	de bf       	out	0x3e, r29	; 62
     d86:	0f be       	out	0x3f, r0	; 63
     d88:	cd bf       	out	0x3d, r28	; 61
     d8a:	df 91       	pop	r29
     d8c:	cf 91       	pop	r28
     d8e:	1f 91       	pop	r17
     d90:	0f 91       	pop	r16
     d92:	ff 90       	pop	r15
     d94:	ef 90       	pop	r14
     d96:	df 90       	pop	r13
     d98:	cf 90       	pop	r12
     d9a:	bf 90       	pop	r11
     d9c:	af 90       	pop	r10
     d9e:	9f 90       	pop	r9
     da0:	08 95       	ret

00000da2 <xQueueCreateMutex>:
     da2:	0f 93       	push	r16
     da4:	cf 93       	push	r28
     da6:	df 93       	push	r29
     da8:	48 2f       	mov	r20, r24
     daa:	60 e0       	ldi	r22, 0x00	; 0
     dac:	81 e0       	ldi	r24, 0x01	; 1
     dae:	38 df       	rcall	.-400    	; 0xc20 <xQueueGenericCreate>
     db0:	ec 01       	movw	r28, r24
     db2:	00 97       	sbiw	r24, 0x00	; 0
     db4:	61 f0       	breq	.+24     	; 0xdce <xQueueCreateMutex+0x2c>
     db6:	1d 82       	std	Y+5, r1	; 0x05
     db8:	1c 82       	std	Y+4, r1	; 0x04
     dba:	19 82       	std	Y+1, r1	; 0x01
     dbc:	18 82       	st	Y, r1
     dbe:	1e 82       	std	Y+6, r1	; 0x06
     dc0:	00 e0       	ldi	r16, 0x00	; 0
     dc2:	20 e0       	ldi	r18, 0x00	; 0
     dc4:	30 e0       	ldi	r19, 0x00	; 0
     dc6:	a9 01       	movw	r20, r18
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	4a df       	rcall	.-364    	; 0xc62 <xQueueGenericSend>
     dce:	ce 01       	movw	r24, r28
     dd0:	df 91       	pop	r29
     dd2:	cf 91       	pop	r28
     dd4:	0f 91       	pop	r16
     dd6:	08 95       	ret

00000dd8 <xQueueGenericSendFromISR>:
     dd8:	ef 92       	push	r14
     dda:	ff 92       	push	r15
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	8a 01       	movw	r16, r20
     de6:	fc 01       	movw	r30, r24
     de8:	56 8d       	ldd	r21, Z+30	; 0x1e
     dea:	37 8d       	ldd	r19, Z+31	; 0x1f
     dec:	53 17       	cp	r21, r19
     dee:	10 f0       	brcs	.+4      	; 0xdf4 <xQueueGenericSendFromISR+0x1c>
     df0:	22 30       	cpi	r18, 0x02	; 2
     df2:	f9 f4       	brne	.+62     	; 0xe32 <xQueueGenericSendFromISR+0x5a>
     df4:	42 2f       	mov	r20, r18
     df6:	78 01       	movw	r14, r16
     df8:	ec 01       	movw	r28, r24
     dfa:	1a a1       	ldd	r17, Y+34	; 0x22
     dfc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dfe:	ce 01       	movw	r24, r28
     e00:	06 de       	rcall	.-1012   	; 0xa0e <prvCopyDataToQueue>
     e02:	1f 3f       	cpi	r17, 0xFF	; 255
     e04:	81 f4       	brne	.+32     	; 0xe26 <xQueueGenericSendFromISR+0x4e>
     e06:	8b 89       	ldd	r24, Y+19	; 0x13
     e08:	88 23       	and	r24, r24
     e0a:	a9 f0       	breq	.+42     	; 0xe36 <xQueueGenericSendFromISR+0x5e>
     e0c:	ce 01       	movw	r24, r28
     e0e:	43 96       	adiw	r24, 0x13	; 19
     e10:	0e 94 a5 10 	call	0x214a	; 0x214a <xTaskRemoveFromEventList>
     e14:	88 23       	and	r24, r24
     e16:	89 f0       	breq	.+34     	; 0xe3a <xQueueGenericSendFromISR+0x62>
     e18:	e1 14       	cp	r14, r1
     e1a:	f1 04       	cpc	r15, r1
     e1c:	81 f0       	breq	.+32     	; 0xe3e <xQueueGenericSendFromISR+0x66>
     e1e:	81 e0       	ldi	r24, 0x01	; 1
     e20:	f7 01       	movw	r30, r14
     e22:	80 83       	st	Z, r24
     e24:	0d c0       	rjmp	.+26     	; 0xe40 <xQueueGenericSendFromISR+0x68>
     e26:	ff 24       	eor	r15, r15
     e28:	f3 94       	inc	r15
     e2a:	f1 0e       	add	r15, r17
     e2c:	fa a2       	std	Y+34, r15	; 0x22
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	07 c0       	rjmp	.+14     	; 0xe40 <xQueueGenericSendFromISR+0x68>
     e32:	80 e0       	ldi	r24, 0x00	; 0
     e34:	05 c0       	rjmp	.+10     	; 0xe40 <xQueueGenericSendFromISR+0x68>
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	03 c0       	rjmp	.+6      	; 0xe40 <xQueueGenericSendFromISR+0x68>
     e3a:	81 e0       	ldi	r24, 0x01	; 1
     e3c:	01 c0       	rjmp	.+2      	; 0xe40 <xQueueGenericSendFromISR+0x68>
     e3e:	81 e0       	ldi	r24, 0x01	; 1
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	08 95       	ret

00000e4e <xQueueReceive>:
     e4e:	9f 92       	push	r9
     e50:	af 92       	push	r10
     e52:	bf 92       	push	r11
     e54:	cf 92       	push	r12
     e56:	df 92       	push	r13
     e58:	ef 92       	push	r14
     e5a:	ff 92       	push	r15
     e5c:	0f 93       	push	r16
     e5e:	1f 93       	push	r17
     e60:	cf 93       	push	r28
     e62:	df 93       	push	r29
     e64:	cd b7       	in	r28, 0x3d	; 61
     e66:	de b7       	in	r29, 0x3e	; 62
     e68:	29 97       	sbiw	r28, 0x09	; 9
     e6a:	0f b6       	in	r0, 0x3f	; 63
     e6c:	f8 94       	cli
     e6e:	de bf       	out	0x3e, r29	; 62
     e70:	0f be       	out	0x3f, r0	; 63
     e72:	cd bf       	out	0x3d, r28	; 61
     e74:	8c 01       	movw	r16, r24
     e76:	5b 01       	movw	r10, r22
     e78:	2e 83       	std	Y+6, r18	; 0x06
     e7a:	3f 83       	std	Y+7, r19	; 0x07
     e7c:	48 87       	std	Y+8, r20	; 0x08
     e7e:	59 87       	std	Y+9, r21	; 0x09
     e80:	e1 2c       	mov	r14, r1
     e82:	99 24       	eor	r9, r9
     e84:	93 94       	inc	r9
     e86:	6c 01       	movw	r12, r24
     e88:	83 e1       	ldi	r24, 0x13	; 19
     e8a:	c8 0e       	add	r12, r24
     e8c:	d1 1c       	adc	r13, r1
     e8e:	0f b6       	in	r0, 0x3f	; 63
     e90:	f8 94       	cli
     e92:	0f 92       	push	r0
     e94:	f8 01       	movw	r30, r16
     e96:	f6 8c       	ldd	r15, Z+30	; 0x1e
     e98:	ff 20       	and	r15, r15
     e9a:	99 f0       	breq	.+38     	; 0xec2 <xQueueReceive+0x74>
     e9c:	b5 01       	movw	r22, r10
     e9e:	c8 01       	movw	r24, r16
     ea0:	15 de       	rcall	.-982    	; 0xacc <prvCopyDataFromQueue>
     ea2:	fa 94       	dec	r15
     ea4:	f8 01       	movw	r30, r16
     ea6:	f6 8e       	std	Z+30, r15	; 0x1e
     ea8:	80 85       	ldd	r24, Z+8	; 0x08
     eaa:	88 23       	and	r24, r24
     eac:	31 f0       	breq	.+12     	; 0xeba <xQueueReceive+0x6c>
     eae:	c8 01       	movw	r24, r16
     eb0:	08 96       	adiw	r24, 0x08	; 8
     eb2:	0e 94 a5 10 	call	0x214a	; 0x214a <xTaskRemoveFromEventList>
     eb6:	81 11       	cpse	r24, r1
     eb8:	d7 dc       	rcall	.-1618   	; 0x868 <vPortYield>
     eba:	0f 90       	pop	r0
     ebc:	0f be       	out	0x3f, r0	; 63
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	4d c0       	rjmp	.+154    	; 0xf5c <xQueueReceive+0x10e>
     ec2:	8e 81       	ldd	r24, Y+6	; 0x06
     ec4:	9f 81       	ldd	r25, Y+7	; 0x07
     ec6:	a8 85       	ldd	r26, Y+8	; 0x08
     ec8:	b9 85       	ldd	r27, Y+9	; 0x09
     eca:	89 2b       	or	r24, r25
     ecc:	8a 2b       	or	r24, r26
     ece:	8b 2b       	or	r24, r27
     ed0:	21 f4       	brne	.+8      	; 0xeda <xQueueReceive+0x8c>
     ed2:	0f 90       	pop	r0
     ed4:	0f be       	out	0x3f, r0	; 63
     ed6:	80 e0       	ldi	r24, 0x00	; 0
     ed8:	41 c0       	rjmp	.+130    	; 0xf5c <xQueueReceive+0x10e>
     eda:	e1 10       	cpse	r14, r1
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <xQueueReceive+0x9a>
     ede:	ce 01       	movw	r24, r28
     ee0:	01 96       	adiw	r24, 0x01	; 1
     ee2:	0e 94 6b 11 	call	0x22d6	; 0x22d6 <vTaskInternalSetTimeOutState>
     ee6:	e9 2c       	mov	r14, r9
     ee8:	0f 90       	pop	r0
     eea:	0f be       	out	0x3f, r0	; 63
     eec:	b7 d5       	rcall	.+2926   	; 0x1a5c <vTaskSuspendAll>
     eee:	0f b6       	in	r0, 0x3f	; 63
     ef0:	f8 94       	cli
     ef2:	0f 92       	push	r0
     ef4:	f8 01       	movw	r30, r16
     ef6:	81 a1       	ldd	r24, Z+33	; 0x21
     ef8:	8f 3f       	cpi	r24, 0xFF	; 255
     efa:	09 f4       	brne	.+2      	; 0xefe <xQueueReceive+0xb0>
     efc:	11 a2       	std	Z+33, r1	; 0x21
     efe:	f8 01       	movw	r30, r16
     f00:	82 a1       	ldd	r24, Z+34	; 0x22
     f02:	8f 3f       	cpi	r24, 0xFF	; 255
     f04:	09 f4       	brne	.+2      	; 0xf08 <xQueueReceive+0xba>
     f06:	12 a2       	std	Z+34, r1	; 0x22
     f08:	0f 90       	pop	r0
     f0a:	0f be       	out	0x3f, r0	; 63
     f0c:	be 01       	movw	r22, r28
     f0e:	6a 5f       	subi	r22, 0xFA	; 250
     f10:	7f 4f       	sbci	r23, 0xFF	; 255
     f12:	ce 01       	movw	r24, r28
     f14:	01 96       	adiw	r24, 0x01	; 1
     f16:	0e 94 7c 11 	call	0x22f8	; 0x22f8 <xTaskCheckForTimeOut>
     f1a:	81 11       	cpse	r24, r1
     f1c:	16 c0       	rjmp	.+44     	; 0xf4a <xQueueReceive+0xfc>
     f1e:	c8 01       	movw	r24, r16
     f20:	6b dd       	rcall	.-1322   	; 0x9f8 <prvIsQueueEmpty>
     f22:	88 23       	and	r24, r24
     f24:	71 f0       	breq	.+28     	; 0xf42 <xQueueReceive+0xf4>
     f26:	4e 81       	ldd	r20, Y+6	; 0x06
     f28:	5f 81       	ldd	r21, Y+7	; 0x07
     f2a:	68 85       	ldd	r22, Y+8	; 0x08
     f2c:	79 85       	ldd	r23, Y+9	; 0x09
     f2e:	c6 01       	movw	r24, r12
     f30:	0e 94 4c 10 	call	0x2098	; 0x2098 <vTaskPlaceOnEventList>
     f34:	c8 01       	movw	r24, r16
     f36:	e4 dd       	rcall	.-1080   	; 0xb00 <prvUnlockQueue>
     f38:	d5 d6       	rcall	.+3498   	; 0x1ce4 <xTaskResumeAll>
     f3a:	81 11       	cpse	r24, r1
     f3c:	a8 cf       	rjmp	.-176    	; 0xe8e <xQueueReceive+0x40>
     f3e:	94 dc       	rcall	.-1752   	; 0x868 <vPortYield>
     f40:	a6 cf       	rjmp	.-180    	; 0xe8e <xQueueReceive+0x40>
     f42:	c8 01       	movw	r24, r16
     f44:	dd dd       	rcall	.-1094   	; 0xb00 <prvUnlockQueue>
     f46:	ce d6       	rcall	.+3484   	; 0x1ce4 <xTaskResumeAll>
     f48:	a2 cf       	rjmp	.-188    	; 0xe8e <xQueueReceive+0x40>
     f4a:	c8 01       	movw	r24, r16
     f4c:	d9 dd       	rcall	.-1102   	; 0xb00 <prvUnlockQueue>
     f4e:	ca d6       	rcall	.+3476   	; 0x1ce4 <xTaskResumeAll>
     f50:	c8 01       	movw	r24, r16
     f52:	52 dd       	rcall	.-1372   	; 0x9f8 <prvIsQueueEmpty>
     f54:	88 23       	and	r24, r24
     f56:	09 f4       	brne	.+2      	; 0xf5a <xQueueReceive+0x10c>
     f58:	9a cf       	rjmp	.-204    	; 0xe8e <xQueueReceive+0x40>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	29 96       	adiw	r28, 0x09	; 9
     f5e:	0f b6       	in	r0, 0x3f	; 63
     f60:	f8 94       	cli
     f62:	de bf       	out	0x3e, r29	; 62
     f64:	0f be       	out	0x3f, r0	; 63
     f66:	cd bf       	out	0x3d, r28	; 61
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	1f 91       	pop	r17
     f6e:	0f 91       	pop	r16
     f70:	ff 90       	pop	r15
     f72:	ef 90       	pop	r14
     f74:	df 90       	pop	r13
     f76:	cf 90       	pop	r12
     f78:	bf 90       	pop	r11
     f7a:	af 90       	pop	r10
     f7c:	9f 90       	pop	r9
     f7e:	08 95       	ret

00000f80 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
     f86:	0f b6       	in	r0, 0x3f	; 63
     f88:	f8 94       	cli
     f8a:	0f 92       	push	r0
     f8c:	89 a1       	ldd	r24, Y+33	; 0x21
     f8e:	8f 3f       	cpi	r24, 0xFF	; 255
     f90:	09 f4       	brne	.+2      	; 0xf94 <vQueueWaitForMessageRestricted+0x14>
     f92:	19 a2       	std	Y+33, r1	; 0x21
     f94:	8a a1       	ldd	r24, Y+34	; 0x22
     f96:	8f 3f       	cpi	r24, 0xFF	; 255
     f98:	09 f4       	brne	.+2      	; 0xf9c <vQueueWaitForMessageRestricted+0x1c>
     f9a:	1a a2       	std	Y+34, r1	; 0x22
     f9c:	0f 90       	pop	r0
     f9e:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
     fa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fa2:	81 11       	cpse	r24, r1
     fa4:	04 c0       	rjmp	.+8      	; 0xfae <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
     fa6:	ce 01       	movw	r24, r28
     fa8:	43 96       	adiw	r24, 0x13	; 19
     faa:	0e 94 63 10 	call	0x20c6	; 0x20c6 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
     fae:	ce 01       	movw	r24, r28
     fb0:	a7 dd       	rcall	.-1202   	; 0xb00 <prvUnlockQueue>
    }
     fb2:	df 91       	pop	r29
     fb4:	cf 91       	pop	r28
     fb6:	08 95       	ret

00000fb8 <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
     fb8:	fc 01       	movw	r30, r24
     fba:	44 81       	ldd	r20, Z+4	; 0x04
     fbc:	55 81       	ldd	r21, Z+5	; 0x05
     fbe:	22 81       	ldd	r18, Z+2	; 0x02
     fc0:	33 81       	ldd	r19, Z+3	; 0x03
     fc2:	24 0f       	add	r18, r20
     fc4:	35 1f       	adc	r19, r21
     fc6:	80 81       	ld	r24, Z
     fc8:	91 81       	ldd	r25, Z+1	; 0x01
     fca:	b9 01       	movw	r22, r18
     fcc:	68 1b       	sub	r22, r24
     fce:	79 0b       	sbc	r23, r25
     fd0:	cb 01       	movw	r24, r22
     fd2:	64 17       	cp	r22, r20
     fd4:	75 07       	cpc	r23, r21
     fd6:	10 f0       	brcs	.+4      	; 0xfdc <prvBytesInBuffer+0x24>
     fd8:	84 1b       	sub	r24, r20
     fda:	95 0b       	sbc	r25, r21
     fdc:	08 95       	ret

00000fde <prvWriteBytesToBuffer>:
     fde:	af 92       	push	r10
     fe0:	bf 92       	push	r11
     fe2:	cf 92       	push	r12
     fe4:	df 92       	push	r13
     fe6:	ef 92       	push	r14
     fe8:	ff 92       	push	r15
     fea:	0f 93       	push	r16
     fec:	1f 93       	push	r17
     fee:	cf 93       	push	r28
     ff0:	df 93       	push	r29
     ff2:	6c 01       	movw	r12, r24
     ff4:	5b 01       	movw	r10, r22
     ff6:	7a 01       	movw	r14, r20
     ff8:	fc 01       	movw	r30, r24
     ffa:	c2 81       	ldd	r28, Z+2	; 0x02
     ffc:	d3 81       	ldd	r29, Z+3	; 0x03
     ffe:	04 81       	ldd	r16, Z+4	; 0x04
    1000:	15 81       	ldd	r17, Z+5	; 0x05
    1002:	0c 1b       	sub	r16, r28
    1004:	1d 0b       	sbc	r17, r29
    1006:	40 17       	cp	r20, r16
    1008:	51 07       	cpc	r21, r17
    100a:	08 f4       	brcc	.+2      	; 0x100e <prvWriteBytesToBuffer+0x30>
    100c:	8a 01       	movw	r16, r20
    100e:	f6 01       	movw	r30, r12
    1010:	84 85       	ldd	r24, Z+12	; 0x0c
    1012:	95 85       	ldd	r25, Z+13	; 0x0d
    1014:	a8 01       	movw	r20, r16
    1016:	b5 01       	movw	r22, r10
    1018:	8c 0f       	add	r24, r28
    101a:	9d 1f       	adc	r25, r29
    101c:	0e 94 dd 25 	call	0x4bba	; 0x4bba <memcpy>
    1020:	0e 15       	cp	r16, r14
    1022:	1f 05       	cpc	r17, r15
    1024:	58 f4       	brcc	.+22     	; 0x103c <prvWriteBytesToBuffer+0x5e>
    1026:	a7 01       	movw	r20, r14
    1028:	40 1b       	sub	r20, r16
    102a:	51 0b       	sbc	r21, r17
    102c:	b5 01       	movw	r22, r10
    102e:	60 0f       	add	r22, r16
    1030:	71 1f       	adc	r23, r17
    1032:	f6 01       	movw	r30, r12
    1034:	84 85       	ldd	r24, Z+12	; 0x0c
    1036:	95 85       	ldd	r25, Z+13	; 0x0d
    1038:	0e 94 dd 25 	call	0x4bba	; 0x4bba <memcpy>
    103c:	ce 01       	movw	r24, r28
    103e:	8e 0d       	add	r24, r14
    1040:	9f 1d       	adc	r25, r15
    1042:	f6 01       	movw	r30, r12
    1044:	24 81       	ldd	r18, Z+4	; 0x04
    1046:	35 81       	ldd	r19, Z+5	; 0x05
    1048:	82 17       	cp	r24, r18
    104a:	93 07       	cpc	r25, r19
    104c:	10 f0       	brcs	.+4      	; 0x1052 <prvWriteBytesToBuffer+0x74>
    104e:	82 1b       	sub	r24, r18
    1050:	93 0b       	sbc	r25, r19
    1052:	f6 01       	movw	r30, r12
    1054:	93 83       	std	Z+3, r25	; 0x03
    1056:	82 83       	std	Z+2, r24	; 0x02
    1058:	c7 01       	movw	r24, r14
    105a:	df 91       	pop	r29
    105c:	cf 91       	pop	r28
    105e:	1f 91       	pop	r17
    1060:	0f 91       	pop	r16
    1062:	ff 90       	pop	r15
    1064:	ef 90       	pop	r14
    1066:	df 90       	pop	r13
    1068:	cf 90       	pop	r12
    106a:	bf 90       	pop	r11
    106c:	af 90       	pop	r10
    106e:	08 95       	ret

00001070 <prvWriteMessageToBuffer>:
    1070:	cf 92       	push	r12
    1072:	df 92       	push	r13
    1074:	ef 92       	push	r14
    1076:	ff 92       	push	r15
    1078:	0f 93       	push	r16
    107a:	1f 93       	push	r17
    107c:	cf 93       	push	r28
    107e:	df 93       	push	r29
    1080:	1f 92       	push	r1
    1082:	1f 92       	push	r1
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	5a 83       	std	Y+2, r21	; 0x02
    108a:	49 83       	std	Y+1, r20	; 0x01
    108c:	21 15       	cp	r18, r1
    108e:	31 05       	cpc	r19, r1
    1090:	c9 f0       	breq	.+50     	; 0x10c4 <prvWriteMessageToBuffer+0x54>
    1092:	6b 01       	movw	r12, r22
    1094:	7c 01       	movw	r14, r24
    1096:	fc 01       	movw	r30, r24
    1098:	86 85       	ldd	r24, Z+14	; 0x0e
    109a:	80 fd       	sbrc	r24, 0
    109c:	08 c0       	rjmp	.+16     	; 0x10ae <prvWriteMessageToBuffer+0x3e>
    109e:	ca 01       	movw	r24, r20
    10a0:	24 17       	cp	r18, r20
    10a2:	35 07       	cpc	r19, r21
    10a4:	08 f4       	brcc	.+2      	; 0x10a8 <prvWriteMessageToBuffer+0x38>
    10a6:	c9 01       	movw	r24, r18
    10a8:	9a 83       	std	Y+2, r25	; 0x02
    10aa:	89 83       	std	Y+1, r24	; 0x01
    10ac:	11 c0       	rjmp	.+34     	; 0x10d0 <prvWriteMessageToBuffer+0x60>
    10ae:	20 17       	cp	r18, r16
    10b0:	31 07       	cpc	r19, r17
    10b2:	58 f0       	brcs	.+22     	; 0x10ca <prvWriteMessageToBuffer+0x5a>
    10b4:	42 e0       	ldi	r20, 0x02	; 2
    10b6:	50 e0       	ldi	r21, 0x00	; 0
    10b8:	be 01       	movw	r22, r28
    10ba:	6f 5f       	subi	r22, 0xFF	; 255
    10bc:	7f 4f       	sbci	r23, 0xFF	; 255
    10be:	c7 01       	movw	r24, r14
    10c0:	8e df       	rcall	.-228    	; 0xfde <prvWriteBytesToBuffer>
    10c2:	06 c0       	rjmp	.+12     	; 0x10d0 <prvWriteMessageToBuffer+0x60>
    10c4:	80 e0       	ldi	r24, 0x00	; 0
    10c6:	90 e0       	ldi	r25, 0x00	; 0
    10c8:	08 c0       	rjmp	.+16     	; 0x10da <prvWriteMessageToBuffer+0x6a>
    10ca:	80 e0       	ldi	r24, 0x00	; 0
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	05 c0       	rjmp	.+10     	; 0x10da <prvWriteMessageToBuffer+0x6a>
    10d0:	49 81       	ldd	r20, Y+1	; 0x01
    10d2:	5a 81       	ldd	r21, Y+2	; 0x02
    10d4:	b6 01       	movw	r22, r12
    10d6:	c7 01       	movw	r24, r14
    10d8:	82 df       	rcall	.-252    	; 0xfde <prvWriteBytesToBuffer>
    10da:	0f 90       	pop	r0
    10dc:	0f 90       	pop	r0
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	1f 91       	pop	r17
    10e4:	0f 91       	pop	r16
    10e6:	ff 90       	pop	r15
    10e8:	ef 90       	pop	r14
    10ea:	df 90       	pop	r13
    10ec:	cf 90       	pop	r12
    10ee:	08 95       	ret

000010f0 <prvReadBytesFromBuffer>:
    10f0:	af 92       	push	r10
    10f2:	bf 92       	push	r11
    10f4:	cf 92       	push	r12
    10f6:	df 92       	push	r13
    10f8:	ef 92       	push	r14
    10fa:	ff 92       	push	r15
    10fc:	0f 93       	push	r16
    10fe:	1f 93       	push	r17
    1100:	cf 93       	push	r28
    1102:	df 93       	push	r29
    1104:	7c 01       	movw	r14, r24
    1106:	5b 01       	movw	r10, r22
    1108:	e9 01       	movw	r28, r18
    110a:	42 17       	cp	r20, r18
    110c:	53 07       	cpc	r21, r19
    110e:	08 f4       	brcc	.+2      	; 0x1112 <prvReadBytesFromBuffer+0x22>
    1110:	ea 01       	movw	r28, r20
    1112:	20 97       	sbiw	r28, 0x00	; 0
    1114:	79 f1       	breq	.+94     	; 0x1174 <prvReadBytesFromBuffer+0x84>
    1116:	f7 01       	movw	r30, r14
    1118:	00 81       	ld	r16, Z
    111a:	11 81       	ldd	r17, Z+1	; 0x01
    111c:	c4 80       	ldd	r12, Z+4	; 0x04
    111e:	d5 80       	ldd	r13, Z+5	; 0x05
    1120:	c0 1a       	sub	r12, r16
    1122:	d1 0a       	sbc	r13, r17
    1124:	cc 15       	cp	r28, r12
    1126:	dd 05       	cpc	r29, r13
    1128:	08 f4       	brcc	.+2      	; 0x112c <prvReadBytesFromBuffer+0x3c>
    112a:	6e 01       	movw	r12, r28
    112c:	f7 01       	movw	r30, r14
    112e:	64 85       	ldd	r22, Z+12	; 0x0c
    1130:	75 85       	ldd	r23, Z+13	; 0x0d
    1132:	60 0f       	add	r22, r16
    1134:	71 1f       	adc	r23, r17
    1136:	a6 01       	movw	r20, r12
    1138:	c5 01       	movw	r24, r10
    113a:	0e 94 dd 25 	call	0x4bba	; 0x4bba <memcpy>
    113e:	cc 16       	cp	r12, r28
    1140:	dd 06       	cpc	r13, r29
    1142:	58 f4       	brcc	.+22     	; 0x115a <prvReadBytesFromBuffer+0x6a>
    1144:	ae 01       	movw	r20, r28
    1146:	4c 19       	sub	r20, r12
    1148:	5d 09       	sbc	r21, r13
    114a:	f7 01       	movw	r30, r14
    114c:	64 85       	ldd	r22, Z+12	; 0x0c
    114e:	75 85       	ldd	r23, Z+13	; 0x0d
    1150:	c5 01       	movw	r24, r10
    1152:	8c 0d       	add	r24, r12
    1154:	9d 1d       	adc	r25, r13
    1156:	0e 94 dd 25 	call	0x4bba	; 0x4bba <memcpy>
    115a:	0c 0f       	add	r16, r28
    115c:	1d 1f       	adc	r17, r29
    115e:	f7 01       	movw	r30, r14
    1160:	84 81       	ldd	r24, Z+4	; 0x04
    1162:	95 81       	ldd	r25, Z+5	; 0x05
    1164:	08 17       	cp	r16, r24
    1166:	19 07       	cpc	r17, r25
    1168:	10 f0       	brcs	.+4      	; 0x116e <prvReadBytesFromBuffer+0x7e>
    116a:	08 1b       	sub	r16, r24
    116c:	19 0b       	sbc	r17, r25
    116e:	f7 01       	movw	r30, r14
    1170:	11 83       	std	Z+1, r17	; 0x01
    1172:	00 83       	st	Z, r16
    1174:	ce 01       	movw	r24, r28
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	df 90       	pop	r13
    1184:	cf 90       	pop	r12
    1186:	bf 90       	pop	r11
    1188:	af 90       	pop	r10
    118a:	08 95       	ret

0000118c <xStreamBufferGenericCreate>:
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	8b 01       	movw	r16, r22
    1198:	ff 24       	eor	r15, r15
    119a:	f3 94       	inc	r15
    119c:	41 30       	cpi	r20, 0x01	; 1
    119e:	09 f0       	breq	.+2      	; 0x11a2 <xStreamBufferGenericCreate+0x16>
    11a0:	f1 2c       	mov	r15, r1
    11a2:	01 15       	cp	r16, r1
    11a4:	11 05       	cpc	r17, r1
    11a6:	11 f4       	brne	.+4      	; 0x11ac <xStreamBufferGenericCreate+0x20>
    11a8:	01 e0       	ldi	r16, 0x01	; 1
    11aa:	10 e0       	ldi	r17, 0x00	; 0
    11ac:	9c 01       	movw	r18, r24
    11ae:	20 5f       	subi	r18, 0xF0	; 240
    11b0:	3f 4f       	sbci	r19, 0xFF	; 255
    11b2:	82 17       	cp	r24, r18
    11b4:	93 07       	cpc	r25, r19
    11b6:	b0 f4       	brcc	.+44     	; 0x11e4 <xStreamBufferGenericCreate+0x58>
    11b8:	ec 01       	movw	r28, r24
    11ba:	21 96       	adiw	r28, 0x01	; 1
    11bc:	c9 01       	movw	r24, r18
    11be:	86 d9       	rcall	.-3316   	; 0x4cc <pvPortMalloc>
    11c0:	fc 01       	movw	r30, r24
    11c2:	89 2b       	or	r24, r25
    11c4:	89 f0       	breq	.+34     	; 0x11e8 <xStreamBufferGenericCreate+0x5c>
    11c6:	8f e0       	ldi	r24, 0x0F	; 15
    11c8:	df 01       	movw	r26, r30
    11ca:	1d 92       	st	X+, r1
    11cc:	8a 95       	dec	r24
    11ce:	e9 f7       	brne	.-6      	; 0x11ca <xStreamBufferGenericCreate+0x3e>
    11d0:	cf 01       	movw	r24, r30
    11d2:	0f 96       	adiw	r24, 0x0f	; 15
    11d4:	95 87       	std	Z+13, r25	; 0x0d
    11d6:	84 87       	std	Z+12, r24	; 0x0c
    11d8:	d5 83       	std	Z+5, r29	; 0x05
    11da:	c4 83       	std	Z+4, r28	; 0x04
    11dc:	17 83       	std	Z+7, r17	; 0x07
    11de:	06 83       	std	Z+6, r16	; 0x06
    11e0:	f6 86       	std	Z+14, r15	; 0x0e
    11e2:	02 c0       	rjmp	.+4      	; 0x11e8 <xStreamBufferGenericCreate+0x5c>
    11e4:	e0 e0       	ldi	r30, 0x00	; 0
    11e6:	f0 e0       	ldi	r31, 0x00	; 0
    11e8:	cf 01       	movw	r24, r30
    11ea:	df 91       	pop	r29
    11ec:	cf 91       	pop	r28
    11ee:	1f 91       	pop	r17
    11f0:	0f 91       	pop	r16
    11f2:	ff 90       	pop	r15
    11f4:	08 95       	ret

000011f6 <xStreamBufferReset>:
    11f6:	0f b6       	in	r0, 0x3f	; 63
    11f8:	f8 94       	cli
    11fa:	0f 92       	push	r0
    11fc:	dc 01       	movw	r26, r24
    11fe:	18 96       	adiw	r26, 0x08	; 8
    1200:	2d 91       	ld	r18, X+
    1202:	3c 91       	ld	r19, X
    1204:	19 97       	sbiw	r26, 0x09	; 9
    1206:	23 2b       	or	r18, r19
    1208:	51 f5       	brne	.+84     	; 0x125e <xStreamBufferReset+0x68>
    120a:	1a 96       	adiw	r26, 0x0a	; 10
    120c:	2d 91       	ld	r18, X+
    120e:	3c 91       	ld	r19, X
    1210:	1b 97       	sbiw	r26, 0x0b	; 11
    1212:	23 2b       	or	r18, r19
    1214:	31 f5       	brne	.+76     	; 0x1262 <xStreamBufferReset+0x6c>
    1216:	1e 96       	adiw	r26, 0x0e	; 14
    1218:	2c 91       	ld	r18, X
    121a:	1e 97       	sbiw	r26, 0x0e	; 14
    121c:	16 96       	adiw	r26, 0x06	; 6
    121e:	4d 91       	ld	r20, X+
    1220:	5c 91       	ld	r21, X
    1222:	17 97       	sbiw	r26, 0x07	; 7
    1224:	14 96       	adiw	r26, 0x04	; 4
    1226:	6d 91       	ld	r22, X+
    1228:	7c 91       	ld	r23, X
    122a:	15 97       	sbiw	r26, 0x05	; 5
    122c:	1c 96       	adiw	r26, 0x0c	; 12
    122e:	ed 91       	ld	r30, X+
    1230:	fc 91       	ld	r31, X
    1232:	1d 97       	sbiw	r26, 0x0d	; 13
    1234:	3f e0       	ldi	r19, 0x0F	; 15
    1236:	1d 92       	st	X+, r1
    1238:	3a 95       	dec	r19
    123a:	e9 f7       	brne	.-6      	; 0x1236 <xStreamBufferReset+0x40>
    123c:	dc 01       	movw	r26, r24
    123e:	1d 96       	adiw	r26, 0x0d	; 13
    1240:	fc 93       	st	X, r31
    1242:	ee 93       	st	-X, r30
    1244:	1c 97       	sbiw	r26, 0x0c	; 12
    1246:	15 96       	adiw	r26, 0x05	; 5
    1248:	7c 93       	st	X, r23
    124a:	6e 93       	st	-X, r22
    124c:	14 97       	sbiw	r26, 0x04	; 4
    124e:	17 96       	adiw	r26, 0x07	; 7
    1250:	5c 93       	st	X, r21
    1252:	4e 93       	st	-X, r20
    1254:	16 97       	sbiw	r26, 0x06	; 6
    1256:	1e 96       	adiw	r26, 0x0e	; 14
    1258:	2c 93       	st	X, r18
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	03 c0       	rjmp	.+6      	; 0x1264 <xStreamBufferReset+0x6e>
    125e:	80 e0       	ldi	r24, 0x00	; 0
    1260:	01 c0       	rjmp	.+2      	; 0x1264 <xStreamBufferReset+0x6e>
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	0f 90       	pop	r0
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	08 95       	ret

0000126a <xStreamBufferSpacesAvailable>:
    126a:	fc 01       	movw	r30, r24
    126c:	24 81       	ldd	r18, Z+4	; 0x04
    126e:	35 81       	ldd	r19, Z+5	; 0x05
    1270:	80 81       	ld	r24, Z
    1272:	91 81       	ldd	r25, Z+1	; 0x01
    1274:	42 81       	ldd	r20, Z+2	; 0x02
    1276:	53 81       	ldd	r21, Z+3	; 0x03
    1278:	82 0f       	add	r24, r18
    127a:	93 1f       	adc	r25, r19
    127c:	01 97       	sbiw	r24, 0x01	; 1
    127e:	84 1b       	sub	r24, r20
    1280:	95 0b       	sbc	r25, r21
    1282:	82 17       	cp	r24, r18
    1284:	93 07       	cpc	r25, r19
    1286:	10 f0       	brcs	.+4      	; 0x128c <xStreamBufferSpacesAvailable+0x22>
    1288:	82 1b       	sub	r24, r18
    128a:	93 0b       	sbc	r25, r19
    128c:	08 95       	ret

0000128e <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    128e:	2f 92       	push	r2
    1290:	3f 92       	push	r3
    1292:	4f 92       	push	r4
    1294:	5f 92       	push	r5
    1296:	6f 92       	push	r6
    1298:	7f 92       	push	r7
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	cd b7       	in	r28, 0x3d	; 61
    12b4:	de b7       	in	r29, 0x3e	; 62
    12b6:	2b 97       	sbiw	r28, 0x0b	; 11
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	4c 01       	movw	r8, r24
    12c4:	7b 87       	std	Y+11, r23	; 0x0b
    12c6:	6a 87       	std	Y+10, r22	; 0x0a
    12c8:	1a 01       	movw	r2, r20
    12ca:	0e 83       	std	Y+6, r16	; 0x06
    12cc:	1f 83       	std	Y+7, r17	; 0x07
    12ce:	28 87       	std	Y+8, r18	; 0x08
    12d0:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    12d2:	fc 01       	movw	r30, r24
    12d4:	84 81       	ldd	r24, Z+4	; 0x04
    12d6:	95 81       	ldd	r25, Z+5	; 0x05
    12d8:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    12da:	26 85       	ldd	r18, Z+14	; 0x0e
    12dc:	20 ff       	sbrs	r18, 0
    12de:	0c c0       	rjmp	.+24     	; 0x12f8 <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    12e0:	2a 01       	movw	r4, r20
    12e2:	f2 e0       	ldi	r31, 0x02	; 2
    12e4:	4f 0e       	add	r4, r31
    12e6:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    12e8:	84 15       	cp	r24, r4
    12ea:	95 05       	cpc	r25, r5
    12ec:	50 f4       	brcc	.+20     	; 0x1302 <xStreamBufferSend+0x74>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    12ee:	1e 82       	std	Y+6, r1	; 0x06
    12f0:	1f 82       	std	Y+7, r1	; 0x07
    12f2:	18 86       	std	Y+8, r1	; 0x08
    12f4:	19 86       	std	Y+9, r1	; 0x09
    12f6:	46 c0       	rjmp	.+140    	; 0x1384 <xStreamBufferSend+0xf6>
    12f8:	2a 01       	movw	r4, r20
    12fa:	84 17       	cp	r24, r20
    12fc:	95 07       	cpc	r25, r21
    12fe:	08 f4       	brcc	.+2      	; 0x1302 <xStreamBufferSend+0x74>
    1300:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1302:	8e 81       	ldd	r24, Y+6	; 0x06
    1304:	9f 81       	ldd	r25, Y+7	; 0x07
    1306:	a8 85       	ldd	r26, Y+8	; 0x08
    1308:	b9 85       	ldd	r27, Y+9	; 0x09
    130a:	89 2b       	or	r24, r25
    130c:	8a 2b       	or	r24, r26
    130e:	8b 2b       	or	r24, r27
    1310:	09 f4       	brne	.+2      	; 0x1314 <xStreamBufferSend+0x86>
    1312:	38 c0       	rjmp	.+112    	; 0x1384 <xStreamBufferSend+0xf6>
    {
        vTaskSetTimeOutState( &xTimeOut );
    1314:	ce 01       	movw	r24, r28
    1316:	01 96       	adiw	r24, 0x01	; 1
    1318:	c8 d7       	rcall	.+3984   	; 0x22aa <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    131a:	0f b6       	in	r0, 0x3f	; 63
    131c:	f8 94       	cli
    131e:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1320:	c4 01       	movw	r24, r8
    1322:	a3 df       	rcall	.-186    	; 0x126a <xStreamBufferSpacesAvailable>
    1324:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    1326:	84 15       	cp	r24, r4
    1328:	95 05       	cpc	r25, r5
    132a:	38 f5       	brcc	.+78     	; 0x137a <xStreamBufferSend+0xec>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	80 e0       	ldi	r24, 0x00	; 0
    1330:	90 e0       	ldi	r25, 0x00	; 0
    1332:	0e 94 00 15 	call	0x2a00	; 0x2a00 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    1336:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <xTaskGetCurrentTaskHandle>
    133a:	f4 01       	movw	r30, r8
    133c:	93 87       	std	Z+11, r25	; 0x0b
    133e:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    1340:	0f 90       	pop	r0
    1342:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1344:	ae 80       	ldd	r10, Y+6	; 0x06
    1346:	bf 80       	ldd	r11, Y+7	; 0x07
    1348:	c8 84       	ldd	r12, Y+8	; 0x08
    134a:	d9 84       	ldd	r13, Y+9	; 0x09
    134c:	e1 2c       	mov	r14, r1
    134e:	f1 2c       	mov	r15, r1
    1350:	00 e0       	ldi	r16, 0x00	; 0
    1352:	10 e0       	ldi	r17, 0x00	; 0
    1354:	98 01       	movw	r18, r16
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	50 e0       	ldi	r21, 0x00	; 0
    135a:	ba 01       	movw	r22, r20
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	0e 94 47 12 	call	0x248e	; 0x248e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1362:	f4 01       	movw	r30, r8
    1364:	13 86       	std	Z+11, r1	; 0x0b
    1366:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    1368:	be 01       	movw	r22, r28
    136a:	6a 5f       	subi	r22, 0xFA	; 250
    136c:	7f 4f       	sbci	r23, 0xFF	; 255
    136e:	ce 01       	movw	r24, r28
    1370:	01 96       	adiw	r24, 0x01	; 1
    1372:	c2 d7       	rcall	.+3972   	; 0x22f8 <xTaskCheckForTimeOut>
    1374:	88 23       	and	r24, r24
    1376:	89 f2       	breq	.-94     	; 0x131a <xStreamBufferSend+0x8c>
    1378:	02 c0       	rjmp	.+4      	; 0x137e <xStreamBufferSend+0xf0>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    137a:	0f 90       	pop	r0
    137c:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    137e:	61 14       	cp	r6, r1
    1380:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1382:	19 f4       	brne	.+6      	; 0x138a <xStreamBufferSend+0xfc>
    1384:	c4 01       	movw	r24, r8
    1386:	71 df       	rcall	.-286    	; 0x126a <xStreamBufferSpacesAvailable>
    1388:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    138a:	82 01       	movw	r16, r4
    138c:	93 01       	movw	r18, r6
    138e:	a1 01       	movw	r20, r2
    1390:	6a 85       	ldd	r22, Y+10	; 0x0a
    1392:	7b 85       	ldd	r23, Y+11	; 0x0b
    1394:	c4 01       	movw	r24, r8
    1396:	6c de       	rcall	.-808    	; 0x1070 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    1398:	6c 01       	movw	r12, r24
    139a:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    139c:	e9 f0       	breq	.+58     	; 0x13d8 <xStreamBufferSend+0x14a>
    139e:	c4 01       	movw	r24, r8
    13a0:	0b de       	rcall	.-1002   	; 0xfb8 <prvBytesInBuffer>
    13a2:	f4 01       	movw	r30, r8
    13a4:	26 81       	ldd	r18, Z+6	; 0x06
    13a6:	37 81       	ldd	r19, Z+7	; 0x07
    13a8:	82 17       	cp	r24, r18
    13aa:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    13ac:	a8 f0       	brcs	.+42     	; 0x13d8 <xStreamBufferSend+0x14a>
    13ae:	56 d3       	rcall	.+1708   	; 0x1a5c <vTaskSuspendAll>
    13b0:	f4 01       	movw	r30, r8
    13b2:	80 85       	ldd	r24, Z+8	; 0x08
    13b4:	91 85       	ldd	r25, Z+9	; 0x09
    13b6:	89 2b       	or	r24, r25
    13b8:	71 f0       	breq	.+28     	; 0x13d6 <xStreamBufferSend+0x148>
    13ba:	80 85       	ldd	r24, Z+8	; 0x08
    13bc:	91 85       	ldd	r25, Z+9	; 0x09
    13be:	e1 2c       	mov	r14, r1
    13c0:	f1 2c       	mov	r15, r1
    13c2:	00 e0       	ldi	r16, 0x00	; 0
    13c4:	20 e0       	ldi	r18, 0x00	; 0
    13c6:	30 e0       	ldi	r19, 0x00	; 0
    13c8:	a9 01       	movw	r20, r18
    13ca:	60 e0       	ldi	r22, 0x00	; 0
    13cc:	0e 94 ee 12 	call	0x25dc	; 0x25dc <xTaskGenericNotify>
    13d0:	f4 01       	movw	r30, r8
    13d2:	11 86       	std	Z+9, r1	; 0x09
    13d4:	10 86       	std	Z+8, r1	; 0x08
    13d6:	86 d4       	rcall	.+2316   	; 0x1ce4 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    13d8:	c6 01       	movw	r24, r12
    13da:	2b 96       	adiw	r28, 0x0b	; 11
    13dc:	0f b6       	in	r0, 0x3f	; 63
    13de:	f8 94       	cli
    13e0:	de bf       	out	0x3e, r29	; 62
    13e2:	0f be       	out	0x3f, r0	; 63
    13e4:	cd bf       	out	0x3d, r28	; 61
    13e6:	df 91       	pop	r29
    13e8:	cf 91       	pop	r28
    13ea:	1f 91       	pop	r17
    13ec:	0f 91       	pop	r16
    13ee:	ff 90       	pop	r15
    13f0:	ef 90       	pop	r14
    13f2:	df 90       	pop	r13
    13f4:	cf 90       	pop	r12
    13f6:	bf 90       	pop	r11
    13f8:	af 90       	pop	r10
    13fa:	9f 90       	pop	r9
    13fc:	8f 90       	pop	r8
    13fe:	7f 90       	pop	r7
    1400:	6f 90       	pop	r6
    1402:	5f 90       	pop	r5
    1404:	4f 90       	pop	r4
    1406:	3f 90       	pop	r3
    1408:	2f 90       	pop	r2
    140a:	08 95       	ret

0000140c <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    140c:	af 92       	push	r10
    140e:	bf 92       	push	r11
    1410:	cf 92       	push	r12
    1412:	df 92       	push	r13
    1414:	ef 92       	push	r14
    1416:	ff 92       	push	r15
    1418:	0f 93       	push	r16
    141a:	1f 93       	push	r17
    141c:	cf 93       	push	r28
    141e:	df 93       	push	r29
    1420:	ec 01       	movw	r28, r24
    1422:	7b 01       	movw	r14, r22
    1424:	5a 01       	movw	r10, r20
    1426:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    1428:	8e 85       	ldd	r24, Y+14	; 0x0e
    142a:	80 ff       	sbrs	r24, 0
    142c:	04 c0       	rjmp	.+8      	; 0x1436 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    142e:	8a 01       	movw	r16, r20
    1430:	0e 5f       	subi	r16, 0xFE	; 254
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	01 c0       	rjmp	.+2      	; 0x1438 <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    1436:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1438:	ce 01       	movw	r24, r28
    143a:	17 df       	rcall	.-466    	; 0x126a <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    143c:	9c 01       	movw	r18, r24
    143e:	a5 01       	movw	r20, r10
    1440:	b7 01       	movw	r22, r14
    1442:	ce 01       	movw	r24, r28
    1444:	15 de       	rcall	.-982    	; 0x1070 <prvWriteMessageToBuffer>
    1446:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    1448:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    144a:	c1 f0       	breq	.+48     	; 0x147c <xStreamBufferSendFromISR+0x70>
    144c:	ce 01       	movw	r24, r28
    144e:	b4 dd       	rcall	.-1176   	; 0xfb8 <prvBytesInBuffer>
    1450:	2e 81       	ldd	r18, Y+6	; 0x06
    1452:	3f 81       	ldd	r19, Y+7	; 0x07
    1454:	82 17       	cp	r24, r18
    1456:	93 07       	cpc	r25, r19
    1458:	88 f0       	brcs	.+34     	; 0x147c <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    145a:	88 85       	ldd	r24, Y+8	; 0x08
    145c:	99 85       	ldd	r25, Y+9	; 0x09
    145e:	89 2b       	or	r24, r25
    1460:	69 f0       	breq	.+26     	; 0x147c <xStreamBufferSendFromISR+0x70>
    1462:	88 85       	ldd	r24, Y+8	; 0x08
    1464:	99 85       	ldd	r25, Y+9	; 0x09
    1466:	e1 2c       	mov	r14, r1
    1468:	f1 2c       	mov	r15, r1
    146a:	00 e0       	ldi	r16, 0x00	; 0
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	a9 01       	movw	r20, r18
    1472:	60 e0       	ldi	r22, 0x00	; 0
    1474:	0e 94 e2 13 	call	0x27c4	; 0x27c4 <xTaskGenericNotifyFromISR>
    1478:	19 86       	std	Y+9, r1	; 0x09
    147a:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    147c:	c5 01       	movw	r24, r10
    147e:	df 91       	pop	r29
    1480:	cf 91       	pop	r28
    1482:	1f 91       	pop	r17
    1484:	0f 91       	pop	r16
    1486:	ff 90       	pop	r15
    1488:	ef 90       	pop	r14
    148a:	df 90       	pop	r13
    148c:	cf 90       	pop	r12
    148e:	bf 90       	pop	r11
    1490:	af 90       	pop	r10
    1492:	08 95       	ret

00001494 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1494:	2f 92       	push	r2
    1496:	3f 92       	push	r3
    1498:	4f 92       	push	r4
    149a:	5f 92       	push	r5
    149c:	6f 92       	push	r6
    149e:	7f 92       	push	r7
    14a0:	8f 92       	push	r8
    14a2:	9f 92       	push	r9
    14a4:	af 92       	push	r10
    14a6:	bf 92       	push	r11
    14a8:	cf 92       	push	r12
    14aa:	df 92       	push	r13
    14ac:	ef 92       	push	r14
    14ae:	ff 92       	push	r15
    14b0:	0f 93       	push	r16
    14b2:	1f 93       	push	r17
    14b4:	cf 93       	push	r28
    14b6:	df 93       	push	r29
    14b8:	1f 92       	push	r1
    14ba:	1f 92       	push	r1
    14bc:	cd b7       	in	r28, 0x3d	; 61
    14be:	de b7       	in	r29, 0x3e	; 62
    14c0:	4c 01       	movw	r8, r24
    14c2:	1b 01       	movw	r2, r22
    14c4:	2a 01       	movw	r4, r20
    14c6:	58 01       	movw	r10, r16
    14c8:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    14ca:	fc 01       	movw	r30, r24
    14cc:	86 85       	ldd	r24, Z+14	; 0x0e
    14ce:	80 fd       	sbrc	r24, 0
    14d0:	03 c0       	rjmp	.+6      	; 0x14d8 <xStreamBufferReceive+0x44>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    14d2:	61 2c       	mov	r6, r1
    14d4:	71 2c       	mov	r7, r1
    14d6:	04 c0       	rjmp	.+8      	; 0x14e0 <xStreamBufferReceive+0x4c>
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    14d8:	68 94       	set
    14da:	66 24       	eor	r6, r6
    14dc:	61 f8       	bld	r6, 1
    14de:	71 2c       	mov	r7, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    14e0:	a1 14       	cp	r10, r1
    14e2:	b1 04       	cpc	r11, r1
    14e4:	c1 04       	cpc	r12, r1
    14e6:	d1 04       	cpc	r13, r1
    14e8:	41 f1       	breq	.+80     	; 0x153a <xStreamBufferReceive+0xa6>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    14ea:	0f b6       	in	r0, 0x3f	; 63
    14ec:	f8 94       	cli
    14ee:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    14f0:	c4 01       	movw	r24, r8
    14f2:	62 dd       	rcall	.-1340   	; 0xfb8 <prvBytesInBuffer>
    14f4:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    14f6:	68 16       	cp	r6, r24
    14f8:	79 06       	cpc	r7, r25
    14fa:	48 f0       	brcs	.+18     	; 0x150e <xStreamBufferReceive+0x7a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    14fc:	60 e0       	ldi	r22, 0x00	; 0
    14fe:	80 e0       	ldi	r24, 0x00	; 0
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	0e 94 00 15 	call	0x2a00	; 0x2a00 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    1506:	55 d7       	rcall	.+3754   	; 0x23b2 <xTaskGetCurrentTaskHandle>
    1508:	f4 01       	movw	r30, r8
    150a:	91 87       	std	Z+9, r25	; 0x09
    150c:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    150e:	0f 90       	pop	r0
    1510:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    1512:	60 16       	cp	r6, r16
    1514:	71 06       	cpc	r7, r17
    1516:	b8 f0       	brcs	.+46     	; 0x1546 <xStreamBufferReceive+0xb2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    1518:	e1 2c       	mov	r14, r1
    151a:	f1 2c       	mov	r15, r1
    151c:	00 e0       	ldi	r16, 0x00	; 0
    151e:	10 e0       	ldi	r17, 0x00	; 0
    1520:	98 01       	movw	r18, r16
    1522:	40 e0       	ldi	r20, 0x00	; 0
    1524:	50 e0       	ldi	r21, 0x00	; 0
    1526:	ba 01       	movw	r22, r20
    1528:	80 e0       	ldi	r24, 0x00	; 0
    152a:	b1 d7       	rcall	.+3938   	; 0x248e <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    152c:	f4 01       	movw	r30, r8
    152e:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1530:	10 86       	std	Z+8, r1	; 0x08
    1532:	c4 01       	movw	r24, r8
    1534:	41 dd       	rcall	.-1406   	; 0xfb8 <prvBytesInBuffer>
    1536:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1538:	03 c0       	rjmp	.+6      	; 0x1540 <xStreamBufferReceive+0xac>
    153a:	c4 01       	movw	r24, r8
    153c:	3d dd       	rcall	.-1414   	; 0xfb8 <prvBytesInBuffer>
    153e:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    1540:	60 16       	cp	r6, r16
    1542:	71 06       	cpc	r7, r17
    1544:	c8 f5       	brcc	.+114    	; 0x15b8 <xStreamBufferReceive+0x124>
                                        size_t xBytesToStoreMessageLength )
{
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    1546:	61 14       	cp	r6, r1
    1548:	71 04       	cpc	r7, r1
    154a:	c1 f0       	breq	.+48     	; 0x157c <xStreamBufferReceive+0xe8>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    154c:	f4 01       	movw	r30, r8
    154e:	c0 80       	ld	r12, Z
    1550:	d1 80       	ldd	r13, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    1552:	98 01       	movw	r18, r16
    1554:	a3 01       	movw	r20, r6
    1556:	be 01       	movw	r22, r28
    1558:	6f 5f       	subi	r22, 0xFF	; 255
    155a:	7f 4f       	sbci	r23, 0xFF	; 255
    155c:	c4 01       	movw	r24, r8
    155e:	c8 dd       	rcall	.-1136   	; 0x10f0 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1564:	06 19       	sub	r16, r6
    1566:	17 09       	sbc	r17, r7

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    1568:	48 16       	cp	r4, r24
    156a:	59 06       	cpc	r5, r25
    156c:	30 f4       	brcc	.+12     	; 0x157a <xStreamBufferReceive+0xe6>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    156e:	f4 01       	movw	r30, r8
    1570:	d1 82       	std	Z+1, r13	; 0x01
    1572:	c0 82       	st	Z, r12
            xNextMessageLength = 0;
    1574:	41 2c       	mov	r4, r1
    1576:	51 2c       	mov	r5, r1
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1578:	01 c0       	rjmp	.+2      	; 0x157c <xStreamBufferReceive+0xe8>
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    157a:	2c 01       	movw	r4, r24
    157c:	98 01       	movw	r18, r16
    157e:	a2 01       	movw	r20, r4
    1580:	b1 01       	movw	r22, r2
    1582:	c4 01       	movw	r24, r8
    1584:	b5 dd       	rcall	.-1174   	; 0x10f0 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1586:	6c 01       	movw	r12, r24
    1588:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    158a:	c1 f0       	breq	.+48     	; 0x15bc <xStreamBufferReceive+0x128>
    158c:	67 d2       	rcall	.+1230   	; 0x1a5c <vTaskSuspendAll>
    158e:	f4 01       	movw	r30, r8
    1590:	82 85       	ldd	r24, Z+10	; 0x0a
    1592:	93 85       	ldd	r25, Z+11	; 0x0b
    1594:	89 2b       	or	r24, r25
    1596:	71 f0       	breq	.+28     	; 0x15b4 <xStreamBufferReceive+0x120>
    1598:	82 85       	ldd	r24, Z+10	; 0x0a
    159a:	93 85       	ldd	r25, Z+11	; 0x0b
    159c:	e1 2c       	mov	r14, r1
    159e:	f1 2c       	mov	r15, r1
    15a0:	00 e0       	ldi	r16, 0x00	; 0
    15a2:	20 e0       	ldi	r18, 0x00	; 0
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	a9 01       	movw	r20, r18
    15a8:	60 e0       	ldi	r22, 0x00	; 0
    15aa:	0e 94 ee 12 	call	0x25dc	; 0x25dc <xTaskGenericNotify>
    15ae:	f4 01       	movw	r30, r8
    15b0:	13 86       	std	Z+11, r1	; 0x0b
    15b2:	12 86       	std	Z+10, r1	; 0x0a
    15b4:	97 d3       	rcall	.+1838   	; 0x1ce4 <xTaskResumeAll>
    15b6:	02 c0       	rjmp	.+4      	; 0x15bc <xStreamBufferReceive+0x128>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    15b8:	c1 2c       	mov	r12, r1
    15ba:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    15bc:	c6 01       	movw	r24, r12
    15be:	0f 90       	pop	r0
    15c0:	0f 90       	pop	r0
    15c2:	df 91       	pop	r29
    15c4:	cf 91       	pop	r28
    15c6:	1f 91       	pop	r17
    15c8:	0f 91       	pop	r16
    15ca:	ff 90       	pop	r15
    15cc:	ef 90       	pop	r14
    15ce:	df 90       	pop	r13
    15d0:	cf 90       	pop	r12
    15d2:	bf 90       	pop	r11
    15d4:	af 90       	pop	r10
    15d6:	9f 90       	pop	r9
    15d8:	8f 90       	pop	r8
    15da:	7f 90       	pop	r7
    15dc:	6f 90       	pop	r6
    15de:	5f 90       	pop	r5
    15e0:	4f 90       	pop	r4
    15e2:	3f 90       	pop	r3
    15e4:	2f 90       	pop	r2
    15e6:	08 95       	ret

000015e8 <prvResetNextTaskUnblockTime>:
    15e8:	e0 91 81 14 	lds	r30, 0x1481	; 0x801481 <pxDelayedTaskList>
    15ec:	f0 91 82 14 	lds	r31, 0x1482	; 0x801482 <pxDelayedTaskList+0x1>
    15f0:	80 81       	ld	r24, Z
    15f2:	81 11       	cpse	r24, r1
    15f4:	0c c0       	rjmp	.+24     	; 0x160e <prvResetNextTaskUnblockTime+0x26>
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	9f ef       	ldi	r25, 0xFF	; 255
    15fa:	dc 01       	movw	r26, r24
    15fc:	80 93 4b 14 	sts	0x144B, r24	; 0x80144b <xNextTaskUnblockTime>
    1600:	90 93 4c 14 	sts	0x144C, r25	; 0x80144c <xNextTaskUnblockTime+0x1>
    1604:	a0 93 4d 14 	sts	0x144D, r26	; 0x80144d <xNextTaskUnblockTime+0x2>
    1608:	b0 93 4e 14 	sts	0x144E, r27	; 0x80144e <xNextTaskUnblockTime+0x3>
    160c:	08 95       	ret
    160e:	e0 91 81 14 	lds	r30, 0x1481	; 0x801481 <pxDelayedTaskList>
    1612:	f0 91 82 14 	lds	r31, 0x1482	; 0x801482 <pxDelayedTaskList+0x1>
    1616:	07 80       	ldd	r0, Z+7	; 0x07
    1618:	f0 85       	ldd	r31, Z+8	; 0x08
    161a:	e0 2d       	mov	r30, r0
    161c:	80 81       	ld	r24, Z
    161e:	91 81       	ldd	r25, Z+1	; 0x01
    1620:	a2 81       	ldd	r26, Z+2	; 0x02
    1622:	b3 81       	ldd	r27, Z+3	; 0x03
    1624:	80 93 4b 14 	sts	0x144B, r24	; 0x80144b <xNextTaskUnblockTime>
    1628:	90 93 4c 14 	sts	0x144C, r25	; 0x80144c <xNextTaskUnblockTime+0x1>
    162c:	a0 93 4d 14 	sts	0x144D, r26	; 0x80144d <xNextTaskUnblockTime+0x2>
    1630:	b0 93 4e 14 	sts	0x144E, r27	; 0x80144e <xNextTaskUnblockTime+0x3>
    1634:	08 95       	ret

00001636 <prvAddCurrentTaskToDelayedList>:
    1636:	8f 92       	push	r8
    1638:	9f 92       	push	r9
    163a:	af 92       	push	r10
    163c:	bf 92       	push	r11
    163e:	cf 92       	push	r12
    1640:	df 92       	push	r13
    1642:	ef 92       	push	r14
    1644:	ff 92       	push	r15
    1646:	cf 93       	push	r28
    1648:	df 93       	push	r29
    164a:	6b 01       	movw	r12, r22
    164c:	7c 01       	movw	r14, r24
    164e:	c4 2f       	mov	r28, r20
    1650:	80 90 58 14 	lds	r8, 0x1458	; 0x801458 <xTickCount>
    1654:	90 90 59 14 	lds	r9, 0x1459	; 0x801459 <xTickCount+0x1>
    1658:	a0 90 5a 14 	lds	r10, 0x145A	; 0x80145a <xTickCount+0x2>
    165c:	b0 90 5b 14 	lds	r11, 0x145B	; 0x80145b <xTickCount+0x3>
    1660:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <pxCurrentTCB>
    1664:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1668:	02 96       	adiw	r24, 0x02	; 2
    166a:	84 d8       	rcall	.-3832   	; 0x774 <uxListRemove>
    166c:	8f ef       	ldi	r24, 0xFF	; 255
    166e:	c8 16       	cp	r12, r24
    1670:	d8 06       	cpc	r13, r24
    1672:	e8 06       	cpc	r14, r24
    1674:	f8 06       	cpc	r15, r24
    1676:	b1 f5       	brne	.+108    	; 0x16e4 <prvAddCurrentTaskToDelayedList+0xae>
    1678:	cc 23       	and	r28, r28
    167a:	a1 f1       	breq	.+104    	; 0x16e4 <prvAddCurrentTaskToDelayedList+0xae>
    167c:	ed e5       	ldi	r30, 0x5D	; 93
    167e:	f4 e1       	ldi	r31, 0x14	; 20
    1680:	a1 81       	ldd	r26, Z+1	; 0x01
    1682:	b2 81       	ldd	r27, Z+2	; 0x02
    1684:	c0 91 07 15 	lds	r28, 0x1507	; 0x801507 <pxCurrentTCB>
    1688:	d0 91 08 15 	lds	r29, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    168c:	bf 83       	std	Y+7, r27	; 0x07
    168e:	ae 83       	std	Y+6, r26	; 0x06
    1690:	c0 91 07 15 	lds	r28, 0x1507	; 0x801507 <pxCurrentTCB>
    1694:	d0 91 08 15 	lds	r29, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1698:	16 96       	adiw	r26, 0x06	; 6
    169a:	8d 91       	ld	r24, X+
    169c:	9c 91       	ld	r25, X
    169e:	17 97       	sbiw	r26, 0x07	; 7
    16a0:	99 87       	std	Y+9, r25	; 0x09
    16a2:	88 87       	std	Y+8, r24	; 0x08
    16a4:	16 96       	adiw	r26, 0x06	; 6
    16a6:	cd 91       	ld	r28, X+
    16a8:	dc 91       	ld	r29, X
    16aa:	17 97       	sbiw	r26, 0x07	; 7
    16ac:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <pxCurrentTCB>
    16b0:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    16b4:	02 96       	adiw	r24, 0x02	; 2
    16b6:	9d 83       	std	Y+5, r25	; 0x05
    16b8:	8c 83       	std	Y+4, r24	; 0x04
    16ba:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <pxCurrentTCB>
    16be:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    16c2:	02 96       	adiw	r24, 0x02	; 2
    16c4:	17 96       	adiw	r26, 0x07	; 7
    16c6:	9c 93       	st	X, r25
    16c8:	8e 93       	st	-X, r24
    16ca:	16 97       	sbiw	r26, 0x06	; 6
    16cc:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
    16d0:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    16d4:	1d 96       	adiw	r26, 0x0d	; 13
    16d6:	fc 93       	st	X, r31
    16d8:	ee 93       	st	-X, r30
    16da:	1c 97       	sbiw	r26, 0x0c	; 12
    16dc:	80 81       	ld	r24, Z
    16de:	8f 5f       	subi	r24, 0xFF	; 255
    16e0:	80 83       	st	Z, r24
    16e2:	3f c0       	rjmp	.+126    	; 0x1762 <prvAddCurrentTaskToDelayedList+0x12c>
    16e4:	c8 0c       	add	r12, r8
    16e6:	d9 1c       	adc	r13, r9
    16e8:	ea 1c       	adc	r14, r10
    16ea:	fb 1c       	adc	r15, r11
    16ec:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    16f0:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    16f4:	c2 82       	std	Z+2, r12	; 0x02
    16f6:	d3 82       	std	Z+3, r13	; 0x03
    16f8:	e4 82       	std	Z+4, r14	; 0x04
    16fa:	f5 82       	std	Z+5, r15	; 0x05
    16fc:	c8 14       	cp	r12, r8
    16fe:	d9 04       	cpc	r13, r9
    1700:	ea 04       	cpc	r14, r10
    1702:	fb 04       	cpc	r15, r11
    1704:	68 f4       	brcc	.+26     	; 0x1720 <prvAddCurrentTaskToDelayedList+0xea>
    1706:	60 91 07 15 	lds	r22, 0x1507	; 0x801507 <pxCurrentTCB>
    170a:	70 91 08 15 	lds	r23, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    170e:	80 91 7f 14 	lds	r24, 0x147F	; 0x80147f <pxOverflowDelayedTaskList>
    1712:	90 91 80 14 	lds	r25, 0x1480	; 0x801480 <pxOverflowDelayedTaskList+0x1>
    1716:	6e 5f       	subi	r22, 0xFE	; 254
    1718:	7f 4f       	sbci	r23, 0xFF	; 255
    171a:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsert>
    171e:	21 c0       	rjmp	.+66     	; 0x1762 <prvAddCurrentTaskToDelayedList+0x12c>
    1720:	60 91 07 15 	lds	r22, 0x1507	; 0x801507 <pxCurrentTCB>
    1724:	70 91 08 15 	lds	r23, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1728:	80 91 81 14 	lds	r24, 0x1481	; 0x801481 <pxDelayedTaskList>
    172c:	90 91 82 14 	lds	r25, 0x1482	; 0x801482 <pxDelayedTaskList+0x1>
    1730:	6e 5f       	subi	r22, 0xFE	; 254
    1732:	7f 4f       	sbci	r23, 0xFF	; 255
    1734:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsert>
    1738:	80 91 4b 14 	lds	r24, 0x144B	; 0x80144b <xNextTaskUnblockTime>
    173c:	90 91 4c 14 	lds	r25, 0x144C	; 0x80144c <xNextTaskUnblockTime+0x1>
    1740:	a0 91 4d 14 	lds	r26, 0x144D	; 0x80144d <xNextTaskUnblockTime+0x2>
    1744:	b0 91 4e 14 	lds	r27, 0x144E	; 0x80144e <xNextTaskUnblockTime+0x3>
    1748:	c8 16       	cp	r12, r24
    174a:	d9 06       	cpc	r13, r25
    174c:	ea 06       	cpc	r14, r26
    174e:	fb 06       	cpc	r15, r27
    1750:	40 f4       	brcc	.+16     	; 0x1762 <prvAddCurrentTaskToDelayedList+0x12c>
    1752:	c0 92 4b 14 	sts	0x144B, r12	; 0x80144b <xNextTaskUnblockTime>
    1756:	d0 92 4c 14 	sts	0x144C, r13	; 0x80144c <xNextTaskUnblockTime+0x1>
    175a:	e0 92 4d 14 	sts	0x144D, r14	; 0x80144d <xNextTaskUnblockTime+0x2>
    175e:	f0 92 4e 14 	sts	0x144E, r15	; 0x80144e <xNextTaskUnblockTime+0x3>
    1762:	df 91       	pop	r29
    1764:	cf 91       	pop	r28
    1766:	ff 90       	pop	r15
    1768:	ef 90       	pop	r14
    176a:	df 90       	pop	r13
    176c:	cf 90       	pop	r12
    176e:	bf 90       	pop	r11
    1770:	af 90       	pop	r10
    1772:	9f 90       	pop	r9
    1774:	8f 90       	pop	r8
    1776:	08 95       	ret

00001778 <xTaskCreate>:
    1778:	4f 92       	push	r4
    177a:	5f 92       	push	r5
    177c:	6f 92       	push	r6
    177e:	7f 92       	push	r7
    1780:	8f 92       	push	r8
    1782:	9f 92       	push	r9
    1784:	af 92       	push	r10
    1786:	bf 92       	push	r11
    1788:	cf 92       	push	r12
    178a:	df 92       	push	r13
    178c:	ef 92       	push	r14
    178e:	ff 92       	push	r15
    1790:	0f 93       	push	r16
    1792:	1f 93       	push	r17
    1794:	cf 93       	push	r28
    1796:	df 93       	push	r29
    1798:	4c 01       	movw	r8, r24
    179a:	6b 01       	movw	r12, r22
    179c:	5a 01       	movw	r10, r20
    179e:	29 01       	movw	r4, r18
    17a0:	ca 01       	movw	r24, r20
    17a2:	0e 94 66 02 	call	0x4cc	; 0x4cc <pvPortMalloc>
    17a6:	3c 01       	movw	r6, r24
    17a8:	89 2b       	or	r24, r25
    17aa:	09 f4       	brne	.+2      	; 0x17ae <xTaskCreate+0x36>
    17ac:	0d c1       	rjmp	.+538    	; 0x19c8 <xTaskCreate+0x250>
    17ae:	84 e3       	ldi	r24, 0x34	; 52
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	0e 94 66 02 	call	0x4cc	; 0x4cc <pvPortMalloc>
    17b6:	ec 01       	movw	r28, r24
    17b8:	89 2b       	or	r24, r25
    17ba:	99 f0       	breq	.+38     	; 0x17e2 <xTaskCreate+0x6a>
    17bc:	7c 8e       	std	Y+28, r7	; 0x1c
    17be:	6b 8e       	std	Y+27, r6	; 0x1b
    17c0:	a5 01       	movw	r20, r10
    17c2:	65 ea       	ldi	r22, 0xA5	; 165
    17c4:	70 e0       	ldi	r23, 0x00	; 0
    17c6:	c3 01       	movw	r24, r6
    17c8:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <memset>
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	a8 1a       	sub	r10, r24
    17d0:	b1 08       	sbc	r11, r1
    17d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17d6:	a8 0e       	add	r10, r24
    17d8:	b9 1e       	adc	r11, r25
    17da:	c1 14       	cp	r12, r1
    17dc:	d1 04       	cpc	r13, r1
    17de:	29 f4       	brne	.+10     	; 0x17ea <xTaskCreate+0x72>
    17e0:	20 c0       	rjmp	.+64     	; 0x1822 <xTaskCreate+0xaa>
    17e2:	c3 01       	movw	r24, r6
    17e4:	0e 94 2e 03 	call	0x65c	; 0x65c <vPortFree>
    17e8:	ef c0       	rjmp	.+478    	; 0x19c8 <xTaskCreate+0x250>
    17ea:	d6 01       	movw	r26, r12
    17ec:	8c 91       	ld	r24, X
    17ee:	8d 8f       	std	Y+29, r24	; 0x1d
    17f0:	8c 91       	ld	r24, X
    17f2:	88 23       	and	r24, r24
    17f4:	a1 f0       	breq	.+40     	; 0x181e <xTaskCreate+0xa6>
    17f6:	ae 01       	movw	r20, r28
    17f8:	42 5e       	subi	r20, 0xE2	; 226
    17fa:	5f 4f       	sbci	r21, 0xFF	; 255
    17fc:	f6 01       	movw	r30, r12
    17fe:	31 96       	adiw	r30, 0x01	; 1
    1800:	b0 e1       	ldi	r27, 0x10	; 16
    1802:	cb 0e       	add	r12, r27
    1804:	d1 1c       	adc	r13, r1
    1806:	cf 01       	movw	r24, r30
    1808:	21 91       	ld	r18, Z+
    180a:	da 01       	movw	r26, r20
    180c:	2d 93       	st	X+, r18
    180e:	ad 01       	movw	r20, r26
    1810:	dc 01       	movw	r26, r24
    1812:	8c 91       	ld	r24, X
    1814:	88 23       	and	r24, r24
    1816:	19 f0       	breq	.+6      	; 0x181e <xTaskCreate+0xa6>
    1818:	ce 16       	cp	r12, r30
    181a:	df 06       	cpc	r13, r31
    181c:	a1 f7       	brne	.-24     	; 0x1806 <xTaskCreate+0x8e>
    181e:	1c a6       	std	Y+44, r1	; 0x2c
    1820:	01 c0       	rjmp	.+2      	; 0x1824 <xTaskCreate+0xac>
    1822:	1d 8e       	std	Y+29, r1	; 0x1d
    1824:	0a 30       	cpi	r16, 0x0A	; 10
    1826:	08 f0       	brcs	.+2      	; 0x182a <xTaskCreate+0xb2>
    1828:	09 e0       	ldi	r16, 0x09	; 9
    182a:	0a 8f       	std	Y+26, r16	; 0x1a
    182c:	0d a7       	std	Y+45, r16	; 0x2d
    182e:	1e a6       	std	Y+46, r1	; 0x2e
    1830:	6e 01       	movw	r12, r28
    1832:	b2 e0       	ldi	r27, 0x02	; 2
    1834:	cb 0e       	add	r12, r27
    1836:	d1 1c       	adc	r13, r1
    1838:	c6 01       	movw	r24, r12
    183a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialiseItem>
    183e:	ce 01       	movw	r24, r28
    1840:	0e 96       	adiw	r24, 0x0e	; 14
    1842:	0e 94 79 03 	call	0x6f2	; 0x6f2 <vListInitialiseItem>
    1846:	db 87       	std	Y+11, r29	; 0x0b
    1848:	ca 87       	std	Y+10, r28	; 0x0a
    184a:	8a e0       	ldi	r24, 0x0A	; 10
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	a0 e0       	ldi	r26, 0x00	; 0
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	80 1b       	sub	r24, r16
    1854:	91 09       	sbc	r25, r1
    1856:	a1 09       	sbc	r26, r1
    1858:	b1 09       	sbc	r27, r1
    185a:	8e 87       	std	Y+14, r24	; 0x0e
    185c:	9f 87       	std	Y+15, r25	; 0x0f
    185e:	a8 8b       	std	Y+16, r26	; 0x10
    1860:	b9 8b       	std	Y+17, r27	; 0x11
    1862:	df 8b       	std	Y+23, r29	; 0x17
    1864:	ce 8b       	std	Y+22, r28	; 0x16
    1866:	84 e0       	ldi	r24, 0x04	; 4
    1868:	fe 01       	movw	r30, r28
    186a:	bf 96       	adiw	r30, 0x2f	; 47
    186c:	df 01       	movw	r26, r30
    186e:	1d 92       	st	X+, r1
    1870:	8a 95       	dec	r24
    1872:	e9 f7       	brne	.-6      	; 0x186e <xTaskCreate+0xf6>
    1874:	1b aa       	std	Y+51, r1	; 0x33
    1876:	a2 01       	movw	r20, r4
    1878:	b4 01       	movw	r22, r8
    187a:	c5 01       	movw	r24, r10
    187c:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <pxPortInitialiseStack>
    1880:	99 83       	std	Y+1, r25	; 0x01
    1882:	88 83       	st	Y, r24
    1884:	e1 14       	cp	r14, r1
    1886:	f1 04       	cpc	r15, r1
    1888:	19 f0       	breq	.+6      	; 0x1890 <xTaskCreate+0x118>
    188a:	f7 01       	movw	r30, r14
    188c:	d1 83       	std	Z+1, r29	; 0x01
    188e:	c0 83       	st	Z, r28
    1890:	0f b6       	in	r0, 0x3f	; 63
    1892:	f8 94       	cli
    1894:	0f 92       	push	r0
    1896:	80 91 5c 14 	lds	r24, 0x145C	; 0x80145c <uxCurrentNumberOfTasks>
    189a:	8f 5f       	subi	r24, 0xFF	; 255
    189c:	80 93 5c 14 	sts	0x145C, r24	; 0x80145c <uxCurrentNumberOfTasks>
    18a0:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <pxCurrentTCB>
    18a4:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    18a8:	89 2b       	or	r24, r25
    18aa:	d1 f5       	brne	.+116    	; 0x1920 <xTaskCreate+0x1a8>
    18ac:	d0 93 08 15 	sts	0x1508, r29	; 0x801508 <pxCurrentTCB+0x1>
    18b0:	c0 93 07 15 	sts	0x1507, r28	; 0x801507 <pxCurrentTCB>
    18b4:	80 91 5c 14 	lds	r24, 0x145C	; 0x80145c <uxCurrentNumberOfTasks>
    18b8:	81 30       	cpi	r24, 0x01	; 1
    18ba:	09 f0       	breq	.+2      	; 0x18be <xTaskCreate+0x146>
    18bc:	41 c0       	rjmp	.+130    	; 0x1940 <xTaskCreate+0x1c8>
    18be:	09 e9       	ldi	r16, 0x99	; 153
    18c0:	14 e1       	ldi	r17, 0x14	; 20
    18c2:	0f 2e       	mov	r0, r31
    18c4:	f7 e0       	ldi	r31, 0x07	; 7
    18c6:	ef 2e       	mov	r14, r31
    18c8:	f5 e1       	ldi	r31, 0x15	; 21
    18ca:	ff 2e       	mov	r15, r31
    18cc:	f0 2d       	mov	r31, r0
    18ce:	c8 01       	movw	r24, r16
    18d0:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    18d4:	05 5f       	subi	r16, 0xF5	; 245
    18d6:	1f 4f       	sbci	r17, 0xFF	; 255
    18d8:	0e 15       	cp	r16, r14
    18da:	1f 05       	cpc	r17, r15
    18dc:	c1 f7       	brne	.-16     	; 0x18ce <xTaskCreate+0x156>
    18de:	8e e8       	ldi	r24, 0x8E	; 142
    18e0:	94 e1       	ldi	r25, 0x14	; 20
    18e2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    18e6:	83 e8       	ldi	r24, 0x83	; 131
    18e8:	94 e1       	ldi	r25, 0x14	; 20
    18ea:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    18ee:	84 e7       	ldi	r24, 0x74	; 116
    18f0:	94 e1       	ldi	r25, 0x14	; 20
    18f2:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    18f6:	89 e6       	ldi	r24, 0x69	; 105
    18f8:	94 e1       	ldi	r25, 0x14	; 20
    18fa:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    18fe:	8d e5       	ldi	r24, 0x5D	; 93
    1900:	94 e1       	ldi	r25, 0x14	; 20
    1902:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    1906:	8e e8       	ldi	r24, 0x8E	; 142
    1908:	94 e1       	ldi	r25, 0x14	; 20
    190a:	90 93 82 14 	sts	0x1482, r25	; 0x801482 <pxDelayedTaskList+0x1>
    190e:	80 93 81 14 	sts	0x1481, r24	; 0x801481 <pxDelayedTaskList>
    1912:	83 e8       	ldi	r24, 0x83	; 131
    1914:	94 e1       	ldi	r25, 0x14	; 20
    1916:	90 93 80 14 	sts	0x1480, r25	; 0x801480 <pxOverflowDelayedTaskList+0x1>
    191a:	80 93 7f 14 	sts	0x147F, r24	; 0x80147f <pxOverflowDelayedTaskList>
    191e:	10 c0       	rjmp	.+32     	; 0x1940 <xTaskCreate+0x1c8>
    1920:	80 91 56 14 	lds	r24, 0x1456	; 0x801456 <xSchedulerRunning>
    1924:	81 11       	cpse	r24, r1
    1926:	0c c0       	rjmp	.+24     	; 0x1940 <xTaskCreate+0x1c8>
    1928:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    192c:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1930:	92 8d       	ldd	r25, Z+26	; 0x1a
    1932:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1934:	89 17       	cp	r24, r25
    1936:	20 f0       	brcs	.+8      	; 0x1940 <xTaskCreate+0x1c8>
    1938:	d0 93 08 15 	sts	0x1508, r29	; 0x801508 <pxCurrentTCB+0x1>
    193c:	c0 93 07 15 	sts	0x1507, r28	; 0x801507 <pxCurrentTCB>
    1940:	80 91 4f 14 	lds	r24, 0x144F	; 0x80144f <uxTaskNumber>
    1944:	8f 5f       	subi	r24, 0xFF	; 255
    1946:	80 93 4f 14 	sts	0x144F, r24	; 0x80144f <uxTaskNumber>
    194a:	ea 8d       	ldd	r30, Y+26	; 0x1a
    194c:	80 91 57 14 	lds	r24, 0x1457	; 0x801457 <uxTopReadyPriority>
    1950:	8e 17       	cp	r24, r30
    1952:	10 f4       	brcc	.+4      	; 0x1958 <xTaskCreate+0x1e0>
    1954:	e0 93 57 14 	sts	0x1457, r30	; 0x801457 <uxTopReadyPriority>
    1958:	8b e0       	ldi	r24, 0x0B	; 11
    195a:	8e 9f       	mul	r24, r30
    195c:	f0 01       	movw	r30, r0
    195e:	11 24       	eor	r1, r1
    1960:	e7 56       	subi	r30, 0x67	; 103
    1962:	fb 4e       	sbci	r31, 0xEB	; 235
    1964:	01 80       	ldd	r0, Z+1	; 0x01
    1966:	f2 81       	ldd	r31, Z+2	; 0x02
    1968:	e0 2d       	mov	r30, r0
    196a:	ff 83       	std	Y+7, r31	; 0x07
    196c:	ee 83       	std	Y+6, r30	; 0x06
    196e:	26 81       	ldd	r18, Z+6	; 0x06
    1970:	37 81       	ldd	r19, Z+7	; 0x07
    1972:	39 87       	std	Y+9, r19	; 0x09
    1974:	28 87       	std	Y+8, r18	; 0x08
    1976:	a6 81       	ldd	r26, Z+6	; 0x06
    1978:	b7 81       	ldd	r27, Z+7	; 0x07
    197a:	15 96       	adiw	r26, 0x05	; 5
    197c:	dc 92       	st	X, r13
    197e:	ce 92       	st	-X, r12
    1980:	14 97       	sbiw	r26, 0x04	; 4
    1982:	d7 82       	std	Z+7, r13	; 0x07
    1984:	c6 82       	std	Z+6, r12	; 0x06
    1986:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1988:	8e 9f       	mul	r24, r30
    198a:	f0 01       	movw	r30, r0
    198c:	11 24       	eor	r1, r1
    198e:	e7 56       	subi	r30, 0x67	; 103
    1990:	fb 4e       	sbci	r31, 0xEB	; 235
    1992:	fd 87       	std	Y+13, r31	; 0x0d
    1994:	ec 87       	std	Y+12, r30	; 0x0c
    1996:	80 81       	ld	r24, Z
    1998:	8f 5f       	subi	r24, 0xFF	; 255
    199a:	80 83       	st	Z, r24
    199c:	0f 90       	pop	r0
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	80 91 56 14 	lds	r24, 0x1456	; 0x801456 <xSchedulerRunning>
    19a4:	88 23       	and	r24, r24
    19a6:	61 f0       	breq	.+24     	; 0x19c0 <xTaskCreate+0x248>
    19a8:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    19ac:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    19b0:	92 8d       	ldd	r25, Z+26	; 0x1a
    19b2:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19b4:	98 17       	cp	r25, r24
    19b6:	30 f4       	brcc	.+12     	; 0x19c4 <xTaskCreate+0x24c>
    19b8:	0e 94 34 04 	call	0x868	; 0x868 <vPortYield>
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	05 c0       	rjmp	.+10     	; 0x19ca <xTaskCreate+0x252>
    19c0:	81 e0       	ldi	r24, 0x01	; 1
    19c2:	03 c0       	rjmp	.+6      	; 0x19ca <xTaskCreate+0x252>
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <xTaskCreate+0x252>
    19c8:	8f ef       	ldi	r24, 0xFF	; 255
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	1f 91       	pop	r17
    19d0:	0f 91       	pop	r16
    19d2:	ff 90       	pop	r15
    19d4:	ef 90       	pop	r14
    19d6:	df 90       	pop	r13
    19d8:	cf 90       	pop	r12
    19da:	bf 90       	pop	r11
    19dc:	af 90       	pop	r10
    19de:	9f 90       	pop	r9
    19e0:	8f 90       	pop	r8
    19e2:	7f 90       	pop	r7
    19e4:	6f 90       	pop	r6
    19e6:	5f 90       	pop	r5
    19e8:	4f 90       	pop	r4
    19ea:	08 95       	ret

000019ec <vTaskStartScheduler>:
    19ec:	ef 92       	push	r14
    19ee:	ff 92       	push	r15
    19f0:	0f 93       	push	r16
    19f2:	0f 2e       	mov	r0, r31
    19f4:	f9 e4       	ldi	r31, 0x49	; 73
    19f6:	ef 2e       	mov	r14, r31
    19f8:	f4 e1       	ldi	r31, 0x14	; 20
    19fa:	ff 2e       	mov	r15, r31
    19fc:	f0 2d       	mov	r31, r0
    19fe:	00 e0       	ldi	r16, 0x00	; 0
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	40 ec       	ldi	r20, 0xC0	; 192
    1a06:	50 e0       	ldi	r21, 0x00	; 0
    1a08:	6d e3       	ldi	r22, 0x3D	; 61
    1a0a:	72 e0       	ldi	r23, 0x02	; 2
    1a0c:	8c e7       	ldi	r24, 0x7C	; 124
    1a0e:	90 e0       	ldi	r25, 0x00	; 0
    1a10:	b3 de       	rcall	.-666    	; 0x1778 <xTaskCreate>
    1a12:	81 30       	cpi	r24, 0x01	; 1
    1a14:	e9 f4       	brne	.+58     	; 0x1a50 <vTaskStartScheduler+0x64>
    1a16:	0e 94 8c 15 	call	0x2b18	; 0x2b18 <xTimerCreateTimerTask>
    1a1a:	81 30       	cpi	r24, 0x01	; 1
    1a1c:	c9 f4       	brne	.+50     	; 0x1a50 <vTaskStartScheduler+0x64>
    1a1e:	f8 94       	cli
    1a20:	8f ef       	ldi	r24, 0xFF	; 255
    1a22:	9f ef       	ldi	r25, 0xFF	; 255
    1a24:	dc 01       	movw	r26, r24
    1a26:	80 93 4b 14 	sts	0x144B, r24	; 0x80144b <xNextTaskUnblockTime>
    1a2a:	90 93 4c 14 	sts	0x144C, r25	; 0x80144c <xNextTaskUnblockTime+0x1>
    1a2e:	a0 93 4d 14 	sts	0x144D, r26	; 0x80144d <xNextTaskUnblockTime+0x2>
    1a32:	b0 93 4e 14 	sts	0x144E, r27	; 0x80144e <xNextTaskUnblockTime+0x3>
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	80 93 56 14 	sts	0x1456, r24	; 0x801456 <xSchedulerRunning>
    1a3c:	10 92 58 14 	sts	0x1458, r1	; 0x801458 <xTickCount>
    1a40:	10 92 59 14 	sts	0x1459, r1	; 0x801459 <xTickCount+0x1>
    1a44:	10 92 5a 14 	sts	0x145A, r1	; 0x80145a <xTickCount+0x2>
    1a48:	10 92 5b 14 	sts	0x145B, r1	; 0x80145b <xTickCount+0x3>
    1a4c:	0e 94 f8 03 	call	0x7f0	; 0x7f0 <xPortStartScheduler>
    1a50:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1a54:	0f 91       	pop	r16
    1a56:	ff 90       	pop	r15
    1a58:	ef 90       	pop	r14
    1a5a:	08 95       	ret

00001a5c <vTaskSuspendAll>:
    1a5c:	80 91 48 14 	lds	r24, 0x1448	; 0x801448 <uxSchedulerSuspended>
    1a60:	8f 5f       	subi	r24, 0xFF	; 255
    1a62:	80 93 48 14 	sts	0x1448, r24	; 0x801448 <uxSchedulerSuspended>
    1a66:	08 95       	ret

00001a68 <xTaskGetTickCount>:
    1a68:	0f b6       	in	r0, 0x3f	; 63
    1a6a:	f8 94       	cli
    1a6c:	0f 92       	push	r0
    1a6e:	60 91 58 14 	lds	r22, 0x1458	; 0x801458 <xTickCount>
    1a72:	70 91 59 14 	lds	r23, 0x1459	; 0x801459 <xTickCount+0x1>
    1a76:	80 91 5a 14 	lds	r24, 0x145A	; 0x80145a <xTickCount+0x2>
    1a7a:	90 91 5b 14 	lds	r25, 0x145B	; 0x80145b <xTickCount+0x3>
    1a7e:	0f 90       	pop	r0
    1a80:	0f be       	out	0x3f, r0	; 63
    1a82:	08 95       	ret

00001a84 <xTaskIncrementTick>:
    1a84:	cf 92       	push	r12
    1a86:	df 92       	push	r13
    1a88:	ef 92       	push	r14
    1a8a:	ff 92       	push	r15
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	80 91 48 14 	lds	r24, 0x1448	; 0x801448 <uxSchedulerSuspended>
    1a98:	81 11       	cpse	r24, r1
    1a9a:	07 c1       	rjmp	.+526    	; 0x1caa <xTaskIncrementTick+0x226>
    1a9c:	c0 90 58 14 	lds	r12, 0x1458	; 0x801458 <xTickCount>
    1aa0:	d0 90 59 14 	lds	r13, 0x1459	; 0x801459 <xTickCount+0x1>
    1aa4:	e0 90 5a 14 	lds	r14, 0x145A	; 0x80145a <xTickCount+0x2>
    1aa8:	f0 90 5b 14 	lds	r15, 0x145B	; 0x80145b <xTickCount+0x3>
    1aac:	8f ef       	ldi	r24, 0xFF	; 255
    1aae:	c8 1a       	sub	r12, r24
    1ab0:	d8 0a       	sbc	r13, r24
    1ab2:	e8 0a       	sbc	r14, r24
    1ab4:	f8 0a       	sbc	r15, r24
    1ab6:	c0 92 58 14 	sts	0x1458, r12	; 0x801458 <xTickCount>
    1aba:	d0 92 59 14 	sts	0x1459, r13	; 0x801459 <xTickCount+0x1>
    1abe:	e0 92 5a 14 	sts	0x145A, r14	; 0x80145a <xTickCount+0x2>
    1ac2:	f0 92 5b 14 	sts	0x145B, r15	; 0x80145b <xTickCount+0x3>
    1ac6:	c1 14       	cp	r12, r1
    1ac8:	d1 04       	cpc	r13, r1
    1aca:	e1 04       	cpc	r14, r1
    1acc:	f1 04       	cpc	r15, r1
    1ace:	b1 f4       	brne	.+44     	; 0x1afc <xTaskIncrementTick+0x78>
    1ad0:	80 91 81 14 	lds	r24, 0x1481	; 0x801481 <pxDelayedTaskList>
    1ad4:	90 91 82 14 	lds	r25, 0x1482	; 0x801482 <pxDelayedTaskList+0x1>
    1ad8:	20 91 7f 14 	lds	r18, 0x147F	; 0x80147f <pxOverflowDelayedTaskList>
    1adc:	30 91 80 14 	lds	r19, 0x1480	; 0x801480 <pxOverflowDelayedTaskList+0x1>
    1ae0:	30 93 82 14 	sts	0x1482, r19	; 0x801482 <pxDelayedTaskList+0x1>
    1ae4:	20 93 81 14 	sts	0x1481, r18	; 0x801481 <pxDelayedTaskList>
    1ae8:	90 93 80 14 	sts	0x1480, r25	; 0x801480 <pxOverflowDelayedTaskList+0x1>
    1aec:	80 93 7f 14 	sts	0x147F, r24	; 0x80147f <pxOverflowDelayedTaskList>
    1af0:	80 91 50 14 	lds	r24, 0x1450	; 0x801450 <xNumOfOverflows>
    1af4:	8f 5f       	subi	r24, 0xFF	; 255
    1af6:	80 93 50 14 	sts	0x1450, r24	; 0x801450 <xNumOfOverflows>
    1afa:	76 dd       	rcall	.-1300   	; 0x15e8 <prvResetNextTaskUnblockTime>
    1afc:	80 91 4b 14 	lds	r24, 0x144B	; 0x80144b <xNextTaskUnblockTime>
    1b00:	90 91 4c 14 	lds	r25, 0x144C	; 0x80144c <xNextTaskUnblockTime+0x1>
    1b04:	a0 91 4d 14 	lds	r26, 0x144D	; 0x80144d <xNextTaskUnblockTime+0x2>
    1b08:	b0 91 4e 14 	lds	r27, 0x144E	; 0x80144e <xNextTaskUnblockTime+0x3>
    1b0c:	c8 16       	cp	r12, r24
    1b0e:	d9 06       	cpc	r13, r25
    1b10:	ea 06       	cpc	r14, r26
    1b12:	fb 06       	cpc	r15, r27
    1b14:	10 f4       	brcc	.+4      	; 0x1b1a <xTaskIncrementTick+0x96>
    1b16:	80 e0       	ldi	r24, 0x00	; 0
    1b18:	b3 c0       	rjmp	.+358    	; 0x1c80 <xTaskIncrementTick+0x1fc>
    1b1a:	80 e0       	ldi	r24, 0x00	; 0
    1b1c:	4b e0       	ldi	r20, 0x0B	; 11
    1b1e:	51 e0       	ldi	r21, 0x01	; 1
    1b20:	e0 91 81 14 	lds	r30, 0x1481	; 0x801481 <pxDelayedTaskList>
    1b24:	f0 91 82 14 	lds	r31, 0x1482	; 0x801482 <pxDelayedTaskList+0x1>
    1b28:	90 81       	ld	r25, Z
    1b2a:	91 11       	cpse	r25, r1
    1b2c:	0c c0       	rjmp	.+24     	; 0x1b46 <xTaskIncrementTick+0xc2>
    1b2e:	4f ef       	ldi	r20, 0xFF	; 255
    1b30:	5f ef       	ldi	r21, 0xFF	; 255
    1b32:	ba 01       	movw	r22, r20
    1b34:	40 93 4b 14 	sts	0x144B, r20	; 0x80144b <xNextTaskUnblockTime>
    1b38:	50 93 4c 14 	sts	0x144C, r21	; 0x80144c <xNextTaskUnblockTime+0x1>
    1b3c:	60 93 4d 14 	sts	0x144D, r22	; 0x80144d <xNextTaskUnblockTime+0x2>
    1b40:	70 93 4e 14 	sts	0x144E, r23	; 0x80144e <xNextTaskUnblockTime+0x3>
    1b44:	9d c0       	rjmp	.+314    	; 0x1c80 <xTaskIncrementTick+0x1fc>
    1b46:	e0 91 81 14 	lds	r30, 0x1481	; 0x801481 <pxDelayedTaskList>
    1b4a:	f0 91 82 14 	lds	r31, 0x1482	; 0x801482 <pxDelayedTaskList+0x1>
    1b4e:	07 80       	ldd	r0, Z+7	; 0x07
    1b50:	f0 85       	ldd	r31, Z+8	; 0x08
    1b52:	e0 2d       	mov	r30, r0
    1b54:	00 84       	ldd	r0, Z+8	; 0x08
    1b56:	f1 85       	ldd	r31, Z+9	; 0x09
    1b58:	e0 2d       	mov	r30, r0
    1b5a:	02 81       	ldd	r16, Z+2	; 0x02
    1b5c:	13 81       	ldd	r17, Z+3	; 0x03
    1b5e:	24 81       	ldd	r18, Z+4	; 0x04
    1b60:	35 81       	ldd	r19, Z+5	; 0x05
    1b62:	c0 16       	cp	r12, r16
    1b64:	d1 06       	cpc	r13, r17
    1b66:	e2 06       	cpc	r14, r18
    1b68:	f3 06       	cpc	r15, r19
    1b6a:	48 f4       	brcc	.+18     	; 0x1b7e <xTaskIncrementTick+0xfa>
    1b6c:	00 93 4b 14 	sts	0x144B, r16	; 0x80144b <xNextTaskUnblockTime>
    1b70:	10 93 4c 14 	sts	0x144C, r17	; 0x80144c <xNextTaskUnblockTime+0x1>
    1b74:	20 93 4d 14 	sts	0x144D, r18	; 0x80144d <xNextTaskUnblockTime+0x2>
    1b78:	30 93 4e 14 	sts	0x144E, r19	; 0x80144e <xNextTaskUnblockTime+0x3>
    1b7c:	81 c0       	rjmp	.+258    	; 0x1c80 <xTaskIncrementTick+0x1fc>
    1b7e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1b80:	b5 85       	ldd	r27, Z+13	; 0x0d
    1b82:	c6 81       	ldd	r28, Z+6	; 0x06
    1b84:	d7 81       	ldd	r29, Z+7	; 0x07
    1b86:	20 85       	ldd	r18, Z+8	; 0x08
    1b88:	31 85       	ldd	r19, Z+9	; 0x09
    1b8a:	3f 83       	std	Y+7, r19	; 0x07
    1b8c:	2e 83       	std	Y+6, r18	; 0x06
    1b8e:	c0 85       	ldd	r28, Z+8	; 0x08
    1b90:	d1 85       	ldd	r29, Z+9	; 0x09
    1b92:	26 81       	ldd	r18, Z+6	; 0x06
    1b94:	37 81       	ldd	r19, Z+7	; 0x07
    1b96:	3d 83       	std	Y+5, r19	; 0x05
    1b98:	2c 83       	std	Y+4, r18	; 0x04
    1b9a:	9f 01       	movw	r18, r30
    1b9c:	2e 5f       	subi	r18, 0xFE	; 254
    1b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    1ba0:	11 96       	adiw	r26, 0x01	; 1
    1ba2:	6d 91       	ld	r22, X+
    1ba4:	7c 91       	ld	r23, X
    1ba6:	12 97       	sbiw	r26, 0x02	; 2
    1ba8:	62 17       	cp	r22, r18
    1baa:	73 07       	cpc	r23, r19
    1bac:	31 f4       	brne	.+12     	; 0x1bba <xTaskIncrementTick+0x136>
    1bae:	60 85       	ldd	r22, Z+8	; 0x08
    1bb0:	71 85       	ldd	r23, Z+9	; 0x09
    1bb2:	12 96       	adiw	r26, 0x02	; 2
    1bb4:	7c 93       	st	X, r23
    1bb6:	6e 93       	st	-X, r22
    1bb8:	11 97       	sbiw	r26, 0x01	; 1
    1bba:	15 86       	std	Z+13, r1	; 0x0d
    1bbc:	14 86       	std	Z+12, r1	; 0x0c
    1bbe:	9c 91       	ld	r25, X
    1bc0:	91 50       	subi	r25, 0x01	; 1
    1bc2:	9c 93       	st	X, r25
    1bc4:	a0 8d       	ldd	r26, Z+24	; 0x18
    1bc6:	b1 8d       	ldd	r27, Z+25	; 0x19
    1bc8:	10 97       	sbiw	r26, 0x00	; 0
    1bca:	09 f1       	breq	.+66     	; 0x1c0e <xTaskIncrementTick+0x18a>
    1bcc:	c2 89       	ldd	r28, Z+18	; 0x12
    1bce:	d3 89       	ldd	r29, Z+19	; 0x13
    1bd0:	64 89       	ldd	r22, Z+20	; 0x14
    1bd2:	75 89       	ldd	r23, Z+21	; 0x15
    1bd4:	7f 83       	std	Y+7, r23	; 0x07
    1bd6:	6e 83       	std	Y+6, r22	; 0x06
    1bd8:	c4 89       	ldd	r28, Z+20	; 0x14
    1bda:	d5 89       	ldd	r29, Z+21	; 0x15
    1bdc:	62 89       	ldd	r22, Z+18	; 0x12
    1bde:	73 89       	ldd	r23, Z+19	; 0x13
    1be0:	7d 83       	std	Y+5, r23	; 0x05
    1be2:	6c 83       	std	Y+4, r22	; 0x04
    1be4:	11 96       	adiw	r26, 0x01	; 1
    1be6:	cd 91       	ld	r28, X+
    1be8:	dc 91       	ld	r29, X
    1bea:	12 97       	sbiw	r26, 0x02	; 2
    1bec:	bf 01       	movw	r22, r30
    1bee:	62 5f       	subi	r22, 0xF2	; 242
    1bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf2:	c6 17       	cp	r28, r22
    1bf4:	d7 07       	cpc	r29, r23
    1bf6:	31 f4       	brne	.+12     	; 0x1c04 <xTaskIncrementTick+0x180>
    1bf8:	64 89       	ldd	r22, Z+20	; 0x14
    1bfa:	75 89       	ldd	r23, Z+21	; 0x15
    1bfc:	12 96       	adiw	r26, 0x02	; 2
    1bfe:	7c 93       	st	X, r23
    1c00:	6e 93       	st	-X, r22
    1c02:	11 97       	sbiw	r26, 0x01	; 1
    1c04:	11 8e       	std	Z+25, r1	; 0x19
    1c06:	10 8e       	std	Z+24, r1	; 0x18
    1c08:	9c 91       	ld	r25, X
    1c0a:	91 50       	subi	r25, 0x01	; 1
    1c0c:	9c 93       	st	X, r25
    1c0e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c10:	90 91 57 14 	lds	r25, 0x1457	; 0x801457 <uxTopReadyPriority>
    1c14:	9a 17       	cp	r25, r26
    1c16:	10 f4       	brcc	.+4      	; 0x1c1c <xTaskIncrementTick+0x198>
    1c18:	a0 93 57 14 	sts	0x1457, r26	; 0x801457 <uxTopReadyPriority>
    1c1c:	4a 9f       	mul	r20, r26
    1c1e:	d0 01       	movw	r26, r0
    1c20:	11 24       	eor	r1, r1
    1c22:	a7 56       	subi	r26, 0x67	; 103
    1c24:	bb 4e       	sbci	r27, 0xEB	; 235
    1c26:	11 96       	adiw	r26, 0x01	; 1
    1c28:	0d 90       	ld	r0, X+
    1c2a:	bc 91       	ld	r27, X
    1c2c:	a0 2d       	mov	r26, r0
    1c2e:	b7 83       	std	Z+7, r27	; 0x07
    1c30:	a6 83       	std	Z+6, r26	; 0x06
    1c32:	16 96       	adiw	r26, 0x06	; 6
    1c34:	6d 91       	ld	r22, X+
    1c36:	7c 91       	ld	r23, X
    1c38:	17 97       	sbiw	r26, 0x07	; 7
    1c3a:	71 87       	std	Z+9, r23	; 0x09
    1c3c:	60 87       	std	Z+8, r22	; 0x08
    1c3e:	16 96       	adiw	r26, 0x06	; 6
    1c40:	cd 91       	ld	r28, X+
    1c42:	dc 91       	ld	r29, X
    1c44:	17 97       	sbiw	r26, 0x07	; 7
    1c46:	3d 83       	std	Y+5, r19	; 0x05
    1c48:	2c 83       	std	Y+4, r18	; 0x04
    1c4a:	17 96       	adiw	r26, 0x07	; 7
    1c4c:	3c 93       	st	X, r19
    1c4e:	2e 93       	st	-X, r18
    1c50:	16 97       	sbiw	r26, 0x06	; 6
    1c52:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1c54:	4a 9f       	mul	r20, r26
    1c56:	d0 01       	movw	r26, r0
    1c58:	11 24       	eor	r1, r1
    1c5a:	a7 56       	subi	r26, 0x67	; 103
    1c5c:	bb 4e       	sbci	r27, 0xEB	; 235
    1c5e:	b5 87       	std	Z+13, r27	; 0x0d
    1c60:	a4 87       	std	Z+12, r26	; 0x0c
    1c62:	9c 91       	ld	r25, X
    1c64:	9f 5f       	subi	r25, 0xFF	; 255
    1c66:	9c 93       	st	X, r25
    1c68:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
    1c6c:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1c70:	22 8d       	ldd	r18, Z+26	; 0x1a
    1c72:	5a 96       	adiw	r26, 0x1a	; 26
    1c74:	9c 91       	ld	r25, X
    1c76:	29 17       	cp	r18, r25
    1c78:	08 f4       	brcc	.+2      	; 0x1c7c <xTaskIncrementTick+0x1f8>
    1c7a:	52 cf       	rjmp	.-348    	; 0x1b20 <xTaskIncrementTick+0x9c>
    1c7c:	85 2f       	mov	r24, r21
    1c7e:	50 cf       	rjmp	.-352    	; 0x1b20 <xTaskIncrementTick+0x9c>
    1c80:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    1c84:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1c88:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1c8a:	9b e0       	ldi	r25, 0x0B	; 11
    1c8c:	e9 9f       	mul	r30, r25
    1c8e:	f0 01       	movw	r30, r0
    1c90:	11 24       	eor	r1, r1
    1c92:	e7 56       	subi	r30, 0x67	; 103
    1c94:	fb 4e       	sbci	r31, 0xEB	; 235
    1c96:	90 81       	ld	r25, Z
    1c98:	92 30       	cpi	r25, 0x02	; 2
    1c9a:	08 f0       	brcs	.+2      	; 0x1c9e <xTaskIncrementTick+0x21a>
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	90 91 51 14 	lds	r25, 0x1451	; 0x801451 <xYieldPending>
    1ca2:	99 23       	and	r25, r25
    1ca4:	b1 f0       	breq	.+44     	; 0x1cd2 <xTaskIncrementTick+0x24e>
    1ca6:	81 e0       	ldi	r24, 0x01	; 1
    1ca8:	14 c0       	rjmp	.+40     	; 0x1cd2 <xTaskIncrementTick+0x24e>
    1caa:	80 91 52 14 	lds	r24, 0x1452	; 0x801452 <xPendedTicks>
    1cae:	90 91 53 14 	lds	r25, 0x1453	; 0x801453 <xPendedTicks+0x1>
    1cb2:	a0 91 54 14 	lds	r26, 0x1454	; 0x801454 <xPendedTicks+0x2>
    1cb6:	b0 91 55 14 	lds	r27, 0x1455	; 0x801455 <xPendedTicks+0x3>
    1cba:	01 96       	adiw	r24, 0x01	; 1
    1cbc:	a1 1d       	adc	r26, r1
    1cbe:	b1 1d       	adc	r27, r1
    1cc0:	80 93 52 14 	sts	0x1452, r24	; 0x801452 <xPendedTicks>
    1cc4:	90 93 53 14 	sts	0x1453, r25	; 0x801453 <xPendedTicks+0x1>
    1cc8:	a0 93 54 14 	sts	0x1454, r26	; 0x801454 <xPendedTicks+0x2>
    1ccc:	b0 93 55 14 	sts	0x1455, r27	; 0x801455 <xPendedTicks+0x3>
    1cd0:	80 e0       	ldi	r24, 0x00	; 0
    1cd2:	df 91       	pop	r29
    1cd4:	cf 91       	pop	r28
    1cd6:	1f 91       	pop	r17
    1cd8:	0f 91       	pop	r16
    1cda:	ff 90       	pop	r15
    1cdc:	ef 90       	pop	r14
    1cde:	df 90       	pop	r13
    1ce0:	cf 90       	pop	r12
    1ce2:	08 95       	ret

00001ce4 <xTaskResumeAll>:
    1ce4:	cf 92       	push	r12
    1ce6:	df 92       	push	r13
    1ce8:	ef 92       	push	r14
    1cea:	ff 92       	push	r15
    1cec:	0f 93       	push	r16
    1cee:	1f 93       	push	r17
    1cf0:	cf 93       	push	r28
    1cf2:	df 93       	push	r29
    1cf4:	0f b6       	in	r0, 0x3f	; 63
    1cf6:	f8 94       	cli
    1cf8:	0f 92       	push	r0
    1cfa:	80 91 48 14 	lds	r24, 0x1448	; 0x801448 <uxSchedulerSuspended>
    1cfe:	81 50       	subi	r24, 0x01	; 1
    1d00:	80 93 48 14 	sts	0x1448, r24	; 0x801448 <uxSchedulerSuspended>
    1d04:	80 91 48 14 	lds	r24, 0x1448	; 0x801448 <uxSchedulerSuspended>
    1d08:	81 11       	cpse	r24, r1
    1d0a:	c4 c0       	rjmp	.+392    	; 0x1e94 <xTaskResumeAll+0x1b0>
    1d0c:	80 91 5c 14 	lds	r24, 0x145C	; 0x80145c <uxCurrentNumberOfTasks>
    1d10:	81 11       	cpse	r24, r1
    1d12:	8b c0       	rjmp	.+278    	; 0x1e2a <xTaskResumeAll+0x146>
    1d14:	c2 c0       	rjmp	.+388    	; 0x1e9a <xTaskResumeAll+0x1b6>
    1d16:	d8 01       	movw	r26, r16
    1d18:	17 96       	adiw	r26, 0x07	; 7
    1d1a:	ed 91       	ld	r30, X+
    1d1c:	fc 91       	ld	r31, X
    1d1e:	18 97       	sbiw	r26, 0x08	; 8
    1d20:	00 84       	ldd	r0, Z+8	; 0x08
    1d22:	f1 85       	ldd	r31, Z+9	; 0x09
    1d24:	e0 2d       	mov	r30, r0
    1d26:	a0 8d       	ldd	r26, Z+24	; 0x18
    1d28:	b1 8d       	ldd	r27, Z+25	; 0x19
    1d2a:	82 89       	ldd	r24, Z+18	; 0x12
    1d2c:	93 89       	ldd	r25, Z+19	; 0x13
    1d2e:	64 89       	ldd	r22, Z+20	; 0x14
    1d30:	75 89       	ldd	r23, Z+21	; 0x15
    1d32:	ec 01       	movw	r28, r24
    1d34:	7f 83       	std	Y+7, r23	; 0x07
    1d36:	6e 83       	std	Y+6, r22	; 0x06
    1d38:	84 89       	ldd	r24, Z+20	; 0x14
    1d3a:	95 89       	ldd	r25, Z+21	; 0x15
    1d3c:	62 89       	ldd	r22, Z+18	; 0x12
    1d3e:	73 89       	ldd	r23, Z+19	; 0x13
    1d40:	ec 01       	movw	r28, r24
    1d42:	7d 83       	std	Y+5, r23	; 0x05
    1d44:	6c 83       	std	Y+4, r22	; 0x04
    1d46:	cf 01       	movw	r24, r30
    1d48:	0e 96       	adiw	r24, 0x0e	; 14
    1d4a:	11 96       	adiw	r26, 0x01	; 1
    1d4c:	6d 91       	ld	r22, X+
    1d4e:	7c 91       	ld	r23, X
    1d50:	12 97       	sbiw	r26, 0x02	; 2
    1d52:	68 17       	cp	r22, r24
    1d54:	79 07       	cpc	r23, r25
    1d56:	31 f4       	brne	.+12     	; 0x1d64 <xTaskResumeAll+0x80>
    1d58:	84 89       	ldd	r24, Z+20	; 0x14
    1d5a:	95 89       	ldd	r25, Z+21	; 0x15
    1d5c:	12 96       	adiw	r26, 0x02	; 2
    1d5e:	9c 93       	st	X, r25
    1d60:	8e 93       	st	-X, r24
    1d62:	11 97       	sbiw	r26, 0x01	; 1
    1d64:	11 8e       	std	Z+25, r1	; 0x19
    1d66:	10 8e       	std	Z+24, r1	; 0x18
    1d68:	8c 91       	ld	r24, X
    1d6a:	81 50       	subi	r24, 0x01	; 1
    1d6c:	8c 93       	st	X, r24
    1d6e:	a4 85       	ldd	r26, Z+12	; 0x0c
    1d70:	b5 85       	ldd	r27, Z+13	; 0x0d
    1d72:	86 81       	ldd	r24, Z+6	; 0x06
    1d74:	97 81       	ldd	r25, Z+7	; 0x07
    1d76:	60 85       	ldd	r22, Z+8	; 0x08
    1d78:	71 85       	ldd	r23, Z+9	; 0x09
    1d7a:	ec 01       	movw	r28, r24
    1d7c:	7f 83       	std	Y+7, r23	; 0x07
    1d7e:	6e 83       	std	Y+6, r22	; 0x06
    1d80:	80 85       	ldd	r24, Z+8	; 0x08
    1d82:	91 85       	ldd	r25, Z+9	; 0x09
    1d84:	66 81       	ldd	r22, Z+6	; 0x06
    1d86:	77 81       	ldd	r23, Z+7	; 0x07
    1d88:	ec 01       	movw	r28, r24
    1d8a:	7d 83       	std	Y+5, r23	; 0x05
    1d8c:	6c 83       	std	Y+4, r22	; 0x04
    1d8e:	cf 01       	movw	r24, r30
    1d90:	02 96       	adiw	r24, 0x02	; 2
    1d92:	11 96       	adiw	r26, 0x01	; 1
    1d94:	6d 91       	ld	r22, X+
    1d96:	7c 91       	ld	r23, X
    1d98:	12 97       	sbiw	r26, 0x02	; 2
    1d9a:	68 17       	cp	r22, r24
    1d9c:	79 07       	cpc	r23, r25
    1d9e:	31 f4       	brne	.+12     	; 0x1dac <xTaskResumeAll+0xc8>
    1da0:	60 85       	ldd	r22, Z+8	; 0x08
    1da2:	71 85       	ldd	r23, Z+9	; 0x09
    1da4:	12 96       	adiw	r26, 0x02	; 2
    1da6:	7c 93       	st	X, r23
    1da8:	6e 93       	st	-X, r22
    1daa:	11 97       	sbiw	r26, 0x01	; 1
    1dac:	15 86       	std	Z+13, r1	; 0x0d
    1dae:	14 86       	std	Z+12, r1	; 0x0c
    1db0:	2c 91       	ld	r18, X
    1db2:	21 50       	subi	r18, 0x01	; 1
    1db4:	2c 93       	st	X, r18
    1db6:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1db8:	20 91 57 14 	lds	r18, 0x1457	; 0x801457 <uxTopReadyPriority>
    1dbc:	2a 17       	cp	r18, r26
    1dbe:	10 f4       	brcc	.+4      	; 0x1dc4 <xTaskResumeAll+0xe0>
    1dc0:	a0 93 57 14 	sts	0x1457, r26	; 0x801457 <uxTopReadyPriority>
    1dc4:	3a 9f       	mul	r19, r26
    1dc6:	d0 01       	movw	r26, r0
    1dc8:	11 24       	eor	r1, r1
    1dca:	a7 56       	subi	r26, 0x67	; 103
    1dcc:	bb 4e       	sbci	r27, 0xEB	; 235
    1dce:	11 96       	adiw	r26, 0x01	; 1
    1dd0:	0d 90       	ld	r0, X+
    1dd2:	bc 91       	ld	r27, X
    1dd4:	a0 2d       	mov	r26, r0
    1dd6:	b7 83       	std	Z+7, r27	; 0x07
    1dd8:	a6 83       	std	Z+6, r26	; 0x06
    1dda:	16 96       	adiw	r26, 0x06	; 6
    1ddc:	6d 91       	ld	r22, X+
    1dde:	7c 91       	ld	r23, X
    1de0:	17 97       	sbiw	r26, 0x07	; 7
    1de2:	71 87       	std	Z+9, r23	; 0x09
    1de4:	60 87       	std	Z+8, r22	; 0x08
    1de6:	16 96       	adiw	r26, 0x06	; 6
    1de8:	6d 91       	ld	r22, X+
    1dea:	7c 91       	ld	r23, X
    1dec:	17 97       	sbiw	r26, 0x07	; 7
    1dee:	eb 01       	movw	r28, r22
    1df0:	9d 83       	std	Y+5, r25	; 0x05
    1df2:	8c 83       	std	Y+4, r24	; 0x04
    1df4:	17 96       	adiw	r26, 0x07	; 7
    1df6:	9c 93       	st	X, r25
    1df8:	8e 93       	st	-X, r24
    1dfa:	16 97       	sbiw	r26, 0x06	; 6
    1dfc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1dfe:	3a 9f       	mul	r19, r26
    1e00:	d0 01       	movw	r26, r0
    1e02:	11 24       	eor	r1, r1
    1e04:	a7 56       	subi	r26, 0x67	; 103
    1e06:	bb 4e       	sbci	r27, 0xEB	; 235
    1e08:	b5 87       	std	Z+13, r27	; 0x0d
    1e0a:	a4 87       	std	Z+12, r26	; 0x0c
    1e0c:	8c 91       	ld	r24, X
    1e0e:	8f 5f       	subi	r24, 0xFF	; 255
    1e10:	8c 93       	st	X, r24
    1e12:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
    1e16:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1e1a:	92 8d       	ldd	r25, Z+26	; 0x1a
    1e1c:	5a 96       	adiw	r26, 0x1a	; 26
    1e1e:	8c 91       	ld	r24, X
    1e20:	98 17       	cp	r25, r24
    1e22:	48 f0       	brcs	.+18     	; 0x1e36 <xTaskResumeAll+0x152>
    1e24:	40 93 51 14 	sts	0x1451, r20	; 0x801451 <xYieldPending>
    1e28:	06 c0       	rjmp	.+12     	; 0x1e36 <xTaskResumeAll+0x152>
    1e2a:	e0 e0       	ldi	r30, 0x00	; 0
    1e2c:	f0 e0       	ldi	r31, 0x00	; 0
    1e2e:	04 e7       	ldi	r16, 0x74	; 116
    1e30:	14 e1       	ldi	r17, 0x14	; 20
    1e32:	3b e0       	ldi	r19, 0x0B	; 11
    1e34:	41 e0       	ldi	r20, 0x01	; 1
    1e36:	d8 01       	movw	r26, r16
    1e38:	8c 91       	ld	r24, X
    1e3a:	81 11       	cpse	r24, r1
    1e3c:	6c cf       	rjmp	.-296    	; 0x1d16 <xTaskResumeAll+0x32>
    1e3e:	ef 2b       	or	r30, r31
    1e40:	09 f0       	breq	.+2      	; 0x1e44 <xTaskResumeAll+0x160>
    1e42:	d2 db       	rcall	.-2140   	; 0x15e8 <prvResetNextTaskUnblockTime>
    1e44:	c0 90 52 14 	lds	r12, 0x1452	; 0x801452 <xPendedTicks>
    1e48:	d0 90 53 14 	lds	r13, 0x1453	; 0x801453 <xPendedTicks+0x1>
    1e4c:	e0 90 54 14 	lds	r14, 0x1454	; 0x801454 <xPendedTicks+0x2>
    1e50:	f0 90 55 14 	lds	r15, 0x1455	; 0x801455 <xPendedTicks+0x3>
    1e54:	c1 14       	cp	r12, r1
    1e56:	d1 04       	cpc	r13, r1
    1e58:	e1 04       	cpc	r14, r1
    1e5a:	f1 04       	cpc	r15, r1
    1e5c:	99 f0       	breq	.+38     	; 0x1e84 <xTaskResumeAll+0x1a0>
    1e5e:	c1 e0       	ldi	r28, 0x01	; 1
    1e60:	11 de       	rcall	.-990    	; 0x1a84 <xTaskIncrementTick>
    1e62:	81 11       	cpse	r24, r1
    1e64:	c0 93 51 14 	sts	0x1451, r28	; 0x801451 <xYieldPending>
    1e68:	b1 e0       	ldi	r27, 0x01	; 1
    1e6a:	cb 1a       	sub	r12, r27
    1e6c:	d1 08       	sbc	r13, r1
    1e6e:	e1 08       	sbc	r14, r1
    1e70:	f1 08       	sbc	r15, r1
    1e72:	b1 f7       	brne	.-20     	; 0x1e60 <xTaskResumeAll+0x17c>
    1e74:	10 92 52 14 	sts	0x1452, r1	; 0x801452 <xPendedTicks>
    1e78:	10 92 53 14 	sts	0x1453, r1	; 0x801453 <xPendedTicks+0x1>
    1e7c:	10 92 54 14 	sts	0x1454, r1	; 0x801454 <xPendedTicks+0x2>
    1e80:	10 92 55 14 	sts	0x1455, r1	; 0x801455 <xPendedTicks+0x3>
    1e84:	80 91 51 14 	lds	r24, 0x1451	; 0x801451 <xYieldPending>
    1e88:	88 23       	and	r24, r24
    1e8a:	31 f0       	breq	.+12     	; 0x1e98 <xTaskResumeAll+0x1b4>
    1e8c:	0e 94 34 04 	call	0x868	; 0x868 <vPortYield>
    1e90:	81 e0       	ldi	r24, 0x01	; 1
    1e92:	03 c0       	rjmp	.+6      	; 0x1e9a <xTaskResumeAll+0x1b6>
    1e94:	80 e0       	ldi	r24, 0x00	; 0
    1e96:	01 c0       	rjmp	.+2      	; 0x1e9a <xTaskResumeAll+0x1b6>
    1e98:	80 e0       	ldi	r24, 0x00	; 0
    1e9a:	0f 90       	pop	r0
    1e9c:	0f be       	out	0x3f, r0	; 63
    1e9e:	df 91       	pop	r29
    1ea0:	cf 91       	pop	r28
    1ea2:	1f 91       	pop	r17
    1ea4:	0f 91       	pop	r16
    1ea6:	ff 90       	pop	r15
    1ea8:	ef 90       	pop	r14
    1eaa:	df 90       	pop	r13
    1eac:	cf 90       	pop	r12
    1eae:	08 95       	ret

00001eb0 <xTaskDelayUntil>:
    1eb0:	cf 92       	push	r12
    1eb2:	df 92       	push	r13
    1eb4:	ef 92       	push	r14
    1eb6:	ff 92       	push	r15
    1eb8:	0f 93       	push	r16
    1eba:	1f 93       	push	r17
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	ec 01       	movw	r28, r24
    1ec2:	6a 01       	movw	r12, r20
    1ec4:	7b 01       	movw	r14, r22
    1ec6:	ca dd       	rcall	.-1132   	; 0x1a5c <vTaskSuspendAll>
    1ec8:	00 91 58 14 	lds	r16, 0x1458	; 0x801458 <xTickCount>
    1ecc:	10 91 59 14 	lds	r17, 0x1459	; 0x801459 <xTickCount+0x1>
    1ed0:	20 91 5a 14 	lds	r18, 0x145A	; 0x80145a <xTickCount+0x2>
    1ed4:	30 91 5b 14 	lds	r19, 0x145B	; 0x80145b <xTickCount+0x3>
    1ed8:	88 81       	ld	r24, Y
    1eda:	99 81       	ldd	r25, Y+1	; 0x01
    1edc:	aa 81       	ldd	r26, Y+2	; 0x02
    1ede:	bb 81       	ldd	r27, Y+3	; 0x03
    1ee0:	ac 01       	movw	r20, r24
    1ee2:	bd 01       	movw	r22, r26
    1ee4:	4c 0d       	add	r20, r12
    1ee6:	5d 1d       	adc	r21, r13
    1ee8:	6e 1d       	adc	r22, r14
    1eea:	7f 1d       	adc	r23, r15
    1eec:	08 17       	cp	r16, r24
    1eee:	19 07       	cpc	r17, r25
    1ef0:	2a 07       	cpc	r18, r26
    1ef2:	3b 07       	cpc	r19, r27
    1ef4:	b8 f4       	brcc	.+46     	; 0x1f24 <xTaskDelayUntil+0x74>
    1ef6:	48 17       	cp	r20, r24
    1ef8:	59 07       	cpc	r21, r25
    1efa:	6a 07       	cpc	r22, r26
    1efc:	7b 07       	cpc	r23, r27
    1efe:	90 f5       	brcc	.+100    	; 0x1f64 <xTaskDelayUntil+0xb4>
    1f00:	ff 24       	eor	r15, r15
    1f02:	f3 94       	inc	r15
    1f04:	04 17       	cp	r16, r20
    1f06:	15 07       	cpc	r17, r21
    1f08:	26 07       	cpc	r18, r22
    1f0a:	37 07       	cpc	r19, r23
    1f0c:	08 f0       	brcs	.+2      	; 0x1f10 <xTaskDelayUntil+0x60>
    1f0e:	f1 2c       	mov	r15, r1
    1f10:	48 83       	st	Y, r20
    1f12:	59 83       	std	Y+1, r21	; 0x01
    1f14:	6a 83       	std	Y+2, r22	; 0x02
    1f16:	7b 83       	std	Y+3, r23	; 0x03
    1f18:	04 17       	cp	r16, r20
    1f1a:	15 07       	cpc	r17, r21
    1f1c:	26 07       	cpc	r18, r22
    1f1e:	37 07       	cpc	r19, r23
    1f20:	a0 f4       	brcc	.+40     	; 0x1f4a <xTaskDelayUntil+0x9a>
    1f22:	0b c0       	rjmp	.+22     	; 0x1f3a <xTaskDelayUntil+0x8a>
    1f24:	48 17       	cp	r20, r24
    1f26:	59 07       	cpc	r21, r25
    1f28:	6a 07       	cpc	r22, r26
    1f2a:	7b 07       	cpc	r23, r27
    1f2c:	a0 f0       	brcs	.+40     	; 0x1f56 <xTaskDelayUntil+0xa6>
    1f2e:	04 17       	cp	r16, r20
    1f30:	15 07       	cpc	r17, r21
    1f32:	26 07       	cpc	r18, r22
    1f34:	37 07       	cpc	r19, r23
    1f36:	78 f0       	brcs	.+30     	; 0x1f56 <xTaskDelayUntil+0xa6>
    1f38:	15 c0       	rjmp	.+42     	; 0x1f64 <xTaskDelayUntil+0xb4>
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	ba 01       	movw	r22, r20
    1f3e:	60 1b       	sub	r22, r16
    1f40:	71 0b       	sbc	r23, r17
    1f42:	82 0b       	sbc	r24, r18
    1f44:	93 0b       	sbc	r25, r19
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	76 db       	rcall	.-2324   	; 0x1636 <prvAddCurrentTaskToDelayedList>
    1f4a:	cc de       	rcall	.-616    	; 0x1ce4 <xTaskResumeAll>
    1f4c:	81 11       	cpse	r24, r1
    1f4e:	10 c0       	rjmp	.+32     	; 0x1f70 <xTaskDelayUntil+0xc0>
    1f50:	0e 94 34 04 	call	0x868	; 0x868 <vPortYield>
    1f54:	0d c0       	rjmp	.+26     	; 0x1f70 <xTaskDelayUntil+0xc0>
    1f56:	48 83       	st	Y, r20
    1f58:	59 83       	std	Y+1, r21	; 0x01
    1f5a:	6a 83       	std	Y+2, r22	; 0x02
    1f5c:	7b 83       	std	Y+3, r23	; 0x03
    1f5e:	ff 24       	eor	r15, r15
    1f60:	f3 94       	inc	r15
    1f62:	eb cf       	rjmp	.-42     	; 0x1f3a <xTaskDelayUntil+0x8a>
    1f64:	48 83       	st	Y, r20
    1f66:	59 83       	std	Y+1, r21	; 0x01
    1f68:	6a 83       	std	Y+2, r22	; 0x02
    1f6a:	7b 83       	std	Y+3, r23	; 0x03
    1f6c:	f1 2c       	mov	r15, r1
    1f6e:	ed cf       	rjmp	.-38     	; 0x1f4a <xTaskDelayUntil+0x9a>
    1f70:	8f 2d       	mov	r24, r15
    1f72:	df 91       	pop	r29
    1f74:	cf 91       	pop	r28
    1f76:	1f 91       	pop	r17
    1f78:	0f 91       	pop	r16
    1f7a:	ff 90       	pop	r15
    1f7c:	ef 90       	pop	r14
    1f7e:	df 90       	pop	r13
    1f80:	cf 90       	pop	r12
    1f82:	08 95       	ret

00001f84 <vTaskDelay>:
    1f84:	cf 92       	push	r12
    1f86:	df 92       	push	r13
    1f88:	ef 92       	push	r14
    1f8a:	ff 92       	push	r15
    1f8c:	6b 01       	movw	r12, r22
    1f8e:	7c 01       	movw	r14, r24
    1f90:	67 2b       	or	r22, r23
    1f92:	68 2b       	or	r22, r24
    1f94:	69 2b       	or	r22, r25
    1f96:	41 f0       	breq	.+16     	; 0x1fa8 <vTaskDelay+0x24>
    1f98:	61 dd       	rcall	.-1342   	; 0x1a5c <vTaskSuspendAll>
    1f9a:	40 e0       	ldi	r20, 0x00	; 0
    1f9c:	c7 01       	movw	r24, r14
    1f9e:	b6 01       	movw	r22, r12
    1fa0:	4a db       	rcall	.-2412   	; 0x1636 <prvAddCurrentTaskToDelayedList>
    1fa2:	a0 de       	rcall	.-704    	; 0x1ce4 <xTaskResumeAll>
    1fa4:	81 11       	cpse	r24, r1
    1fa6:	02 c0       	rjmp	.+4      	; 0x1fac <vTaskDelay+0x28>
    1fa8:	0e 94 34 04 	call	0x868	; 0x868 <vPortYield>
    1fac:	ff 90       	pop	r15
    1fae:	ef 90       	pop	r14
    1fb0:	df 90       	pop	r13
    1fb2:	cf 90       	pop	r12
    1fb4:	08 95       	ret

00001fb6 <vTaskSwitchContext>:
    1fb6:	80 91 48 14 	lds	r24, 0x1448	; 0x801448 <uxSchedulerSuspended>
    1fba:	88 23       	and	r24, r24
    1fbc:	21 f0       	breq	.+8      	; 0x1fc6 <vTaskSwitchContext+0x10>
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	80 93 51 14 	sts	0x1451, r24	; 0x801451 <xYieldPending>
    1fc4:	08 95       	ret
    1fc6:	10 92 51 14 	sts	0x1451, r1	; 0x801451 <xYieldPending>
    1fca:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
    1fce:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1fd2:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    1fd6:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1fda:	2d 91       	ld	r18, X+
    1fdc:	3c 91       	ld	r19, X
    1fde:	83 8d       	ldd	r24, Z+27	; 0x1b
    1fe0:	94 8d       	ldd	r25, Z+28	; 0x1c
    1fe2:	82 17       	cp	r24, r18
    1fe4:	93 07       	cpc	r25, r19
    1fe6:	58 f0       	brcs	.+22     	; 0x1ffe <vTaskSwitchContext+0x48>
    1fe8:	60 91 07 15 	lds	r22, 0x1507	; 0x801507 <pxCurrentTCB>
    1fec:	70 91 08 15 	lds	r23, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1ff0:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <pxCurrentTCB>
    1ff4:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    1ff8:	63 5e       	subi	r22, 0xE3	; 227
    1ffa:	7f 4f       	sbci	r23, 0xFF	; 255
    1ffc:	b5 d6       	rcall	.+3434   	; 0x2d68 <vApplicationStackOverflowHook>
    1ffe:	80 91 57 14 	lds	r24, 0x1457	; 0x801457 <uxTopReadyPriority>
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	9b e0       	ldi	r25, 0x0B	; 11
    2008:	89 9f       	mul	r24, r25
    200a:	f0 01       	movw	r30, r0
    200c:	11 24       	eor	r1, r1
    200e:	e7 56       	subi	r30, 0x67	; 103
    2010:	fb 4e       	sbci	r31, 0xEB	; 235
    2012:	90 81       	ld	r25, Z
    2014:	91 11       	cpse	r25, r1
    2016:	0e c0       	rjmp	.+28     	; 0x2034 <vTaskSwitchContext+0x7e>
    2018:	4b e0       	ldi	r20, 0x0B	; 11
    201a:	81 50       	subi	r24, 0x01	; 1
    201c:	28 2f       	mov	r18, r24
    201e:	30 e0       	ldi	r19, 0x00	; 0
    2020:	42 9f       	mul	r20, r18
    2022:	f0 01       	movw	r30, r0
    2024:	43 9f       	mul	r20, r19
    2026:	f0 0d       	add	r31, r0
    2028:	11 24       	eor	r1, r1
    202a:	e7 56       	subi	r30, 0x67	; 103
    202c:	fb 4e       	sbci	r31, 0xEB	; 235
    202e:	90 81       	ld	r25, Z
    2030:	99 23       	and	r25, r25
    2032:	99 f3       	breq	.-26     	; 0x201a <vTaskSwitchContext+0x64>
    2034:	9b e0       	ldi	r25, 0x0B	; 11
    2036:	92 9f       	mul	r25, r18
    2038:	a0 01       	movw	r20, r0
    203a:	93 9f       	mul	r25, r19
    203c:	50 0d       	add	r21, r0
    203e:	11 24       	eor	r1, r1
    2040:	da 01       	movw	r26, r20
    2042:	a7 56       	subi	r26, 0x67	; 103
    2044:	bb 4e       	sbci	r27, 0xEB	; 235
    2046:	11 96       	adiw	r26, 0x01	; 1
    2048:	ed 91       	ld	r30, X+
    204a:	fc 91       	ld	r31, X
    204c:	12 97       	sbiw	r26, 0x02	; 2
    204e:	04 80       	ldd	r0, Z+4	; 0x04
    2050:	f5 81       	ldd	r31, Z+5	; 0x05
    2052:	e0 2d       	mov	r30, r0
    2054:	12 96       	adiw	r26, 0x02	; 2
    2056:	fc 93       	st	X, r31
    2058:	ee 93       	st	-X, r30
    205a:	11 97       	sbiw	r26, 0x01	; 1
    205c:	44 56       	subi	r20, 0x64	; 100
    205e:	5b 4e       	sbci	r21, 0xEB	; 235
    2060:	e4 17       	cp	r30, r20
    2062:	f5 07       	cpc	r31, r21
    2064:	29 f4       	brne	.+10     	; 0x2070 <vTaskSwitchContext+0xba>
    2066:	44 81       	ldd	r20, Z+4	; 0x04
    2068:	55 81       	ldd	r21, Z+5	; 0x05
    206a:	fd 01       	movw	r30, r26
    206c:	52 83       	std	Z+2, r21	; 0x02
    206e:	41 83       	std	Z+1, r20	; 0x01
    2070:	9b e0       	ldi	r25, 0x0B	; 11
    2072:	92 9f       	mul	r25, r18
    2074:	f0 01       	movw	r30, r0
    2076:	93 9f       	mul	r25, r19
    2078:	f0 0d       	add	r31, r0
    207a:	11 24       	eor	r1, r1
    207c:	e7 56       	subi	r30, 0x67	; 103
    207e:	fb 4e       	sbci	r31, 0xEB	; 235
    2080:	01 80       	ldd	r0, Z+1	; 0x01
    2082:	f2 81       	ldd	r31, Z+2	; 0x02
    2084:	e0 2d       	mov	r30, r0
    2086:	20 85       	ldd	r18, Z+8	; 0x08
    2088:	31 85       	ldd	r19, Z+9	; 0x09
    208a:	30 93 08 15 	sts	0x1508, r19	; 0x801508 <pxCurrentTCB+0x1>
    208e:	20 93 07 15 	sts	0x1507, r18	; 0x801507 <pxCurrentTCB>
    2092:	80 93 57 14 	sts	0x1457, r24	; 0x801457 <uxTopReadyPriority>
    2096:	08 95       	ret

00002098 <vTaskPlaceOnEventList>:
    2098:	cf 92       	push	r12
    209a:	df 92       	push	r13
    209c:	ef 92       	push	r14
    209e:	ff 92       	push	r15
    20a0:	6a 01       	movw	r12, r20
    20a2:	7b 01       	movw	r14, r22
    20a4:	60 91 07 15 	lds	r22, 0x1507	; 0x801507 <pxCurrentTCB>
    20a8:	70 91 08 15 	lds	r23, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    20ac:	62 5f       	subi	r22, 0xF2	; 242
    20ae:	7f 4f       	sbci	r23, 0xFF	; 255
    20b0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsert>
    20b4:	41 e0       	ldi	r20, 0x01	; 1
    20b6:	c7 01       	movw	r24, r14
    20b8:	b6 01       	movw	r22, r12
    20ba:	bd da       	rcall	.-2694   	; 0x1636 <prvAddCurrentTaskToDelayedList>
    20bc:	ff 90       	pop	r15
    20be:	ef 90       	pop	r14
    20c0:	df 90       	pop	r13
    20c2:	cf 90       	pop	r12
    20c4:	08 95       	ret

000020c6 <vTaskPlaceOnEventListRestricted>:
    20c6:	cf 93       	push	r28
    20c8:	df 93       	push	r29
    20ca:	fc 01       	movw	r30, r24
    20cc:	cb 01       	movw	r24, r22
    20ce:	ba 01       	movw	r22, r20
    20d0:	a1 81       	ldd	r26, Z+1	; 0x01
    20d2:	b2 81       	ldd	r27, Z+2	; 0x02
    20d4:	c0 91 07 15 	lds	r28, 0x1507	; 0x801507 <pxCurrentTCB>
    20d8:	d0 91 08 15 	lds	r29, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    20dc:	bb 8b       	std	Y+19, r27	; 0x13
    20de:	aa 8b       	std	Y+18, r26	; 0x12
    20e0:	c0 91 07 15 	lds	r28, 0x1507	; 0x801507 <pxCurrentTCB>
    20e4:	d0 91 08 15 	lds	r29, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    20e8:	16 96       	adiw	r26, 0x06	; 6
    20ea:	4d 91       	ld	r20, X+
    20ec:	5c 91       	ld	r21, X
    20ee:	17 97       	sbiw	r26, 0x07	; 7
    20f0:	5d 8b       	std	Y+21, r21	; 0x15
    20f2:	4c 8b       	std	Y+20, r20	; 0x14
    20f4:	16 96       	adiw	r26, 0x06	; 6
    20f6:	cd 91       	ld	r28, X+
    20f8:	dc 91       	ld	r29, X
    20fa:	17 97       	sbiw	r26, 0x07	; 7
    20fc:	40 91 07 15 	lds	r20, 0x1507	; 0x801507 <pxCurrentTCB>
    2100:	50 91 08 15 	lds	r21, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    2104:	42 5f       	subi	r20, 0xF2	; 242
    2106:	5f 4f       	sbci	r21, 0xFF	; 255
    2108:	5d 83       	std	Y+5, r21	; 0x05
    210a:	4c 83       	std	Y+4, r20	; 0x04
    210c:	40 91 07 15 	lds	r20, 0x1507	; 0x801507 <pxCurrentTCB>
    2110:	50 91 08 15 	lds	r21, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    2114:	42 5f       	subi	r20, 0xF2	; 242
    2116:	5f 4f       	sbci	r21, 0xFF	; 255
    2118:	17 96       	adiw	r26, 0x07	; 7
    211a:	5c 93       	st	X, r21
    211c:	4e 93       	st	-X, r20
    211e:	16 97       	sbiw	r26, 0x06	; 6
    2120:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
    2124:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    2128:	59 96       	adiw	r26, 0x19	; 25
    212a:	fc 93       	st	X, r31
    212c:	ee 93       	st	-X, r30
    212e:	58 97       	sbiw	r26, 0x18	; 24
    2130:	30 81       	ld	r19, Z
    2132:	3f 5f       	subi	r19, 0xFF	; 255
    2134:	30 83       	st	Z, r19
    2136:	22 23       	and	r18, r18
    2138:	19 f0       	breq	.+6      	; 0x2140 <vTaskPlaceOnEventListRestricted+0x7a>
    213a:	6f ef       	ldi	r22, 0xFF	; 255
    213c:	7f ef       	ldi	r23, 0xFF	; 255
    213e:	cb 01       	movw	r24, r22
    2140:	42 2f       	mov	r20, r18
    2142:	79 da       	rcall	.-2830   	; 0x1636 <prvAddCurrentTaskToDelayedList>
    2144:	df 91       	pop	r29
    2146:	cf 91       	pop	r28
    2148:	08 95       	ret

0000214a <xTaskRemoveFromEventList>:
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	dc 01       	movw	r26, r24
    2150:	17 96       	adiw	r26, 0x07	; 7
    2152:	ed 91       	ld	r30, X+
    2154:	fc 91       	ld	r31, X
    2156:	18 97       	sbiw	r26, 0x08	; 8
    2158:	00 84       	ldd	r0, Z+8	; 0x08
    215a:	f1 85       	ldd	r31, Z+9	; 0x09
    215c:	e0 2d       	mov	r30, r0
    215e:	a0 8d       	ldd	r26, Z+24	; 0x18
    2160:	b1 8d       	ldd	r27, Z+25	; 0x19
    2162:	c2 89       	ldd	r28, Z+18	; 0x12
    2164:	d3 89       	ldd	r29, Z+19	; 0x13
    2166:	84 89       	ldd	r24, Z+20	; 0x14
    2168:	95 89       	ldd	r25, Z+21	; 0x15
    216a:	9f 83       	std	Y+7, r25	; 0x07
    216c:	8e 83       	std	Y+6, r24	; 0x06
    216e:	c4 89       	ldd	r28, Z+20	; 0x14
    2170:	d5 89       	ldd	r29, Z+21	; 0x15
    2172:	82 89       	ldd	r24, Z+18	; 0x12
    2174:	93 89       	ldd	r25, Z+19	; 0x13
    2176:	9d 83       	std	Y+5, r25	; 0x05
    2178:	8c 83       	std	Y+4, r24	; 0x04
    217a:	9f 01       	movw	r18, r30
    217c:	22 5f       	subi	r18, 0xF2	; 242
    217e:	3f 4f       	sbci	r19, 0xFF	; 255
    2180:	11 96       	adiw	r26, 0x01	; 1
    2182:	8d 91       	ld	r24, X+
    2184:	9c 91       	ld	r25, X
    2186:	12 97       	sbiw	r26, 0x02	; 2
    2188:	82 17       	cp	r24, r18
    218a:	93 07       	cpc	r25, r19
    218c:	31 f4       	brne	.+12     	; 0x219a <xTaskRemoveFromEventList+0x50>
    218e:	84 89       	ldd	r24, Z+20	; 0x14
    2190:	95 89       	ldd	r25, Z+21	; 0x15
    2192:	12 96       	adiw	r26, 0x02	; 2
    2194:	9c 93       	st	X, r25
    2196:	8e 93       	st	-X, r24
    2198:	11 97       	sbiw	r26, 0x01	; 1
    219a:	11 8e       	std	Z+25, r1	; 0x19
    219c:	10 8e       	std	Z+24, r1	; 0x18
    219e:	8c 91       	ld	r24, X
    21a0:	81 50       	subi	r24, 0x01	; 1
    21a2:	8c 93       	st	X, r24
    21a4:	80 91 48 14 	lds	r24, 0x1448	; 0x801448 <uxSchedulerSuspended>
    21a8:	81 11       	cpse	r24, r1
    21aa:	52 c0       	rjmp	.+164    	; 0x2250 <__stack+0x51>
    21ac:	a4 85       	ldd	r26, Z+12	; 0x0c
    21ae:	b5 85       	ldd	r27, Z+13	; 0x0d
    21b0:	c6 81       	ldd	r28, Z+6	; 0x06
    21b2:	d7 81       	ldd	r29, Z+7	; 0x07
    21b4:	80 85       	ldd	r24, Z+8	; 0x08
    21b6:	91 85       	ldd	r25, Z+9	; 0x09
    21b8:	9f 83       	std	Y+7, r25	; 0x07
    21ba:	8e 83       	std	Y+6, r24	; 0x06
    21bc:	c0 85       	ldd	r28, Z+8	; 0x08
    21be:	d1 85       	ldd	r29, Z+9	; 0x09
    21c0:	86 81       	ldd	r24, Z+6	; 0x06
    21c2:	97 81       	ldd	r25, Z+7	; 0x07
    21c4:	9d 83       	std	Y+5, r25	; 0x05
    21c6:	8c 83       	std	Y+4, r24	; 0x04
    21c8:	9f 01       	movw	r18, r30
    21ca:	2e 5f       	subi	r18, 0xFE	; 254
    21cc:	3f 4f       	sbci	r19, 0xFF	; 255
    21ce:	11 96       	adiw	r26, 0x01	; 1
    21d0:	8d 91       	ld	r24, X+
    21d2:	9c 91       	ld	r25, X
    21d4:	12 97       	sbiw	r26, 0x02	; 2
    21d6:	82 17       	cp	r24, r18
    21d8:	93 07       	cpc	r25, r19
    21da:	31 f4       	brne	.+12     	; 0x21e8 <xTaskRemoveFromEventList+0x9e>
    21dc:	80 85       	ldd	r24, Z+8	; 0x08
    21de:	91 85       	ldd	r25, Z+9	; 0x09
    21e0:	12 96       	adiw	r26, 0x02	; 2
    21e2:	9c 93       	st	X, r25
    21e4:	8e 93       	st	-X, r24
    21e6:	11 97       	sbiw	r26, 0x01	; 1
    21e8:	15 86       	std	Z+13, r1	; 0x0d
    21ea:	14 86       	std	Z+12, r1	; 0x0c
    21ec:	8c 91       	ld	r24, X
    21ee:	81 50       	subi	r24, 0x01	; 1
    21f0:	8c 93       	st	X, r24
    21f2:	a2 8d       	ldd	r26, Z+26	; 0x1a
    21f4:	80 91 57 14 	lds	r24, 0x1457	; 0x801457 <uxTopReadyPriority>
    21f8:	8a 17       	cp	r24, r26
    21fa:	10 f4       	brcc	.+4      	; 0x2200 <__stack+0x1>
    21fc:	a0 93 57 14 	sts	0x1457, r26	; 0x801457 <uxTopReadyPriority>
    2200:	8b e0       	ldi	r24, 0x0B	; 11
    2202:	8a 9f       	mul	r24, r26
    2204:	d0 01       	movw	r26, r0
    2206:	11 24       	eor	r1, r1
    2208:	a7 56       	subi	r26, 0x67	; 103
    220a:	bb 4e       	sbci	r27, 0xEB	; 235
    220c:	11 96       	adiw	r26, 0x01	; 1
    220e:	0d 90       	ld	r0, X+
    2210:	bc 91       	ld	r27, X
    2212:	a0 2d       	mov	r26, r0
    2214:	b7 83       	std	Z+7, r27	; 0x07
    2216:	a6 83       	std	Z+6, r26	; 0x06
    2218:	16 96       	adiw	r26, 0x06	; 6
    221a:	4d 91       	ld	r20, X+
    221c:	5c 91       	ld	r21, X
    221e:	17 97       	sbiw	r26, 0x07	; 7
    2220:	51 87       	std	Z+9, r21	; 0x09
    2222:	40 87       	std	Z+8, r20	; 0x08
    2224:	16 96       	adiw	r26, 0x06	; 6
    2226:	cd 91       	ld	r28, X+
    2228:	dc 91       	ld	r29, X
    222a:	17 97       	sbiw	r26, 0x07	; 7
    222c:	3d 83       	std	Y+5, r19	; 0x05
    222e:	2c 83       	std	Y+4, r18	; 0x04
    2230:	17 96       	adiw	r26, 0x07	; 7
    2232:	3c 93       	st	X, r19
    2234:	2e 93       	st	-X, r18
    2236:	16 97       	sbiw	r26, 0x06	; 6
    2238:	a2 8d       	ldd	r26, Z+26	; 0x1a
    223a:	8a 9f       	mul	r24, r26
    223c:	d0 01       	movw	r26, r0
    223e:	11 24       	eor	r1, r1
    2240:	a7 56       	subi	r26, 0x67	; 103
    2242:	bb 4e       	sbci	r27, 0xEB	; 235
    2244:	b5 87       	std	Z+13, r27	; 0x0d
    2246:	a4 87       	std	Z+12, r26	; 0x0c
    2248:	8c 91       	ld	r24, X
    224a:	8f 5f       	subi	r24, 0xFF	; 255
    224c:	8c 93       	st	X, r24
    224e:	1c c0       	rjmp	.+56     	; 0x2288 <__stack+0x89>
    2250:	44 e7       	ldi	r20, 0x74	; 116
    2252:	54 e1       	ldi	r21, 0x14	; 20
    2254:	da 01       	movw	r26, r20
    2256:	11 96       	adiw	r26, 0x01	; 1
    2258:	cd 91       	ld	r28, X+
    225a:	dc 91       	ld	r29, X
    225c:	12 97       	sbiw	r26, 0x02	; 2
    225e:	d3 8b       	std	Z+19, r29	; 0x13
    2260:	c2 8b       	std	Z+18, r28	; 0x12
    2262:	8e 81       	ldd	r24, Y+6	; 0x06
    2264:	9f 81       	ldd	r25, Y+7	; 0x07
    2266:	95 8b       	std	Z+21, r25	; 0x15
    2268:	84 8b       	std	Z+20, r24	; 0x14
    226a:	8e 81       	ldd	r24, Y+6	; 0x06
    226c:	9f 81       	ldd	r25, Y+7	; 0x07
    226e:	dc 01       	movw	r26, r24
    2270:	15 96       	adiw	r26, 0x05	; 5
    2272:	3c 93       	st	X, r19
    2274:	2e 93       	st	-X, r18
    2276:	14 97       	sbiw	r26, 0x04	; 4
    2278:	3f 83       	std	Y+7, r19	; 0x07
    227a:	2e 83       	std	Y+6, r18	; 0x06
    227c:	51 8f       	std	Z+25, r21	; 0x19
    227e:	40 8f       	std	Z+24, r20	; 0x18
    2280:	da 01       	movw	r26, r20
    2282:	8c 91       	ld	r24, X
    2284:	8f 5f       	subi	r24, 0xFF	; 255
    2286:	8c 93       	st	X, r24
    2288:	a0 91 07 15 	lds	r26, 0x1507	; 0x801507 <pxCurrentTCB>
    228c:	b0 91 08 15 	lds	r27, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    2290:	92 8d       	ldd	r25, Z+26	; 0x1a
    2292:	5a 96       	adiw	r26, 0x1a	; 26
    2294:	8c 91       	ld	r24, X
    2296:	89 17       	cp	r24, r25
    2298:	20 f4       	brcc	.+8      	; 0x22a2 <__stack+0xa3>
    229a:	81 e0       	ldi	r24, 0x01	; 1
    229c:	80 93 51 14 	sts	0x1451, r24	; 0x801451 <xYieldPending>
    22a0:	01 c0       	rjmp	.+2      	; 0x22a4 <__stack+0xa5>
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	df 91       	pop	r29
    22a6:	cf 91       	pop	r28
    22a8:	08 95       	ret

000022aa <vTaskSetTimeOutState>:
    22aa:	0f b6       	in	r0, 0x3f	; 63
    22ac:	f8 94       	cli
    22ae:	0f 92       	push	r0
    22b0:	20 91 50 14 	lds	r18, 0x1450	; 0x801450 <xNumOfOverflows>
    22b4:	fc 01       	movw	r30, r24
    22b6:	20 83       	st	Z, r18
    22b8:	40 91 58 14 	lds	r20, 0x1458	; 0x801458 <xTickCount>
    22bc:	50 91 59 14 	lds	r21, 0x1459	; 0x801459 <xTickCount+0x1>
    22c0:	60 91 5a 14 	lds	r22, 0x145A	; 0x80145a <xTickCount+0x2>
    22c4:	70 91 5b 14 	lds	r23, 0x145B	; 0x80145b <xTickCount+0x3>
    22c8:	41 83       	std	Z+1, r20	; 0x01
    22ca:	52 83       	std	Z+2, r21	; 0x02
    22cc:	63 83       	std	Z+3, r22	; 0x03
    22ce:	74 83       	std	Z+4, r23	; 0x04
    22d0:	0f 90       	pop	r0
    22d2:	0f be       	out	0x3f, r0	; 63
    22d4:	08 95       	ret

000022d6 <vTaskInternalSetTimeOutState>:
    22d6:	20 91 50 14 	lds	r18, 0x1450	; 0x801450 <xNumOfOverflows>
    22da:	fc 01       	movw	r30, r24
    22dc:	20 83       	st	Z, r18
    22de:	40 91 58 14 	lds	r20, 0x1458	; 0x801458 <xTickCount>
    22e2:	50 91 59 14 	lds	r21, 0x1459	; 0x801459 <xTickCount+0x1>
    22e6:	60 91 5a 14 	lds	r22, 0x145A	; 0x80145a <xTickCount+0x2>
    22ea:	70 91 5b 14 	lds	r23, 0x145B	; 0x80145b <xTickCount+0x3>
    22ee:	41 83       	std	Z+1, r20	; 0x01
    22f0:	52 83       	std	Z+2, r21	; 0x02
    22f2:	63 83       	std	Z+3, r22	; 0x03
    22f4:	74 83       	std	Z+4, r23	; 0x04
    22f6:	08 95       	ret

000022f8 <xTaskCheckForTimeOut>:
    22f8:	cf 92       	push	r12
    22fa:	df 92       	push	r13
    22fc:	ef 92       	push	r14
    22fe:	ff 92       	push	r15
    2300:	0f 93       	push	r16
    2302:	1f 93       	push	r17
    2304:	cf 93       	push	r28
    2306:	df 93       	push	r29
    2308:	fb 01       	movw	r30, r22
    230a:	0f b6       	in	r0, 0x3f	; 63
    230c:	f8 94       	cli
    230e:	0f 92       	push	r0
    2310:	40 91 58 14 	lds	r20, 0x1458	; 0x801458 <xTickCount>
    2314:	50 91 59 14 	lds	r21, 0x1459	; 0x801459 <xTickCount+0x1>
    2318:	60 91 5a 14 	lds	r22, 0x145A	; 0x80145a <xTickCount+0x2>
    231c:	70 91 5b 14 	lds	r23, 0x145B	; 0x80145b <xTickCount+0x3>
    2320:	00 81       	ld	r16, Z
    2322:	11 81       	ldd	r17, Z+1	; 0x01
    2324:	22 81       	ldd	r18, Z+2	; 0x02
    2326:	33 81       	ldd	r19, Z+3	; 0x03
    2328:	0f 3f       	cpi	r16, 0xFF	; 255
    232a:	af ef       	ldi	r26, 0xFF	; 255
    232c:	1a 07       	cpc	r17, r26
    232e:	2a 07       	cpc	r18, r26
    2330:	3a 07       	cpc	r19, r26
    2332:	79 f1       	breq	.+94     	; 0x2392 <xTaskCheckForTimeOut+0x9a>
    2334:	ec 01       	movw	r28, r24
    2336:	c9 80       	ldd	r12, Y+1	; 0x01
    2338:	da 80       	ldd	r13, Y+2	; 0x02
    233a:	eb 80       	ldd	r14, Y+3	; 0x03
    233c:	fc 80       	ldd	r15, Y+4	; 0x04
    233e:	a0 91 50 14 	lds	r26, 0x1450	; 0x801450 <xNumOfOverflows>
    2342:	b8 81       	ld	r27, Y
    2344:	ba 17       	cp	r27, r26
    2346:	59 f0       	breq	.+22     	; 0x235e <xTaskCheckForTimeOut+0x66>
    2348:	4c 15       	cp	r20, r12
    234a:	5d 05       	cpc	r21, r13
    234c:	6e 05       	cpc	r22, r14
    234e:	7f 05       	cpc	r23, r15
    2350:	30 f0       	brcs	.+12     	; 0x235e <xTaskCheckForTimeOut+0x66>
    2352:	10 82       	st	Z, r1
    2354:	11 82       	std	Z+1, r1	; 0x01
    2356:	12 82       	std	Z+2, r1	; 0x02
    2358:	13 82       	std	Z+3, r1	; 0x03
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	1b c0       	rjmp	.+54     	; 0x2394 <xTaskCheckForTimeOut+0x9c>
    235e:	4c 19       	sub	r20, r12
    2360:	5d 09       	sbc	r21, r13
    2362:	6e 09       	sbc	r22, r14
    2364:	7f 09       	sbc	r23, r15
    2366:	40 17       	cp	r20, r16
    2368:	51 07       	cpc	r21, r17
    236a:	62 07       	cpc	r22, r18
    236c:	73 07       	cpc	r23, r19
    236e:	58 f4       	brcc	.+22     	; 0x2386 <xTaskCheckForTimeOut+0x8e>
    2370:	04 1b       	sub	r16, r20
    2372:	15 0b       	sbc	r17, r21
    2374:	26 0b       	sbc	r18, r22
    2376:	37 0b       	sbc	r19, r23
    2378:	00 83       	st	Z, r16
    237a:	11 83       	std	Z+1, r17	; 0x01
    237c:	22 83       	std	Z+2, r18	; 0x02
    237e:	33 83       	std	Z+3, r19	; 0x03
    2380:	aa df       	rcall	.-172    	; 0x22d6 <vTaskInternalSetTimeOutState>
    2382:	80 e0       	ldi	r24, 0x00	; 0
    2384:	07 c0       	rjmp	.+14     	; 0x2394 <xTaskCheckForTimeOut+0x9c>
    2386:	10 82       	st	Z, r1
    2388:	11 82       	std	Z+1, r1	; 0x01
    238a:	12 82       	std	Z+2, r1	; 0x02
    238c:	13 82       	std	Z+3, r1	; 0x03
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	01 c0       	rjmp	.+2      	; 0x2394 <xTaskCheckForTimeOut+0x9c>
    2392:	80 e0       	ldi	r24, 0x00	; 0
    2394:	0f 90       	pop	r0
    2396:	0f be       	out	0x3f, r0	; 63
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	ff 90       	pop	r15
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
    23a8:	08 95       	ret

000023aa <vTaskMissedYield>:
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	80 93 51 14 	sts	0x1451, r24	; 0x801451 <xYieldPending>
    23b0:	08 95       	ret

000023b2 <xTaskGetCurrentTaskHandle>:
    23b2:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <pxCurrentTCB>
    23b6:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    23ba:	08 95       	ret

000023bc <xTaskGetSchedulerState>:
    23bc:	80 91 56 14 	lds	r24, 0x1456	; 0x801456 <xSchedulerRunning>
    23c0:	88 23       	and	r24, r24
    23c2:	31 f0       	breq	.+12     	; 0x23d0 <xTaskGetSchedulerState+0x14>
    23c4:	80 91 48 14 	lds	r24, 0x1448	; 0x801448 <uxSchedulerSuspended>
    23c8:	88 23       	and	r24, r24
    23ca:	21 f0       	breq	.+8      	; 0x23d4 <xTaskGetSchedulerState+0x18>
    23cc:	80 e0       	ldi	r24, 0x00	; 0
    23ce:	08 95       	ret
    23d0:	81 e0       	ldi	r24, 0x01	; 1
    23d2:	08 95       	ret
    23d4:	82 e0       	ldi	r24, 0x02	; 2
    23d6:	08 95       	ret

000023d8 <xTaskPriorityDisinherit>:
    23d8:	0f 93       	push	r16
    23da:	1f 93       	push	r17
    23dc:	cf 93       	push	r28
    23de:	df 93       	push	r29
    23e0:	fc 01       	movw	r30, r24
    23e2:	89 2b       	or	r24, r25
    23e4:	09 f4       	brne	.+2      	; 0x23e8 <xTaskPriorityDisinherit+0x10>
    23e6:	49 c0       	rjmp	.+146    	; 0x247a <xTaskPriorityDisinherit+0xa2>
    23e8:	86 a5       	ldd	r24, Z+46	; 0x2e
    23ea:	81 50       	subi	r24, 0x01	; 1
    23ec:	86 a7       	std	Z+46, r24	; 0x2e
    23ee:	22 8d       	ldd	r18, Z+26	; 0x1a
    23f0:	95 a5       	ldd	r25, Z+45	; 0x2d
    23f2:	29 17       	cp	r18, r25
    23f4:	09 f4       	brne	.+2      	; 0x23f8 <xTaskPriorityDisinherit+0x20>
    23f6:	43 c0       	rjmp	.+134    	; 0x247e <xTaskPriorityDisinherit+0xa6>
    23f8:	81 11       	cpse	r24, r1
    23fa:	43 c0       	rjmp	.+134    	; 0x2482 <xTaskPriorityDisinherit+0xaa>
    23fc:	ef 01       	movw	r28, r30
    23fe:	8f 01       	movw	r16, r30
    2400:	0e 5f       	subi	r16, 0xFE	; 254
    2402:	1f 4f       	sbci	r17, 0xFF	; 255
    2404:	c8 01       	movw	r24, r16
    2406:	0e 94 ba 03 	call	0x774	; 0x774 <uxListRemove>
    240a:	ed a5       	ldd	r30, Y+45	; 0x2d
    240c:	ea 8f       	std	Y+26, r30	; 0x1a
    240e:	8a e0       	ldi	r24, 0x0A	; 10
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	a0 e0       	ldi	r26, 0x00	; 0
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	8e 1b       	sub	r24, r30
    2418:	91 09       	sbc	r25, r1
    241a:	a1 09       	sbc	r26, r1
    241c:	b1 09       	sbc	r27, r1
    241e:	8e 87       	std	Y+14, r24	; 0x0e
    2420:	9f 87       	std	Y+15, r25	; 0x0f
    2422:	a8 8b       	std	Y+16, r26	; 0x10
    2424:	b9 8b       	std	Y+17, r27	; 0x11
    2426:	80 91 57 14 	lds	r24, 0x1457	; 0x801457 <uxTopReadyPriority>
    242a:	8e 17       	cp	r24, r30
    242c:	10 f4       	brcc	.+4      	; 0x2432 <xTaskPriorityDisinherit+0x5a>
    242e:	e0 93 57 14 	sts	0x1457, r30	; 0x801457 <uxTopReadyPriority>
    2432:	8b e0       	ldi	r24, 0x0B	; 11
    2434:	8e 9f       	mul	r24, r30
    2436:	f0 01       	movw	r30, r0
    2438:	11 24       	eor	r1, r1
    243a:	e7 56       	subi	r30, 0x67	; 103
    243c:	fb 4e       	sbci	r31, 0xEB	; 235
    243e:	01 80       	ldd	r0, Z+1	; 0x01
    2440:	f2 81       	ldd	r31, Z+2	; 0x02
    2442:	e0 2d       	mov	r30, r0
    2444:	ff 83       	std	Y+7, r31	; 0x07
    2446:	ee 83       	std	Y+6, r30	; 0x06
    2448:	26 81       	ldd	r18, Z+6	; 0x06
    244a:	37 81       	ldd	r19, Z+7	; 0x07
    244c:	39 87       	std	Y+9, r19	; 0x09
    244e:	28 87       	std	Y+8, r18	; 0x08
    2450:	a6 81       	ldd	r26, Z+6	; 0x06
    2452:	b7 81       	ldd	r27, Z+7	; 0x07
    2454:	15 96       	adiw	r26, 0x05	; 5
    2456:	1c 93       	st	X, r17
    2458:	0e 93       	st	-X, r16
    245a:	14 97       	sbiw	r26, 0x04	; 4
    245c:	17 83       	std	Z+7, r17	; 0x07
    245e:	06 83       	std	Z+6, r16	; 0x06
    2460:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2462:	8e 9f       	mul	r24, r30
    2464:	f0 01       	movw	r30, r0
    2466:	11 24       	eor	r1, r1
    2468:	e7 56       	subi	r30, 0x67	; 103
    246a:	fb 4e       	sbci	r31, 0xEB	; 235
    246c:	fd 87       	std	Y+13, r31	; 0x0d
    246e:	ec 87       	std	Y+12, r30	; 0x0c
    2470:	80 81       	ld	r24, Z
    2472:	8f 5f       	subi	r24, 0xFF	; 255
    2474:	80 83       	st	Z, r24
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	05 c0       	rjmp	.+10     	; 0x2484 <xTaskPriorityDisinherit+0xac>
    247a:	80 e0       	ldi	r24, 0x00	; 0
    247c:	03 c0       	rjmp	.+6      	; 0x2484 <xTaskPriorityDisinherit+0xac>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	01 c0       	rjmp	.+2      	; 0x2484 <xTaskPriorityDisinherit+0xac>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	df 91       	pop	r29
    2486:	cf 91       	pop	r28
    2488:	1f 91       	pop	r17
    248a:	0f 91       	pop	r16
    248c:	08 95       	ret

0000248e <xTaskGenericNotifyWait>:
    248e:	4f 92       	push	r4
    2490:	5f 92       	push	r5
    2492:	6f 92       	push	r6
    2494:	7f 92       	push	r7
    2496:	af 92       	push	r10
    2498:	bf 92       	push	r11
    249a:	cf 92       	push	r12
    249c:	df 92       	push	r13
    249e:	ef 92       	push	r14
    24a0:	ff 92       	push	r15
    24a2:	0f 93       	push	r16
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	28 01       	movw	r4, r16
    24ac:	39 01       	movw	r6, r18
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	0f 92       	push	r0
    24b4:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    24b8:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    24bc:	c8 2f       	mov	r28, r24
    24be:	d0 e0       	ldi	r29, 0x00	; 0
    24c0:	ec 0f       	add	r30, r28
    24c2:	fd 1f       	adc	r31, r29
    24c4:	83 a9       	ldd	r24, Z+51	; 0x33
    24c6:	82 30       	cpi	r24, 0x02	; 2
    24c8:	71 f1       	breq	.+92     	; 0x2526 <xTaskGenericNotifyWait+0x98>
    24ca:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    24ce:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    24d2:	ce 01       	movw	r24, r28
    24d4:	88 0f       	add	r24, r24
    24d6:	99 1f       	adc	r25, r25
    24d8:	88 0f       	add	r24, r24
    24da:	99 1f       	adc	r25, r25
    24dc:	e8 0f       	add	r30, r24
    24de:	f9 1f       	adc	r31, r25
    24e0:	87 a5       	ldd	r24, Z+47	; 0x2f
    24e2:	90 a9       	ldd	r25, Z+48	; 0x30
    24e4:	a1 a9       	ldd	r26, Z+49	; 0x31
    24e6:	b2 a9       	ldd	r27, Z+50	; 0x32
    24e8:	40 95       	com	r20
    24ea:	50 95       	com	r21
    24ec:	60 95       	com	r22
    24ee:	70 95       	com	r23
    24f0:	48 23       	and	r20, r24
    24f2:	59 23       	and	r21, r25
    24f4:	6a 23       	and	r22, r26
    24f6:	7b 23       	and	r23, r27
    24f8:	47 a7       	std	Z+47, r20	; 0x2f
    24fa:	50 ab       	std	Z+48, r21	; 0x30
    24fc:	61 ab       	std	Z+49, r22	; 0x31
    24fe:	72 ab       	std	Z+50, r23	; 0x32
    2500:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    2504:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    2508:	ec 0f       	add	r30, r28
    250a:	fd 1f       	adc	r31, r29
    250c:	81 e0       	ldi	r24, 0x01	; 1
    250e:	83 ab       	std	Z+51, r24	; 0x33
    2510:	a1 14       	cp	r10, r1
    2512:	b1 04       	cpc	r11, r1
    2514:	c1 04       	cpc	r12, r1
    2516:	d1 04       	cpc	r13, r1
    2518:	31 f0       	breq	.+12     	; 0x2526 <xTaskGenericNotifyWait+0x98>
    251a:	41 e0       	ldi	r20, 0x01	; 1
    251c:	c6 01       	movw	r24, r12
    251e:	b5 01       	movw	r22, r10
    2520:	8a d8       	rcall	.-3820   	; 0x1636 <prvAddCurrentTaskToDelayedList>
    2522:	0e 94 34 04 	call	0x868	; 0x868 <vPortYield>
    2526:	0f 90       	pop	r0
    2528:	0f be       	out	0x3f, r0	; 63
    252a:	0f b6       	in	r0, 0x3f	; 63
    252c:	f8 94       	cli
    252e:	0f 92       	push	r0
    2530:	e1 14       	cp	r14, r1
    2532:	f1 04       	cpc	r15, r1
    2534:	a1 f0       	breq	.+40     	; 0x255e <xTaskGenericNotifyWait+0xd0>
    2536:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    253a:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    253e:	ce 01       	movw	r24, r28
    2540:	88 0f       	add	r24, r24
    2542:	99 1f       	adc	r25, r25
    2544:	88 0f       	add	r24, r24
    2546:	99 1f       	adc	r25, r25
    2548:	e8 0f       	add	r30, r24
    254a:	f9 1f       	adc	r31, r25
    254c:	87 a5       	ldd	r24, Z+47	; 0x2f
    254e:	90 a9       	ldd	r25, Z+48	; 0x30
    2550:	a1 a9       	ldd	r26, Z+49	; 0x31
    2552:	b2 a9       	ldd	r27, Z+50	; 0x32
    2554:	f7 01       	movw	r30, r14
    2556:	80 83       	st	Z, r24
    2558:	91 83       	std	Z+1, r25	; 0x01
    255a:	a2 83       	std	Z+2, r26	; 0x02
    255c:	b3 83       	std	Z+3, r27	; 0x03
    255e:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    2562:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    2566:	ec 0f       	add	r30, r28
    2568:	fd 1f       	adc	r31, r29
    256a:	83 a9       	ldd	r24, Z+51	; 0x33
    256c:	82 30       	cpi	r24, 0x02	; 2
    256e:	e9 f4       	brne	.+58     	; 0x25aa <xTaskGenericNotifyWait+0x11c>
    2570:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    2574:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    2578:	ce 01       	movw	r24, r28
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	e8 0f       	add	r30, r24
    2584:	f9 1f       	adc	r31, r25
    2586:	87 a5       	ldd	r24, Z+47	; 0x2f
    2588:	90 a9       	ldd	r25, Z+48	; 0x30
    258a:	a1 a9       	ldd	r26, Z+49	; 0x31
    258c:	b2 a9       	ldd	r27, Z+50	; 0x32
    258e:	40 94       	com	r4
    2590:	50 94       	com	r5
    2592:	60 94       	com	r6
    2594:	70 94       	com	r7
    2596:	48 22       	and	r4, r24
    2598:	59 22       	and	r5, r25
    259a:	6a 22       	and	r6, r26
    259c:	7b 22       	and	r7, r27
    259e:	47 a6       	std	Z+47, r4	; 0x2f
    25a0:	50 aa       	std	Z+48, r5	; 0x30
    25a2:	61 aa       	std	Z+49, r6	; 0x31
    25a4:	72 aa       	std	Z+50, r7	; 0x32
    25a6:	81 e0       	ldi	r24, 0x01	; 1
    25a8:	01 c0       	rjmp	.+2      	; 0x25ac <xTaskGenericNotifyWait+0x11e>
    25aa:	80 e0       	ldi	r24, 0x00	; 0
    25ac:	20 91 07 15 	lds	r18, 0x1507	; 0x801507 <pxCurrentTCB>
    25b0:	30 91 08 15 	lds	r19, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    25b4:	c2 0f       	add	r28, r18
    25b6:	d3 1f       	adc	r29, r19
    25b8:	1b aa       	std	Y+51, r1	; 0x33
    25ba:	0f 90       	pop	r0
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	df 91       	pop	r29
    25c0:	cf 91       	pop	r28
    25c2:	1f 91       	pop	r17
    25c4:	0f 91       	pop	r16
    25c6:	ff 90       	pop	r15
    25c8:	ef 90       	pop	r14
    25ca:	df 90       	pop	r13
    25cc:	cf 90       	pop	r12
    25ce:	bf 90       	pop	r11
    25d0:	af 90       	pop	r10
    25d2:	7f 90       	pop	r7
    25d4:	6f 90       	pop	r6
    25d6:	5f 90       	pop	r5
    25d8:	4f 90       	pop	r4
    25da:	08 95       	ret

000025dc <xTaskGenericNotify>:
    25dc:	8f 92       	push	r8
    25de:	9f 92       	push	r9
    25e0:	af 92       	push	r10
    25e2:	bf 92       	push	r11
    25e4:	ef 92       	push	r14
    25e6:	ff 92       	push	r15
    25e8:	0f 93       	push	r16
    25ea:	cf 93       	push	r28
    25ec:	df 93       	push	r29
    25ee:	dc 01       	movw	r26, r24
    25f0:	0f b6       	in	r0, 0x3f	; 63
    25f2:	f8 94       	cli
    25f4:	0f 92       	push	r0
    25f6:	e1 14       	cp	r14, r1
    25f8:	f1 04       	cpc	r15, r1
    25fa:	79 f0       	breq	.+30     	; 0x261a <xTaskGenericNotify+0x3e>
    25fc:	fc 01       	movw	r30, r24
    25fe:	84 e0       	ldi	r24, 0x04	; 4
    2600:	68 9f       	mul	r22, r24
    2602:	e0 0d       	add	r30, r0
    2604:	f1 1d       	adc	r31, r1
    2606:	11 24       	eor	r1, r1
    2608:	87 a4       	ldd	r8, Z+47	; 0x2f
    260a:	90 a8       	ldd	r9, Z+48	; 0x30
    260c:	a1 a8       	ldd	r10, Z+49	; 0x31
    260e:	b2 a8       	ldd	r11, Z+50	; 0x32
    2610:	f7 01       	movw	r30, r14
    2612:	80 82       	st	Z, r8
    2614:	91 82       	std	Z+1, r9	; 0x01
    2616:	a2 82       	std	Z+2, r10	; 0x02
    2618:	b3 82       	std	Z+3, r11	; 0x03
    261a:	70 e0       	ldi	r23, 0x00	; 0
    261c:	fd 01       	movw	r30, r26
    261e:	e6 0f       	add	r30, r22
    2620:	f7 1f       	adc	r31, r23
    2622:	83 a9       	ldd	r24, Z+51	; 0x33
    2624:	92 e0       	ldi	r25, 0x02	; 2
    2626:	93 ab       	std	Z+51, r25	; 0x33
    2628:	02 30       	cpi	r16, 0x02	; 2
    262a:	f9 f0       	breq	.+62     	; 0x266a <xTaskGenericNotify+0x8e>
    262c:	18 f4       	brcc	.+6      	; 0x2634 <xTaskGenericNotify+0x58>
    262e:	01 30       	cpi	r16, 0x01	; 1
    2630:	31 f0       	breq	.+12     	; 0x263e <xTaskGenericNotify+0x62>
    2632:	49 c0       	rjmp	.+146    	; 0x26c6 <xTaskGenericNotify+0xea>
    2634:	03 30       	cpi	r16, 0x03	; 3
    2636:	69 f1       	breq	.+90     	; 0x2692 <xTaskGenericNotify+0xb6>
    2638:	04 30       	cpi	r16, 0x04	; 4
    263a:	b9 f1       	breq	.+110    	; 0x26aa <xTaskGenericNotify+0xce>
    263c:	44 c0       	rjmp	.+136    	; 0x26c6 <xTaskGenericNotify+0xea>
    263e:	66 0f       	add	r22, r22
    2640:	77 1f       	adc	r23, r23
    2642:	66 0f       	add	r22, r22
    2644:	77 1f       	adc	r23, r23
    2646:	fd 01       	movw	r30, r26
    2648:	e6 0f       	add	r30, r22
    264a:	f7 1f       	adc	r31, r23
    264c:	87 a4       	ldd	r8, Z+47	; 0x2f
    264e:	90 a8       	ldd	r9, Z+48	; 0x30
    2650:	a1 a8       	ldd	r10, Z+49	; 0x31
    2652:	b2 a8       	ldd	r11, Z+50	; 0x32
    2654:	ba 01       	movw	r22, r20
    2656:	a9 01       	movw	r20, r18
    2658:	48 29       	or	r20, r8
    265a:	59 29       	or	r21, r9
    265c:	6a 29       	or	r22, r10
    265e:	7b 29       	or	r23, r11
    2660:	47 a7       	std	Z+47, r20	; 0x2f
    2662:	50 ab       	std	Z+48, r21	; 0x30
    2664:	61 ab       	std	Z+49, r22	; 0x31
    2666:	72 ab       	std	Z+50, r23	; 0x32
    2668:	2e c0       	rjmp	.+92     	; 0x26c6 <xTaskGenericNotify+0xea>
    266a:	66 0f       	add	r22, r22
    266c:	77 1f       	adc	r23, r23
    266e:	66 0f       	add	r22, r22
    2670:	77 1f       	adc	r23, r23
    2672:	fd 01       	movw	r30, r26
    2674:	e6 0f       	add	r30, r22
    2676:	f7 1f       	adc	r31, r23
    2678:	47 a5       	ldd	r20, Z+47	; 0x2f
    267a:	50 a9       	ldd	r21, Z+48	; 0x30
    267c:	61 a9       	ldd	r22, Z+49	; 0x31
    267e:	72 a9       	ldd	r23, Z+50	; 0x32
    2680:	4f 5f       	subi	r20, 0xFF	; 255
    2682:	5f 4f       	sbci	r21, 0xFF	; 255
    2684:	6f 4f       	sbci	r22, 0xFF	; 255
    2686:	7f 4f       	sbci	r23, 0xFF	; 255
    2688:	47 a7       	std	Z+47, r20	; 0x2f
    268a:	50 ab       	std	Z+48, r21	; 0x30
    268c:	61 ab       	std	Z+49, r22	; 0x31
    268e:	72 ab       	std	Z+50, r23	; 0x32
    2690:	1a c0       	rjmp	.+52     	; 0x26c6 <xTaskGenericNotify+0xea>
    2692:	66 0f       	add	r22, r22
    2694:	77 1f       	adc	r23, r23
    2696:	66 0f       	add	r22, r22
    2698:	77 1f       	adc	r23, r23
    269a:	fd 01       	movw	r30, r26
    269c:	e6 0f       	add	r30, r22
    269e:	f7 1f       	adc	r31, r23
    26a0:	27 a7       	std	Z+47, r18	; 0x2f
    26a2:	30 ab       	std	Z+48, r19	; 0x30
    26a4:	41 ab       	std	Z+49, r20	; 0x31
    26a6:	52 ab       	std	Z+50, r21	; 0x32
    26a8:	0e c0       	rjmp	.+28     	; 0x26c6 <xTaskGenericNotify+0xea>
    26aa:	82 30       	cpi	r24, 0x02	; 2
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <xTaskGenericNotify+0xd4>
    26ae:	79 c0       	rjmp	.+242    	; 0x27a2 <xTaskGenericNotify+0x1c6>
    26b0:	66 0f       	add	r22, r22
    26b2:	77 1f       	adc	r23, r23
    26b4:	66 0f       	add	r22, r22
    26b6:	77 1f       	adc	r23, r23
    26b8:	fd 01       	movw	r30, r26
    26ba:	e6 0f       	add	r30, r22
    26bc:	f7 1f       	adc	r31, r23
    26be:	27 a7       	std	Z+47, r18	; 0x2f
    26c0:	30 ab       	std	Z+48, r19	; 0x30
    26c2:	41 ab       	std	Z+49, r20	; 0x31
    26c4:	52 ab       	std	Z+50, r21	; 0x32
    26c6:	81 30       	cpi	r24, 0x01	; 1
    26c8:	09 f0       	breq	.+2      	; 0x26cc <xTaskGenericNotify+0xf0>
    26ca:	6d c0       	rjmp	.+218    	; 0x27a6 <xTaskGenericNotify+0x1ca>
    26cc:	1c 96       	adiw	r26, 0x0c	; 12
    26ce:	ed 91       	ld	r30, X+
    26d0:	fc 91       	ld	r31, X
    26d2:	1d 97       	sbiw	r26, 0x0d	; 13
    26d4:	16 96       	adiw	r26, 0x06	; 6
    26d6:	cd 91       	ld	r28, X+
    26d8:	dc 91       	ld	r29, X
    26da:	17 97       	sbiw	r26, 0x07	; 7
    26dc:	18 96       	adiw	r26, 0x08	; 8
    26de:	8d 91       	ld	r24, X+
    26e0:	9c 91       	ld	r25, X
    26e2:	19 97       	sbiw	r26, 0x09	; 9
    26e4:	9f 83       	std	Y+7, r25	; 0x07
    26e6:	8e 83       	std	Y+6, r24	; 0x06
    26e8:	18 96       	adiw	r26, 0x08	; 8
    26ea:	cd 91       	ld	r28, X+
    26ec:	dc 91       	ld	r29, X
    26ee:	19 97       	sbiw	r26, 0x09	; 9
    26f0:	16 96       	adiw	r26, 0x06	; 6
    26f2:	8d 91       	ld	r24, X+
    26f4:	9c 91       	ld	r25, X
    26f6:	17 97       	sbiw	r26, 0x07	; 7
    26f8:	9d 83       	std	Y+5, r25	; 0x05
    26fa:	8c 83       	std	Y+4, r24	; 0x04
    26fc:	9d 01       	movw	r18, r26
    26fe:	2e 5f       	subi	r18, 0xFE	; 254
    2700:	3f 4f       	sbci	r19, 0xFF	; 255
    2702:	81 81       	ldd	r24, Z+1	; 0x01
    2704:	92 81       	ldd	r25, Z+2	; 0x02
    2706:	82 17       	cp	r24, r18
    2708:	93 07       	cpc	r25, r19
    270a:	31 f4       	brne	.+12     	; 0x2718 <xTaskGenericNotify+0x13c>
    270c:	18 96       	adiw	r26, 0x08	; 8
    270e:	8d 91       	ld	r24, X+
    2710:	9c 91       	ld	r25, X
    2712:	19 97       	sbiw	r26, 0x09	; 9
    2714:	92 83       	std	Z+2, r25	; 0x02
    2716:	81 83       	std	Z+1, r24	; 0x01
    2718:	1d 96       	adiw	r26, 0x0d	; 13
    271a:	1c 92       	st	X, r1
    271c:	1e 92       	st	-X, r1
    271e:	1c 97       	sbiw	r26, 0x0c	; 12
    2720:	80 81       	ld	r24, Z
    2722:	81 50       	subi	r24, 0x01	; 1
    2724:	80 83       	st	Z, r24
    2726:	5a 96       	adiw	r26, 0x1a	; 26
    2728:	ec 91       	ld	r30, X
    272a:	5a 97       	sbiw	r26, 0x1a	; 26
    272c:	80 91 57 14 	lds	r24, 0x1457	; 0x801457 <uxTopReadyPriority>
    2730:	8e 17       	cp	r24, r30
    2732:	10 f4       	brcc	.+4      	; 0x2738 <xTaskGenericNotify+0x15c>
    2734:	e0 93 57 14 	sts	0x1457, r30	; 0x801457 <uxTopReadyPriority>
    2738:	8b e0       	ldi	r24, 0x0B	; 11
    273a:	8e 9f       	mul	r24, r30
    273c:	f0 01       	movw	r30, r0
    273e:	11 24       	eor	r1, r1
    2740:	e7 56       	subi	r30, 0x67	; 103
    2742:	fb 4e       	sbci	r31, 0xEB	; 235
    2744:	01 80       	ldd	r0, Z+1	; 0x01
    2746:	f2 81       	ldd	r31, Z+2	; 0x02
    2748:	e0 2d       	mov	r30, r0
    274a:	17 96       	adiw	r26, 0x07	; 7
    274c:	fc 93       	st	X, r31
    274e:	ee 93       	st	-X, r30
    2750:	16 97       	sbiw	r26, 0x06	; 6
    2752:	46 81       	ldd	r20, Z+6	; 0x06
    2754:	57 81       	ldd	r21, Z+7	; 0x07
    2756:	19 96       	adiw	r26, 0x09	; 9
    2758:	5c 93       	st	X, r21
    275a:	4e 93       	st	-X, r20
    275c:	18 97       	sbiw	r26, 0x08	; 8
    275e:	c6 81       	ldd	r28, Z+6	; 0x06
    2760:	d7 81       	ldd	r29, Z+7	; 0x07
    2762:	3d 83       	std	Y+5, r19	; 0x05
    2764:	2c 83       	std	Y+4, r18	; 0x04
    2766:	37 83       	std	Z+7, r19	; 0x07
    2768:	26 83       	std	Z+6, r18	; 0x06
    276a:	5a 96       	adiw	r26, 0x1a	; 26
    276c:	ec 91       	ld	r30, X
    276e:	5a 97       	sbiw	r26, 0x1a	; 26
    2770:	8e 9f       	mul	r24, r30
    2772:	f0 01       	movw	r30, r0
    2774:	11 24       	eor	r1, r1
    2776:	e7 56       	subi	r30, 0x67	; 103
    2778:	fb 4e       	sbci	r31, 0xEB	; 235
    277a:	1d 96       	adiw	r26, 0x0d	; 13
    277c:	fc 93       	st	X, r31
    277e:	ee 93       	st	-X, r30
    2780:	1c 97       	sbiw	r26, 0x0c	; 12
    2782:	80 81       	ld	r24, Z
    2784:	8f 5f       	subi	r24, 0xFF	; 255
    2786:	80 83       	st	Z, r24
    2788:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    278c:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    2790:	5a 96       	adiw	r26, 0x1a	; 26
    2792:	9c 91       	ld	r25, X
    2794:	82 8d       	ldd	r24, Z+26	; 0x1a
    2796:	89 17       	cp	r24, r25
    2798:	40 f4       	brcc	.+16     	; 0x27aa <xTaskGenericNotify+0x1ce>
    279a:	0e 94 34 04 	call	0x868	; 0x868 <vPortYield>
    279e:	81 e0       	ldi	r24, 0x01	; 1
    27a0:	05 c0       	rjmp	.+10     	; 0x27ac <xTaskGenericNotify+0x1d0>
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	03 c0       	rjmp	.+6      	; 0x27ac <xTaskGenericNotify+0x1d0>
    27a6:	81 e0       	ldi	r24, 0x01	; 1
    27a8:	01 c0       	rjmp	.+2      	; 0x27ac <xTaskGenericNotify+0x1d0>
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	0f 90       	pop	r0
    27ae:	0f be       	out	0x3f, r0	; 63
    27b0:	df 91       	pop	r29
    27b2:	cf 91       	pop	r28
    27b4:	0f 91       	pop	r16
    27b6:	ff 90       	pop	r15
    27b8:	ef 90       	pop	r14
    27ba:	bf 90       	pop	r11
    27bc:	af 90       	pop	r10
    27be:	9f 90       	pop	r9
    27c0:	8f 90       	pop	r8
    27c2:	08 95       	ret

000027c4 <xTaskGenericNotifyFromISR>:
    27c4:	8f 92       	push	r8
    27c6:	9f 92       	push	r9
    27c8:	af 92       	push	r10
    27ca:	bf 92       	push	r11
    27cc:	cf 92       	push	r12
    27ce:	df 92       	push	r13
    27d0:	ef 92       	push	r14
    27d2:	ff 92       	push	r15
    27d4:	0f 93       	push	r16
    27d6:	cf 93       	push	r28
    27d8:	df 93       	push	r29
    27da:	dc 01       	movw	r26, r24
    27dc:	e1 14       	cp	r14, r1
    27de:	f1 04       	cpc	r15, r1
    27e0:	79 f0       	breq	.+30     	; 0x2800 <xTaskGenericNotifyFromISR+0x3c>
    27e2:	fc 01       	movw	r30, r24
    27e4:	84 e0       	ldi	r24, 0x04	; 4
    27e6:	68 9f       	mul	r22, r24
    27e8:	e0 0d       	add	r30, r0
    27ea:	f1 1d       	adc	r31, r1
    27ec:	11 24       	eor	r1, r1
    27ee:	87 a4       	ldd	r8, Z+47	; 0x2f
    27f0:	90 a8       	ldd	r9, Z+48	; 0x30
    27f2:	a1 a8       	ldd	r10, Z+49	; 0x31
    27f4:	b2 a8       	ldd	r11, Z+50	; 0x32
    27f6:	f7 01       	movw	r30, r14
    27f8:	80 82       	st	Z, r8
    27fa:	91 82       	std	Z+1, r9	; 0x01
    27fc:	a2 82       	std	Z+2, r10	; 0x02
    27fe:	b3 82       	std	Z+3, r11	; 0x03
    2800:	70 e0       	ldi	r23, 0x00	; 0
    2802:	fd 01       	movw	r30, r26
    2804:	e6 0f       	add	r30, r22
    2806:	f7 1f       	adc	r31, r23
    2808:	83 a9       	ldd	r24, Z+51	; 0x33
    280a:	92 e0       	ldi	r25, 0x02	; 2
    280c:	93 ab       	std	Z+51, r25	; 0x33
    280e:	02 30       	cpi	r16, 0x02	; 2
    2810:	f9 f0       	breq	.+62     	; 0x2850 <xTaskGenericNotifyFromISR+0x8c>
    2812:	18 f4       	brcc	.+6      	; 0x281a <xTaskGenericNotifyFromISR+0x56>
    2814:	01 30       	cpi	r16, 0x01	; 1
    2816:	31 f0       	breq	.+12     	; 0x2824 <xTaskGenericNotifyFromISR+0x60>
    2818:	49 c0       	rjmp	.+146    	; 0x28ac <xTaskGenericNotifyFromISR+0xe8>
    281a:	03 30       	cpi	r16, 0x03	; 3
    281c:	69 f1       	breq	.+90     	; 0x2878 <xTaskGenericNotifyFromISR+0xb4>
    281e:	04 30       	cpi	r16, 0x04	; 4
    2820:	b9 f1       	breq	.+110    	; 0x2890 <xTaskGenericNotifyFromISR+0xcc>
    2822:	44 c0       	rjmp	.+136    	; 0x28ac <xTaskGenericNotifyFromISR+0xe8>
    2824:	66 0f       	add	r22, r22
    2826:	77 1f       	adc	r23, r23
    2828:	66 0f       	add	r22, r22
    282a:	77 1f       	adc	r23, r23
    282c:	fd 01       	movw	r30, r26
    282e:	e6 0f       	add	r30, r22
    2830:	f7 1f       	adc	r31, r23
    2832:	87 a4       	ldd	r8, Z+47	; 0x2f
    2834:	90 a8       	ldd	r9, Z+48	; 0x30
    2836:	a1 a8       	ldd	r10, Z+49	; 0x31
    2838:	b2 a8       	ldd	r11, Z+50	; 0x32
    283a:	ba 01       	movw	r22, r20
    283c:	a9 01       	movw	r20, r18
    283e:	48 29       	or	r20, r8
    2840:	59 29       	or	r21, r9
    2842:	6a 29       	or	r22, r10
    2844:	7b 29       	or	r23, r11
    2846:	47 a7       	std	Z+47, r20	; 0x2f
    2848:	50 ab       	std	Z+48, r21	; 0x30
    284a:	61 ab       	std	Z+49, r22	; 0x31
    284c:	72 ab       	std	Z+50, r23	; 0x32
    284e:	2e c0       	rjmp	.+92     	; 0x28ac <xTaskGenericNotifyFromISR+0xe8>
    2850:	66 0f       	add	r22, r22
    2852:	77 1f       	adc	r23, r23
    2854:	66 0f       	add	r22, r22
    2856:	77 1f       	adc	r23, r23
    2858:	fd 01       	movw	r30, r26
    285a:	e6 0f       	add	r30, r22
    285c:	f7 1f       	adc	r31, r23
    285e:	47 a5       	ldd	r20, Z+47	; 0x2f
    2860:	50 a9       	ldd	r21, Z+48	; 0x30
    2862:	61 a9       	ldd	r22, Z+49	; 0x31
    2864:	72 a9       	ldd	r23, Z+50	; 0x32
    2866:	4f 5f       	subi	r20, 0xFF	; 255
    2868:	5f 4f       	sbci	r21, 0xFF	; 255
    286a:	6f 4f       	sbci	r22, 0xFF	; 255
    286c:	7f 4f       	sbci	r23, 0xFF	; 255
    286e:	47 a7       	std	Z+47, r20	; 0x2f
    2870:	50 ab       	std	Z+48, r21	; 0x30
    2872:	61 ab       	std	Z+49, r22	; 0x31
    2874:	72 ab       	std	Z+50, r23	; 0x32
    2876:	1a c0       	rjmp	.+52     	; 0x28ac <xTaskGenericNotifyFromISR+0xe8>
    2878:	66 0f       	add	r22, r22
    287a:	77 1f       	adc	r23, r23
    287c:	66 0f       	add	r22, r22
    287e:	77 1f       	adc	r23, r23
    2880:	fd 01       	movw	r30, r26
    2882:	e6 0f       	add	r30, r22
    2884:	f7 1f       	adc	r31, r23
    2886:	27 a7       	std	Z+47, r18	; 0x2f
    2888:	30 ab       	std	Z+48, r19	; 0x30
    288a:	41 ab       	std	Z+49, r20	; 0x31
    288c:	52 ab       	std	Z+50, r21	; 0x32
    288e:	0e c0       	rjmp	.+28     	; 0x28ac <xTaskGenericNotifyFromISR+0xe8>
    2890:	82 30       	cpi	r24, 0x02	; 2
    2892:	09 f4       	brne	.+2      	; 0x2896 <xTaskGenericNotifyFromISR+0xd2>
    2894:	a4 c0       	rjmp	.+328    	; 0x29de <xTaskGenericNotifyFromISR+0x21a>
    2896:	66 0f       	add	r22, r22
    2898:	77 1f       	adc	r23, r23
    289a:	66 0f       	add	r22, r22
    289c:	77 1f       	adc	r23, r23
    289e:	fd 01       	movw	r30, r26
    28a0:	e6 0f       	add	r30, r22
    28a2:	f7 1f       	adc	r31, r23
    28a4:	27 a7       	std	Z+47, r18	; 0x2f
    28a6:	30 ab       	std	Z+48, r19	; 0x30
    28a8:	41 ab       	std	Z+49, r20	; 0x31
    28aa:	52 ab       	std	Z+50, r21	; 0x32
    28ac:	81 30       	cpi	r24, 0x01	; 1
    28ae:	09 f0       	breq	.+2      	; 0x28b2 <xTaskGenericNotifyFromISR+0xee>
    28b0:	98 c0       	rjmp	.+304    	; 0x29e2 <xTaskGenericNotifyFromISR+0x21e>
    28b2:	80 91 48 14 	lds	r24, 0x1448	; 0x801448 <uxSchedulerSuspended>
    28b6:	81 11       	cpse	r24, r1
    28b8:	5f c0       	rjmp	.+190    	; 0x2978 <xTaskGenericNotifyFromISR+0x1b4>
    28ba:	1c 96       	adiw	r26, 0x0c	; 12
    28bc:	ed 91       	ld	r30, X+
    28be:	fc 91       	ld	r31, X
    28c0:	1d 97       	sbiw	r26, 0x0d	; 13
    28c2:	16 96       	adiw	r26, 0x06	; 6
    28c4:	cd 91       	ld	r28, X+
    28c6:	dc 91       	ld	r29, X
    28c8:	17 97       	sbiw	r26, 0x07	; 7
    28ca:	18 96       	adiw	r26, 0x08	; 8
    28cc:	8d 91       	ld	r24, X+
    28ce:	9c 91       	ld	r25, X
    28d0:	19 97       	sbiw	r26, 0x09	; 9
    28d2:	9f 83       	std	Y+7, r25	; 0x07
    28d4:	8e 83       	std	Y+6, r24	; 0x06
    28d6:	18 96       	adiw	r26, 0x08	; 8
    28d8:	cd 91       	ld	r28, X+
    28da:	dc 91       	ld	r29, X
    28dc:	19 97       	sbiw	r26, 0x09	; 9
    28de:	16 96       	adiw	r26, 0x06	; 6
    28e0:	8d 91       	ld	r24, X+
    28e2:	9c 91       	ld	r25, X
    28e4:	17 97       	sbiw	r26, 0x07	; 7
    28e6:	9d 83       	std	Y+5, r25	; 0x05
    28e8:	8c 83       	std	Y+4, r24	; 0x04
    28ea:	9d 01       	movw	r18, r26
    28ec:	2e 5f       	subi	r18, 0xFE	; 254
    28ee:	3f 4f       	sbci	r19, 0xFF	; 255
    28f0:	81 81       	ldd	r24, Z+1	; 0x01
    28f2:	92 81       	ldd	r25, Z+2	; 0x02
    28f4:	82 17       	cp	r24, r18
    28f6:	93 07       	cpc	r25, r19
    28f8:	31 f4       	brne	.+12     	; 0x2906 <xTaskGenericNotifyFromISR+0x142>
    28fa:	18 96       	adiw	r26, 0x08	; 8
    28fc:	8d 91       	ld	r24, X+
    28fe:	9c 91       	ld	r25, X
    2900:	19 97       	sbiw	r26, 0x09	; 9
    2902:	92 83       	std	Z+2, r25	; 0x02
    2904:	81 83       	std	Z+1, r24	; 0x01
    2906:	1d 96       	adiw	r26, 0x0d	; 13
    2908:	1c 92       	st	X, r1
    290a:	1e 92       	st	-X, r1
    290c:	1c 97       	sbiw	r26, 0x0c	; 12
    290e:	80 81       	ld	r24, Z
    2910:	81 50       	subi	r24, 0x01	; 1
    2912:	80 83       	st	Z, r24
    2914:	5a 96       	adiw	r26, 0x1a	; 26
    2916:	ec 91       	ld	r30, X
    2918:	5a 97       	sbiw	r26, 0x1a	; 26
    291a:	80 91 57 14 	lds	r24, 0x1457	; 0x801457 <uxTopReadyPriority>
    291e:	8e 17       	cp	r24, r30
    2920:	10 f4       	brcc	.+4      	; 0x2926 <xTaskGenericNotifyFromISR+0x162>
    2922:	e0 93 57 14 	sts	0x1457, r30	; 0x801457 <uxTopReadyPriority>
    2926:	8b e0       	ldi	r24, 0x0B	; 11
    2928:	8e 9f       	mul	r24, r30
    292a:	f0 01       	movw	r30, r0
    292c:	11 24       	eor	r1, r1
    292e:	e7 56       	subi	r30, 0x67	; 103
    2930:	fb 4e       	sbci	r31, 0xEB	; 235
    2932:	01 80       	ldd	r0, Z+1	; 0x01
    2934:	f2 81       	ldd	r31, Z+2	; 0x02
    2936:	e0 2d       	mov	r30, r0
    2938:	17 96       	adiw	r26, 0x07	; 7
    293a:	fc 93       	st	X, r31
    293c:	ee 93       	st	-X, r30
    293e:	16 97       	sbiw	r26, 0x06	; 6
    2940:	46 81       	ldd	r20, Z+6	; 0x06
    2942:	57 81       	ldd	r21, Z+7	; 0x07
    2944:	19 96       	adiw	r26, 0x09	; 9
    2946:	5c 93       	st	X, r21
    2948:	4e 93       	st	-X, r20
    294a:	18 97       	sbiw	r26, 0x08	; 8
    294c:	c6 81       	ldd	r28, Z+6	; 0x06
    294e:	d7 81       	ldd	r29, Z+7	; 0x07
    2950:	3d 83       	std	Y+5, r19	; 0x05
    2952:	2c 83       	std	Y+4, r18	; 0x04
    2954:	37 83       	std	Z+7, r19	; 0x07
    2956:	26 83       	std	Z+6, r18	; 0x06
    2958:	5a 96       	adiw	r26, 0x1a	; 26
    295a:	ec 91       	ld	r30, X
    295c:	5a 97       	sbiw	r26, 0x1a	; 26
    295e:	8e 9f       	mul	r24, r30
    2960:	f0 01       	movw	r30, r0
    2962:	11 24       	eor	r1, r1
    2964:	e7 56       	subi	r30, 0x67	; 103
    2966:	fb 4e       	sbci	r31, 0xEB	; 235
    2968:	1d 96       	adiw	r26, 0x0d	; 13
    296a:	fc 93       	st	X, r31
    296c:	ee 93       	st	-X, r30
    296e:	1c 97       	sbiw	r26, 0x0c	; 12
    2970:	80 81       	ld	r24, Z
    2972:	8f 5f       	subi	r24, 0xFF	; 255
    2974:	80 83       	st	Z, r24
    2976:	20 c0       	rjmp	.+64     	; 0x29b8 <xTaskGenericNotifyFromISR+0x1f4>
    2978:	44 e7       	ldi	r20, 0x74	; 116
    297a:	54 e1       	ldi	r21, 0x14	; 20
    297c:	fa 01       	movw	r30, r20
    297e:	c1 81       	ldd	r28, Z+1	; 0x01
    2980:	d2 81       	ldd	r29, Z+2	; 0x02
    2982:	53 96       	adiw	r26, 0x13	; 19
    2984:	dc 93       	st	X, r29
    2986:	ce 93       	st	-X, r28
    2988:	52 97       	sbiw	r26, 0x12	; 18
    298a:	8e 81       	ldd	r24, Y+6	; 0x06
    298c:	9f 81       	ldd	r25, Y+7	; 0x07
    298e:	55 96       	adiw	r26, 0x15	; 21
    2990:	9c 93       	st	X, r25
    2992:	8e 93       	st	-X, r24
    2994:	54 97       	sbiw	r26, 0x14	; 20
    2996:	2e 81       	ldd	r18, Y+6	; 0x06
    2998:	3f 81       	ldd	r19, Y+7	; 0x07
    299a:	cd 01       	movw	r24, r26
    299c:	0e 96       	adiw	r24, 0x0e	; 14
    299e:	f9 01       	movw	r30, r18
    29a0:	95 83       	std	Z+5, r25	; 0x05
    29a2:	84 83       	std	Z+4, r24	; 0x04
    29a4:	9f 83       	std	Y+7, r25	; 0x07
    29a6:	8e 83       	std	Y+6, r24	; 0x06
    29a8:	59 96       	adiw	r26, 0x19	; 25
    29aa:	5c 93       	st	X, r21
    29ac:	4e 93       	st	-X, r20
    29ae:	58 97       	sbiw	r26, 0x18	; 24
    29b0:	fa 01       	movw	r30, r20
    29b2:	80 81       	ld	r24, Z
    29b4:	8f 5f       	subi	r24, 0xFF	; 255
    29b6:	80 83       	st	Z, r24
    29b8:	e0 91 07 15 	lds	r30, 0x1507	; 0x801507 <pxCurrentTCB>
    29bc:	f0 91 08 15 	lds	r31, 0x1508	; 0x801508 <pxCurrentTCB+0x1>
    29c0:	5a 96       	adiw	r26, 0x1a	; 26
    29c2:	9c 91       	ld	r25, X
    29c4:	82 8d       	ldd	r24, Z+26	; 0x1a
    29c6:	89 17       	cp	r24, r25
    29c8:	70 f4       	brcc	.+28     	; 0x29e6 <xTaskGenericNotifyFromISR+0x222>
    29ca:	c1 14       	cp	r12, r1
    29cc:	d1 04       	cpc	r13, r1
    29ce:	19 f0       	breq	.+6      	; 0x29d6 <xTaskGenericNotifyFromISR+0x212>
    29d0:	81 e0       	ldi	r24, 0x01	; 1
    29d2:	f6 01       	movw	r30, r12
    29d4:	80 83       	st	Z, r24
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	80 93 51 14 	sts	0x1451, r24	; 0x801451 <xYieldPending>
    29dc:	05 c0       	rjmp	.+10     	; 0x29e8 <xTaskGenericNotifyFromISR+0x224>
    29de:	80 e0       	ldi	r24, 0x00	; 0
    29e0:	03 c0       	rjmp	.+6      	; 0x29e8 <xTaskGenericNotifyFromISR+0x224>
    29e2:	81 e0       	ldi	r24, 0x01	; 1
    29e4:	01 c0       	rjmp	.+2      	; 0x29e8 <xTaskGenericNotifyFromISR+0x224>
    29e6:	81 e0       	ldi	r24, 0x01	; 1
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	0f 91       	pop	r16
    29ee:	ff 90       	pop	r15
    29f0:	ef 90       	pop	r14
    29f2:	df 90       	pop	r13
    29f4:	cf 90       	pop	r12
    29f6:	bf 90       	pop	r11
    29f8:	af 90       	pop	r10
    29fa:	9f 90       	pop	r9
    29fc:	8f 90       	pop	r8
    29fe:	08 95       	ret

00002a00 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2a00:	00 97       	sbiw	r24, 0x00	; 0
    2a02:	21 f4       	brne	.+8      	; 0x2a0c <xTaskGenericNotifyStateClear+0xc>
    2a04:	80 91 07 15 	lds	r24, 0x1507	; 0x801507 <pxCurrentTCB>
    2a08:	90 91 08 15 	lds	r25, 0x1508	; 0x801508 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2a0c:	0f b6       	in	r0, 0x3f	; 63
    2a0e:	f8 94       	cli
    2a10:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2a12:	70 e0       	ldi	r23, 0x00	; 0
    2a14:	fc 01       	movw	r30, r24
    2a16:	e6 0f       	add	r30, r22
    2a18:	f7 1f       	adc	r31, r23
    2a1a:	23 a9       	ldd	r18, Z+51	; 0x33
    2a1c:	22 30       	cpi	r18, 0x02	; 2
    2a1e:	31 f4       	brne	.+12     	; 0x2a2c <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2a20:	fc 01       	movw	r30, r24
    2a22:	e6 0f       	add	r30, r22
    2a24:	f7 1f       	adc	r31, r23
    2a26:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	01 c0       	rjmp	.+2      	; 0x2a2e <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2a2c:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2a2e:	0f 90       	pop	r0
    2a30:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2a32:	08 95       	ret

00002a34 <prvInsertTimerInActiveList>:
    2a34:	cf 92       	push	r12
    2a36:	df 92       	push	r13
    2a38:	ef 92       	push	r14
    2a3a:	ff 92       	push	r15
    2a3c:	0f 93       	push	r16
    2a3e:	1f 93       	push	r17
    2a40:	fc 01       	movw	r30, r24
    2a42:	42 83       	std	Z+2, r20	; 0x02
    2a44:	53 83       	std	Z+3, r21	; 0x03
    2a46:	64 83       	std	Z+4, r22	; 0x04
    2a48:	75 83       	std	Z+5, r23	; 0x05
    2a4a:	93 87       	std	Z+11, r25	; 0x0b
    2a4c:	82 87       	std	Z+10, r24	; 0x0a
    2a4e:	04 17       	cp	r16, r20
    2a50:	15 07       	cpc	r17, r21
    2a52:	26 07       	cpc	r18, r22
    2a54:	37 07       	cpc	r19, r23
    2a56:	c0 f0       	brcs	.+48     	; 0x2a88 <prvInsertTimerInActiveList+0x54>
    2a58:	0c 19       	sub	r16, r12
    2a5a:	1d 09       	sbc	r17, r13
    2a5c:	2e 09       	sbc	r18, r14
    2a5e:	3f 09       	sbc	r19, r15
    2a60:	86 85       	ldd	r24, Z+14	; 0x0e
    2a62:	97 85       	ldd	r25, Z+15	; 0x0f
    2a64:	a0 89       	ldd	r26, Z+16	; 0x10
    2a66:	b1 89       	ldd	r27, Z+17	; 0x11
    2a68:	08 17       	cp	r16, r24
    2a6a:	19 07       	cpc	r17, r25
    2a6c:	2a 07       	cpc	r18, r26
    2a6e:	3b 07       	cpc	r19, r27
    2a70:	00 f5       	brcc	.+64     	; 0x2ab2 <prvInsertTimerInActiveList+0x7e>
    2a72:	bf 01       	movw	r22, r30
    2a74:	6e 5f       	subi	r22, 0xFE	; 254
    2a76:	7f 4f       	sbci	r23, 0xFF	; 255
    2a78:	80 91 11 15 	lds	r24, 0x1511	; 0x801511 <pxOverflowTimerList>
    2a7c:	90 91 12 15 	lds	r25, 0x1512	; 0x801512 <pxOverflowTimerList+0x1>
    2a80:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsert>
    2a84:	80 e0       	ldi	r24, 0x00	; 0
    2a86:	18 c0       	rjmp	.+48     	; 0x2ab8 <prvInsertTimerInActiveList+0x84>
    2a88:	0c 15       	cp	r16, r12
    2a8a:	1d 05       	cpc	r17, r13
    2a8c:	2e 05       	cpc	r18, r14
    2a8e:	3f 05       	cpc	r19, r15
    2a90:	28 f4       	brcc	.+10     	; 0x2a9c <prvInsertTimerInActiveList+0x68>
    2a92:	4c 15       	cp	r20, r12
    2a94:	5d 05       	cpc	r21, r13
    2a96:	6e 05       	cpc	r22, r14
    2a98:	7f 05       	cpc	r23, r15
    2a9a:	68 f4       	brcc	.+26     	; 0x2ab6 <prvInsertTimerInActiveList+0x82>
    2a9c:	bf 01       	movw	r22, r30
    2a9e:	6e 5f       	subi	r22, 0xFE	; 254
    2aa0:	7f 4f       	sbci	r23, 0xFF	; 255
    2aa2:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <pxCurrentTimerList>
    2aa6:	90 91 14 15 	lds	r25, 0x1514	; 0x801514 <pxCurrentTimerList+0x1>
    2aaa:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsert>
    2aae:	80 e0       	ldi	r24, 0x00	; 0
    2ab0:	03 c0       	rjmp	.+6      	; 0x2ab8 <prvInsertTimerInActiveList+0x84>
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	01 c0       	rjmp	.+2      	; 0x2ab8 <prvInsertTimerInActiveList+0x84>
    2ab6:	81 e0       	ldi	r24, 0x01	; 1
    2ab8:	1f 91       	pop	r17
    2aba:	0f 91       	pop	r16
    2abc:	ff 90       	pop	r15
    2abe:	ef 90       	pop	r14
    2ac0:	df 90       	pop	r13
    2ac2:	cf 90       	pop	r12
    2ac4:	08 95       	ret

00002ac6 <prvCheckForValidListAndQueue>:
    2ac6:	0f b6       	in	r0, 0x3f	; 63
    2ac8:	f8 94       	cli
    2aca:	0f 92       	push	r0
    2acc:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <xTimerQueue>
    2ad0:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <xTimerQueue+0x1>
    2ad4:	89 2b       	or	r24, r25
    2ad6:	e9 f4       	brne	.+58     	; 0x2b12 <prvCheckForValidListAndQueue+0x4c>
    2ad8:	80 e2       	ldi	r24, 0x20	; 32
    2ada:	95 e1       	ldi	r25, 0x15	; 21
    2adc:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    2ae0:	85 e1       	ldi	r24, 0x15	; 21
    2ae2:	95 e1       	ldi	r25, 0x15	; 21
    2ae4:	0e 94 68 03 	call	0x6d0	; 0x6d0 <vListInitialise>
    2ae8:	80 e2       	ldi	r24, 0x20	; 32
    2aea:	95 e1       	ldi	r25, 0x15	; 21
    2aec:	90 93 14 15 	sts	0x1514, r25	; 0x801514 <pxCurrentTimerList+0x1>
    2af0:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <pxCurrentTimerList>
    2af4:	85 e1       	ldi	r24, 0x15	; 21
    2af6:	95 e1       	ldi	r25, 0x15	; 21
    2af8:	90 93 12 15 	sts	0x1512, r25	; 0x801512 <pxOverflowTimerList+0x1>
    2afc:	80 93 11 15 	sts	0x1511, r24	; 0x801511 <pxOverflowTimerList>
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	67 e0       	ldi	r22, 0x07	; 7
    2b04:	8a e0       	ldi	r24, 0x0A	; 10
    2b06:	0e 94 10 06 	call	0xc20	; 0xc20 <xQueueGenericCreate>
    2b0a:	90 93 10 15 	sts	0x1510, r25	; 0x801510 <xTimerQueue+0x1>
    2b0e:	80 93 0f 15 	sts	0x150F, r24	; 0x80150f <xTimerQueue>
    2b12:	0f 90       	pop	r0
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	08 95       	ret

00002b18 <xTimerCreateTimerTask>:
    2b18:	ef 92       	push	r14
    2b1a:	ff 92       	push	r15
    2b1c:	0f 93       	push	r16
    2b1e:	d3 df       	rcall	.-90     	; 0x2ac6 <prvCheckForValidListAndQueue>
    2b20:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <xTimerQueue>
    2b24:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <xTimerQueue+0x1>
    2b28:	89 2b       	or	r24, r25
    2b2a:	91 f0       	breq	.+36     	; 0x2b50 <xTimerCreateTimerTask+0x38>
    2b2c:	0f 2e       	mov	r0, r31
    2b2e:	fd e0       	ldi	r31, 0x0D	; 13
    2b30:	ef 2e       	mov	r14, r31
    2b32:	f5 e1       	ldi	r31, 0x15	; 21
    2b34:	ff 2e       	mov	r15, r31
    2b36:	f0 2d       	mov	r31, r0
    2b38:	03 e0       	ldi	r16, 0x03	; 3
    2b3a:	20 e0       	ldi	r18, 0x00	; 0
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	40 ec       	ldi	r20, 0xC0	; 192
    2b40:	50 e0       	ldi	r21, 0x00	; 0
    2b42:	62 e4       	ldi	r22, 0x42	; 66
    2b44:	72 e0       	ldi	r23, 0x02	; 2
    2b46:	82 eb       	ldi	r24, 0xB2	; 178
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	0e 94 bc 0b 	call	0x1778	; 0x1778 <xTaskCreate>
    2b4e:	01 c0       	rjmp	.+2      	; 0x2b52 <xTimerCreateTimerTask+0x3a>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	0f 91       	pop	r16
    2b54:	ff 90       	pop	r15
    2b56:	ef 90       	pop	r14
    2b58:	08 95       	ret

00002b5a <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2b5a:	8f 92       	push	r8
    2b5c:	9f 92       	push	r9
    2b5e:	af 92       	push	r10
    2b60:	bf 92       	push	r11
    2b62:	cf 92       	push	r12
    2b64:	df 92       	push	r13
    2b66:	ef 92       	push	r14
    2b68:	ff 92       	push	r15
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	27 97       	sbiw	r28, 0x07	; 7
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2b82:	e0 91 0f 15 	lds	r30, 0x150F	; 0x80150f <xTimerQueue>
    2b86:	f0 91 10 15 	lds	r31, 0x1510	; 0x801510 <xTimerQueue+0x1>
    2b8a:	30 97       	sbiw	r30, 0x00	; 0
    2b8c:	81 f1       	breq	.+96     	; 0x2bee <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2b8e:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2b90:	2a 83       	std	Y+2, r18	; 0x02
    2b92:	3b 83       	std	Y+3, r19	; 0x03
    2b94:	4c 83       	std	Y+4, r20	; 0x04
    2b96:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2b98:	9f 83       	std	Y+7, r25	; 0x07
    2b9a:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2b9c:	66 30       	cpi	r22, 0x06	; 6
    2b9e:	f4 f4       	brge	.+60     	; 0x2bdc <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2ba0:	0d dc       	rcall	.-2022   	; 0x23bc <xTaskGetSchedulerState>
    2ba2:	82 30       	cpi	r24, 0x02	; 2
    2ba4:	69 f4       	brne	.+26     	; 0x2bc0 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2ba6:	00 e0       	ldi	r16, 0x00	; 0
    2ba8:	a7 01       	movw	r20, r14
    2baa:	96 01       	movw	r18, r12
    2bac:	be 01       	movw	r22, r28
    2bae:	6f 5f       	subi	r22, 0xFF	; 255
    2bb0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb2:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <xTimerQueue>
    2bb6:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <xTimerQueue+0x1>
    2bba:	0e 94 31 06 	call	0xc62	; 0xc62 <xQueueGenericSend>
    2bbe:	18 c0       	rjmp	.+48     	; 0x2bf0 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2bc0:	00 e0       	ldi	r16, 0x00	; 0
    2bc2:	20 e0       	ldi	r18, 0x00	; 0
    2bc4:	30 e0       	ldi	r19, 0x00	; 0
    2bc6:	a9 01       	movw	r20, r18
    2bc8:	be 01       	movw	r22, r28
    2bca:	6f 5f       	subi	r22, 0xFF	; 255
    2bcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2bce:	80 91 0f 15 	lds	r24, 0x150F	; 0x80150f <xTimerQueue>
    2bd2:	90 91 10 15 	lds	r25, 0x1510	; 0x801510 <xTimerQueue+0x1>
    2bd6:	0e 94 31 06 	call	0xc62	; 0xc62 <xQueueGenericSend>
    2bda:	0a c0       	rjmp	.+20     	; 0x2bf0 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	a8 01       	movw	r20, r16
    2be0:	be 01       	movw	r22, r28
    2be2:	6f 5f       	subi	r22, 0xFF	; 255
    2be4:	7f 4f       	sbci	r23, 0xFF	; 255
    2be6:	cf 01       	movw	r24, r30
    2be8:	0e 94 ec 06 	call	0xdd8	; 0xdd8 <xQueueGenericSendFromISR>
    2bec:	01 c0       	rjmp	.+2      	; 0x2bf0 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2bee:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2bf0:	27 96       	adiw	r28, 0x07	; 7
    2bf2:	0f b6       	in	r0, 0x3f	; 63
    2bf4:	f8 94       	cli
    2bf6:	de bf       	out	0x3e, r29	; 62
    2bf8:	0f be       	out	0x3f, r0	; 63
    2bfa:	cd bf       	out	0x3d, r28	; 61
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	1f 91       	pop	r17
    2c02:	0f 91       	pop	r16
    2c04:	ff 90       	pop	r15
    2c06:	ef 90       	pop	r14
    2c08:	df 90       	pop	r13
    2c0a:	cf 90       	pop	r12
    2c0c:	bf 90       	pop	r11
    2c0e:	af 90       	pop	r10
    2c10:	9f 90       	pop	r9
    2c12:	8f 90       	pop	r8
    2c14:	08 95       	ret

00002c16 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2c16:	2f 92       	push	r2
    2c18:	3f 92       	push	r3
    2c1a:	4f 92       	push	r4
    2c1c:	5f 92       	push	r5
    2c1e:	6f 92       	push	r6
    2c20:	7f 92       	push	r7
    2c22:	8f 92       	push	r8
    2c24:	9f 92       	push	r9
    2c26:	af 92       	push	r10
    2c28:	bf 92       	push	r11
    2c2a:	cf 92       	push	r12
    2c2c:	df 92       	push	r13
    2c2e:	ef 92       	push	r14
    2c30:	ff 92       	push	r15
    2c32:	0f 93       	push	r16
    2c34:	1f 93       	push	r17
    2c36:	cf 93       	push	r28
    2c38:	df 93       	push	r29
    2c3a:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2c3c:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xTaskGetTickCount>
    2c40:	2b 01       	movw	r4, r22
    2c42:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    2c44:	80 91 09 15 	lds	r24, 0x1509	; 0x801509 <xLastTime.2436>
    2c48:	90 91 0a 15 	lds	r25, 0x150A	; 0x80150a <xLastTime.2436+0x1>
    2c4c:	a0 91 0b 15 	lds	r26, 0x150B	; 0x80150b <xLastTime.2436+0x2>
    2c50:	b0 91 0c 15 	lds	r27, 0x150C	; 0x80150c <xLastTime.2436+0x3>
    2c54:	48 16       	cp	r4, r24
    2c56:	59 06       	cpc	r5, r25
    2c58:	6a 06       	cpc	r6, r26
    2c5a:	7b 06       	cpc	r7, r27
    2c5c:	08 f0       	brcs	.+2      	; 0x2c60 <prvSampleTimeNow+0x4a>
    2c5e:	53 c0       	rjmp	.+166    	; 0x2d06 <prvSampleTimeNow+0xf0>
    2c60:	3b c0       	rjmp	.+118    	; 0x2cd8 <prvSampleTimeNow+0xc2>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2c62:	07 80       	ldd	r0, Z+7	; 0x07
    2c64:	f0 85       	ldd	r31, Z+8	; 0x08
    2c66:	e0 2d       	mov	r30, r0
    2c68:	80 80       	ld	r8, Z
    2c6a:	91 80       	ldd	r9, Z+1	; 0x01
    2c6c:	a2 80       	ldd	r10, Z+2	; 0x02
    2c6e:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2c70:	c0 85       	ldd	r28, Z+8	; 0x08
    2c72:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2c74:	8e 01       	movw	r16, r28
    2c76:	0e 5f       	subi	r16, 0xFE	; 254
    2c78:	1f 4f       	sbci	r17, 0xFF	; 255
    2c7a:	c8 01       	movw	r24, r16
    2c7c:	0e 94 ba 03 	call	0x774	; 0x774 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2c80:	ec 89       	ldd	r30, Y+20	; 0x14
    2c82:	fd 89       	ldd	r31, Y+21	; 0x15
    2c84:	ce 01       	movw	r24, r28
    2c86:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2c88:	8e 89       	ldd	r24, Y+22	; 0x16
    2c8a:	82 ff       	sbrs	r24, 2
    2c8c:	25 c0       	rjmp	.+74     	; 0x2cd8 <prvSampleTimeNow+0xc2>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2c8e:	8e 85       	ldd	r24, Y+14	; 0x0e
    2c90:	9f 85       	ldd	r25, Y+15	; 0x0f
    2c92:	a8 89       	ldd	r26, Y+16	; 0x10
    2c94:	b9 89       	ldd	r27, Y+17	; 0x11
    2c96:	88 0d       	add	r24, r8
    2c98:	99 1d       	adc	r25, r9
    2c9a:	aa 1d       	adc	r26, r10
    2c9c:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2c9e:	88 16       	cp	r8, r24
    2ca0:	99 06       	cpc	r9, r25
    2ca2:	aa 06       	cpc	r10, r26
    2ca4:	bb 06       	cpc	r11, r27
    2ca6:	70 f4       	brcc	.+28     	; 0x2cc4 <prvSampleTimeNow+0xae>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2ca8:	8a 83       	std	Y+2, r24	; 0x02
    2caa:	9b 83       	std	Y+3, r25	; 0x03
    2cac:	ac 83       	std	Y+4, r26	; 0x04
    2cae:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2cb0:	db 87       	std	Y+11, r29	; 0x0b
    2cb2:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2cb4:	b8 01       	movw	r22, r16
    2cb6:	80 91 13 15 	lds	r24, 0x1513	; 0x801513 <pxCurrentTimerList>
    2cba:	90 91 14 15 	lds	r25, 0x1514	; 0x801514 <pxCurrentTimerList+0x1>
    2cbe:	0e 94 7d 03 	call	0x6fa	; 0x6fa <vListInsert>
    2cc2:	0a c0       	rjmp	.+20     	; 0x2cd8 <prvSampleTimeNow+0xc2>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2cc4:	c1 2c       	mov	r12, r1
    2cc6:	d1 2c       	mov	r13, r1
    2cc8:	76 01       	movw	r14, r12
    2cca:	00 e0       	ldi	r16, 0x00	; 0
    2ccc:	10 e0       	ldi	r17, 0x00	; 0
    2cce:	a5 01       	movw	r20, r10
    2cd0:	94 01       	movw	r18, r8
    2cd2:	60 e0       	ldi	r22, 0x00	; 0
    2cd4:	ce 01       	movw	r24, r28
    2cd6:	41 df       	rcall	.-382    	; 0x2b5a <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2cd8:	e0 91 13 15 	lds	r30, 0x1513	; 0x801513 <pxCurrentTimerList>
    2cdc:	f0 91 14 15 	lds	r31, 0x1514	; 0x801514 <pxCurrentTimerList+0x1>
    2ce0:	80 81       	ld	r24, Z
    2ce2:	81 11       	cpse	r24, r1
    2ce4:	be cf       	rjmp	.-132    	; 0x2c62 <prvSampleTimeNow+0x4c>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2ce6:	80 91 11 15 	lds	r24, 0x1511	; 0x801511 <pxOverflowTimerList>
    2cea:	90 91 12 15 	lds	r25, 0x1512	; 0x801512 <pxOverflowTimerList+0x1>
    2cee:	90 93 14 15 	sts	0x1514, r25	; 0x801514 <pxCurrentTimerList+0x1>
    2cf2:	80 93 13 15 	sts	0x1513, r24	; 0x801513 <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2cf6:	f0 93 12 15 	sts	0x1512, r31	; 0x801512 <pxOverflowTimerList+0x1>
    2cfa:	e0 93 11 15 	sts	0x1511, r30	; 0x801511 <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    2cfe:	81 e0       	ldi	r24, 0x01	; 1
    2d00:	f1 01       	movw	r30, r2
    2d02:	80 83       	st	Z, r24
    2d04:	02 c0       	rjmp	.+4      	; 0x2d0a <prvSampleTimeNow+0xf4>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2d06:	f1 01       	movw	r30, r2
    2d08:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    2d0a:	40 92 09 15 	sts	0x1509, r4	; 0x801509 <xLastTime.2436>
    2d0e:	50 92 0a 15 	sts	0x150A, r5	; 0x80150a <xLastTime.2436+0x1>
    2d12:	60 92 0b 15 	sts	0x150B, r6	; 0x80150b <xLastTime.2436+0x2>
    2d16:	70 92 0c 15 	sts	0x150C, r7	; 0x80150c <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2d1a:	c3 01       	movw	r24, r6
    2d1c:	b2 01       	movw	r22, r4
    2d1e:	df 91       	pop	r29
    2d20:	cf 91       	pop	r28
    2d22:	1f 91       	pop	r17
    2d24:	0f 91       	pop	r16
    2d26:	ff 90       	pop	r15
    2d28:	ef 90       	pop	r14
    2d2a:	df 90       	pop	r13
    2d2c:	cf 90       	pop	r12
    2d2e:	bf 90       	pop	r11
    2d30:	af 90       	pop	r10
    2d32:	9f 90       	pop	r9
    2d34:	8f 90       	pop	r8
    2d36:	7f 90       	pop	r7
    2d38:	6f 90       	pop	r6
    2d3a:	5f 90       	pop	r5
    2d3c:	4f 90       	pop	r4
    2d3e:	3f 90       	pop	r3
    2d40:	2f 90       	pop	r2
    2d42:	08 95       	ret

00002d44 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2d44:	08 95       	ret

00002d46 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2d46:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2d48:	2f 9a       	sbi	0x05, 7	; 5
    2d4a:	08 95       	ret

00002d4c <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2d4c:	1f 9a       	sbi	0x03, 7	; 3
    2d4e:	08 95       	ret

00002d50 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2d50:	fa df       	rcall	.-12     	; 0x2d46 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2d52:	2f ef       	ldi	r18, 0xFF	; 255
    2d54:	80 e7       	ldi	r24, 0x70	; 112
    2d56:	92 e0       	ldi	r25, 0x02	; 2
    2d58:	21 50       	subi	r18, 0x01	; 1
    2d5a:	80 40       	sbci	r24, 0x00	; 0
    2d5c:	90 40       	sbci	r25, 0x00	; 0
    2d5e:	e1 f7       	brne	.-8      	; 0x2d58 <vApplicationMallocFailedHook+0x8>
    2d60:	00 c0       	rjmp	.+0      	; 0x2d62 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2d62:	00 00       	nop
    2d64:	f3 df       	rcall	.-26     	; 0x2d4c <prvBlinkMainLed>
    2d66:	f5 cf       	rjmp	.-22     	; 0x2d52 <vApplicationMallocFailedHook+0x2>

00002d68 <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2d68:	ee df       	rcall	.-36     	; 0x2d46 <prvSetMainLedOn>
    2d6a:	2f ef       	ldi	r18, 0xFF	; 255
    2d6c:	87 ea       	ldi	r24, 0xA7	; 167
    2d6e:	91 e6       	ldi	r25, 0x61	; 97
    2d70:	21 50       	subi	r18, 0x01	; 1
    2d72:	80 40       	sbci	r24, 0x00	; 0
    2d74:	90 40       	sbci	r25, 0x00	; 0
    2d76:	e1 f7       	brne	.-8      	; 0x2d70 <vApplicationStackOverflowHook+0x8>
    2d78:	00 c0       	rjmp	.+0      	; 0x2d7a <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2d7a:	00 00       	nop
    2d7c:	e7 df       	rcall	.-50     	; 0x2d4c <prvBlinkMainLed>
    2d7e:	f5 cf       	rjmp	.-22     	; 0x2d6a <vApplicationStackOverflowHook+0x2>

00002d80 <task3>:
	,  NULL
	);
}

/*-----------------------------------------------------------*/
void task3( void *pvParameters ) {
    2d80:	cf 93       	push	r28
    2d82:	df 93       	push	r29
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
    2d88:	6a 97       	sbiw	r28, 0x1a	; 26
    2d8a:	0f b6       	in	r0, 0x3f	; 63
    2d8c:	f8 94       	cli
    2d8e:	de bf       	out	0x3e, r29	; 62
    2d90:	0f be       	out	0x3f, r0	; 63
    2d92:	cd bf       	out	0x3d, r28	; 61
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 300000/portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    2d94:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xTaskGetTickCount>
    2d98:	69 83       	std	Y+1, r22	; 0x01
    2d9a:	7a 83       	std	Y+2, r23	; 0x02
    2d9c:	8b 83       	std	Y+3, r24	; 0x03
    2d9e:	9c 83       	std	Y+4, r25	; 0x04

	for(;;) {
		puts("Task3");

		lora_driver_payload_t uplink_payload;
		uplink_payload.len= 3; // Length of the actual payload
    2da0:	0f 2e       	mov	r0, r31
    2da2:	f3 e0       	ldi	r31, 0x03	; 3
    2da4:	df 2e       	mov	r13, r31
    2da6:	f0 2d       	mov	r31, r0
		uplink_payload.portNo= 1; // The LoRaWANport no to sent the message to
    2da8:	ee 24       	eor	r14, r14
    2daa:	e3 94       	inc	r14
		uplink_payload.bytes[0] = 20;
    2dac:	0f 2e       	mov	r0, r31
    2dae:	f4 e1       	ldi	r31, 0x14	; 20
    2db0:	ff 2e       	mov	r15, r31
    2db2:	f0 2d       	mov	r31, r0
		uplink_payload.bytes[1] = 69;
    2db4:	05 e4       	ldi	r16, 0x45	; 69
		// uplink_payload.bytes[1] = 69 & 0x00FF;
		uplink_payload.bytes[2] = 45;
    2db6:	1d e2       	ldi	r17, 0x2D	; 45
	const TickType_t xFrequency = 300000/portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();

	for(;;) {
		puts("Task3");
    2db8:	8a e4       	ldi	r24, 0x4A	; 74
    2dba:	92 e0       	ldi	r25, 0x02	; 2
    2dbc:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <puts>

		lora_driver_payload_t uplink_payload;
		uplink_payload.len= 3; // Length of the actual payload
    2dc0:	de 82       	std	Y+6, r13	; 0x06
		uplink_payload.portNo= 1; // The LoRaWANport no to sent the message to
    2dc2:	ed 82       	std	Y+5, r14	; 0x05
		uplink_payload.bytes[0] = 20;
    2dc4:	ff 82       	std	Y+7, r15	; 0x07
		uplink_payload.bytes[1] = 69;
    2dc6:	08 87       	std	Y+8, r16	; 0x08
		// uplink_payload.bytes[1] = 69 & 0x00FF;
		uplink_payload.bytes[2] = 45;
    2dc8:	19 87       	std	Y+9, r17	; 0x09
		//uplink_payload.bytes[2] = 45 >> 8;
		//And send it like this:
		lora_driver_sendUploadMessage(false, &uplink_payload);
    2dca:	be 01       	movw	r22, r28
    2dcc:	6b 5f       	subi	r22, 0xFB	; 251
    2dce:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd0:	80 e0       	ldi	r24, 0x00	; 0
    2dd2:	c4 d3       	rcall	.+1928   	; 0x355c <lora_driver_sendUploadMessage>
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    2dd4:	4e e3       	ldi	r20, 0x3E	; 62
    2dd6:	59 e4       	ldi	r21, 0x49	; 73
    2dd8:	60 e0       	ldi	r22, 0x00	; 0
    2dda:	70 e0       	ldi	r23, 0x00	; 0
    2ddc:	ce 01       	movw	r24, r28
    2dde:	01 96       	adiw	r24, 0x01	; 1
    2de0:	67 d8       	rcall	.-3890   	; 0x1eb0 <xTaskDelayUntil>
    2de2:	ea cf       	rjmp	.-44     	; 0x2db8 <task3+0x38>

00002de4 <task1>:

}

/*-----------------------------------------------------------*/
void task1( void *pvParameters )
{
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	00 d0       	rcall	.+0      	; 0x2dea <task1+0x6>
    2dea:	1f 92       	push	r1
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 500/portTICK_PERIOD_MS; // 500 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2df0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xTaskGetTickCount>
    2df4:	69 83       	std	Y+1, r22	; 0x01
    2df6:	7a 83       	std	Y+2, r23	; 0x02
    2df8:	8b 83       	std	Y+3, r24	; 0x03
    2dfa:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
		PORTA ^= _BV(PA0);
    2dfc:	11 e0       	ldi	r17, 0x01	; 1
	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    2dfe:	4f e1       	ldi	r20, 0x1F	; 31
    2e00:	50 e0       	ldi	r21, 0x00	; 0
    2e02:	60 e0       	ldi	r22, 0x00	; 0
    2e04:	70 e0       	ldi	r23, 0x00	; 0
    2e06:	ce 01       	movw	r24, r28
    2e08:	01 96       	adiw	r24, 0x01	; 1
    2e0a:	52 d8       	rcall	.-3932   	; 0x1eb0 <xTaskDelayUntil>
		puts("Task1"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    2e0c:	80 e5       	ldi	r24, 0x50	; 80
    2e0e:	92 e0       	ldi	r25, 0x02	; 2
    2e10:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <puts>
		PORTA ^= _BV(PA0);
    2e14:	82 b1       	in	r24, 0x02	; 2
    2e16:	81 27       	eor	r24, r17
    2e18:	82 b9       	out	0x02, r24	; 2
    2e1a:	f1 cf       	rjmp	.-30     	; 0x2dfe <task1+0x1a>

00002e1c <task2>:
	}
}

/*-----------------------------------------------------------*/
void task2( void *pvParameters )
{
    2e1c:	cf 93       	push	r28
    2e1e:	df 93       	push	r29
    2e20:	00 d0       	rcall	.+0      	; 0x2e22 <task2+0x6>
    2e22:	1f 92       	push	r1
    2e24:	cd b7       	in	r28, 0x3d	; 61
    2e26:	de b7       	in	r29, 0x3e	; 62
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 1000/portTICK_PERIOD_MS; // 1000 ms

	// Initialise the xLastWakeTime variable with the current time.
	xLastWakeTime = xTaskGetTickCount();
    2e28:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xTaskGetTickCount>
    2e2c:	69 83       	std	Y+1, r22	; 0x01
    2e2e:	7a 83       	std	Y+2, r23	; 0x02
    2e30:	8b 83       	std	Y+3, r24	; 0x03
    2e32:	9c 83       	std	Y+4, r25	; 0x04

	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    2e34:	4e e3       	ldi	r20, 0x3E	; 62
    2e36:	50 e0       	ldi	r21, 0x00	; 0
    2e38:	60 e0       	ldi	r22, 0x00	; 0
    2e3a:	70 e0       	ldi	r23, 0x00	; 0
    2e3c:	ce 01       	movw	r24, r28
    2e3e:	01 96       	adiw	r24, 0x01	; 1
    2e40:	37 d8       	rcall	.-3986   	; 0x1eb0 <xTaskDelayUntil>
		puts("Task2"); // stdio functions are not reentrant - Should normally be protected by MUTEX
    2e42:	86 e5       	ldi	r24, 0x56	; 86
    2e44:	92 e0       	ldi	r25, 0x02	; 2
    2e46:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <puts>
		PORTA ^= _BV(PA7);
    2e4a:	82 b1       	in	r24, 0x02	; 2
    2e4c:	80 58       	subi	r24, 0x80	; 128
    2e4e:	82 b9       	out	0x02, r24	; 2
    2e50:	f1 cf       	rjmp	.-30     	; 0x2e34 <task2+0x18>

00002e52 <create_tasks_and_semaphores>:
// Prototype for LoRaWAN handler
void lora_handler_initialise(UBaseType_t lora_handler_task_priority);

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    2e52:	ef 92       	push	r14
    2e54:	ff 92       	push	r15
    2e56:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if ( xTestSemaphore == NULL )  // Check to confirm that the Semaphore has not already been created.
    2e58:	80 91 53 16 	lds	r24, 0x1653	; 0x801653 <xTestSemaphore>
    2e5c:	90 91 54 16 	lds	r25, 0x1654	; 0x801654 <xTestSemaphore+0x1>
    2e60:	89 2b       	or	r24, r25
    2e62:	89 f4       	brne	.+34     	; 0x2e86 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex();  // Create a mutex semaphore.
    2e64:	81 e0       	ldi	r24, 0x01	; 1
    2e66:	0e 94 d1 06 	call	0xda2	; 0xda2 <xQueueCreateMutex>
    2e6a:	90 93 54 16 	sts	0x1654, r25	; 0x801654 <xTestSemaphore+0x1>
    2e6e:	80 93 53 16 	sts	0x1653, r24	; 0x801653 <xTestSemaphore>
		if ( ( xTestSemaphore ) != NULL )
    2e72:	00 97       	sbiw	r24, 0x00	; 0
    2e74:	41 f0       	breq	.+16     	; 0x2e86 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive( ( xTestSemaphore ) );  // Make the mutex available for use, by initially "Giving" the Semaphore.
    2e76:	00 e0       	ldi	r16, 0x00	; 0
    2e78:	20 e0       	ldi	r18, 0x00	; 0
    2e7a:	30 e0       	ldi	r19, 0x00	; 0
    2e7c:	a9 01       	movw	r20, r18
    2e7e:	60 e0       	ldi	r22, 0x00	; 0
    2e80:	70 e0       	ldi	r23, 0x00	; 0
    2e82:	0e 94 31 06 	call	0xc62	; 0xc62 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    2e86:	e1 2c       	mov	r14, r1
    2e88:	f1 2c       	mov	r15, r1
    2e8a:	02 e0       	ldi	r16, 0x02	; 2
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	40 ec       	ldi	r20, 0xC0	; 192
    2e92:	50 e0       	ldi	r21, 0x00	; 0
    2e94:	60 e5       	ldi	r22, 0x50	; 80
    2e96:	72 e0       	ldi	r23, 0x02	; 2
    2e98:	82 ef       	ldi	r24, 0xF2	; 242
    2e9a:	96 e1       	ldi	r25, 0x16	; 22
    2e9c:	0e 94 bc 0b 	call	0x1778	; 0x1778 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  2  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );

	xTaskCreate(
    2ea0:	01 e0       	ldi	r16, 0x01	; 1
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	30 e0       	ldi	r19, 0x00	; 0
    2ea6:	40 ec       	ldi	r20, 0xC0	; 192
    2ea8:	50 e0       	ldi	r21, 0x00	; 0
    2eaa:	66 e5       	ldi	r22, 0x56	; 86
    2eac:	72 e0       	ldi	r23, 0x02	; 2
    2eae:	8e e0       	ldi	r24, 0x0E	; 14
    2eb0:	97 e1       	ldi	r25, 0x17	; 23
    2eb2:	0e 94 bc 0b 	call	0x1778	; 0x1778 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  1  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
	
	xTaskCreate(
    2eb6:	03 e0       	ldi	r16, 0x03	; 3
    2eb8:	20 e0       	ldi	r18, 0x00	; 0
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	40 ec       	ldi	r20, 0xC0	; 192
    2ebe:	50 e0       	ldi	r21, 0x00	; 0
    2ec0:	6a e4       	ldi	r22, 0x4A	; 74
    2ec2:	72 e0       	ldi	r23, 0x02	; 2
    2ec4:	80 ec       	ldi	r24, 0xC0	; 192
    2ec6:	96 e1       	ldi	r25, 0x16	; 22
    2ec8:	0e 94 bc 0b 	call	0x1778	; 0x1778 <xTaskCreate>
	,  configMINIMAL_STACK_SIZE
	,  NULL
	,  3
	,  NULL
	);
}
    2ecc:	0f 91       	pop	r16
    2ece:	ff 90       	pop	r15
    2ed0:	ef 90       	pop	r14
    2ed2:	08 95       	ret

00002ed4 <initialiseSystem>:

/*-----------------------------------------------------------*/
void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2ed4:	81 b1       	in	r24, 0x01	; 1
    2ed6:	81 68       	ori	r24, 0x81	; 129
    2ed8:	81 b9       	out	0x01, r24	; 1
	
	// initialise trace driver
	trace_init();
    2eda:	0e 94 18 02 	call	0x430	; 0x430 <trace_init>
	
	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    2ede:	80 e0       	ldi	r24, 0x00	; 0
    2ee0:	0e 94 ce 20 	call	0x419c	; 0x419c <stdio_initialise>
	// Let's create some tasks
	create_tasks_and_semaphores();
    2ee4:	b6 df       	rcall	.-148    	; 0x2e52 <create_tasks_and_semaphores>

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    2ee6:	85 e0       	ldi	r24, 0x05	; 5
    2ee8:	0e 94 d5 21 	call	0x43aa	; 0x43aa <status_leds_initialise>
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    2eec:	60 e0       	ldi	r22, 0x00	; 0
    2eee:	70 e0       	ldi	r23, 0x00	; 0
    2ef0:	81 e0       	ldi	r24, 0x01	; 1
    2ef2:	56 d2       	rcall	.+1196   	; 0x33a0 <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    2ef4:	83 e0       	ldi	r24, 0x03	; 3
    2ef6:	21 c1       	rjmp	.+578    	; 0x313a <lora_handler_initialise>
    2ef8:	08 95       	ret

00002efa <main>:
    2efa:	ec df       	rcall	.-40     	; 0x2ed4 <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program started!!\n");
    2efc:	8c e5       	ldi	r24, 0x5C	; 92
    2efe:	92 e0       	ldi	r25, 0x02	; 2
    2f00:	0e 94 4f 26 	call	0x4c9e	; 0x4c9e <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2f04:	0e 94 f6 0c 	call	0x19ec	; 0x19ec <vTaskStartScheduler>
    2f08:	ff cf       	rjmp	.-2      	; 0x2f08 <main+0xe>

00002f0a <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    2f0a:	cf 93       	push	r28
    2f0c:	df 93       	push	r29
    2f0e:	cd b7       	in	r28, 0x3d	; 61
    2f10:	de b7       	in	r29, 0x3e	; 62
    2f12:	68 97       	sbiw	r28, 0x18	; 24
    2f14:	0f b6       	in	r0, 0x3f	; 63
    2f16:	f8 94       	cli
    2f18:	de bf       	out	0x3e, r29	; 62
    2f1a:	0f be       	out	0x3f, r0	; 63
    2f1c:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    2f1e:	81 e0       	ldi	r24, 0x01	; 1
    2f20:	7f d2       	rcall	.+1278   	; 0x3420 <lora_driver_resetRn2483>
	vTaskDelay(2);
    2f22:	62 e0       	ldi	r22, 0x02	; 2
    2f24:	70 e0       	ldi	r23, 0x00	; 0
    2f26:	80 e0       	ldi	r24, 0x00	; 0
    2f28:	90 e0       	ldi	r25, 0x00	; 0
    2f2a:	2c d8       	rcall	.-4008   	; 0x1f84 <vTaskDelay>
	lora_driver_resetRn2483(0);
    2f2c:	80 e0       	ldi	r24, 0x00	; 0
    2f2e:	78 d2       	rcall	.+1264   	; 0x3420 <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    2f30:	66 e9       	ldi	r22, 0x96	; 150
    2f32:	70 e0       	ldi	r23, 0x00	; 0
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	90 e0       	ldi	r25, 0x00	; 0

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    2f38:	25 d8       	rcall	.-4022   	; 0x1f84 <vTaskDelay>
    2f3a:	2b d2       	rcall	.+1110   	; 0x3392 <lora_driver_flushBuffers>

static void _lora_setup(void)
{
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    2f3c:	81 e0       	ldi	r24, 0x01	; 1

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    2f3e:	0e 94 23 22 	call	0x4446	; 0x4446 <status_leds_slowBlink>
    2f42:	7c d2       	rcall	.+1272   	; 0x343c <lora_driver_rn2483FactoryReset>
    2f44:	f8 d4       	rcall	.+2544   	; 0x3936 <lora_driver_mapReturnCodeToText>
    2f46:	9f 93       	push	r25
    2f48:	8f 93       	push	r24
    2f4a:	8e e6       	ldi	r24, 0x6E	; 110
    2f4c:	92 e0       	ldi	r25, 0x02	; 2
    2f4e:	9f 93       	push	r25
    2f50:	8f 93       	push	r24
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    2f52:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <printf>
    2f56:	f0 d3       	rcall	.+2016   	; 0x3738 <lora_driver_configureToEu868>
    2f58:	ee d4       	rcall	.+2524   	; 0x3936 <lora_driver_mapReturnCodeToText>
    2f5a:	9f 93       	push	r25
    2f5c:	8f 93       	push	r24
    2f5e:	81 e8       	ldi	r24, 0x81	; 129
    2f60:	92 e0       	ldi	r25, 0x02	; 2
    2f62:	9f 93       	push	r25
    2f64:	8f 93       	push	r24

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    2f66:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <printf>
    2f6a:	8e 01       	movw	r16, r28
    2f6c:	0b 5f       	subi	r16, 0xFB	; 251
    2f6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2f70:	c8 01       	movw	r24, r16
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    2f72:	76 d2       	rcall	.+1260   	; 0x3460 <lora_driver_getRn2483Hweui>
    2f74:	e0 d4       	rcall	.+2496   	; 0x3936 <lora_driver_mapReturnCodeToText>
    2f76:	1f 93       	push	r17
    2f78:	0f 93       	push	r16
    2f7a:	9f 93       	push	r25
    2f7c:	8f 93       	push	r24
    2f7e:	8a e9       	ldi	r24, 0x9A	; 154
    2f80:	92 e0       	ldi	r25, 0x02	; 2
    2f82:	9f 93       	push	r25
    2f84:	8f 93       	push	r24

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    2f86:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <printf>
    2f8a:	c8 01       	movw	r24, r16
    2f8c:	85 d2       	rcall	.+1290   	; 0x3498 <lora_driver_setDeviceIdentifier>
    2f8e:	d3 d4       	rcall	.+2470   	; 0x3936 <lora_driver_mapReturnCodeToText>
    2f90:	9f 93       	push	r25
    2f92:	8f 93       	push	r24
    2f94:	1f 93       	push	r17
    2f96:	0f 93       	push	r16
    2f98:	8e ea       	ldi	r24, 0xAE	; 174
    2f9a:	92 e0       	ldi	r25, 0x02	; 2
    2f9c:	9f 93       	push	r25
    2f9e:	8f 93       	push	r24

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    2fa0:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <printf>
    2fa4:	a8 01       	movw	r20, r16
    2fa6:	63 ec       	ldi	r22, 0xC3	; 195
    2fa8:	72 e0       	ldi	r23, 0x02	; 2
    2faa:	84 ee       	ldi	r24, 0xE4	; 228
    2fac:	92 e0       	ldi	r25, 0x02	; 2
    2fae:	a2 d4       	rcall	.+2372   	; 0x38f4 <lora_driver_setOtaaIdentity>
    2fb0:	c2 d4       	rcall	.+2436   	; 0x3936 <lora_driver_mapReturnCodeToText>
    2fb2:	9f 93       	push	r25
    2fb4:	8f 93       	push	r24
    2fb6:	1f 93       	push	r17
    2fb8:	0f 93       	push	r16
    2fba:	83 ec       	ldi	r24, 0xC3	; 195
    2fbc:	92 e0       	ldi	r25, 0x02	; 2
    2fbe:	9f 93       	push	r25
    2fc0:	8f 93       	push	r24
    2fc2:	84 ee       	ldi	r24, 0xE4	; 228
    2fc4:	92 e0       	ldi	r25, 0x02	; 2
    2fc6:	9f 93       	push	r25
    2fc8:	8f 93       	push	r24
    2fca:	85 ef       	ldi	r24, 0xF5	; 245
    2fcc:	92 e0       	ldi	r25, 0x02	; 2
    2fce:	9f 93       	push	r25
    2fd0:	8f 93       	push	r24

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    2fd2:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <printf>
    2fd6:	93 d2       	rcall	.+1318   	; 0x34fe <lora_driver_saveMac>
    2fd8:	ae d4       	rcall	.+2396   	; 0x3936 <lora_driver_mapReturnCodeToText>
    2fda:	9f 93       	push	r25
    2fdc:	8f 93       	push	r24
    2fde:	8b e2       	ldi	r24, 0x2B	; 43
    2fe0:	93 e0       	ldi	r25, 0x03	; 3
    2fe2:	9f 93       	push	r25
    2fe4:	8f 93       	push	r24

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    2fe6:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <printf>
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	81 e0       	ldi	r24, 0x01	; 1
    2ff6:	7d d3       	rcall	.+1786   	; 0x36f2 <lora_driver_setAdaptiveDataRate>
    2ff8:	9e d4       	rcall	.+2364   	; 0x3936 <lora_driver_mapReturnCodeToText>
    2ffa:	9f 93       	push	r25
    2ffc:	8f 93       	push	r24
    2ffe:	8a e3       	ldi	r24, 0x3A	; 58
    3000:	93 e0       	ldi	r25, 0x03	; 3
    3002:	9f 93       	push	r25
    3004:	8f 93       	push	r24

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3006:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <printf>
    300a:	84 ef       	ldi	r24, 0xF4	; 244
    300c:	91 e0       	ldi	r25, 0x01	; 1
    300e:	7c d3       	rcall	.+1784   	; 0x3708 <lora_driver_setReceiveDelay>
    3010:	92 d4       	rcall	.+2340   	; 0x3936 <lora_driver_mapReturnCodeToText>
    3012:	9f 93       	push	r25
    3014:	8f 93       	push	r24
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	8f 93       	push	r24
    301a:	84 ef       	ldi	r24, 0xF4	; 244
    301c:	8f 93       	push	r24
    301e:	8b e5       	ldi	r24, 0x5B	; 91
    3020:	93 e0       	ldi	r25, 0x03	; 3
    3022:	9f 93       	push	r25
    3024:	8f 93       	push	r24
    3026:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <printf>
    302a:	0f b6       	in	r0, 0x3f	; 63
    302c:	f8 94       	cli
    302e:	de bf       	out	0x3e, r29	; 62
    3030:	0f be       	out	0x3f, r0	; 63
    3032:	cd bf       	out	0x3d, r28	; 61
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3034:	0a e0       	ldi	r16, 0x0A	; 10
    3036:	10 e0       	ldi	r17, 0x00	; 0
    3038:	0f 2e       	mov	r0, r31
    303a:	fb e7       	ldi	r31, 0x7B	; 123
    303c:	ef 2e       	mov	r14, r31
    303e:	f3 e0       	ldi	r31, 0x03	; 3

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    3040:	ff 2e       	mov	r15, r31
    3042:	f0 2d       	mov	r31, r0
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	61 d2       	rcall	.+1218   	; 0x350a <lora_driver_join>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3048:	d8 2e       	mov	r13, r24
    304a:	75 d4       	rcall	.+2282   	; 0x3936 <lora_driver_mapReturnCodeToText>
    304c:	9f 93       	push	r25
    304e:	8f 93       	push	r24
    3050:	1f 93       	push	r17
    3052:	0f 93       	push	r16
    3054:	ff 92       	push	r15
    3056:	ef 92       	push	r14
    3058:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <printf>

		if ( rc != LORA_ACCEPTED)
    305c:	0f 90       	pop	r0
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	0f 90       	pop	r0
    3064:	0f 90       	pop	r0
    3066:	0f 90       	pop	r0
    3068:	f8 e0       	ldi	r31, 0x08	; 8
    306a:	df 16       	cp	r13, r31
    306c:	c1 f1       	breq	.+112    	; 0x30de <lora_handler_task+0x1d4>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    306e:	80 e0       	ldi	r24, 0x00	; 0
    3070:	0e 94 87 22 	call	0x450e	; 0x450e <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3074:	66 e3       	ldi	r22, 0x36	; 54
    3076:	71 e0       	ldi	r23, 0x01	; 1
    3078:	80 e0       	ldi	r24, 0x00	; 0
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <vTaskDelay>
    3080:	01 50       	subi	r16, 0x01	; 1
    3082:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3084:	f9 f6       	brne	.-66     	; 0x3044 <lora_handler_task+0x13a>
    3086:	24 c0       	rjmp	.+72     	; 0x30d0 <lora_handler_task+0x1c6>
		status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3088:	0e 94 34 04 	call	0x868	; 0x868 <vPortYield>
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    308c:	fd cf       	rjmp	.-6      	; 0x3088 <lora_handler_task+0x17e>
    308e:	48 ea       	ldi	r20, 0xA8	; 168
    3090:	58 e4       	ldi	r21, 0x48	; 72
    3092:	60 e0       	ldi	r22, 0x00	; 0
    3094:	70 e0       	ldi	r23, 0x00	; 0
    3096:	ce 01       	movw	r24, r28
    3098:	01 96       	adiw	r24, 0x01	; 1
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    309a:	0e 94 58 0f 	call	0x1eb0	; 0x1eb0 <xTaskDelayUntil>
		_uplink_payload.bytes[1] = hum & 0xFF;
    309e:	f8 01       	movw	r30, r16
		_uplink_payload.bytes[2] = temp >> 8;
    30a0:	82 82       	std	Z+2, r8	; 0x02
		_uplink_payload.bytes[3] = temp & 0xFF;
    30a2:	93 82       	std	Z+3, r9	; 0x03
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    30a4:	a4 82       	std	Z+4, r10	; 0x04
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    30a6:	b5 82       	std	Z+5, r11	; 0x05

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    30a8:	c6 82       	std	Z+6, r12	; 0x06
    30aa:	d7 82       	std	Z+7, r13	; 0x07
    30ac:	83 e0       	ldi	r24, 0x03	; 3
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    30ae:	0e 94 99 22 	call	0x4532	; 0x4532 <status_leds_shortPuls>
    30b2:	b8 01       	movw	r22, r16
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	52 d2       	rcall	.+1188   	; 0x355c <lora_driver_sendUploadMessage>
    30b8:	3e d4       	rcall	.+2172   	; 0x3936 <lora_driver_mapReturnCodeToText>
    30ba:	9f 93       	push	r25
    30bc:	8f 93       	push	r24
    30be:	ff 92       	push	r15
    30c0:	ef 92       	push	r14
    30c2:	0e 94 3c 26 	call	0x4c78	; 0x4c78 <printf>
    30c6:	0f 90       	pop	r0
    30c8:	0f 90       	pop	r0
    30ca:	0f 90       	pop	r0
    30cc:	0f 90       	pop	r0
    30ce:	df cf       	rjmp	.-66     	; 0x308e <lora_handler_task+0x184>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    30d0:	81 e0       	ldi	r24, 0x01	; 1
    30d2:	0e 94 78 22 	call	0x44f0	; 0x44f0 <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    30d6:	80 e0       	ldi	r24, 0x00	; 0
    30d8:	0e 94 46 22 	call	0x448c	; 0x448c <status_leds_fastBlink>
    30dc:	d5 cf       	rjmp	.-86     	; 0x3088 <lora_handler_task+0x17e>

	if (rc == LORA_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    30de:	81 e0       	ldi	r24, 0x01	; 1
    30e0:	0e 94 69 22 	call	0x44d2	; 0x44d2 <status_leds_ledOn>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
    30e4:	eb e2       	ldi	r30, 0x2B	; 43
    30e6:	f5 e1       	ldi	r31, 0x15	; 21
    30e8:	86 e0       	ldi	r24, 0x06	; 6
    30ea:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    30ec:	82 e0       	ldi	r24, 0x02	; 2
    30ee:	80 83       	st	Z, r24

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    30f0:	0e 94 34 0d 	call	0x1a68	; 0x1a68 <xTaskGetTickCount>
    30f4:	69 83       	std	Y+1, r22	; 0x01
    30f6:	7a 83       	std	Y+2, r23	; 0x02
    30f8:	8b 83       	std	Y+3, r24	; 0x03
    30fa:	9c 83       	std	Y+4, r25	; 0x04
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    30fc:	0b e2       	ldi	r16, 0x2B	; 43
    30fe:	15 e1       	ldi	r17, 0x15	; 21
    3100:	0f 2e       	mov	r0, r31
    3102:	f0 e3       	ldi	r31, 0x30	; 48
    3104:	8f 2e       	mov	r8, r31
    3106:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
    3108:	0f 2e       	mov	r0, r31
    310a:	f9 e3       	ldi	r31, 0x39	; 57
    310c:	9f 2e       	mov	r9, r31
    310e:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
    3110:	68 94       	set
    3112:	aa 24       	eor	r10, r10
    3114:	a1 f8       	bld	r10, 1
		_uplink_payload.bytes[3] = temp & 0xFF;
    3116:	0f 2e       	mov	r0, r31
    3118:	f3 ea       	ldi	r31, 0xA3	; 163
    311a:	bf 2e       	mov	r11, r31
    311c:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    311e:	68 94       	set
    3120:	cc 24       	eor	r12, r12
    3122:	c2 f8       	bld	r12, 2
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    3124:	0f 2e       	mov	r0, r31
    3126:	fa e1       	ldi	r31, 0x1A	; 26
    3128:	df 2e       	mov	r13, r31
    312a:	f0 2d       	mov	r31, r0

		status_leds_shortPuls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    312c:	0f 2e       	mov	r0, r31
    312e:	fb e9       	ldi	r31, 0x9B	; 155
    3130:	ef 2e       	mov	r14, r31
    3132:	f3 e0       	ldi	r31, 0x03	; 3
    3134:	ff 2e       	mov	r15, r31
    3136:	f0 2d       	mov	r31, r0
    3138:	aa cf       	rjmp	.-172    	; 0x308e <lora_handler_task+0x184>

0000313a <lora_handler_initialise>:
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    313a:	ef 92       	push	r14
    313c:	ff 92       	push	r15
    313e:	0f 93       	push	r16
	xTaskCreate(
    3140:	e1 2c       	mov	r14, r1
    3142:	f1 2c       	mov	r15, r1
    3144:	08 2f       	mov	r16, r24
    3146:	20 e0       	ldi	r18, 0x00	; 0
    3148:	30 e0       	ldi	r19, 0x00	; 0
    314a:	48 e8       	ldi	r20, 0x88	; 136
    314c:	51 e0       	ldi	r21, 0x01	; 1
    314e:	60 eb       	ldi	r22, 0xB0	; 176
    3150:	73 e0       	ldi	r23, 0x03	; 3
    3152:	85 e8       	ldi	r24, 0x85	; 133
    3154:	97 e1       	ldi	r25, 0x17	; 23
    3156:	0e 94 bc 0b 	call	0x1778	; 0x1778 <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    315a:	0f 91       	pop	r16
    315c:	ff 90       	pop	r15
    315e:	ef 90       	pop	r14
    3160:	08 95       	ret

00003162 <_serialCallBack>:
    3162:	0f 93       	push	r16
    3164:	1f 93       	push	r17
    3166:	cf 93       	push	r28
    3168:	df 93       	push	r29
    316a:	1f 92       	push	r1
    316c:	1f 92       	push	r1
    316e:	cd b7       	in	r28, 0x3d	; 61
    3170:	de b7       	in	r29, 0x3e	; 62
    3172:	8c 01       	movw	r16, r24
    3174:	19 82       	std	Y+1, r1	; 0x01
    3176:	2d c0       	rjmp	.+90     	; 0x31d2 <_serialCallBack+0x70>
    3178:	e0 91 78 15 	lds	r30, 0x1578	; 0x801578 <rec_buf_inp.2878>
    317c:	ec 32       	cpi	r30, 0x2C	; 44
    317e:	50 f4       	brcc	.+20     	; 0x3194 <_serialCallBack+0x32>
    3180:	81 e0       	ldi	r24, 0x01	; 1
    3182:	8e 0f       	add	r24, r30
    3184:	80 93 78 15 	sts	0x1578, r24	; 0x801578 <rec_buf_inp.2878>
    3188:	f0 e0       	ldi	r31, 0x00	; 0
    318a:	e6 55       	subi	r30, 0x56	; 86
    318c:	fa 4e       	sbci	r31, 0xEA	; 234
    318e:	8a 81       	ldd	r24, Y+2	; 0x02
    3190:	80 83       	st	Z, r24
    3192:	02 c0       	rjmp	.+4      	; 0x3198 <_serialCallBack+0x36>
    3194:	10 92 78 15 	sts	0x1578, r1	; 0x801578 <rec_buf_inp.2878>
    3198:	8a 81       	ldd	r24, Y+2	; 0x02
    319a:	8a 30       	cpi	r24, 0x0A	; 10
    319c:	d1 f4       	brne	.+52     	; 0x31d2 <_serialCallBack+0x70>
    319e:	40 91 78 15 	lds	r20, 0x1578	; 0x801578 <rec_buf_inp.2878>
    31a2:	50 e0       	ldi	r21, 0x00	; 0
    31a4:	fa 01       	movw	r30, r20
    31a6:	e8 55       	subi	r30, 0x58	; 88
    31a8:	fa 4e       	sbci	r31, 0xEA	; 234
    31aa:	10 82       	st	Z, r1
    31ac:	41 50       	subi	r20, 0x01	; 1
    31ae:	51 09       	sbc	r21, r1
    31b0:	9e 01       	movw	r18, r28
    31b2:	2f 5f       	subi	r18, 0xFF	; 255
    31b4:	3f 4f       	sbci	r19, 0xFF	; 255
    31b6:	6a ea       	ldi	r22, 0xAA	; 170
    31b8:	75 e1       	ldi	r23, 0x15	; 21
    31ba:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <_serialReplyBufferHandle>
    31be:	90 91 7c 15 	lds	r25, 0x157C	; 0x80157c <_serialReplyBufferHandle+0x1>
    31c2:	0e 94 06 0a 	call	0x140c	; 0x140c <xStreamBufferSendFromISR>
    31c6:	89 81       	ldd	r24, Y+1	; 0x01
    31c8:	81 11       	cpse	r24, r1
    31ca:	0e 94 34 04 	call	0x868	; 0x868 <vPortYield>
    31ce:	10 92 78 15 	sts	0x1578, r1	; 0x801578 <rec_buf_inp.2878>
    31d2:	be 01       	movw	r22, r28
    31d4:	6e 5f       	subi	r22, 0xFE	; 254
    31d6:	7f 4f       	sbci	r23, 0xFF	; 255
    31d8:	c8 01       	movw	r24, r16
    31da:	4a d5       	rcall	.+2708   	; 0x3c70 <serial_getByte>
    31dc:	88 23       	and	r24, r24
    31de:	61 f2       	breq	.-104    	; 0x3178 <_serialCallBack+0x16>
    31e0:	0f 90       	pop	r0
    31e2:	0f 90       	pop	r0
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	08 95       	ret

000031ee <_uploadMessage>:
    31ee:	0f 93       	push	r16
    31f0:	1f 93       	push	r17
    31f2:	cf 93       	push	r28
    31f4:	df 93       	push	r29
    31f6:	8c 01       	movw	r16, r24
    31f8:	eb 01       	movw	r28, r22
    31fa:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <_serialReplyBufferHandle>
    31fe:	90 91 7c 15 	lds	r25, 0x157C	; 0x80157c <_serialReplyBufferHandle+0x1>
    3202:	0e 94 fb 08 	call	0x11f6	; 0x11f6 <xStreamBufferReset>
    3206:	b8 01       	movw	r22, r16
    3208:	81 e4       	ldi	r24, 0x41	; 65
    320a:	95 e1       	ldi	r25, 0x15	; 21
    320c:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <strcpy>
    3210:	20 97       	sbiw	r28, 0x00	; 0
    3212:	79 f0       	breq	.+30     	; 0x3232 <_uploadMessage+0x44>
    3214:	e1 e4       	ldi	r30, 0x41	; 65
    3216:	f5 e1       	ldi	r31, 0x15	; 21
    3218:	01 90       	ld	r0, Z+
    321a:	00 20       	and	r0, r0
    321c:	e9 f7       	brne	.-6      	; 0x3218 <_uploadMessage+0x2a>
    321e:	31 97       	sbiw	r30, 0x01	; 1
    3220:	80 e2       	ldi	r24, 0x20	; 32
    3222:	90 e0       	ldi	r25, 0x00	; 0
    3224:	91 83       	std	Z+1, r25	; 0x01
    3226:	80 83       	st	Z, r24
    3228:	be 01       	movw	r22, r28
    322a:	81 e4       	ldi	r24, 0x41	; 65
    322c:	95 e1       	ldi	r25, 0x15	; 21
    322e:	0e 94 12 26 	call	0x4c24	; 0x4c24 <strcat>
    3232:	e1 e4       	ldi	r30, 0x41	; 65
    3234:	f5 e1       	ldi	r31, 0x15	; 21
    3236:	df 01       	movw	r26, r30
    3238:	0d 90       	ld	r0, X+
    323a:	00 20       	and	r0, r0
    323c:	e9 f7       	brne	.-6      	; 0x3238 <_uploadMessage+0x4a>
    323e:	11 97       	sbiw	r26, 0x01	; 1
    3240:	8d e0       	ldi	r24, 0x0D	; 13
    3242:	9a e0       	ldi	r25, 0x0A	; 10
    3244:	11 96       	adiw	r26, 0x01	; 1
    3246:	9c 93       	st	X, r25
    3248:	8e 93       	st	-X, r24
    324a:	12 96       	adiw	r26, 0x02	; 2
    324c:	1c 92       	st	X, r1
    324e:	01 90       	ld	r0, Z+
    3250:	00 20       	and	r0, r0
    3252:	e9 f7       	brne	.-6      	; 0x324e <_uploadMessage+0x60>
    3254:	31 97       	sbiw	r30, 0x01	; 1
    3256:	e1 54       	subi	r30, 0x41	; 65
    3258:	f5 41       	sbci	r31, 0x15	; 21
    325a:	ae 2f       	mov	r26, r30
    325c:	81 e4       	ldi	r24, 0x41	; 65
    325e:	95 e1       	ldi	r25, 0x15	; 21
    3260:	ac 01       	movw	r20, r24
    3262:	6a 2f       	mov	r22, r26
    3264:	80 91 7d 15 	lds	r24, 0x157D	; 0x80157d <_rn2483_serial>
    3268:	90 91 7e 15 	lds	r25, 0x157E	; 0x80157e <_rn2483_serial+0x1>
    326c:	ac d4       	rcall	.+2392   	; 0x3bc6 <serial_sendBytes>
    326e:	81 11       	cpse	r24, r1
    3270:	11 c0       	rjmp	.+34     	; 0x3294 <_uploadMessage+0xa6>
    3272:	08 e2       	ldi	r16, 0x28	; 40
    3274:	15 e0       	ldi	r17, 0x05	; 5
    3276:	20 e0       	ldi	r18, 0x00	; 0
    3278:	30 e0       	ldi	r19, 0x00	; 0
    327a:	4d e2       	ldi	r20, 0x2D	; 45
    327c:	50 e0       	ldi	r21, 0x00	; 0
    327e:	64 e0       	ldi	r22, 0x04	; 4
    3280:	76 e1       	ldi	r23, 0x16	; 22
    3282:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <_serialReplyBufferHandle>
    3286:	90 91 7c 15 	lds	r25, 0x157C	; 0x80157c <_serialReplyBufferHandle+0x1>
    328a:	0e 94 4a 0a 	call	0x1494	; 0x1494 <xStreamBufferReceive>
    328e:	84 e0       	ldi	r24, 0x04	; 4
    3290:	96 e1       	ldi	r25, 0x16	; 22
    3292:	02 c0       	rjmp	.+4      	; 0x3298 <_uploadMessage+0xaa>
    3294:	80 e0       	ldi	r24, 0x00	; 0
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	1f 91       	pop	r17
    329e:	0f 91       	pop	r16
    32a0:	08 95       	ret

000032a2 <_reply2ReturnCode>:
    32a2:	2f 92       	push	r2
    32a4:	3f 92       	push	r3
    32a6:	4f 92       	push	r4
    32a8:	5f 92       	push	r5
    32aa:	6f 92       	push	r6
    32ac:	7f 92       	push	r7
    32ae:	8f 92       	push	r8
    32b0:	9f 92       	push	r9
    32b2:	af 92       	push	r10
    32b4:	bf 92       	push	r11
    32b6:	cf 92       	push	r12
    32b8:	df 92       	push	r13
    32ba:	ef 92       	push	r14
    32bc:	ff 92       	push	r15
    32be:	0f 93       	push	r16
    32c0:	1f 93       	push	r17
    32c2:	cf 93       	push	r28
    32c4:	df 93       	push	r29
    32c6:	5c 01       	movw	r10, r24
    32c8:	fc 01       	movw	r30, r24
    32ca:	01 90       	ld	r0, Z+
    32cc:	00 20       	and	r0, r0
    32ce:	e9 f7       	brne	.-6      	; 0x32ca <_reply2ReturnCode+0x28>
    32d0:	31 97       	sbiw	r30, 0x01	; 1
    32d2:	6f 01       	movw	r12, r30
    32d4:	c8 1a       	sub	r12, r24
    32d6:	d9 0a       	sbc	r13, r25
    32d8:	5c 2c       	mov	r5, r12
    32da:	0f 2e       	mov	r0, r31
    32dc:	f0 e5       	ldi	r31, 0x50	; 80
    32de:	8f 2e       	mov	r8, r31
    32e0:	f6 e0       	ldi	r31, 0x06	; 6
    32e2:	9f 2e       	mov	r9, r31
    32e4:	f0 2d       	mov	r31, r0
    32e6:	e1 2c       	mov	r14, r1
    32e8:	f1 2c       	mov	r15, r1
    32ea:	4c 2c       	mov	r4, r12
    32ec:	37 01       	movw	r6, r14
    32ee:	f4 01       	movw	r30, r8
    32f0:	01 81       	ldd	r16, Z+1	; 0x01
    32f2:	12 81       	ldd	r17, Z+2	; 0x02
    32f4:	e8 01       	movw	r28, r16
    32f6:	09 90       	ld	r0, Y+
    32f8:	00 20       	and	r0, r0
    32fa:	e9 f7       	brne	.-6      	; 0x32f6 <_reply2ReturnCode+0x54>
    32fc:	21 97       	sbiw	r28, 0x01	; 1
    32fe:	c0 1b       	sub	r28, r16
    3300:	d1 0b       	sbc	r29, r17
    3302:	3c 2e       	mov	r3, r28
    3304:	f9 e0       	ldi	r31, 0x09	; 9
    3306:	cf 16       	cp	r12, r31
    3308:	d1 04       	cpc	r13, r1
    330a:	58 f0       	brcs	.+22     	; 0x3322 <_reply2ReturnCode+0x80>
    330c:	f4 01       	movw	r30, r8
    330e:	20 80       	ld	r2, Z
    3310:	fe e0       	ldi	r31, 0x0E	; 14
    3312:	2f 12       	cpse	r2, r31
    3314:	06 c0       	rjmp	.+12     	; 0x3322 <_reply2ReturnCode+0x80>
    3316:	b8 01       	movw	r22, r16
    3318:	c5 01       	movw	r24, r10
    331a:	0e 94 ed 25 	call	0x4bda	; 0x4bda <strcasestr>
    331e:	89 2b       	or	r24, r25
    3320:	09 f5       	brne	.+66     	; 0x3364 <_reply2ReturnCode+0xc2>
    3322:	44 2d       	mov	r20, r4
    3324:	35 14       	cp	r3, r5
    3326:	08 f4       	brcc	.+2      	; 0x332a <_reply2ReturnCode+0x88>
    3328:	4c 2f       	mov	r20, r28
    332a:	50 e0       	ldi	r21, 0x00	; 0
    332c:	b8 01       	movw	r22, r16
    332e:	c5 01       	movw	r24, r10
    3330:	0e 94 24 26 	call	0x4c48	; 0x4c48 <strncasecmp>
    3334:	89 2b       	or	r24, r25
    3336:	49 f4       	brne	.+18     	; 0x334a <_reply2ReturnCode+0xa8>
    3338:	f3 01       	movw	r30, r6
    333a:	ee 0f       	add	r30, r30
    333c:	ff 1f       	adc	r31, r31
    333e:	e6 0d       	add	r30, r6
    3340:	f7 1d       	adc	r31, r7
    3342:	e0 5b       	subi	r30, 0xB0	; 176
    3344:	f9 4f       	sbci	r31, 0xF9	; 249
    3346:	20 80       	ld	r2, Z
    3348:	0d c0       	rjmp	.+26     	; 0x3364 <_reply2ReturnCode+0xc2>
    334a:	8f ef       	ldi	r24, 0xFF	; 255
    334c:	e8 1a       	sub	r14, r24
    334e:	f8 0a       	sbc	r15, r24
    3350:	e3 e0       	ldi	r30, 0x03	; 3
    3352:	8e 0e       	add	r8, r30
    3354:	91 1c       	adc	r9, r1
    3356:	f1 e1       	ldi	r31, 0x11	; 17
    3358:	ef 16       	cp	r14, r31
    335a:	f1 04       	cpc	r15, r1
    335c:	39 f6       	brne	.-114    	; 0x32ec <_reply2ReturnCode+0x4a>
    335e:	68 94       	set
    3360:	22 24       	eor	r2, r2
    3362:	24 f8       	bld	r2, 4
    3364:	82 2d       	mov	r24, r2
    3366:	df 91       	pop	r29
    3368:	cf 91       	pop	r28
    336a:	1f 91       	pop	r17
    336c:	0f 91       	pop	r16
    336e:	ff 90       	pop	r15
    3370:	ef 90       	pop	r14
    3372:	df 90       	pop	r13
    3374:	cf 90       	pop	r12
    3376:	bf 90       	pop	r11
    3378:	af 90       	pop	r10
    337a:	9f 90       	pop	r9
    337c:	8f 90       	pop	r8
    337e:	7f 90       	pop	r7
    3380:	6f 90       	pop	r6
    3382:	5f 90       	pop	r5
    3384:	4f 90       	pop	r4
    3386:	3f 90       	pop	r3
    3388:	2f 90       	pop	r2
    338a:	08 95       	ret

0000338c <_uploadMessageRc>:
    338c:	30 df       	rcall	.-416    	; 0x31ee <_uploadMessage>
    338e:	89 cf       	rjmp	.-238    	; 0x32a2 <_reply2ReturnCode>
    3390:	08 95       	ret

00003392 <lora_driver_flushBuffers>:
    3392:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <_serialReplyBufferHandle>
    3396:	90 91 7c 15 	lds	r25, 0x157C	; 0x80157c <_serialReplyBufferHandle+0x1>
    339a:	0c 94 fb 08 	jmp	0x11f6	; 0x11f6 <xStreamBufferReset>
    339e:	08 95       	ret

000033a0 <lora_driver_initialise>:
    33a0:	8f 92       	push	r8
    33a2:	9f 92       	push	r9
    33a4:	af 92       	push	r10
    33a6:	cf 92       	push	r12
    33a8:	ef 92       	push	r14
    33aa:	0f 93       	push	r16
    33ac:	1f 93       	push	r17
    33ae:	cf 93       	push	r28
    33b0:	c8 2f       	mov	r28, r24
    33b2:	8b 01       	movw	r16, r22
    33b4:	41 e0       	ldi	r20, 0x01	; 1
    33b6:	60 e0       	ldi	r22, 0x00	; 0
    33b8:	70 e0       	ldi	r23, 0x00	; 0
    33ba:	88 ec       	ldi	r24, 0xC8	; 200
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	0e 94 c6 08 	call	0x118c	; 0x118c <xStreamBufferGenericCreate>
    33c2:	90 93 7c 15 	sts	0x157C, r25	; 0x80157c <_serialReplyBufferHandle+0x1>
    33c6:	80 93 7b 15 	sts	0x157B, r24	; 0x80157b <_serialReplyBufferHandle>
    33ca:	10 93 7a 15 	sts	0x157A, r17	; 0x80157a <_downlinkMessageBuffer+0x1>
    33ce:	00 93 79 15 	sts	0x1579, r16	; 0x801579 <_downlinkMessageBuffer>
    33d2:	0f 2e       	mov	r0, r31
    33d4:	f1 eb       	ldi	r31, 0xB1	; 177
    33d6:	8f 2e       	mov	r8, r31
    33d8:	f8 e1       	ldi	r31, 0x18	; 24
    33da:	9f 2e       	mov	r9, r31
    33dc:	f0 2d       	mov	r31, r0
    33de:	68 94       	set
    33e0:	aa 24       	eor	r10, r10
    33e2:	a6 f8       	bld	r10, 6
    33e4:	68 94       	set
    33e6:	cc 24       	eor	r12, r12
    33e8:	c6 f8       	bld	r12, 6
    33ea:	e1 2c       	mov	r14, r1
    33ec:	00 e0       	ldi	r16, 0x00	; 0
    33ee:	23 e0       	ldi	r18, 0x03	; 3
    33f0:	40 e0       	ldi	r20, 0x00	; 0
    33f2:	51 ee       	ldi	r21, 0xE1	; 225
    33f4:	60 e0       	ldi	r22, 0x00	; 0
    33f6:	70 e0       	ldi	r23, 0x00	; 0
    33f8:	8c 2f       	mov	r24, r28
    33fa:	1e d3       	rcall	.+1596   	; 0x3a38 <serial_create>
    33fc:	90 93 7e 15 	sts	0x157E, r25	; 0x80157e <_rn2483_serial+0x1>
    3400:	80 93 7d 15 	sts	0x157D, r24	; 0x80157d <_rn2483_serial>
    3404:	e7 e0       	ldi	r30, 0x07	; 7
    3406:	f1 e0       	ldi	r31, 0x01	; 1
    3408:	80 81       	ld	r24, Z
    340a:	80 61       	ori	r24, 0x10	; 16
    340c:	80 83       	st	Z, r24
    340e:	cf 91       	pop	r28
    3410:	1f 91       	pop	r17
    3412:	0f 91       	pop	r16
    3414:	ef 90       	pop	r14
    3416:	cf 90       	pop	r12
    3418:	af 90       	pop	r10
    341a:	9f 90       	pop	r9
    341c:	8f 90       	pop	r8
    341e:	08 95       	ret

00003420 <lora_driver_resetRn2483>:
    3420:	88 23       	and	r24, r24
    3422:	31 f0       	breq	.+12     	; 0x3430 <lora_driver_resetRn2483+0x10>
    3424:	e8 e0       	ldi	r30, 0x08	; 8
    3426:	f1 e0       	ldi	r31, 0x01	; 1
    3428:	80 81       	ld	r24, Z
    342a:	8f 7e       	andi	r24, 0xEF	; 239
    342c:	80 83       	st	Z, r24
    342e:	08 95       	ret
    3430:	e8 e0       	ldi	r30, 0x08	; 8
    3432:	f1 e0       	ldi	r31, 0x01	; 1
    3434:	80 81       	ld	r24, Z
    3436:	80 61       	ori	r24, 0x10	; 16
    3438:	80 83       	st	Z, r24
    343a:	08 95       	ret

0000343c <lora_driver_rn2483FactoryReset>:
    343c:	60 e0       	ldi	r22, 0x00	; 0
    343e:	70 e0       	ldi	r23, 0x00	; 0
    3440:	86 ed       	ldi	r24, 0xD6	; 214
    3442:	93 e0       	ldi	r25, 0x03	; 3
    3444:	d4 de       	rcall	.-600    	; 0x31ee <_uploadMessage>
    3446:	e4 e0       	ldi	r30, 0x04	; 4
    3448:	f6 e1       	ldi	r31, 0x16	; 22
    344a:	01 90       	ld	r0, Z+
    344c:	00 20       	and	r0, r0
    344e:	e9 f7       	brne	.-6      	; 0x344a <lora_driver_rn2483FactoryReset+0xe>
    3450:	31 97       	sbiw	r30, 0x01	; 1
    3452:	e4 50       	subi	r30, 0x04	; 4
    3454:	f6 41       	sbci	r31, 0x16	; 22
    3456:	81 e0       	ldi	r24, 0x01	; 1
    3458:	75 97       	sbiw	r30, 0x15	; 21
    345a:	08 f0       	brcs	.+2      	; 0x345e <lora_driver_rn2483FactoryReset+0x22>
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	08 95       	ret

00003460 <lora_driver_getRn2483Hweui>:
    3460:	cf 93       	push	r28
    3462:	df 93       	push	r29
    3464:	ec 01       	movw	r28, r24
    3466:	60 e0       	ldi	r22, 0x00	; 0
    3468:	70 e0       	ldi	r23, 0x00	; 0
    346a:	87 ee       	ldi	r24, 0xE7	; 231
    346c:	93 e0       	ldi	r25, 0x03	; 3
    346e:	bf de       	rcall	.-642    	; 0x31ee <_uploadMessage>
    3470:	e4 e0       	ldi	r30, 0x04	; 4
    3472:	f6 e1       	ldi	r31, 0x16	; 22
    3474:	01 90       	ld	r0, Z+
    3476:	00 20       	and	r0, r0
    3478:	e9 f7       	brne	.-6      	; 0x3474 <lora_driver_getRn2483Hweui+0x14>
    347a:	e5 51       	subi	r30, 0x15	; 21
    347c:	f6 41       	sbci	r31, 0x16	; 22
    347e:	39 f4       	brne	.+14     	; 0x348e <lora_driver_getRn2483Hweui+0x2e>
    3480:	64 e0       	ldi	r22, 0x04	; 4
    3482:	76 e1       	ldi	r23, 0x16	; 22
    3484:	ce 01       	movw	r24, r28
    3486:	0e 94 1d 26 	call	0x4c3a	; 0x4c3a <strcpy>
    348a:	80 e0       	ldi	r24, 0x00	; 0
    348c:	02 c0       	rjmp	.+4      	; 0x3492 <lora_driver_getRn2483Hweui+0x32>
    348e:	18 82       	st	Y, r1
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	df 91       	pop	r29
    3494:	cf 91       	pop	r28
    3496:	08 95       	ret

00003498 <lora_driver_setDeviceIdentifier>:
    3498:	fc 01       	movw	r30, r24
    349a:	01 90       	ld	r0, Z+
    349c:	00 20       	and	r0, r0
    349e:	e9 f7       	brne	.-6      	; 0x349a <lora_driver_setDeviceIdentifier+0x2>
    34a0:	9f 01       	movw	r18, r30
    34a2:	21 51       	subi	r18, 0x11	; 17
    34a4:	31 09       	sbc	r19, r1
    34a6:	28 17       	cp	r18, r24
    34a8:	39 07       	cpc	r19, r25
    34aa:	29 f4       	brne	.+10     	; 0x34b6 <lora_driver_setDeviceIdentifier+0x1e>
    34ac:	bc 01       	movw	r22, r24
    34ae:	85 e1       	ldi	r24, 0x15	; 21
    34b0:	94 e0       	ldi	r25, 0x04	; 4
    34b2:	6c cf       	rjmp	.-296    	; 0x338c <_uploadMessageRc>
    34b4:	08 95       	ret
    34b6:	89 e0       	ldi	r24, 0x09	; 9
    34b8:	08 95       	ret

000034ba <lora_driver_setApplicationIdentifier>:
    34ba:	fc 01       	movw	r30, r24
    34bc:	01 90       	ld	r0, Z+
    34be:	00 20       	and	r0, r0
    34c0:	e9 f7       	brne	.-6      	; 0x34bc <lora_driver_setApplicationIdentifier+0x2>
    34c2:	9f 01       	movw	r18, r30
    34c4:	21 51       	subi	r18, 0x11	; 17
    34c6:	31 09       	sbc	r19, r1
    34c8:	28 17       	cp	r18, r24
    34ca:	39 07       	cpc	r19, r25
    34cc:	29 f4       	brne	.+10     	; 0x34d8 <lora_driver_setApplicationIdentifier+0x1e>
    34ce:	bc 01       	movw	r22, r24
    34d0:	84 e2       	ldi	r24, 0x24	; 36
    34d2:	94 e0       	ldi	r25, 0x04	; 4
    34d4:	5b cf       	rjmp	.-330    	; 0x338c <_uploadMessageRc>
    34d6:	08 95       	ret
    34d8:	89 e0       	ldi	r24, 0x09	; 9
    34da:	08 95       	ret

000034dc <lora_driver_setApplicationKey>:
    34dc:	fc 01       	movw	r30, r24
    34de:	01 90       	ld	r0, Z+
    34e0:	00 20       	and	r0, r0
    34e2:	e9 f7       	brne	.-6      	; 0x34de <lora_driver_setApplicationKey+0x2>
    34e4:	9f 01       	movw	r18, r30
    34e6:	21 52       	subi	r18, 0x21	; 33
    34e8:	31 09       	sbc	r19, r1
    34ea:	28 17       	cp	r18, r24
    34ec:	39 07       	cpc	r19, r25
    34ee:	29 f4       	brne	.+10     	; 0x34fa <lora_driver_setApplicationKey+0x1e>
    34f0:	bc 01       	movw	r22, r24
    34f2:	83 e3       	ldi	r24, 0x33	; 51
    34f4:	94 e0       	ldi	r25, 0x04	; 4
    34f6:	4a cf       	rjmp	.-364    	; 0x338c <_uploadMessageRc>
    34f8:	08 95       	ret
    34fa:	89 e0       	ldi	r24, 0x09	; 9
    34fc:	08 95       	ret

000034fe <lora_driver_saveMac>:
    34fe:	60 e0       	ldi	r22, 0x00	; 0
    3500:	70 e0       	ldi	r23, 0x00	; 0
    3502:	82 e7       	ldi	r24, 0x72	; 114
    3504:	94 e0       	ldi	r25, 0x04	; 4
    3506:	42 cf       	rjmp	.-380    	; 0x338c <_uploadMessageRc>
    3508:	08 95       	ret

0000350a <lora_driver_join>:
    350a:	0f 93       	push	r16
    350c:	1f 93       	push	r17
    350e:	e8 2f       	mov	r30, r24
    3510:	f0 e0       	ldi	r31, 0x00	; 0
    3512:	ee 0f       	add	r30, r30
    3514:	ff 1f       	adc	r31, r31
    3516:	e4 5b       	subi	r30, 0xB4	; 180
    3518:	f9 4f       	sbci	r31, 0xF9	; 249
    351a:	60 81       	ld	r22, Z
    351c:	71 81       	ldd	r23, Z+1	; 0x01
    351e:	8b e7       	ldi	r24, 0x7B	; 123
    3520:	94 e0       	ldi	r25, 0x04	; 4
    3522:	34 df       	rcall	.-408    	; 0x338c <_uploadMessageRc>
    3524:	81 11       	cpse	r24, r1
    3526:	14 c0       	rjmp	.+40     	; 0x3550 <lora_driver_join+0x46>
    3528:	08 e2       	ldi	r16, 0x28	; 40
    352a:	15 e0       	ldi	r17, 0x05	; 5
    352c:	20 e0       	ldi	r18, 0x00	; 0
    352e:	30 e0       	ldi	r19, 0x00	; 0
    3530:	4d e2       	ldi	r20, 0x2D	; 45
    3532:	50 e0       	ldi	r21, 0x00	; 0
    3534:	64 e0       	ldi	r22, 0x04	; 4
    3536:	76 e1       	ldi	r23, 0x16	; 22
    3538:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <_serialReplyBufferHandle>
    353c:	90 91 7c 15 	lds	r25, 0x157C	; 0x80157c <_serialReplyBufferHandle+0x1>
    3540:	0e 94 4a 0a 	call	0x1494	; 0x1494 <xStreamBufferReceive>
    3544:	88 23       	and	r24, r24
    3546:	21 f0       	breq	.+8      	; 0x3550 <lora_driver_join+0x46>
    3548:	84 e0       	ldi	r24, 0x04	; 4
    354a:	96 e1       	ldi	r25, 0x16	; 22
    354c:	aa de       	rcall	.-684    	; 0x32a2 <_reply2ReturnCode>
    354e:	03 c0       	rjmp	.+6      	; 0x3556 <lora_driver_join+0x4c>
    3550:	84 e0       	ldi	r24, 0x04	; 4
    3552:	96 e1       	ldi	r25, 0x16	; 22
    3554:	a6 de       	rcall	.-692    	; 0x32a2 <_reply2ReturnCode>
    3556:	1f 91       	pop	r17
    3558:	0f 91       	pop	r16
    355a:	08 95       	ret

0000355c <lora_driver_sendUploadMessage>:
    355c:	0f 93       	push	r16
    355e:	1f 93       	push	r17
    3560:	cf 93       	push	r28
    3562:	df 93       	push	r29
    3564:	1f 92       	push	r1
    3566:	cd b7       	in	r28, 0x3d	; 61
    3568:	de b7       	in	r29, 0x3e	; 62
    356a:	db 01       	movw	r26, r22
    356c:	11 96       	adiw	r26, 0x01	; 1
    356e:	9c 91       	ld	r25, X
    3570:	11 97       	sbiw	r26, 0x01	; 1
    3572:	95 31       	cpi	r25, 0x15	; 21
    3574:	08 f0       	brcs	.+2      	; 0x3578 <lora_driver_sendUploadMessage+0x1c>
    3576:	b4 c0       	rjmp	.+360    	; 0x36e0 <lora_driver_sendUploadMessage+0x184>
    3578:	99 23       	and	r25, r25
    357a:	81 f1       	breq	.+96     	; 0x35dc <lora_driver_sendUploadMessage+0x80>
    357c:	60 e0       	ldi	r22, 0x00	; 0
    357e:	70 e0       	ldi	r23, 0x00	; 0
    3580:	27 2f       	mov	r18, r23
    3582:	30 e0       	ldi	r19, 0x00	; 0
    3584:	46 2f       	mov	r20, r22
    3586:	50 e0       	ldi	r21, 0x00	; 0
    3588:	fd 01       	movw	r30, r26
    358a:	e4 0f       	add	r30, r20
    358c:	f5 1f       	adc	r31, r21
    358e:	92 81       	ldd	r25, Z+2	; 0x02
    3590:	92 95       	swap	r25
    3592:	9f 70       	andi	r25, 0x0F	; 15
    3594:	9a 30       	cpi	r25, 0x0A	; 10
    3596:	10 f0       	brcs	.+4      	; 0x359c <lora_driver_sendUploadMessage+0x40>
    3598:	99 5c       	subi	r25, 0xC9	; 201
    359a:	01 c0       	rjmp	.+2      	; 0x359e <lora_driver_sendUploadMessage+0x42>
    359c:	90 5d       	subi	r25, 0xD0	; 208
    359e:	f9 01       	movw	r30, r18
    35a0:	eb 56       	subi	r30, 0x6B	; 107
    35a2:	fa 4e       	sbci	r31, 0xEA	; 234
    35a4:	90 83       	st	Z, r25
    35a6:	2f 5f       	subi	r18, 0xFF	; 255
    35a8:	3f 4f       	sbci	r19, 0xFF	; 255
    35aa:	fd 01       	movw	r30, r26
    35ac:	e4 0f       	add	r30, r20
    35ae:	f5 1f       	adc	r31, r21
    35b0:	92 81       	ldd	r25, Z+2	; 0x02
    35b2:	9f 70       	andi	r25, 0x0F	; 15
    35b4:	49 2f       	mov	r20, r25
    35b6:	50 e0       	ldi	r21, 0x00	; 0
    35b8:	4a 30       	cpi	r20, 0x0A	; 10
    35ba:	51 05       	cpc	r21, r1
    35bc:	14 f0       	brlt	.+4      	; 0x35c2 <lora_driver_sendUploadMessage+0x66>
    35be:	99 5c       	subi	r25, 0xC9	; 201
    35c0:	01 c0       	rjmp	.+2      	; 0x35c4 <lora_driver_sendUploadMessage+0x68>
    35c2:	90 5d       	subi	r25, 0xD0	; 208
    35c4:	f9 01       	movw	r30, r18
    35c6:	eb 56       	subi	r30, 0x6B	; 107
    35c8:	fa 4e       	sbci	r31, 0xEA	; 234
    35ca:	90 83       	st	Z, r25
    35cc:	7e 5f       	subi	r23, 0xFE	; 254
    35ce:	6f 5f       	subi	r22, 0xFF	; 255
    35d0:	11 96       	adiw	r26, 0x01	; 1
    35d2:	9c 91       	ld	r25, X
    35d4:	11 97       	sbiw	r26, 0x01	; 1
    35d6:	69 17       	cp	r22, r25
    35d8:	98 f2       	brcs	.-90     	; 0x3580 <lora_driver_sendUploadMessage+0x24>
    35da:	01 c0       	rjmp	.+2      	; 0x35de <lora_driver_sendUploadMessage+0x82>
    35dc:	70 e0       	ldi	r23, 0x00	; 0
    35de:	e7 2f       	mov	r30, r23
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	eb 56       	subi	r30, 0x6B	; 107
    35e4:	fa 4e       	sbci	r31, 0xEA	; 234
    35e6:	10 82       	st	Z, r1
    35e8:	4c 91       	ld	r20, X
    35ea:	81 11       	cpse	r24, r1
    35ec:	03 c0       	rjmp	.+6      	; 0x35f4 <lora_driver_sendUploadMessage+0x98>
    35ee:	84 e8       	ldi	r24, 0x84	; 132
    35f0:	94 e0       	ldi	r25, 0x04	; 4
    35f2:	02 c0       	rjmp	.+4      	; 0x35f8 <lora_driver_sendUploadMessage+0x9c>
    35f4:	86 e8       	ldi	r24, 0x86	; 134
    35f6:	94 e0       	ldi	r25, 0x04	; 4
    35f8:	25 e9       	ldi	r18, 0x95	; 149
    35fa:	35 e1       	ldi	r19, 0x15	; 21
    35fc:	3f 93       	push	r19
    35fe:	2f 93       	push	r18
    3600:	1f 92       	push	r1
    3602:	4f 93       	push	r20
    3604:	9f 93       	push	r25
    3606:	8f 93       	push	r24
    3608:	8a e8       	ldi	r24, 0x8A	; 138
    360a:	94 e0       	ldi	r25, 0x04	; 4
    360c:	9f 93       	push	r25
    360e:	8f 93       	push	r24
    3610:	87 ed       	ldi	r24, 0xD7	; 215
    3612:	95 e1       	ldi	r25, 0x15	; 21
    3614:	9f 93       	push	r25
    3616:	8f 93       	push	r24
    3618:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <sprintf>
    361c:	60 e0       	ldi	r22, 0x00	; 0
    361e:	70 e0       	ldi	r23, 0x00	; 0
    3620:	87 ed       	ldi	r24, 0xD7	; 215
    3622:	95 e1       	ldi	r25, 0x15	; 21
    3624:	b3 de       	rcall	.-666    	; 0x338c <_uploadMessageRc>
    3626:	0f b6       	in	r0, 0x3f	; 63
    3628:	f8 94       	cli
    362a:	de bf       	out	0x3e, r29	; 62
    362c:	0f be       	out	0x3f, r0	; 63
    362e:	cd bf       	out	0x3d, r28	; 61
    3630:	81 11       	cpse	r24, r1
    3632:	59 c0       	rjmp	.+178    	; 0x36e6 <lora_driver_sendUploadMessage+0x18a>
    3634:	08 e2       	ldi	r16, 0x28	; 40
    3636:	15 e0       	ldi	r17, 0x05	; 5
    3638:	20 e0       	ldi	r18, 0x00	; 0
    363a:	30 e0       	ldi	r19, 0x00	; 0
    363c:	4d e2       	ldi	r20, 0x2D	; 45
    363e:	50 e0       	ldi	r21, 0x00	; 0
    3640:	64 e0       	ldi	r22, 0x04	; 4
    3642:	76 e1       	ldi	r23, 0x16	; 22
    3644:	80 91 7b 15 	lds	r24, 0x157B	; 0x80157b <_serialReplyBufferHandle>
    3648:	90 91 7c 15 	lds	r25, 0x157C	; 0x80157c <_serialReplyBufferHandle+0x1>
    364c:	0e 94 4a 0a 	call	0x1494	; 0x1494 <xStreamBufferReceive>
    3650:	88 23       	and	r24, r24
    3652:	09 f4       	brne	.+2      	; 0x3656 <lora_driver_sendUploadMessage+0xfa>
    3654:	47 c0       	rjmp	.+142    	; 0x36e4 <lora_driver_sendUploadMessage+0x188>
    3656:	84 e0       	ldi	r24, 0x04	; 4
    3658:	96 e1       	ldi	r25, 0x16	; 22
    365a:	23 de       	rcall	.-954    	; 0x32a2 <_reply2ReturnCode>
    365c:	8e 30       	cpi	r24, 0x0E	; 14
    365e:	09 f0       	breq	.+2      	; 0x3662 <lora_driver_sendUploadMessage+0x106>
    3660:	42 c0       	rjmp	.+132    	; 0x36e6 <lora_driver_sendUploadMessage+0x18a>
    3662:	87 e0       	ldi	r24, 0x07	; 7
    3664:	89 83       	std	Y+1, r24	; 0x01
    3666:	80 91 79 15 	lds	r24, 0x1579	; 0x801579 <_downlinkMessageBuffer>
    366a:	90 91 7a 15 	lds	r25, 0x157A	; 0x80157a <_downlinkMessageBuffer+0x1>
    366e:	89 2b       	or	r24, r25
    3670:	a9 f1       	breq	.+106    	; 0x36dc <lora_driver_sendUploadMessage+0x180>
    3672:	be 01       	movw	r22, r28
    3674:	6f 5f       	subi	r22, 0xFF	; 255
    3676:	7f 4f       	sbci	r23, 0xFF	; 255
    3678:	84 e0       	ldi	r24, 0x04	; 4
    367a:	96 e1       	ldi	r25, 0x16	; 22
    367c:	68 d1       	rcall	.+720    	; 0x394e <decode_port_no>
    367e:	80 93 7f 15 	sts	0x157F, r24	; 0x80157f <_downlinkPayload>
    3682:	e9 81       	ldd	r30, Y+1	; 0x01
    3684:	f0 e0       	ldi	r31, 0x00	; 0
    3686:	ec 5f       	subi	r30, 0xFC	; 252
    3688:	f9 4e       	sbci	r31, 0xE9	; 233
    368a:	df 01       	movw	r26, r30
    368c:	0d 90       	ld	r0, X+
    368e:	00 20       	and	r0, r0
    3690:	e9 f7       	brne	.-6      	; 0x368c <lora_driver_sendUploadMessage+0x130>
    3692:	11 97       	sbiw	r26, 0x01	; 1
    3694:	ae 1b       	sub	r26, r30
    3696:	bf 0b       	sbc	r27, r31
    3698:	aa 23       	and	r26, r26
    369a:	91 f0       	breq	.+36     	; 0x36c0 <lora_driver_sendUploadMessage+0x164>
    369c:	bb 27       	eor	r27, r27
    369e:	cd 01       	movw	r24, r26
    36a0:	01 97       	sbiw	r24, 0x01	; 1
    36a2:	9c 01       	movw	r18, r24
    36a4:	12 f4       	brpl	.+4      	; 0x36aa <lora_driver_sendUploadMessage+0x14e>
    36a6:	2f 5f       	subi	r18, 0xFF	; 255
    36a8:	3f 4f       	sbci	r19, 0xFF	; 255
    36aa:	35 95       	asr	r19
    36ac:	27 95       	ror	r18
    36ae:	20 93 80 15 	sts	0x1580, r18	; 0x801580 <_downlinkPayload+0x1>
    36b2:	af 01       	movw	r20, r30
    36b4:	4f 5f       	subi	r20, 0xFF	; 255
    36b6:	5f 4f       	sbci	r21, 0xFF	; 255
    36b8:	64 e1       	ldi	r22, 0x14	; 20
    36ba:	81 e8       	ldi	r24, 0x81	; 129
    36bc:	95 e1       	ldi	r25, 0x15	; 21
    36be:	73 d1       	rcall	.+742    	; 0x39a6 <decode_hexadecimal_string_bytes>
    36c0:	01 e0       	ldi	r16, 0x01	; 1
    36c2:	10 e0       	ldi	r17, 0x00	; 0
    36c4:	20 e0       	ldi	r18, 0x00	; 0
    36c6:	30 e0       	ldi	r19, 0x00	; 0
    36c8:	46 e1       	ldi	r20, 0x16	; 22
    36ca:	50 e0       	ldi	r21, 0x00	; 0
    36cc:	6f e7       	ldi	r22, 0x7F	; 127
    36ce:	75 e1       	ldi	r23, 0x15	; 21
    36d0:	80 91 79 15 	lds	r24, 0x1579	; 0x801579 <_downlinkMessageBuffer>
    36d4:	90 91 7a 15 	lds	r25, 0x157A	; 0x80157a <_downlinkMessageBuffer+0x1>
    36d8:	0e 94 47 09 	call	0x128e	; 0x128e <xStreamBufferSend>
    36dc:	8e e0       	ldi	r24, 0x0E	; 14
    36de:	03 c0       	rjmp	.+6      	; 0x36e6 <lora_driver_sendUploadMessage+0x18a>
    36e0:	84 e1       	ldi	r24, 0x14	; 20
    36e2:	01 c0       	rjmp	.+2      	; 0x36e6 <lora_driver_sendUploadMessage+0x18a>
    36e4:	80 e0       	ldi	r24, 0x00	; 0
    36e6:	0f 90       	pop	r0
    36e8:	df 91       	pop	r29
    36ea:	cf 91       	pop	r28
    36ec:	1f 91       	pop	r17
    36ee:	0f 91       	pop	r16
    36f0:	08 95       	ret

000036f2 <lora_driver_setAdaptiveDataRate>:
    36f2:	81 30       	cpi	r24, 0x01	; 1
    36f4:	19 f0       	breq	.+6      	; 0x36fc <lora_driver_setAdaptiveDataRate+0xa>
    36f6:	6a e9       	ldi	r22, 0x9A	; 154
    36f8:	74 e0       	ldi	r23, 0x04	; 4
    36fa:	02 c0       	rjmp	.+4      	; 0x3700 <lora_driver_setAdaptiveDataRate+0xe>
    36fc:	63 e7       	ldi	r22, 0x73	; 115
    36fe:	75 e0       	ldi	r23, 0x05	; 5
    3700:	8e e9       	ldi	r24, 0x9E	; 158
    3702:	94 e0       	ldi	r25, 0x04	; 4
    3704:	43 ce       	rjmp	.-890    	; 0x338c <_uploadMessageRc>
    3706:	08 95       	ret

00003708 <lora_driver_setReceiveDelay>:
    3708:	9f 93       	push	r25
    370a:	8f 93       	push	r24
    370c:	8f ec       	ldi	r24, 0xCF	; 207
    370e:	94 e0       	ldi	r25, 0x04	; 4
    3710:	9f 93       	push	r25
    3712:	8f 93       	push	r24
    3714:	87 ed       	ldi	r24, 0xD7	; 215
    3716:	95 e1       	ldi	r25, 0x15	; 21
    3718:	9f 93       	push	r25
    371a:	8f 93       	push	r24
    371c:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <sprintf>
    3720:	60 e0       	ldi	r22, 0x00	; 0
    3722:	70 e0       	ldi	r23, 0x00	; 0
    3724:	87 ed       	ldi	r24, 0xD7	; 215
    3726:	95 e1       	ldi	r25, 0x15	; 21
    3728:	31 de       	rcall	.-926    	; 0x338c <_uploadMessageRc>
    372a:	0f 90       	pop	r0
    372c:	0f 90       	pop	r0
    372e:	0f 90       	pop	r0
    3730:	0f 90       	pop	r0
    3732:	0f 90       	pop	r0
    3734:	0f 90       	pop	r0
    3736:	08 95       	ret

00003738 <lora_driver_configureToEu868>:
    3738:	2f 92       	push	r2
    373a:	3f 92       	push	r3
    373c:	4f 92       	push	r4
    373e:	5f 92       	push	r5
    3740:	6f 92       	push	r6
    3742:	7f 92       	push	r7
    3744:	8f 92       	push	r8
    3746:	9f 92       	push	r9
    3748:	af 92       	push	r10
    374a:	bf 92       	push	r11
    374c:	cf 92       	push	r12
    374e:	df 92       	push	r13
    3750:	ef 92       	push	r14
    3752:	ff 92       	push	r15
    3754:	0f 93       	push	r16
    3756:	1f 93       	push	r17
    3758:	cf 93       	push	r28
    375a:	df 93       	push	r29
    375c:	cd b7       	in	r28, 0x3d	; 61
    375e:	de b7       	in	r29, 0x3e	; 62
    3760:	a0 97       	sbiw	r28, 0x20	; 32
    3762:	0f b6       	in	r0, 0x3f	; 63
    3764:	f8 94       	cli
    3766:	de bf       	out	0x3e, r29	; 62
    3768:	0f be       	out	0x3f, r0	; 63
    376a:	cd bf       	out	0x3d, r28	; 61
    376c:	6c ef       	ldi	r22, 0xFC	; 252
    376e:	74 e0       	ldi	r23, 0x04	; 4
    3770:	88 e0       	ldi	r24, 0x08	; 8
    3772:	95 e0       	ldi	r25, 0x05	; 5
    3774:	3c dd       	rcall	.-1416   	; 0x31ee <_uploadMessage>
    3776:	95 dd       	rcall	.-1238   	; 0x32a2 <_reply2ReturnCode>
    3778:	81 11       	cpse	r24, r1
    377a:	a3 c0       	rjmp	.+326    	; 0x38c2 <lora_driver_configureToEu868+0x18a>
    377c:	80 e2       	ldi	r24, 0x20	; 32
    377e:	ed e1       	ldi	r30, 0x1D	; 29
    3780:	f2 e0       	ldi	r31, 0x02	; 2
    3782:	de 01       	movw	r26, r28
    3784:	11 96       	adiw	r26, 0x01	; 1
    3786:	01 90       	ld	r0, Z+
    3788:	0d 92       	st	X+, r0
    378a:	8a 95       	dec	r24
    378c:	e1 f7       	brne	.-8      	; 0x3786 <lora_driver_configureToEu868+0x4e>
    378e:	9e 01       	movw	r18, r28
    3790:	2f 5f       	subi	r18, 0xFF	; 255
    3792:	3f 4f       	sbci	r19, 0xFF	; 255
    3794:	69 01       	movw	r12, r18
    3796:	e1 2c       	mov	r14, r1
    3798:	f1 2c       	mov	r15, r1
    379a:	0f 2e       	mov	r0, r31
    379c:	f4 e1       	ldi	r31, 0x14	; 20
    379e:	af 2e       	mov	r10, r31
    37a0:	f5 e0       	ldi	r31, 0x05	; 5
    37a2:	bf 2e       	mov	r11, r31
    37a4:	f0 2d       	mov	r31, r0
    37a6:	07 ed       	ldi	r16, 0xD7	; 215
    37a8:	15 e1       	ldi	r17, 0x15	; 21
    37aa:	0f 2e       	mov	r0, r31
    37ac:	fd e2       	ldi	r31, 0x2D	; 45
    37ae:	4f 2e       	mov	r4, r31
    37b0:	f5 e0       	ldi	r31, 0x05	; 5
    37b2:	5f 2e       	mov	r5, r31
    37b4:	f0 2d       	mov	r31, r0
    37b6:	0f 2e       	mov	r0, r31
    37b8:	f4 e4       	ldi	r31, 0x44	; 68
    37ba:	8f 2e       	mov	r8, r31
    37bc:	f5 e0       	ldi	r31, 0x05	; 5
    37be:	9f 2e       	mov	r9, r31
    37c0:	f0 2d       	mov	r31, r0
    37c2:	0f 2e       	mov	r0, r31
    37c4:	fe e5       	ldi	r31, 0x5E	; 94
    37c6:	6f 2e       	mov	r6, r31
    37c8:	f5 e0       	ldi	r31, 0x05	; 5
    37ca:	7f 2e       	mov	r7, r31
    37cc:	f0 2d       	mov	r31, r0
    37ce:	3e 2c       	mov	r3, r14
    37d0:	2f 2c       	mov	r2, r15
    37d2:	ff 92       	push	r15
    37d4:	ef 92       	push	r14
    37d6:	bf 92       	push	r11
    37d8:	af 92       	push	r10
    37da:	1f 93       	push	r17
    37dc:	0f 93       	push	r16
    37de:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <sprintf>
    37e2:	60 e0       	ldi	r22, 0x00	; 0
    37e4:	70 e0       	ldi	r23, 0x00	; 0
    37e6:	c8 01       	movw	r24, r16
    37e8:	02 dd       	rcall	.-1532   	; 0x31ee <_uploadMessage>
    37ea:	5b dd       	rcall	.-1354   	; 0x32a2 <_reply2ReturnCode>
    37ec:	0f 90       	pop	r0
    37ee:	0f 90       	pop	r0
    37f0:	0f 90       	pop	r0
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	81 11       	cpse	r24, r1
    37fa:	63 c0       	rjmp	.+198    	; 0x38c2 <lora_driver_configureToEu868+0x18a>
    37fc:	32 e0       	ldi	r19, 0x02	; 2
    37fe:	3e 15       	cp	r19, r14
    3800:	e8 f4       	brcc	.+58     	; 0x383c <lora_driver_configureToEu868+0x104>
    3802:	f6 01       	movw	r30, r12
    3804:	83 81       	ldd	r24, Z+3	; 0x03
    3806:	8f 93       	push	r24
    3808:	82 81       	ldd	r24, Z+2	; 0x02
    380a:	8f 93       	push	r24
    380c:	81 81       	ldd	r24, Z+1	; 0x01
    380e:	8f 93       	push	r24
    3810:	80 81       	ld	r24, Z
    3812:	8f 93       	push	r24
    3814:	ff 92       	push	r15
    3816:	ef 92       	push	r14
    3818:	5f 92       	push	r5
    381a:	4f 92       	push	r4
    381c:	1f 93       	push	r17
    381e:	0f 93       	push	r16
    3820:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <sprintf>
    3824:	60 e0       	ldi	r22, 0x00	; 0
    3826:	70 e0       	ldi	r23, 0x00	; 0
    3828:	c8 01       	movw	r24, r16
    382a:	e1 dc       	rcall	.-1598   	; 0x31ee <_uploadMessage>
    382c:	3a dd       	rcall	.-1420   	; 0x32a2 <_reply2ReturnCode>
    382e:	0f b6       	in	r0, 0x3f	; 63
    3830:	f8 94       	cli
    3832:	de bf       	out	0x3e, r29	; 62
    3834:	0f be       	out	0x3f, r0	; 63
    3836:	cd bf       	out	0x3d, r28	; 61
    3838:	81 11       	cpse	r24, r1
    383a:	43 c0       	rjmp	.+134    	; 0x38c2 <lora_driver_configureToEu868+0x18a>
    383c:	2f 92       	push	r2
    383e:	3f 92       	push	r3
    3840:	9f 92       	push	r9
    3842:	8f 92       	push	r8
    3844:	1f 93       	push	r17
    3846:	0f 93       	push	r16
    3848:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <sprintf>
    384c:	60 e0       	ldi	r22, 0x00	; 0
    384e:	70 e0       	ldi	r23, 0x00	; 0
    3850:	c8 01       	movw	r24, r16
    3852:	cd dc       	rcall	.-1638   	; 0x31ee <_uploadMessage>
    3854:	26 dd       	rcall	.-1460   	; 0x32a2 <_reply2ReturnCode>
    3856:	0f 90       	pop	r0
    3858:	0f 90       	pop	r0
    385a:	0f 90       	pop	r0
    385c:	0f 90       	pop	r0
    385e:	0f 90       	pop	r0
    3860:	0f 90       	pop	r0
    3862:	81 11       	cpse	r24, r1
    3864:	2e c0       	rjmp	.+92     	; 0x38c2 <lora_driver_configureToEu868+0x18a>
    3866:	2f 92       	push	r2
    3868:	3f 92       	push	r3
    386a:	7f 92       	push	r7
    386c:	6f 92       	push	r6
    386e:	1f 93       	push	r17
    3870:	0f 93       	push	r16
    3872:	0e 94 7f 26 	call	0x4cfe	; 0x4cfe <sprintf>
    3876:	60 e0       	ldi	r22, 0x00	; 0
    3878:	70 e0       	ldi	r23, 0x00	; 0
    387a:	c8 01       	movw	r24, r16
    387c:	b8 dc       	rcall	.-1680   	; 0x31ee <_uploadMessage>
    387e:	11 dd       	rcall	.-1502   	; 0x32a2 <_reply2ReturnCode>
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	0f 90       	pop	r0
    3886:	0f 90       	pop	r0
    3888:	0f 90       	pop	r0
    388a:	0f 90       	pop	r0
    388c:	81 11       	cpse	r24, r1
    388e:	19 c0       	rjmp	.+50     	; 0x38c2 <lora_driver_configureToEu868+0x18a>
    3890:	3f ef       	ldi	r19, 0xFF	; 255
    3892:	e3 1a       	sub	r14, r19
    3894:	f3 0a       	sbc	r15, r19
    3896:	84 e0       	ldi	r24, 0x04	; 4
    3898:	c8 0e       	add	r12, r24
    389a:	d1 1c       	adc	r13, r1
    389c:	98 e0       	ldi	r25, 0x08	; 8
    389e:	e9 16       	cp	r14, r25
    38a0:	f1 04       	cpc	r15, r1
    38a2:	09 f0       	breq	.+2      	; 0x38a6 <lora_driver_configureToEu868+0x16e>
    38a4:	94 cf       	rjmp	.-216    	; 0x37ce <lora_driver_configureToEu868+0x96>
    38a6:	60 e0       	ldi	r22, 0x00	; 0
    38a8:	70 e0       	ldi	r23, 0x00	; 0
    38aa:	86 e7       	ldi	r24, 0x76	; 118
    38ac:	95 e0       	ldi	r25, 0x05	; 5
    38ae:	9f dc       	rcall	.-1730   	; 0x31ee <_uploadMessage>
    38b0:	f8 dc       	rcall	.-1552   	; 0x32a2 <_reply2ReturnCode>
    38b2:	81 11       	cpse	r24, r1
    38b4:	06 c0       	rjmp	.+12     	; 0x38c2 <lora_driver_configureToEu868+0x18a>
    38b6:	60 e0       	ldi	r22, 0x00	; 0
    38b8:	70 e0       	ldi	r23, 0x00	; 0
    38ba:	87 e8       	ldi	r24, 0x87	; 135
    38bc:	95 e0       	ldi	r25, 0x05	; 5
    38be:	97 dc       	rcall	.-1746   	; 0x31ee <_uploadMessage>
    38c0:	f0 dc       	rcall	.-1568   	; 0x32a2 <_reply2ReturnCode>
    38c2:	a0 96       	adiw	r28, 0x20	; 32
    38c4:	0f b6       	in	r0, 0x3f	; 63
    38c6:	f8 94       	cli
    38c8:	de bf       	out	0x3e, r29	; 62
    38ca:	0f be       	out	0x3f, r0	; 63
    38cc:	cd bf       	out	0x3d, r28	; 61
    38ce:	df 91       	pop	r29
    38d0:	cf 91       	pop	r28
    38d2:	1f 91       	pop	r17
    38d4:	0f 91       	pop	r16
    38d6:	ff 90       	pop	r15
    38d8:	ef 90       	pop	r14
    38da:	df 90       	pop	r13
    38dc:	cf 90       	pop	r12
    38de:	bf 90       	pop	r11
    38e0:	af 90       	pop	r10
    38e2:	9f 90       	pop	r9
    38e4:	8f 90       	pop	r8
    38e6:	7f 90       	pop	r7
    38e8:	6f 90       	pop	r6
    38ea:	5f 90       	pop	r5
    38ec:	4f 90       	pop	r4
    38ee:	3f 90       	pop	r3
    38f0:	2f 90       	pop	r2
    38f2:	08 95       	ret

000038f4 <lora_driver_setOtaaIdentity>:
    38f4:	ef 92       	push	r14
    38f6:	ff 92       	push	r15
    38f8:	0f 93       	push	r16
    38fa:	1f 93       	push	r17
    38fc:	cf 93       	push	r28
    38fe:	df 93       	push	r29
    3900:	ec 01       	movw	r28, r24
    3902:	8b 01       	movw	r16, r22
    3904:	7a 01       	movw	r14, r20
    3906:	81 e0       	ldi	r24, 0x01	; 1
    3908:	f4 de       	rcall	.-536    	; 0x36f2 <lora_driver_setAdaptiveDataRate>
    390a:	81 11       	cpse	r24, r1
    390c:	0d c0       	rjmp	.+26     	; 0x3928 <lora_driver_setOtaaIdentity+0x34>
    390e:	ce 01       	movw	r24, r28
    3910:	d4 dd       	rcall	.-1112   	; 0x34ba <lora_driver_setApplicationIdentifier>
    3912:	81 11       	cpse	r24, r1
    3914:	09 c0       	rjmp	.+18     	; 0x3928 <lora_driver_setOtaaIdentity+0x34>
    3916:	c8 01       	movw	r24, r16
    3918:	e1 dd       	rcall	.-1086   	; 0x34dc <lora_driver_setApplicationKey>
    391a:	81 11       	cpse	r24, r1
    391c:	05 c0       	rjmp	.+10     	; 0x3928 <lora_driver_setOtaaIdentity+0x34>
    391e:	c7 01       	movw	r24, r14
    3920:	bb dd       	rcall	.-1162   	; 0x3498 <lora_driver_setDeviceIdentifier>
    3922:	81 11       	cpse	r24, r1
    3924:	01 c0       	rjmp	.+2      	; 0x3928 <lora_driver_setOtaaIdentity+0x34>
    3926:	eb dd       	rcall	.-1066   	; 0x34fe <lora_driver_saveMac>
    3928:	df 91       	pop	r29
    392a:	cf 91       	pop	r28
    392c:	1f 91       	pop	r17
    392e:	0f 91       	pop	r16
    3930:	ff 90       	pop	r15
    3932:	ef 90       	pop	r14
    3934:	08 95       	ret

00003936 <lora_driver_mapReturnCodeToText>:
    3936:	90 e0       	ldi	r25, 0x00	; 0
    3938:	fc 01       	movw	r30, r24
    393a:	ee 0f       	add	r30, r30
    393c:	ff 1f       	adc	r31, r31
    393e:	8e 0f       	add	r24, r30
    3940:	9f 1f       	adc	r25, r31
    3942:	fc 01       	movw	r30, r24
    3944:	e0 5b       	subi	r30, 0xB0	; 176
    3946:	f9 4f       	sbci	r31, 0xF9	; 249
    3948:	81 81       	ldd	r24, Z+1	; 0x01
    394a:	92 81       	ldd	r25, Z+2	; 0x02
    394c:	08 95       	ret

0000394e <decode_port_no>:
    394e:	dc 01       	movw	r26, r24
    3950:	00 97       	sbiw	r24, 0x00	; 0
    3952:	29 f1       	breq	.+74     	; 0x399e <decode_port_no+0x50>
    3954:	fb 01       	movw	r30, r22
    3956:	20 81       	ld	r18, Z
    3958:	fc 01       	movw	r30, r24
    395a:	01 90       	ld	r0, Z+
    395c:	00 20       	and	r0, r0
    395e:	e9 f7       	brne	.-6      	; 0x395a <decode_port_no+0xc>
    3960:	31 97       	sbiw	r30, 0x01	; 1
    3962:	e8 1b       	sub	r30, r24
    3964:	f9 0b       	sbc	r31, r25
    3966:	82 2f       	mov	r24, r18
    3968:	90 e0       	ldi	r25, 0x00	; 0
    396a:	e8 17       	cp	r30, r24
    396c:	f9 07       	cpc	r31, r25
    396e:	c8 f0       	brcs	.+50     	; 0x39a2 <decode_port_no+0x54>
    3970:	80 e0       	ldi	r24, 0x00	; 0
    3972:	08 c0       	rjmp	.+16     	; 0x3984 <decode_port_no+0x36>
    3974:	88 0f       	add	r24, r24
    3976:	38 2f       	mov	r19, r24
    3978:	33 0f       	add	r19, r19
    397a:	33 0f       	add	r19, r19
    397c:	83 0f       	add	r24, r19
    397e:	80 53       	subi	r24, 0x30	; 48
    3980:	89 0f       	add	r24, r25
    3982:	2f 5f       	subi	r18, 0xFF	; 255
    3984:	fd 01       	movw	r30, r26
    3986:	e2 0f       	add	r30, r18
    3988:	f1 1d       	adc	r31, r1
    398a:	90 81       	ld	r25, Z
    398c:	30 ed       	ldi	r19, 0xD0	; 208
    398e:	39 0f       	add	r19, r25
    3990:	3a 30       	cpi	r19, 0x0A	; 10
    3992:	10 f4       	brcc	.+4      	; 0x3998 <decode_port_no+0x4a>
    3994:	91 11       	cpse	r25, r1
    3996:	ee cf       	rjmp	.-36     	; 0x3974 <decode_port_no+0x26>
    3998:	fb 01       	movw	r30, r22
    399a:	20 83       	st	Z, r18
    399c:	08 95       	ret
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	08 95       	ret
    39a2:	80 e0       	ldi	r24, 0x00	; 0
    39a4:	08 95       	ret

000039a6 <decode_hexadecimal_string_bytes>:
    39a6:	0f 93       	push	r16
    39a8:	1f 93       	push	r17
    39aa:	cf 93       	push	r28
    39ac:	df 93       	push	r29
    39ae:	dc 01       	movw	r26, r24
    39b0:	ea 01       	movw	r28, r20
    39b2:	20 97       	sbiw	r28, 0x00	; 0
    39b4:	e1 f1       	breq	.+120    	; 0x3a2e <decode_hexadecimal_string_bytes+0x88>
    39b6:	fa 01       	movw	r30, r20
    39b8:	01 90       	ld	r0, Z+
    39ba:	00 20       	and	r0, r0
    39bc:	e9 f7       	brne	.-6      	; 0x39b8 <decode_hexadecimal_string_bytes+0x12>
    39be:	31 97       	sbiw	r30, 0x01	; 1
    39c0:	e4 1b       	sub	r30, r20
    39c2:	f5 0b       	sbc	r31, r21
    39c4:	32 97       	sbiw	r30, 0x02	; 2
    39c6:	10 f5       	brcc	.+68     	; 0x3a0c <decode_hexadecimal_string_bytes+0x66>
    39c8:	32 c0       	rjmp	.+100    	; 0x3a2e <decode_hexadecimal_string_bytes+0x88>
    39ca:	8d 01       	movw	r16, r26
    39cc:	04 0f       	add	r16, r20
    39ce:	15 1f       	adc	r17, r21
    39d0:	30 e0       	ldi	r19, 0x00	; 0
    39d2:	ae 01       	movw	r20, r28
    39d4:	42 0f       	add	r20, r18
    39d6:	53 1f       	adc	r21, r19
    39d8:	fa 01       	movw	r30, r20
    39da:	90 81       	ld	r25, Z
    39dc:	91 34       	cpi	r25, 0x41	; 65
    39de:	28 f0       	brcs	.+10     	; 0x39ea <decode_hexadecimal_string_bytes+0x44>
    39e0:	97 53       	subi	r25, 0x37	; 55
    39e2:	59 2f       	mov	r21, r25
    39e4:	52 95       	swap	r21
    39e6:	50 7f       	andi	r21, 0xF0	; 240
    39e8:	03 c0       	rjmp	.+6      	; 0x39f0 <decode_hexadecimal_string_bytes+0x4a>
    39ea:	59 2f       	mov	r21, r25
    39ec:	52 95       	swap	r21
    39ee:	50 7f       	andi	r21, 0xF0	; 240
    39f0:	2c 0f       	add	r18, r28
    39f2:	3d 1f       	adc	r19, r29
    39f4:	f9 01       	movw	r30, r18
    39f6:	91 81       	ldd	r25, Z+1	; 0x01
    39f8:	91 34       	cpi	r25, 0x41	; 65
    39fa:	10 f0       	brcs	.+4      	; 0x3a00 <decode_hexadecimal_string_bytes+0x5a>
    39fc:	97 53       	subi	r25, 0x37	; 55
    39fe:	01 c0       	rjmp	.+2      	; 0x3a02 <decode_hexadecimal_string_bytes+0x5c>
    3a00:	90 53       	subi	r25, 0x30	; 48
    3a02:	95 0f       	add	r25, r21
    3a04:	f8 01       	movw	r30, r16
    3a06:	90 83       	st	Z, r25
    3a08:	8f 5f       	subi	r24, 0xFF	; 255
    3a0a:	01 c0       	rjmp	.+2      	; 0x3a0e <decode_hexadecimal_string_bytes+0x68>
    3a0c:	80 e0       	ldi	r24, 0x00	; 0
    3a0e:	28 2f       	mov	r18, r24
    3a10:	22 0f       	add	r18, r18
    3a12:	48 2f       	mov	r20, r24
    3a14:	50 e0       	ldi	r21, 0x00	; 0
    3a16:	fe 01       	movw	r30, r28
    3a18:	01 90       	ld	r0, Z+
    3a1a:	00 20       	and	r0, r0
    3a1c:	e9 f7       	brne	.-6      	; 0x3a18 <decode_hexadecimal_string_bytes+0x72>
    3a1e:	31 97       	sbiw	r30, 0x01	; 1
    3a20:	ec 1b       	sub	r30, r28
    3a22:	fd 0b       	sbc	r31, r29
    3a24:	4e 17       	cp	r20, r30
    3a26:	5f 07       	cpc	r21, r31
    3a28:	10 f4       	brcc	.+4      	; 0x3a2e <decode_hexadecimal_string_bytes+0x88>
    3a2a:	86 13       	cpse	r24, r22
    3a2c:	ce cf       	rjmp	.-100    	; 0x39ca <decode_hexadecimal_string_bytes+0x24>
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	1f 91       	pop	r17
    3a34:	0f 91       	pop	r16
    3a36:	08 95       	ret

00003a38 <serial_create>:
    3a38:	2f 92       	push	r2
    3a3a:	3f 92       	push	r3
    3a3c:	4f 92       	push	r4
    3a3e:	5f 92       	push	r5
    3a40:	6f 92       	push	r6
    3a42:	7f 92       	push	r7
    3a44:	8f 92       	push	r8
    3a46:	9f 92       	push	r9
    3a48:	af 92       	push	r10
    3a4a:	cf 92       	push	r12
    3a4c:	ef 92       	push	r14
    3a4e:	ff 92       	push	r15
    3a50:	0f 93       	push	r16
    3a52:	1f 93       	push	r17
    3a54:	cf 93       	push	r28
    3a56:	df 93       	push	r29
    3a58:	cd b7       	in	r28, 0x3d	; 61
    3a5a:	de b7       	in	r29, 0x3e	; 62
    3a5c:	f8 2e       	mov	r15, r24
    3a5e:	2a 01       	movw	r4, r20
    3a60:	3b 01       	movw	r6, r22
    3a62:	88 e0       	ldi	r24, 0x08	; 8
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	84 d7       	rcall	.+3848   	; 0x4970 <malloc>
    3a68:	8c 01       	movw	r16, r24
    3a6a:	8f 2d       	mov	r24, r15
    3a6c:	90 e0       	ldi	r25, 0x00	; 0
    3a6e:	fc 01       	movw	r30, r24
    3a70:	ee 0f       	add	r30, r30
    3a72:	ff 1f       	adc	r31, r31
    3a74:	ef 5c       	subi	r30, 0xCF	; 207
    3a76:	f9 4e       	sbci	r31, 0xE9	; 233
    3a78:	11 83       	std	Z+1, r17	; 0x01
    3a7a:	00 83       	st	Z, r16
    3a7c:	01 15       	cp	r16, r1
    3a7e:	11 05       	cpc	r17, r1
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <serial_create+0x4c>
    3a82:	64 c0       	rjmp	.+200    	; 0x3b4c <serial_create+0x114>
    3a84:	88 0f       	add	r24, r24
    3a86:	99 1f       	adc	r25, r25
    3a88:	fc 01       	movw	r30, r24
    3a8a:	e9 5f       	subi	r30, 0xF9	; 249
    3a8c:	fd 4f       	sbci	r31, 0xFD	; 253
    3a8e:	80 81       	ld	r24, Z
    3a90:	91 81       	ldd	r25, Z+1	; 0x01
    3a92:	d8 01       	movw	r26, r16
    3a94:	8d 93       	st	X+, r24
    3a96:	9c 93       	st	X, r25
    3a98:	8c 2d       	mov	r24, r12
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	88 0f       	add	r24, r24
    3a9e:	99 1f       	adc	r25, r25
    3aa0:	88 0f       	add	r24, r24
    3aa2:	99 1f       	adc	r25, r25
    3aa4:	65 d7       	rcall	.+3786   	; 0x4970 <malloc>
    3aa6:	1c 01       	movw	r2, r24
    3aa8:	86 e0       	ldi	r24, 0x06	; 6
    3aaa:	90 e0       	ldi	r25, 0x00	; 0
    3aac:	61 d7       	rcall	.+3778   	; 0x4970 <malloc>
    3aae:	7c 01       	movw	r14, r24
    3ab0:	4c 2d       	mov	r20, r12
    3ab2:	b1 01       	movw	r22, r2
    3ab4:	4f d5       	rcall	.+2718   	; 0x4554 <fifo_init>
    3ab6:	f8 01       	movw	r30, r16
    3ab8:	f5 82       	std	Z+5, r15	; 0x05
    3aba:	e4 82       	std	Z+4, r14	; 0x04
    3abc:	8a 2d       	mov	r24, r10
    3abe:	90 e0       	ldi	r25, 0x00	; 0
    3ac0:	88 0f       	add	r24, r24
    3ac2:	99 1f       	adc	r25, r25
    3ac4:	88 0f       	add	r24, r24
    3ac6:	99 1f       	adc	r25, r25
    3ac8:	53 d7       	rcall	.+3750   	; 0x4970 <malloc>
    3aca:	1c 01       	movw	r2, r24
    3acc:	86 e0       	ldi	r24, 0x06	; 6
    3ace:	90 e0       	ldi	r25, 0x00	; 0
    3ad0:	4f d7       	rcall	.+3742   	; 0x4970 <malloc>
    3ad2:	7c 01       	movw	r14, r24
    3ad4:	4a 2d       	mov	r20, r10
    3ad6:	b1 01       	movw	r22, r2
    3ad8:	3d d5       	rcall	.+2682   	; 0x4554 <fifo_init>
    3ada:	d8 01       	movw	r26, r16
    3adc:	13 96       	adiw	r26, 0x03	; 3
    3ade:	fc 92       	st	X, r15
    3ae0:	ee 92       	st	-X, r14
    3ae2:	12 97       	sbiw	r26, 0x02	; 2
    3ae4:	17 96       	adiw	r26, 0x07	; 7
    3ae6:	9c 92       	st	X, r9
    3ae8:	8e 92       	st	-X, r8
    3aea:	16 97       	sbiw	r26, 0x06	; 6
    3aec:	ff b6       	in	r15, 0x3f	; 63
    3aee:	f8 94       	cli
    3af0:	ed 91       	ld	r30, X+
    3af2:	fc 91       	ld	r31, X
    3af4:	11 97       	sbiw	r26, 0x01	; 1
    3af6:	36 97       	sbiw	r30, 0x06	; 6
    3af8:	80 81       	ld	r24, Z
    3afa:	82 60       	ori	r24, 0x02	; 2
    3afc:	80 83       	st	Z, r24
    3afe:	8d 90       	ld	r8, X+
    3b00:	9c 90       	ld	r9, X
    3b02:	c3 01       	movw	r24, r6
    3b04:	b2 01       	movw	r22, r4
    3b06:	3b d6       	rcall	.+3190   	; 0x477e <__floatunsisf>
    3b08:	20 e0       	ldi	r18, 0x00	; 0
    3b0a:	30 e0       	ldi	r19, 0x00	; 0
    3b0c:	40 e0       	ldi	r20, 0x00	; 0
    3b0e:	51 e4       	ldi	r21, 0x41	; 65
    3b10:	c4 d6       	rcall	.+3464   	; 0x489a <__mulsf3>
    3b12:	9b 01       	movw	r18, r22
    3b14:	ac 01       	movw	r20, r24
    3b16:	60 e0       	ldi	r22, 0x00	; 0
    3b18:	74 e2       	ldi	r23, 0x24	; 36
    3b1a:	84 e7       	ldi	r24, 0x74	; 116
    3b1c:	9b e4       	ldi	r25, 0x4B	; 75
    3b1e:	9b d5       	rcall	.+2870   	; 0x4656 <__divsf3>
    3b20:	20 e0       	ldi	r18, 0x00	; 0
    3b22:	30 e0       	ldi	r19, 0x00	; 0
    3b24:	40 e8       	ldi	r20, 0x80	; 128
    3b26:	5f e3       	ldi	r21, 0x3F	; 63
    3b28:	31 d5       	rcall	.+2658   	; 0x458c <__subsf3>
    3b2a:	fd d5       	rcall	.+3066   	; 0x4726 <__fixunssfsi>
    3b2c:	f4 01       	movw	r30, r8
    3b2e:	32 97       	sbiw	r30, 0x02	; 2
    3b30:	60 83       	st	Z, r22
    3b32:	d8 01       	movw	r26, r16
    3b34:	ed 91       	ld	r30, X+
    3b36:	fc 91       	ld	r31, X
    3b38:	11 97       	sbiw	r26, 0x01	; 1
    3b3a:	35 97       	sbiw	r30, 0x05	; 5
    3b3c:	88 e9       	ldi	r24, 0x98	; 152
    3b3e:	80 83       	st	Z, r24
    3b40:	ed 91       	ld	r30, X+
    3b42:	fc 91       	ld	r31, X
    3b44:	34 97       	sbiw	r30, 0x04	; 4
    3b46:	86 e0       	ldi	r24, 0x06	; 6
    3b48:	80 83       	st	Z, r24
    3b4a:	ff be       	out	0x3f, r15	; 63
    3b4c:	c8 01       	movw	r24, r16
    3b4e:	df 91       	pop	r29
    3b50:	cf 91       	pop	r28
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	ff 90       	pop	r15
    3b58:	ef 90       	pop	r14
    3b5a:	cf 90       	pop	r12
    3b5c:	af 90       	pop	r10
    3b5e:	9f 90       	pop	r9
    3b60:	8f 90       	pop	r8
    3b62:	7f 90       	pop	r7
    3b64:	6f 90       	pop	r6
    3b66:	5f 90       	pop	r5
    3b68:	4f 90       	pop	r4
    3b6a:	3f 90       	pop	r3
    3b6c:	2f 90       	pop	r2
    3b6e:	08 95       	ret

00003b70 <serial_sendByte>:
    3b70:	cf 93       	push	r28
    3b72:	df 93       	push	r29
    3b74:	dc 01       	movw	r26, r24
    3b76:	89 2b       	or	r24, r25
    3b78:	01 f1       	breq	.+64     	; 0x3bba <serial_sendByte+0x4a>
    3b7a:	12 96       	adiw	r26, 0x02	; 2
    3b7c:	ed 91       	ld	r30, X+
    3b7e:	fc 91       	ld	r31, X
    3b80:	13 97       	sbiw	r26, 0x03	; 3
    3b82:	93 81       	ldd	r25, Z+3	; 0x03
    3b84:	82 81       	ldd	r24, Z+2	; 0x02
    3b86:	25 81       	ldd	r18, Z+5	; 0x05
    3b88:	98 1b       	sub	r25, r24
    3b8a:	92 23       	and	r25, r18
    3b8c:	84 81       	ldd	r24, Z+4	; 0x04
    3b8e:	98 17       	cp	r25, r24
    3b90:	b1 f0       	breq	.+44     	; 0x3bbe <serial_sendByte+0x4e>
    3b92:	83 81       	ldd	r24, Z+3	; 0x03
    3b94:	26 95       	lsr	r18
    3b96:	28 23       	and	r18, r24
    3b98:	c0 81       	ld	r28, Z
    3b9a:	d1 81       	ldd	r29, Z+1	; 0x01
    3b9c:	c2 0f       	add	r28, r18
    3b9e:	d1 1d       	adc	r29, r1
    3ba0:	68 83       	st	Y, r22
    3ba2:	8f 5f       	subi	r24, 0xFF	; 255
    3ba4:	95 81       	ldd	r25, Z+5	; 0x05
    3ba6:	89 23       	and	r24, r25
    3ba8:	83 83       	std	Z+3, r24	; 0x03
    3baa:	ed 91       	ld	r30, X+
    3bac:	fc 91       	ld	r31, X
    3bae:	35 97       	sbiw	r30, 0x05	; 5
    3bb0:	80 81       	ld	r24, Z
    3bb2:	80 62       	ori	r24, 0x20	; 32
    3bb4:	80 83       	st	Z, r24
    3bb6:	80 e0       	ldi	r24, 0x00	; 0
    3bb8:	03 c0       	rjmp	.+6      	; 0x3bc0 <serial_sendByte+0x50>
    3bba:	81 e0       	ldi	r24, 0x01	; 1
    3bbc:	01 c0       	rjmp	.+2      	; 0x3bc0 <serial_sendByte+0x50>
    3bbe:	82 e0       	ldi	r24, 0x02	; 2
    3bc0:	df 91       	pop	r29
    3bc2:	cf 91       	pop	r28
    3bc4:	08 95       	ret

00003bc6 <serial_sendBytes>:
    3bc6:	ef 92       	push	r14
    3bc8:	ff 92       	push	r15
    3bca:	0f 93       	push	r16
    3bcc:	1f 93       	push	r17
    3bce:	cf 93       	push	r28
    3bd0:	df 93       	push	r29
    3bd2:	7c 01       	movw	r14, r24
    3bd4:	00 97       	sbiw	r24, 0x00	; 0
    3bd6:	09 f4       	brne	.+2      	; 0x3bda <serial_sendBytes+0x14>
    3bd8:	41 c0       	rjmp	.+130    	; 0x3c5c <serial_sendBytes+0x96>
    3bda:	dc 01       	movw	r26, r24
    3bdc:	12 96       	adiw	r26, 0x02	; 2
    3bde:	ed 91       	ld	r30, X+
    3be0:	fc 91       	ld	r31, X
    3be2:	13 97       	sbiw	r26, 0x03	; 3
    3be4:	93 81       	ldd	r25, Z+3	; 0x03
    3be6:	82 81       	ldd	r24, Z+2	; 0x02
    3be8:	98 1b       	sub	r25, r24
    3bea:	85 81       	ldd	r24, Z+5	; 0x05
    3bec:	98 23       	and	r25, r24
    3bee:	84 81       	ldd	r24, Z+4	; 0x04
    3bf0:	89 1b       	sub	r24, r25
    3bf2:	86 17       	cp	r24, r22
    3bf4:	a8 f1       	brcs	.+106    	; 0x3c60 <serial_sendBytes+0x9a>
    3bf6:	66 23       	and	r22, r22
    3bf8:	41 f1       	breq	.+80     	; 0x3c4a <serial_sendBytes+0x84>
    3bfa:	84 2f       	mov	r24, r20
    3bfc:	95 2f       	mov	r25, r21
    3bfe:	dc 01       	movw	r26, r24
    3c00:	61 50       	subi	r22, 0x01	; 1
    3c02:	46 2f       	mov	r20, r22
    3c04:	50 e0       	ldi	r21, 0x00	; 0
    3c06:	4f 5f       	subi	r20, 0xFF	; 255
    3c08:	5f 4f       	sbci	r21, 0xFF	; 255
    3c0a:	48 0f       	add	r20, r24
    3c0c:	59 1f       	adc	r21, r25
    3c0e:	e7 01       	movw	r28, r14
    3c10:	ea 81       	ldd	r30, Y+2	; 0x02
    3c12:	fb 81       	ldd	r31, Y+3	; 0x03
    3c14:	93 81       	ldd	r25, Z+3	; 0x03
    3c16:	82 81       	ldd	r24, Z+2	; 0x02
    3c18:	25 81       	ldd	r18, Z+5	; 0x05
    3c1a:	98 1b       	sub	r25, r24
    3c1c:	92 23       	and	r25, r18
    3c1e:	84 81       	ldd	r24, Z+4	; 0x04
    3c20:	98 17       	cp	r25, r24
    3c22:	79 f0       	breq	.+30     	; 0x3c42 <serial_sendBytes+0x7c>
    3c24:	8c 91       	ld	r24, X
    3c26:	93 81       	ldd	r25, Z+3	; 0x03
    3c28:	26 95       	lsr	r18
    3c2a:	29 23       	and	r18, r25
    3c2c:	60 81       	ld	r22, Z
    3c2e:	71 81       	ldd	r23, Z+1	; 0x01
    3c30:	8b 01       	movw	r16, r22
    3c32:	02 0f       	add	r16, r18
    3c34:	11 1d       	adc	r17, r1
    3c36:	e8 01       	movw	r28, r16
    3c38:	88 83       	st	Y, r24
    3c3a:	9f 5f       	subi	r25, 0xFF	; 255
    3c3c:	85 81       	ldd	r24, Z+5	; 0x05
    3c3e:	98 23       	and	r25, r24
    3c40:	93 83       	std	Z+3, r25	; 0x03
    3c42:	11 96       	adiw	r26, 0x01	; 1
    3c44:	a4 17       	cp	r26, r20
    3c46:	b5 07       	cpc	r27, r21
    3c48:	11 f7       	brne	.-60     	; 0x3c0e <serial_sendBytes+0x48>
    3c4a:	d7 01       	movw	r26, r14
    3c4c:	ed 91       	ld	r30, X+
    3c4e:	fc 91       	ld	r31, X
    3c50:	35 97       	sbiw	r30, 0x05	; 5
    3c52:	80 81       	ld	r24, Z
    3c54:	80 62       	ori	r24, 0x20	; 32
    3c56:	80 83       	st	Z, r24
    3c58:	80 e0       	ldi	r24, 0x00	; 0
    3c5a:	03 c0       	rjmp	.+6      	; 0x3c62 <serial_sendBytes+0x9c>
    3c5c:	81 e0       	ldi	r24, 0x01	; 1
    3c5e:	01 c0       	rjmp	.+2      	; 0x3c62 <serial_sendBytes+0x9c>
    3c60:	82 e0       	ldi	r24, 0x02	; 2
    3c62:	df 91       	pop	r29
    3c64:	cf 91       	pop	r28
    3c66:	1f 91       	pop	r17
    3c68:	0f 91       	pop	r16
    3c6a:	ff 90       	pop	r15
    3c6c:	ef 90       	pop	r14
    3c6e:	08 95       	ret

00003c70 <serial_getByte>:
    3c70:	00 97       	sbiw	r24, 0x00	; 0
    3c72:	d1 f0       	breq	.+52     	; 0x3ca8 <serial_getByte+0x38>
    3c74:	dc 01       	movw	r26, r24
    3c76:	14 96       	adiw	r26, 0x04	; 4
    3c78:	ed 91       	ld	r30, X+
    3c7a:	fc 91       	ld	r31, X
    3c7c:	15 97       	sbiw	r26, 0x05	; 5
    3c7e:	93 81       	ldd	r25, Z+3	; 0x03
    3c80:	82 81       	ldd	r24, Z+2	; 0x02
    3c82:	98 17       	cp	r25, r24
    3c84:	99 f0       	breq	.+38     	; 0x3cac <serial_getByte+0x3c>
    3c86:	92 81       	ldd	r25, Z+2	; 0x02
    3c88:	85 81       	ldd	r24, Z+5	; 0x05
    3c8a:	86 95       	lsr	r24
    3c8c:	89 23       	and	r24, r25
    3c8e:	a0 81       	ld	r26, Z
    3c90:	b1 81       	ldd	r27, Z+1	; 0x01
    3c92:	a8 0f       	add	r26, r24
    3c94:	b1 1d       	adc	r27, r1
    3c96:	8c 91       	ld	r24, X
    3c98:	db 01       	movw	r26, r22
    3c9a:	8c 93       	st	X, r24
    3c9c:	9f 5f       	subi	r25, 0xFF	; 255
    3c9e:	85 81       	ldd	r24, Z+5	; 0x05
    3ca0:	98 23       	and	r25, r24
    3ca2:	92 83       	std	Z+2, r25	; 0x02
    3ca4:	80 e0       	ldi	r24, 0x00	; 0
    3ca6:	08 95       	ret
    3ca8:	81 e0       	ldi	r24, 0x01	; 1
    3caa:	08 95       	ret
    3cac:	83 e0       	ldi	r24, 0x03	; 3
    3cae:	08 95       	ret

00003cb0 <__vector_25>:
    3cb0:	1f 92       	push	r1
    3cb2:	0f 92       	push	r0
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	0f 92       	push	r0
    3cb8:	11 24       	eor	r1, r1
    3cba:	0b b6       	in	r0, 0x3b	; 59
    3cbc:	0f 92       	push	r0
    3cbe:	2f 93       	push	r18
    3cc0:	3f 93       	push	r19
    3cc2:	4f 93       	push	r20
    3cc4:	5f 93       	push	r21
    3cc6:	6f 93       	push	r22
    3cc8:	7f 93       	push	r23
    3cca:	8f 93       	push	r24
    3ccc:	9f 93       	push	r25
    3cce:	af 93       	push	r26
    3cd0:	bf 93       	push	r27
    3cd2:	cf 93       	push	r28
    3cd4:	df 93       	push	r29
    3cd6:	ef 93       	push	r30
    3cd8:	ff 93       	push	r31
    3cda:	a0 91 31 16 	lds	r26, 0x1631	; 0x801631 <_ser_handle>
    3cde:	b0 91 32 16 	lds	r27, 0x1632	; 0x801632 <_ser_handle+0x1>
    3ce2:	10 97       	sbiw	r26, 0x00	; 0
    3ce4:	11 f1       	breq	.+68     	; 0x3d2a <__vector_25+0x7a>
    3ce6:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3cea:	14 96       	adiw	r26, 0x04	; 4
    3cec:	ed 91       	ld	r30, X+
    3cee:	fc 91       	ld	r31, X
    3cf0:	15 97       	sbiw	r26, 0x05	; 5
    3cf2:	93 81       	ldd	r25, Z+3	; 0x03
    3cf4:	82 81       	ldd	r24, Z+2	; 0x02
    3cf6:	25 81       	ldd	r18, Z+5	; 0x05
    3cf8:	98 1b       	sub	r25, r24
    3cfa:	92 23       	and	r25, r18
    3cfc:	84 81       	ldd	r24, Z+4	; 0x04
    3cfe:	98 17       	cp	r25, r24
    3d00:	61 f0       	breq	.+24     	; 0x3d1a <__vector_25+0x6a>
    3d02:	83 81       	ldd	r24, Z+3	; 0x03
    3d04:	26 95       	lsr	r18
    3d06:	28 23       	and	r18, r24
    3d08:	c0 81       	ld	r28, Z
    3d0a:	d1 81       	ldd	r29, Z+1	; 0x01
    3d0c:	c2 0f       	add	r28, r18
    3d0e:	d1 1d       	adc	r29, r1
    3d10:	68 83       	st	Y, r22
    3d12:	8f 5f       	subi	r24, 0xFF	; 255
    3d14:	95 81       	ldd	r25, Z+5	; 0x05
    3d16:	89 23       	and	r24, r25
    3d18:	83 83       	std	Z+3, r24	; 0x03
    3d1a:	16 96       	adiw	r26, 0x06	; 6
    3d1c:	ed 91       	ld	r30, X+
    3d1e:	fc 91       	ld	r31, X
    3d20:	17 97       	sbiw	r26, 0x07	; 7
    3d22:	30 97       	sbiw	r30, 0x00	; 0
    3d24:	11 f0       	breq	.+4      	; 0x3d2a <__vector_25+0x7a>
    3d26:	cd 01       	movw	r24, r26
    3d28:	19 95       	eicall
    3d2a:	ff 91       	pop	r31
    3d2c:	ef 91       	pop	r30
    3d2e:	df 91       	pop	r29
    3d30:	cf 91       	pop	r28
    3d32:	bf 91       	pop	r27
    3d34:	af 91       	pop	r26
    3d36:	9f 91       	pop	r25
    3d38:	8f 91       	pop	r24
    3d3a:	7f 91       	pop	r23
    3d3c:	6f 91       	pop	r22
    3d3e:	5f 91       	pop	r21
    3d40:	4f 91       	pop	r20
    3d42:	3f 91       	pop	r19
    3d44:	2f 91       	pop	r18
    3d46:	0f 90       	pop	r0
    3d48:	0b be       	out	0x3b, r0	; 59
    3d4a:	0f 90       	pop	r0
    3d4c:	0f be       	out	0x3f, r0	; 63
    3d4e:	0f 90       	pop	r0
    3d50:	1f 90       	pop	r1
    3d52:	18 95       	reti

00003d54 <__vector_26>:
    3d54:	1f 92       	push	r1
    3d56:	0f 92       	push	r0
    3d58:	0f b6       	in	r0, 0x3f	; 63
    3d5a:	0f 92       	push	r0
    3d5c:	11 24       	eor	r1, r1
    3d5e:	0b b6       	in	r0, 0x3b	; 59
    3d60:	0f 92       	push	r0
    3d62:	2f 93       	push	r18
    3d64:	8f 93       	push	r24
    3d66:	9f 93       	push	r25
    3d68:	af 93       	push	r26
    3d6a:	bf 93       	push	r27
    3d6c:	ef 93       	push	r30
    3d6e:	ff 93       	push	r31
    3d70:	e0 91 31 16 	lds	r30, 0x1631	; 0x801631 <_ser_handle>
    3d74:	f0 91 32 16 	lds	r31, 0x1632	; 0x801632 <_ser_handle+0x1>
    3d78:	30 97       	sbiw	r30, 0x00	; 0
    3d7a:	b9 f0       	breq	.+46     	; 0x3daa <__vector_26+0x56>
    3d7c:	02 80       	ldd	r0, Z+2	; 0x02
    3d7e:	f3 81       	ldd	r31, Z+3	; 0x03
    3d80:	e0 2d       	mov	r30, r0
    3d82:	93 81       	ldd	r25, Z+3	; 0x03
    3d84:	82 81       	ldd	r24, Z+2	; 0x02
    3d86:	98 17       	cp	r25, r24
    3d88:	b1 f0       	breq	.+44     	; 0x3db6 <__vector_26+0x62>
    3d8a:	92 81       	ldd	r25, Z+2	; 0x02
    3d8c:	85 81       	ldd	r24, Z+5	; 0x05
    3d8e:	28 2f       	mov	r18, r24
    3d90:	26 95       	lsr	r18
    3d92:	29 23       	and	r18, r25
    3d94:	a0 81       	ld	r26, Z
    3d96:	b1 81       	ldd	r27, Z+1	; 0x01
    3d98:	a2 0f       	add	r26, r18
    3d9a:	b1 1d       	adc	r27, r1
    3d9c:	2c 91       	ld	r18, X
    3d9e:	9f 5f       	subi	r25, 0xFF	; 255
    3da0:	89 23       	and	r24, r25
    3da2:	82 83       	std	Z+2, r24	; 0x02
    3da4:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    3da8:	0b c0       	rjmp	.+22     	; 0x3dc0 <__vector_26+0x6c>
    3daa:	e1 ec       	ldi	r30, 0xC1	; 193
    3dac:	f0 e0       	ldi	r31, 0x00	; 0
    3dae:	80 81       	ld	r24, Z
    3db0:	8f 7d       	andi	r24, 0xDF	; 223
    3db2:	80 83       	st	Z, r24
    3db4:	05 c0       	rjmp	.+10     	; 0x3dc0 <__vector_26+0x6c>
    3db6:	e1 ec       	ldi	r30, 0xC1	; 193
    3db8:	f0 e0       	ldi	r31, 0x00	; 0
    3dba:	80 81       	ld	r24, Z
    3dbc:	8f 7d       	andi	r24, 0xDF	; 223
    3dbe:	80 83       	st	Z, r24
    3dc0:	ff 91       	pop	r31
    3dc2:	ef 91       	pop	r30
    3dc4:	bf 91       	pop	r27
    3dc6:	af 91       	pop	r26
    3dc8:	9f 91       	pop	r25
    3dca:	8f 91       	pop	r24
    3dcc:	2f 91       	pop	r18
    3dce:	0f 90       	pop	r0
    3dd0:	0b be       	out	0x3b, r0	; 59
    3dd2:	0f 90       	pop	r0
    3dd4:	0f be       	out	0x3f, r0	; 63
    3dd6:	0f 90       	pop	r0
    3dd8:	1f 90       	pop	r1
    3dda:	18 95       	reti

00003ddc <__vector_36>:
    3ddc:	1f 92       	push	r1
    3dde:	0f 92       	push	r0
    3de0:	0f b6       	in	r0, 0x3f	; 63
    3de2:	0f 92       	push	r0
    3de4:	11 24       	eor	r1, r1
    3de6:	0b b6       	in	r0, 0x3b	; 59
    3de8:	0f 92       	push	r0
    3dea:	2f 93       	push	r18
    3dec:	3f 93       	push	r19
    3dee:	4f 93       	push	r20
    3df0:	5f 93       	push	r21
    3df2:	6f 93       	push	r22
    3df4:	7f 93       	push	r23
    3df6:	8f 93       	push	r24
    3df8:	9f 93       	push	r25
    3dfa:	af 93       	push	r26
    3dfc:	bf 93       	push	r27
    3dfe:	cf 93       	push	r28
    3e00:	df 93       	push	r29
    3e02:	ef 93       	push	r30
    3e04:	ff 93       	push	r31
    3e06:	a0 91 33 16 	lds	r26, 0x1633	; 0x801633 <_ser_handle+0x2>
    3e0a:	b0 91 34 16 	lds	r27, 0x1634	; 0x801634 <_ser_handle+0x3>
    3e0e:	10 97       	sbiw	r26, 0x00	; 0
    3e10:	11 f1       	breq	.+68     	; 0x3e56 <__vector_36+0x7a>
    3e12:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3e16:	14 96       	adiw	r26, 0x04	; 4
    3e18:	ed 91       	ld	r30, X+
    3e1a:	fc 91       	ld	r31, X
    3e1c:	15 97       	sbiw	r26, 0x05	; 5
    3e1e:	93 81       	ldd	r25, Z+3	; 0x03
    3e20:	82 81       	ldd	r24, Z+2	; 0x02
    3e22:	25 81       	ldd	r18, Z+5	; 0x05
    3e24:	98 1b       	sub	r25, r24
    3e26:	92 23       	and	r25, r18
    3e28:	84 81       	ldd	r24, Z+4	; 0x04
    3e2a:	98 17       	cp	r25, r24
    3e2c:	61 f0       	breq	.+24     	; 0x3e46 <__vector_36+0x6a>
    3e2e:	83 81       	ldd	r24, Z+3	; 0x03
    3e30:	26 95       	lsr	r18
    3e32:	28 23       	and	r18, r24
    3e34:	c0 81       	ld	r28, Z
    3e36:	d1 81       	ldd	r29, Z+1	; 0x01
    3e38:	c2 0f       	add	r28, r18
    3e3a:	d1 1d       	adc	r29, r1
    3e3c:	68 83       	st	Y, r22
    3e3e:	8f 5f       	subi	r24, 0xFF	; 255
    3e40:	95 81       	ldd	r25, Z+5	; 0x05
    3e42:	89 23       	and	r24, r25
    3e44:	83 83       	std	Z+3, r24	; 0x03
    3e46:	16 96       	adiw	r26, 0x06	; 6
    3e48:	ed 91       	ld	r30, X+
    3e4a:	fc 91       	ld	r31, X
    3e4c:	17 97       	sbiw	r26, 0x07	; 7
    3e4e:	30 97       	sbiw	r30, 0x00	; 0
    3e50:	11 f0       	breq	.+4      	; 0x3e56 <__vector_36+0x7a>
    3e52:	cd 01       	movw	r24, r26
    3e54:	19 95       	eicall
    3e56:	ff 91       	pop	r31
    3e58:	ef 91       	pop	r30
    3e5a:	df 91       	pop	r29
    3e5c:	cf 91       	pop	r28
    3e5e:	bf 91       	pop	r27
    3e60:	af 91       	pop	r26
    3e62:	9f 91       	pop	r25
    3e64:	8f 91       	pop	r24
    3e66:	7f 91       	pop	r23
    3e68:	6f 91       	pop	r22
    3e6a:	5f 91       	pop	r21
    3e6c:	4f 91       	pop	r20
    3e6e:	3f 91       	pop	r19
    3e70:	2f 91       	pop	r18
    3e72:	0f 90       	pop	r0
    3e74:	0b be       	out	0x3b, r0	; 59
    3e76:	0f 90       	pop	r0
    3e78:	0f be       	out	0x3f, r0	; 63
    3e7a:	0f 90       	pop	r0
    3e7c:	1f 90       	pop	r1
    3e7e:	18 95       	reti

00003e80 <__vector_37>:
    3e80:	1f 92       	push	r1
    3e82:	0f 92       	push	r0
    3e84:	0f b6       	in	r0, 0x3f	; 63
    3e86:	0f 92       	push	r0
    3e88:	11 24       	eor	r1, r1
    3e8a:	0b b6       	in	r0, 0x3b	; 59
    3e8c:	0f 92       	push	r0
    3e8e:	2f 93       	push	r18
    3e90:	8f 93       	push	r24
    3e92:	9f 93       	push	r25
    3e94:	af 93       	push	r26
    3e96:	bf 93       	push	r27
    3e98:	ef 93       	push	r30
    3e9a:	ff 93       	push	r31
    3e9c:	e0 91 33 16 	lds	r30, 0x1633	; 0x801633 <_ser_handle+0x2>
    3ea0:	f0 91 34 16 	lds	r31, 0x1634	; 0x801634 <_ser_handle+0x3>
    3ea4:	30 97       	sbiw	r30, 0x00	; 0
    3ea6:	b9 f0       	breq	.+46     	; 0x3ed6 <__vector_37+0x56>
    3ea8:	02 80       	ldd	r0, Z+2	; 0x02
    3eaa:	f3 81       	ldd	r31, Z+3	; 0x03
    3eac:	e0 2d       	mov	r30, r0
    3eae:	93 81       	ldd	r25, Z+3	; 0x03
    3eb0:	82 81       	ldd	r24, Z+2	; 0x02
    3eb2:	98 17       	cp	r25, r24
    3eb4:	b1 f0       	breq	.+44     	; 0x3ee2 <__vector_37+0x62>
    3eb6:	92 81       	ldd	r25, Z+2	; 0x02
    3eb8:	85 81       	ldd	r24, Z+5	; 0x05
    3eba:	28 2f       	mov	r18, r24
    3ebc:	26 95       	lsr	r18
    3ebe:	29 23       	and	r18, r25
    3ec0:	a0 81       	ld	r26, Z
    3ec2:	b1 81       	ldd	r27, Z+1	; 0x01
    3ec4:	a2 0f       	add	r26, r18
    3ec6:	b1 1d       	adc	r27, r1
    3ec8:	2c 91       	ld	r18, X
    3eca:	9f 5f       	subi	r25, 0xFF	; 255
    3ecc:	89 23       	and	r24, r25
    3ece:	82 83       	std	Z+2, r24	; 0x02
    3ed0:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    3ed4:	0b c0       	rjmp	.+22     	; 0x3eec <__vector_37+0x6c>
    3ed6:	e9 ec       	ldi	r30, 0xC9	; 201
    3ed8:	f0 e0       	ldi	r31, 0x00	; 0
    3eda:	80 81       	ld	r24, Z
    3edc:	8f 7d       	andi	r24, 0xDF	; 223
    3ede:	80 83       	st	Z, r24
    3ee0:	05 c0       	rjmp	.+10     	; 0x3eec <__vector_37+0x6c>
    3ee2:	e9 ec       	ldi	r30, 0xC9	; 201
    3ee4:	f0 e0       	ldi	r31, 0x00	; 0
    3ee6:	80 81       	ld	r24, Z
    3ee8:	8f 7d       	andi	r24, 0xDF	; 223
    3eea:	80 83       	st	Z, r24
    3eec:	ff 91       	pop	r31
    3eee:	ef 91       	pop	r30
    3ef0:	bf 91       	pop	r27
    3ef2:	af 91       	pop	r26
    3ef4:	9f 91       	pop	r25
    3ef6:	8f 91       	pop	r24
    3ef8:	2f 91       	pop	r18
    3efa:	0f 90       	pop	r0
    3efc:	0b be       	out	0x3b, r0	; 59
    3efe:	0f 90       	pop	r0
    3f00:	0f be       	out	0x3f, r0	; 63
    3f02:	0f 90       	pop	r0
    3f04:	1f 90       	pop	r1
    3f06:	18 95       	reti

00003f08 <__vector_51>:
    3f08:	1f 92       	push	r1
    3f0a:	0f 92       	push	r0
    3f0c:	0f b6       	in	r0, 0x3f	; 63
    3f0e:	0f 92       	push	r0
    3f10:	11 24       	eor	r1, r1
    3f12:	0b b6       	in	r0, 0x3b	; 59
    3f14:	0f 92       	push	r0
    3f16:	2f 93       	push	r18
    3f18:	3f 93       	push	r19
    3f1a:	4f 93       	push	r20
    3f1c:	5f 93       	push	r21
    3f1e:	6f 93       	push	r22
    3f20:	7f 93       	push	r23
    3f22:	8f 93       	push	r24
    3f24:	9f 93       	push	r25
    3f26:	af 93       	push	r26
    3f28:	bf 93       	push	r27
    3f2a:	cf 93       	push	r28
    3f2c:	df 93       	push	r29
    3f2e:	ef 93       	push	r30
    3f30:	ff 93       	push	r31
    3f32:	a0 91 35 16 	lds	r26, 0x1635	; 0x801635 <_ser_handle+0x4>
    3f36:	b0 91 36 16 	lds	r27, 0x1636	; 0x801636 <_ser_handle+0x5>
    3f3a:	10 97       	sbiw	r26, 0x00	; 0
    3f3c:	11 f1       	breq	.+68     	; 0x3f82 <__vector_51+0x7a>
    3f3e:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    3f42:	14 96       	adiw	r26, 0x04	; 4
    3f44:	ed 91       	ld	r30, X+
    3f46:	fc 91       	ld	r31, X
    3f48:	15 97       	sbiw	r26, 0x05	; 5
    3f4a:	93 81       	ldd	r25, Z+3	; 0x03
    3f4c:	82 81       	ldd	r24, Z+2	; 0x02
    3f4e:	25 81       	ldd	r18, Z+5	; 0x05
    3f50:	98 1b       	sub	r25, r24
    3f52:	92 23       	and	r25, r18
    3f54:	84 81       	ldd	r24, Z+4	; 0x04
    3f56:	98 17       	cp	r25, r24
    3f58:	61 f0       	breq	.+24     	; 0x3f72 <__vector_51+0x6a>
    3f5a:	83 81       	ldd	r24, Z+3	; 0x03
    3f5c:	26 95       	lsr	r18
    3f5e:	28 23       	and	r18, r24
    3f60:	c0 81       	ld	r28, Z
    3f62:	d1 81       	ldd	r29, Z+1	; 0x01
    3f64:	c2 0f       	add	r28, r18
    3f66:	d1 1d       	adc	r29, r1
    3f68:	68 83       	st	Y, r22
    3f6a:	8f 5f       	subi	r24, 0xFF	; 255
    3f6c:	95 81       	ldd	r25, Z+5	; 0x05
    3f6e:	89 23       	and	r24, r25
    3f70:	83 83       	std	Z+3, r24	; 0x03
    3f72:	16 96       	adiw	r26, 0x06	; 6
    3f74:	ed 91       	ld	r30, X+
    3f76:	fc 91       	ld	r31, X
    3f78:	17 97       	sbiw	r26, 0x07	; 7
    3f7a:	30 97       	sbiw	r30, 0x00	; 0
    3f7c:	11 f0       	breq	.+4      	; 0x3f82 <__vector_51+0x7a>
    3f7e:	cd 01       	movw	r24, r26
    3f80:	19 95       	eicall
    3f82:	ff 91       	pop	r31
    3f84:	ef 91       	pop	r30
    3f86:	df 91       	pop	r29
    3f88:	cf 91       	pop	r28
    3f8a:	bf 91       	pop	r27
    3f8c:	af 91       	pop	r26
    3f8e:	9f 91       	pop	r25
    3f90:	8f 91       	pop	r24
    3f92:	7f 91       	pop	r23
    3f94:	6f 91       	pop	r22
    3f96:	5f 91       	pop	r21
    3f98:	4f 91       	pop	r20
    3f9a:	3f 91       	pop	r19
    3f9c:	2f 91       	pop	r18
    3f9e:	0f 90       	pop	r0
    3fa0:	0b be       	out	0x3b, r0	; 59
    3fa2:	0f 90       	pop	r0
    3fa4:	0f be       	out	0x3f, r0	; 63
    3fa6:	0f 90       	pop	r0
    3fa8:	1f 90       	pop	r1
    3faa:	18 95       	reti

00003fac <__vector_52>:
    3fac:	1f 92       	push	r1
    3fae:	0f 92       	push	r0
    3fb0:	0f b6       	in	r0, 0x3f	; 63
    3fb2:	0f 92       	push	r0
    3fb4:	11 24       	eor	r1, r1
    3fb6:	0b b6       	in	r0, 0x3b	; 59
    3fb8:	0f 92       	push	r0
    3fba:	2f 93       	push	r18
    3fbc:	8f 93       	push	r24
    3fbe:	9f 93       	push	r25
    3fc0:	af 93       	push	r26
    3fc2:	bf 93       	push	r27
    3fc4:	ef 93       	push	r30
    3fc6:	ff 93       	push	r31
    3fc8:	e0 91 35 16 	lds	r30, 0x1635	; 0x801635 <_ser_handle+0x4>
    3fcc:	f0 91 36 16 	lds	r31, 0x1636	; 0x801636 <_ser_handle+0x5>
    3fd0:	30 97       	sbiw	r30, 0x00	; 0
    3fd2:	b9 f0       	breq	.+46     	; 0x4002 <__vector_52+0x56>
    3fd4:	02 80       	ldd	r0, Z+2	; 0x02
    3fd6:	f3 81       	ldd	r31, Z+3	; 0x03
    3fd8:	e0 2d       	mov	r30, r0
    3fda:	93 81       	ldd	r25, Z+3	; 0x03
    3fdc:	82 81       	ldd	r24, Z+2	; 0x02
    3fde:	98 17       	cp	r25, r24
    3fe0:	b1 f0       	breq	.+44     	; 0x400e <__vector_52+0x62>
    3fe2:	92 81       	ldd	r25, Z+2	; 0x02
    3fe4:	85 81       	ldd	r24, Z+5	; 0x05
    3fe6:	28 2f       	mov	r18, r24
    3fe8:	26 95       	lsr	r18
    3fea:	29 23       	and	r18, r25
    3fec:	a0 81       	ld	r26, Z
    3fee:	b1 81       	ldd	r27, Z+1	; 0x01
    3ff0:	a2 0f       	add	r26, r18
    3ff2:	b1 1d       	adc	r27, r1
    3ff4:	2c 91       	ld	r18, X
    3ff6:	9f 5f       	subi	r25, 0xFF	; 255
    3ff8:	89 23       	and	r24, r25
    3ffa:	82 83       	std	Z+2, r24	; 0x02
    3ffc:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4000:	0b c0       	rjmp	.+22     	; 0x4018 <__vector_52+0x6c>
    4002:	e1 ed       	ldi	r30, 0xD1	; 209
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	80 81       	ld	r24, Z
    4008:	8f 7d       	andi	r24, 0xDF	; 223
    400a:	80 83       	st	Z, r24
    400c:	05 c0       	rjmp	.+10     	; 0x4018 <__vector_52+0x6c>
    400e:	e1 ed       	ldi	r30, 0xD1	; 209
    4010:	f0 e0       	ldi	r31, 0x00	; 0
    4012:	80 81       	ld	r24, Z
    4014:	8f 7d       	andi	r24, 0xDF	; 223
    4016:	80 83       	st	Z, r24
    4018:	ff 91       	pop	r31
    401a:	ef 91       	pop	r30
    401c:	bf 91       	pop	r27
    401e:	af 91       	pop	r26
    4020:	9f 91       	pop	r25
    4022:	8f 91       	pop	r24
    4024:	2f 91       	pop	r18
    4026:	0f 90       	pop	r0
    4028:	0b be       	out	0x3b, r0	; 59
    402a:	0f 90       	pop	r0
    402c:	0f be       	out	0x3f, r0	; 63
    402e:	0f 90       	pop	r0
    4030:	1f 90       	pop	r1
    4032:	18 95       	reti

00004034 <__vector_54>:
    4034:	1f 92       	push	r1
    4036:	0f 92       	push	r0
    4038:	0f b6       	in	r0, 0x3f	; 63
    403a:	0f 92       	push	r0
    403c:	11 24       	eor	r1, r1
    403e:	0b b6       	in	r0, 0x3b	; 59
    4040:	0f 92       	push	r0
    4042:	2f 93       	push	r18
    4044:	3f 93       	push	r19
    4046:	4f 93       	push	r20
    4048:	5f 93       	push	r21
    404a:	6f 93       	push	r22
    404c:	7f 93       	push	r23
    404e:	8f 93       	push	r24
    4050:	9f 93       	push	r25
    4052:	af 93       	push	r26
    4054:	bf 93       	push	r27
    4056:	cf 93       	push	r28
    4058:	df 93       	push	r29
    405a:	ef 93       	push	r30
    405c:	ff 93       	push	r31
    405e:	a0 91 37 16 	lds	r26, 0x1637	; 0x801637 <_ser_handle+0x6>
    4062:	b0 91 38 16 	lds	r27, 0x1638	; 0x801638 <_ser_handle+0x7>
    4066:	10 97       	sbiw	r26, 0x00	; 0
    4068:	11 f1       	breq	.+68     	; 0x40ae <__vector_54+0x7a>
    406a:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    406e:	14 96       	adiw	r26, 0x04	; 4
    4070:	ed 91       	ld	r30, X+
    4072:	fc 91       	ld	r31, X
    4074:	15 97       	sbiw	r26, 0x05	; 5
    4076:	93 81       	ldd	r25, Z+3	; 0x03
    4078:	82 81       	ldd	r24, Z+2	; 0x02
    407a:	25 81       	ldd	r18, Z+5	; 0x05
    407c:	98 1b       	sub	r25, r24
    407e:	92 23       	and	r25, r18
    4080:	84 81       	ldd	r24, Z+4	; 0x04
    4082:	98 17       	cp	r25, r24
    4084:	61 f0       	breq	.+24     	; 0x409e <__vector_54+0x6a>
    4086:	83 81       	ldd	r24, Z+3	; 0x03
    4088:	26 95       	lsr	r18
    408a:	28 23       	and	r18, r24
    408c:	c0 81       	ld	r28, Z
    408e:	d1 81       	ldd	r29, Z+1	; 0x01
    4090:	c2 0f       	add	r28, r18
    4092:	d1 1d       	adc	r29, r1
    4094:	68 83       	st	Y, r22
    4096:	8f 5f       	subi	r24, 0xFF	; 255
    4098:	95 81       	ldd	r25, Z+5	; 0x05
    409a:	89 23       	and	r24, r25
    409c:	83 83       	std	Z+3, r24	; 0x03
    409e:	16 96       	adiw	r26, 0x06	; 6
    40a0:	ed 91       	ld	r30, X+
    40a2:	fc 91       	ld	r31, X
    40a4:	17 97       	sbiw	r26, 0x07	; 7
    40a6:	30 97       	sbiw	r30, 0x00	; 0
    40a8:	11 f0       	breq	.+4      	; 0x40ae <__vector_54+0x7a>
    40aa:	cd 01       	movw	r24, r26
    40ac:	19 95       	eicall
    40ae:	ff 91       	pop	r31
    40b0:	ef 91       	pop	r30
    40b2:	df 91       	pop	r29
    40b4:	cf 91       	pop	r28
    40b6:	bf 91       	pop	r27
    40b8:	af 91       	pop	r26
    40ba:	9f 91       	pop	r25
    40bc:	8f 91       	pop	r24
    40be:	7f 91       	pop	r23
    40c0:	6f 91       	pop	r22
    40c2:	5f 91       	pop	r21
    40c4:	4f 91       	pop	r20
    40c6:	3f 91       	pop	r19
    40c8:	2f 91       	pop	r18
    40ca:	0f 90       	pop	r0
    40cc:	0b be       	out	0x3b, r0	; 59
    40ce:	0f 90       	pop	r0
    40d0:	0f be       	out	0x3f, r0	; 63
    40d2:	0f 90       	pop	r0
    40d4:	1f 90       	pop	r1
    40d6:	18 95       	reti

000040d8 <__vector_55>:
    40d8:	1f 92       	push	r1
    40da:	0f 92       	push	r0
    40dc:	0f b6       	in	r0, 0x3f	; 63
    40de:	0f 92       	push	r0
    40e0:	11 24       	eor	r1, r1
    40e2:	0b b6       	in	r0, 0x3b	; 59
    40e4:	0f 92       	push	r0
    40e6:	2f 93       	push	r18
    40e8:	8f 93       	push	r24
    40ea:	9f 93       	push	r25
    40ec:	af 93       	push	r26
    40ee:	bf 93       	push	r27
    40f0:	ef 93       	push	r30
    40f2:	ff 93       	push	r31
    40f4:	e0 91 37 16 	lds	r30, 0x1637	; 0x801637 <_ser_handle+0x6>
    40f8:	f0 91 38 16 	lds	r31, 0x1638	; 0x801638 <_ser_handle+0x7>
    40fc:	30 97       	sbiw	r30, 0x00	; 0
    40fe:	b9 f0       	breq	.+46     	; 0x412e <__vector_55+0x56>
    4100:	02 80       	ldd	r0, Z+2	; 0x02
    4102:	f3 81       	ldd	r31, Z+3	; 0x03
    4104:	e0 2d       	mov	r30, r0
    4106:	93 81       	ldd	r25, Z+3	; 0x03
    4108:	82 81       	ldd	r24, Z+2	; 0x02
    410a:	98 17       	cp	r25, r24
    410c:	b1 f0       	breq	.+44     	; 0x413a <__vector_55+0x62>
    410e:	92 81       	ldd	r25, Z+2	; 0x02
    4110:	85 81       	ldd	r24, Z+5	; 0x05
    4112:	28 2f       	mov	r18, r24
    4114:	26 95       	lsr	r18
    4116:	29 23       	and	r18, r25
    4118:	a0 81       	ld	r26, Z
    411a:	b1 81       	ldd	r27, Z+1	; 0x01
    411c:	a2 0f       	add	r26, r18
    411e:	b1 1d       	adc	r27, r1
    4120:	2c 91       	ld	r18, X
    4122:	9f 5f       	subi	r25, 0xFF	; 255
    4124:	89 23       	and	r24, r25
    4126:	82 83       	std	Z+2, r24	; 0x02
    4128:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    412c:	0b c0       	rjmp	.+22     	; 0x4144 <__vector_55+0x6c>
    412e:	e1 e3       	ldi	r30, 0x31	; 49
    4130:	f1 e0       	ldi	r31, 0x01	; 1
    4132:	80 81       	ld	r24, Z
    4134:	8f 7d       	andi	r24, 0xDF	; 223
    4136:	80 83       	st	Z, r24
    4138:	05 c0       	rjmp	.+10     	; 0x4144 <__vector_55+0x6c>
    413a:	e1 e3       	ldi	r30, 0x31	; 49
    413c:	f1 e0       	ldi	r31, 0x01	; 1
    413e:	80 81       	ld	r24, Z
    4140:	8f 7d       	andi	r24, 0xDF	; 223
    4142:	80 83       	st	Z, r24
    4144:	ff 91       	pop	r31
    4146:	ef 91       	pop	r30
    4148:	bf 91       	pop	r27
    414a:	af 91       	pop	r26
    414c:	9f 91       	pop	r25
    414e:	8f 91       	pop	r24
    4150:	2f 91       	pop	r18
    4152:	0f 90       	pop	r0
    4154:	0b be       	out	0x3b, r0	; 59
    4156:	0f 90       	pop	r0
    4158:	0f be       	out	0x3f, r0	; 63
    415a:	0f 90       	pop	r0
    415c:	1f 90       	pop	r1
    415e:	18 95       	reti

00004160 <usart_getchar>:
    4160:	cf 93       	push	r28
    4162:	df 93       	push	r29
    4164:	1f 92       	push	r1
    4166:	cd b7       	in	r28, 0x3d	; 61
    4168:	de b7       	in	r29, 0x3e	; 62
    416a:	be 01       	movw	r22, r28
    416c:	6f 5f       	subi	r22, 0xFF	; 255
    416e:	7f 4f       	sbci	r23, 0xFF	; 255
    4170:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <_com_serial_instance>
    4174:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <_com_serial_instance+0x1>
    4178:	7b dd       	rcall	.-1290   	; 0x3c70 <serial_getByte>
    417a:	81 11       	cpse	r24, r1
    417c:	f6 cf       	rjmp	.-20     	; 0x416a <usart_getchar+0xa>
    417e:	89 81       	ldd	r24, Y+1	; 0x01
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	0f 90       	pop	r0
    4184:	df 91       	pop	r29
    4186:	cf 91       	pop	r28
    4188:	08 95       	ret

0000418a <usart_putchar>:
    418a:	68 2f       	mov	r22, r24
    418c:	80 91 39 16 	lds	r24, 0x1639	; 0x801639 <_com_serial_instance>
    4190:	90 91 3a 16 	lds	r25, 0x163A	; 0x80163a <_com_serial_instance+0x1>
    4194:	ed dc       	rcall	.-1574   	; 0x3b70 <serial_sendByte>
    4196:	80 e0       	ldi	r24, 0x00	; 0
    4198:	90 e0       	ldi	r25, 0x00	; 0
    419a:	08 95       	ret

0000419c <stdio_initialise>:
    419c:	8f 92       	push	r8
    419e:	9f 92       	push	r9
    41a0:	af 92       	push	r10
    41a2:	cf 92       	push	r12
    41a4:	ef 92       	push	r14
    41a6:	0f 93       	push	r16
    41a8:	81 2c       	mov	r8, r1
    41aa:	91 2c       	mov	r9, r1
    41ac:	68 94       	set
    41ae:	aa 24       	eor	r10, r10
    41b0:	a7 f8       	bld	r10, 7
    41b2:	68 94       	set
    41b4:	cc 24       	eor	r12, r12
    41b6:	c7 f8       	bld	r12, 7
    41b8:	e1 2c       	mov	r14, r1
    41ba:	00 e0       	ldi	r16, 0x00	; 0
    41bc:	23 e0       	ldi	r18, 0x03	; 3
    41be:	40 e0       	ldi	r20, 0x00	; 0
    41c0:	51 ee       	ldi	r21, 0xE1	; 225
    41c2:	60 e0       	ldi	r22, 0x00	; 0
    41c4:	70 e0       	ldi	r23, 0x00	; 0
    41c6:	38 dc       	rcall	.-1936   	; 0x3a38 <serial_create>
    41c8:	90 93 3a 16 	sts	0x163A, r25	; 0x80163a <_com_serial_instance+0x1>
    41cc:	80 93 39 16 	sts	0x1639, r24	; 0x801639 <_com_serial_instance>
    41d0:	e9 e5       	ldi	r30, 0x59	; 89
    41d2:	f6 e1       	ldi	r31, 0x16	; 22
    41d4:	8f e0       	ldi	r24, 0x0F	; 15
    41d6:	92 e0       	ldi	r25, 0x02	; 2
    41d8:	91 83       	std	Z+1, r25	; 0x01
    41da:	80 83       	st	Z, r24
    41dc:	93 83       	std	Z+3, r25	; 0x03
    41de:	82 83       	std	Z+2, r24	; 0x02
    41e0:	0f 91       	pop	r16
    41e2:	ef 90       	pop	r14
    41e4:	cf 90       	pop	r12
    41e6:	af 90       	pop	r10
    41e8:	9f 90       	pop	r9
    41ea:	8f 90       	pop	r8
    41ec:	08 95       	ret

000041ee <_turn_off>:
    41ee:	90 e0       	ldi	r25, 0x00	; 0
    41f0:	fc 01       	movw	r30, r24
    41f2:	ee 0f       	add	r30, r30
    41f4:	ff 1f       	adc	r31, r31
    41f6:	e8 0f       	add	r30, r24
    41f8:	f9 1f       	adc	r31, r25
    41fa:	ee 0f       	add	r30, r30
    41fc:	ff 1f       	adc	r31, r31
    41fe:	e5 5c       	subi	r30, 0xC5	; 197
    4200:	f9 4e       	sbci	r31, 0xE9	; 233
    4202:	23 81       	ldd	r18, Z+3	; 0x03
    4204:	21 11       	cpse	r18, r1
    4206:	1f c0       	rjmp	.+62     	; 0x4246 <_turn_off+0x58>
    4208:	9c 01       	movw	r18, r24
    420a:	22 0f       	add	r18, r18
    420c:	33 1f       	adc	r19, r19
    420e:	f9 01       	movw	r30, r18
    4210:	e8 0f       	add	r30, r24
    4212:	f9 1f       	adc	r31, r25
    4214:	ee 0f       	add	r30, r30
    4216:	ff 1f       	adc	r31, r31
    4218:	e5 5c       	subi	r30, 0xC5	; 197
    421a:	f9 4e       	sbci	r31, 0xE9	; 233
    421c:	a0 81       	ld	r26, Z
    421e:	b1 81       	ldd	r27, Z+1	; 0x01
    4220:	4c 91       	ld	r20, X
    4222:	f9 01       	movw	r30, r18
    4224:	e8 0f       	add	r30, r24
    4226:	f9 1f       	adc	r31, r25
    4228:	ee 0f       	add	r30, r30
    422a:	ff 1f       	adc	r31, r31
    422c:	e5 5c       	subi	r30, 0xC5	; 197
    422e:	f9 4e       	sbci	r31, 0xE9	; 233
    4230:	81 e0       	ldi	r24, 0x01	; 1
    4232:	90 e0       	ldi	r25, 0x00	; 0
    4234:	02 80       	ldd	r0, Z+2	; 0x02
    4236:	02 c0       	rjmp	.+4      	; 0x423c <_turn_off+0x4e>
    4238:	88 0f       	add	r24, r24
    423a:	99 1f       	adc	r25, r25
    423c:	0a 94       	dec	r0
    423e:	e2 f7       	brpl	.-8      	; 0x4238 <_turn_off+0x4a>
    4240:	84 2b       	or	r24, r20
    4242:	8c 93       	st	X, r24
    4244:	08 95       	ret
    4246:	fc 01       	movw	r30, r24
    4248:	ee 0f       	add	r30, r30
    424a:	ff 1f       	adc	r31, r31
    424c:	df 01       	movw	r26, r30
    424e:	a8 0f       	add	r26, r24
    4250:	b9 1f       	adc	r27, r25
    4252:	aa 0f       	add	r26, r26
    4254:	bb 1f       	adc	r27, r27
    4256:	a5 5c       	subi	r26, 0xC5	; 197
    4258:	b9 4e       	sbci	r27, 0xE9	; 233
    425a:	0d 90       	ld	r0, X+
    425c:	bc 91       	ld	r27, X
    425e:	a0 2d       	mov	r26, r0
    4260:	2c 91       	ld	r18, X
    4262:	e8 0f       	add	r30, r24
    4264:	f9 1f       	adc	r31, r25
    4266:	ee 0f       	add	r30, r30
    4268:	ff 1f       	adc	r31, r31
    426a:	e5 5c       	subi	r30, 0xC5	; 197
    426c:	f9 4e       	sbci	r31, 0xE9	; 233
    426e:	81 e0       	ldi	r24, 0x01	; 1
    4270:	90 e0       	ldi	r25, 0x00	; 0
    4272:	02 80       	ldd	r0, Z+2	; 0x02
    4274:	02 c0       	rjmp	.+4      	; 0x427a <_turn_off+0x8c>
    4276:	88 0f       	add	r24, r24
    4278:	99 1f       	adc	r25, r25
    427a:	0a 94       	dec	r0
    427c:	e2 f7       	brpl	.-8      	; 0x4276 <_turn_off+0x88>
    427e:	80 95       	com	r24
    4280:	82 23       	and	r24, r18
    4282:	8c 93       	st	X, r24
    4284:	08 95       	ret

00004286 <_turn_on>:
    4286:	90 e0       	ldi	r25, 0x00	; 0
    4288:	fc 01       	movw	r30, r24
    428a:	ee 0f       	add	r30, r30
    428c:	ff 1f       	adc	r31, r31
    428e:	e8 0f       	add	r30, r24
    4290:	f9 1f       	adc	r31, r25
    4292:	ee 0f       	add	r30, r30
    4294:	ff 1f       	adc	r31, r31
    4296:	e5 5c       	subi	r30, 0xC5	; 197
    4298:	f9 4e       	sbci	r31, 0xE9	; 233
    429a:	23 81       	ldd	r18, Z+3	; 0x03
    429c:	21 11       	cpse	r18, r1
    429e:	20 c0       	rjmp	.+64     	; 0x42e0 <_turn_on+0x5a>
    42a0:	9c 01       	movw	r18, r24
    42a2:	22 0f       	add	r18, r18
    42a4:	33 1f       	adc	r19, r19
    42a6:	f9 01       	movw	r30, r18
    42a8:	e8 0f       	add	r30, r24
    42aa:	f9 1f       	adc	r31, r25
    42ac:	ee 0f       	add	r30, r30
    42ae:	ff 1f       	adc	r31, r31
    42b0:	e5 5c       	subi	r30, 0xC5	; 197
    42b2:	f9 4e       	sbci	r31, 0xE9	; 233
    42b4:	a0 81       	ld	r26, Z
    42b6:	b1 81       	ldd	r27, Z+1	; 0x01
    42b8:	4c 91       	ld	r20, X
    42ba:	f9 01       	movw	r30, r18
    42bc:	e8 0f       	add	r30, r24
    42be:	f9 1f       	adc	r31, r25
    42c0:	ee 0f       	add	r30, r30
    42c2:	ff 1f       	adc	r31, r31
    42c4:	e5 5c       	subi	r30, 0xC5	; 197
    42c6:	f9 4e       	sbci	r31, 0xE9	; 233
    42c8:	81 e0       	ldi	r24, 0x01	; 1
    42ca:	90 e0       	ldi	r25, 0x00	; 0
    42cc:	02 80       	ldd	r0, Z+2	; 0x02
    42ce:	02 c0       	rjmp	.+4      	; 0x42d4 <_turn_on+0x4e>
    42d0:	88 0f       	add	r24, r24
    42d2:	99 1f       	adc	r25, r25
    42d4:	0a 94       	dec	r0
    42d6:	e2 f7       	brpl	.-8      	; 0x42d0 <_turn_on+0x4a>
    42d8:	80 95       	com	r24
    42da:	84 23       	and	r24, r20
    42dc:	8c 93       	st	X, r24
    42de:	08 95       	ret
    42e0:	fc 01       	movw	r30, r24
    42e2:	ee 0f       	add	r30, r30
    42e4:	ff 1f       	adc	r31, r31
    42e6:	df 01       	movw	r26, r30
    42e8:	a8 0f       	add	r26, r24
    42ea:	b9 1f       	adc	r27, r25
    42ec:	aa 0f       	add	r26, r26
    42ee:	bb 1f       	adc	r27, r27
    42f0:	a5 5c       	subi	r26, 0xC5	; 197
    42f2:	b9 4e       	sbci	r27, 0xE9	; 233
    42f4:	0d 90       	ld	r0, X+
    42f6:	bc 91       	ld	r27, X
    42f8:	a0 2d       	mov	r26, r0
    42fa:	2c 91       	ld	r18, X
    42fc:	e8 0f       	add	r30, r24
    42fe:	f9 1f       	adc	r31, r25
    4300:	ee 0f       	add	r30, r30
    4302:	ff 1f       	adc	r31, r31
    4304:	e5 5c       	subi	r30, 0xC5	; 197
    4306:	f9 4e       	sbci	r31, 0xE9	; 233
    4308:	81 e0       	ldi	r24, 0x01	; 1
    430a:	90 e0       	ldi	r25, 0x00	; 0
    430c:	02 80       	ldd	r0, Z+2	; 0x02
    430e:	02 c0       	rjmp	.+4      	; 0x4314 <_turn_on+0x8e>
    4310:	88 0f       	add	r24, r24
    4312:	99 1f       	adc	r25, r25
    4314:	0a 94       	dec	r0
    4316:	e2 f7       	brpl	.-8      	; 0x4310 <_turn_on+0x8a>
    4318:	82 2b       	or	r24, r18
    431a:	8c 93       	st	X, r24
    431c:	08 95       	ret

0000431e <_hal_led_task>:
    431e:	cc 24       	eor	r12, r12
    4320:	c3 94       	inc	r12
    4322:	d1 2c       	mov	r13, r1
    4324:	68 94       	set
    4326:	bb 24       	eor	r11, r11
    4328:	b2 f8       	bld	r11, 2
    432a:	cb e3       	ldi	r28, 0x3B	; 59
    432c:	d6 e1       	ldi	r29, 0x16	; 22
    432e:	10 e0       	ldi	r17, 0x00	; 0
    4330:	8c 81       	ldd	r24, Y+4	; 0x04
    4332:	81 30       	cpi	r24, 0x01	; 1
    4334:	81 f0       	breq	.+32     	; 0x4356 <_hal_led_task+0x38>
    4336:	18 f1       	brcs	.+70     	; 0x437e <_hal_led_task+0x60>
    4338:	82 30       	cpi	r24, 0x02	; 2
    433a:	61 f5       	brne	.+88     	; 0x4394 <_hal_led_task+0x76>
    433c:	e8 81       	ld	r30, Y
    433e:	f9 81       	ldd	r31, Y+1	; 0x01
    4340:	20 81       	ld	r18, Z
    4342:	c6 01       	movw	r24, r12
    4344:	0a 80       	ldd	r0, Y+2	; 0x02
    4346:	02 c0       	rjmp	.+4      	; 0x434c <_hal_led_task+0x2e>
    4348:	88 0f       	add	r24, r24
    434a:	99 1f       	adc	r25, r25
    434c:	0a 94       	dec	r0
    434e:	e2 f7       	brpl	.-8      	; 0x4348 <_hal_led_task+0x2a>
    4350:	82 27       	eor	r24, r18
    4352:	80 83       	st	Z, r24
    4354:	1f c0       	rjmp	.+62     	; 0x4394 <_hal_led_task+0x76>
    4356:	8d 81       	ldd	r24, Y+5	; 0x05
    4358:	8f 5f       	subi	r24, 0xFF	; 255
    435a:	86 30       	cpi	r24, 0x06	; 6
    435c:	10 f4       	brcc	.+4      	; 0x4362 <_hal_led_task+0x44>
    435e:	8d 83       	std	Y+5, r24	; 0x05
    4360:	19 c0       	rjmp	.+50     	; 0x4394 <_hal_led_task+0x76>
    4362:	1d 82       	std	Y+5, r1	; 0x05
    4364:	e8 81       	ld	r30, Y
    4366:	f9 81       	ldd	r31, Y+1	; 0x01
    4368:	20 81       	ld	r18, Z
    436a:	c6 01       	movw	r24, r12
    436c:	0a 80       	ldd	r0, Y+2	; 0x02
    436e:	02 c0       	rjmp	.+4      	; 0x4374 <_hal_led_task+0x56>
    4370:	88 0f       	add	r24, r24
    4372:	99 1f       	adc	r25, r25
    4374:	0a 94       	dec	r0
    4376:	e2 f7       	brpl	.-8      	; 0x4370 <_hal_led_task+0x52>
    4378:	82 27       	eor	r24, r18
    437a:	80 83       	st	Z, r24
    437c:	0b c0       	rjmp	.+22     	; 0x4394 <_hal_led_task+0x76>
    437e:	0d 81       	ldd	r16, Y+5	; 0x05
    4380:	00 23       	and	r16, r16
    4382:	29 f0       	breq	.+10     	; 0x438e <_hal_led_task+0x70>
    4384:	81 2f       	mov	r24, r17
    4386:	7f df       	rcall	.-258    	; 0x4286 <_turn_on>
    4388:	01 50       	subi	r16, 0x01	; 1
    438a:	0d 83       	std	Y+5, r16	; 0x05
    438c:	03 c0       	rjmp	.+6      	; 0x4394 <_hal_led_task+0x76>
    438e:	bc 82       	std	Y+4, r11	; 0x04
    4390:	81 2f       	mov	r24, r17
    4392:	2d df       	rcall	.-422    	; 0x41ee <_turn_off>
    4394:	1f 5f       	subi	r17, 0xFF	; 255
    4396:	26 96       	adiw	r28, 0x06	; 6
    4398:	14 30       	cpi	r17, 0x04	; 4
    439a:	51 f6       	brne	.-108    	; 0x4330 <_hal_led_task+0x12>
    439c:	6c e0       	ldi	r22, 0x0C	; 12
    439e:	70 e0       	ldi	r23, 0x00	; 0
    43a0:	80 e0       	ldi	r24, 0x00	; 0
    43a2:	90 e0       	ldi	r25, 0x00	; 0
    43a4:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <vTaskDelay>
    43a8:	c0 cf       	rjmp	.-128    	; 0x432a <_hal_led_task+0xc>

000043aa <status_leds_initialise>:
    43aa:	ef 92       	push	r14
    43ac:	ff 92       	push	r15
    43ae:	0f 93       	push	r16
    43b0:	1f 93       	push	r17
    43b2:	cf 93       	push	r28
    43b4:	df 93       	push	r29
    43b6:	08 2f       	mov	r16, r24
    43b8:	80 e4       	ldi	r24, 0x40	; 64
    43ba:	87 b9       	out	0x07, r24	; 7
    43bc:	cb e3       	ldi	r28, 0x3B	; 59
    43be:	d6 e1       	ldi	r29, 0x16	; 22
    43c0:	0f 2e       	mov	r0, r31
    43c2:	f8 e2       	ldi	r31, 0x28	; 40
    43c4:	ef 2e       	mov	r14, r31
    43c6:	f1 2c       	mov	r15, r1
    43c8:	f0 2d       	mov	r31, r0
    43ca:	f9 82       	std	Y+1, r15	; 0x01
    43cc:	e8 82       	st	Y, r14
    43ce:	86 e0       	ldi	r24, 0x06	; 6
    43d0:	8a 83       	std	Y+2, r24	; 0x02
    43d2:	1b 82       	std	Y+3, r1	; 0x03
    43d4:	14 e0       	ldi	r17, 0x04	; 4
    43d6:	1c 83       	std	Y+4, r17	; 0x04
    43d8:	80 e0       	ldi	r24, 0x00	; 0
    43da:	09 df       	rcall	.-494    	; 0x41ee <_turn_off>
    43dc:	80 e8       	ldi	r24, 0x80	; 128
    43de:	87 b9       	out	0x07, r24	; 7
    43e0:	ff 82       	std	Y+7, r15	; 0x07
    43e2:	ee 82       	std	Y+6, r14	; 0x06
    43e4:	87 e0       	ldi	r24, 0x07	; 7
    43e6:	88 87       	std	Y+8, r24	; 0x08
    43e8:	19 86       	std	Y+9, r1	; 0x09
    43ea:	1a 87       	std	Y+10, r17	; 0x0a
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	ff de       	rcall	.-514    	; 0x41ee <_turn_off>
    43f0:	80 e2       	ldi	r24, 0x20	; 32
    43f2:	83 bb       	out	0x13, r24	; 19
    43f4:	84 e3       	ldi	r24, 0x34	; 52
    43f6:	90 e0       	ldi	r25, 0x00	; 0
    43f8:	9d 87       	std	Y+13, r25	; 0x0d
    43fa:	8c 87       	std	Y+12, r24	; 0x0c
    43fc:	85 e0       	ldi	r24, 0x05	; 5
    43fe:	8e 87       	std	Y+14, r24	; 0x0e
    4400:	1f 86       	std	Y+15, r1	; 0x0f
    4402:	18 8b       	std	Y+16, r17	; 0x10
    4404:	82 e0       	ldi	r24, 0x02	; 2
    4406:	f3 de       	rcall	.-538    	; 0x41ee <_turn_off>
    4408:	80 e1       	ldi	r24, 0x10	; 16
    440a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
    440e:	82 e0       	ldi	r24, 0x02	; 2
    4410:	91 e0       	ldi	r25, 0x01	; 1
    4412:	9b 8b       	std	Y+19, r25	; 0x13
    4414:	8a 8b       	std	Y+18, r24	; 0x12
    4416:	1c 8b       	std	Y+20, r17	; 0x14
    4418:	1d 8a       	std	Y+21, r1	; 0x15
    441a:	1e 8b       	std	Y+22, r17	; 0x16
    441c:	83 e0       	ldi	r24, 0x03	; 3
    441e:	e7 de       	rcall	.-562    	; 0x41ee <_turn_off>
    4420:	e1 2c       	mov	r14, r1
    4422:	f1 2c       	mov	r15, r1
    4424:	20 e0       	ldi	r18, 0x00	; 0
    4426:	30 e0       	ldi	r19, 0x00	; 0
    4428:	40 ec       	ldi	r20, 0xC0	; 192
    442a:	50 e0       	ldi	r21, 0x00	; 0
    442c:	63 e8       	ldi	r22, 0x83	; 131
    442e:	76 e0       	ldi	r23, 0x06	; 6
    4430:	8f e8       	ldi	r24, 0x8F	; 143
    4432:	91 e2       	ldi	r25, 0x21	; 33
    4434:	0e 94 bc 0b 	call	0x1778	; 0x1778 <xTaskCreate>
    4438:	df 91       	pop	r29
    443a:	cf 91       	pop	r28
    443c:	1f 91       	pop	r17
    443e:	0f 91       	pop	r16
    4440:	ff 90       	pop	r15
    4442:	ef 90       	pop	r14
    4444:	08 95       	ret

00004446 <status_leds_slowBlink>:
    4446:	cf 93       	push	r28
    4448:	df 93       	push	r29
    444a:	90 e0       	ldi	r25, 0x00	; 0
    444c:	fc 01       	movw	r30, r24
    444e:	ee 0f       	add	r30, r30
    4450:	ff 1f       	adc	r31, r31
    4452:	df 01       	movw	r26, r30
    4454:	a8 0f       	add	r26, r24
    4456:	b9 1f       	adc	r27, r25
    4458:	aa 0f       	add	r26, r26
    445a:	bb 1f       	adc	r27, r27
    445c:	a5 5c       	subi	r26, 0xC5	; 197
    445e:	b9 4e       	sbci	r27, 0xE9	; 233
    4460:	cd 91       	ld	r28, X+
    4462:	dc 91       	ld	r29, X
    4464:	11 97       	sbiw	r26, 0x01	; 1
    4466:	48 81       	ld	r20, Y
    4468:	21 e0       	ldi	r18, 0x01	; 1
    446a:	30 e0       	ldi	r19, 0x00	; 0
    446c:	12 96       	adiw	r26, 0x02	; 2
    446e:	0c 90       	ld	r0, X
    4470:	12 97       	sbiw	r26, 0x02	; 2
    4472:	02 c0       	rjmp	.+4      	; 0x4478 <status_leds_slowBlink+0x32>
    4474:	22 0f       	add	r18, r18
    4476:	33 1f       	adc	r19, r19
    4478:	0a 94       	dec	r0
    447a:	e2 f7       	brpl	.-8      	; 0x4474 <status_leds_slowBlink+0x2e>
    447c:	24 27       	eor	r18, r20
    447e:	28 83       	st	Y, r18
    4480:	fd 01       	movw	r30, r26
    4482:	81 e0       	ldi	r24, 0x01	; 1
    4484:	84 83       	std	Z+4, r24	; 0x04
    4486:	df 91       	pop	r29
    4488:	cf 91       	pop	r28
    448a:	08 95       	ret

0000448c <status_leds_fastBlink>:
    448c:	cf 93       	push	r28
    448e:	df 93       	push	r29
    4490:	90 e0       	ldi	r25, 0x00	; 0
    4492:	fc 01       	movw	r30, r24
    4494:	ee 0f       	add	r30, r30
    4496:	ff 1f       	adc	r31, r31
    4498:	df 01       	movw	r26, r30
    449a:	a8 0f       	add	r26, r24
    449c:	b9 1f       	adc	r27, r25
    449e:	aa 0f       	add	r26, r26
    44a0:	bb 1f       	adc	r27, r27
    44a2:	a5 5c       	subi	r26, 0xC5	; 197
    44a4:	b9 4e       	sbci	r27, 0xE9	; 233
    44a6:	cd 91       	ld	r28, X+
    44a8:	dc 91       	ld	r29, X
    44aa:	11 97       	sbiw	r26, 0x01	; 1
    44ac:	48 81       	ld	r20, Y
    44ae:	21 e0       	ldi	r18, 0x01	; 1
    44b0:	30 e0       	ldi	r19, 0x00	; 0
    44b2:	12 96       	adiw	r26, 0x02	; 2
    44b4:	0c 90       	ld	r0, X
    44b6:	12 97       	sbiw	r26, 0x02	; 2
    44b8:	02 c0       	rjmp	.+4      	; 0x44be <status_leds_fastBlink+0x32>
    44ba:	22 0f       	add	r18, r18
    44bc:	33 1f       	adc	r19, r19
    44be:	0a 94       	dec	r0
    44c0:	e2 f7       	brpl	.-8      	; 0x44ba <status_leds_fastBlink+0x2e>
    44c2:	24 27       	eor	r18, r20
    44c4:	28 83       	st	Y, r18
    44c6:	fd 01       	movw	r30, r26
    44c8:	82 e0       	ldi	r24, 0x02	; 2
    44ca:	84 83       	std	Z+4, r24	; 0x04
    44cc:	df 91       	pop	r29
    44ce:	cf 91       	pop	r28
    44d0:	08 95       	ret

000044d2 <status_leds_ledOn>:
    44d2:	28 2f       	mov	r18, r24
    44d4:	30 e0       	ldi	r19, 0x00	; 0
    44d6:	f9 01       	movw	r30, r18
    44d8:	ee 0f       	add	r30, r30
    44da:	ff 1f       	adc	r31, r31
    44dc:	e2 0f       	add	r30, r18
    44de:	f3 1f       	adc	r31, r19
    44e0:	ee 0f       	add	r30, r30
    44e2:	ff 1f       	adc	r31, r31
    44e4:	e5 5c       	subi	r30, 0xC5	; 197
    44e6:	f9 4e       	sbci	r31, 0xE9	; 233
    44e8:	93 e0       	ldi	r25, 0x03	; 3
    44ea:	94 83       	std	Z+4, r25	; 0x04
    44ec:	cc ce       	rjmp	.-616    	; 0x4286 <_turn_on>
    44ee:	08 95       	ret

000044f0 <status_leds_ledOff>:
    44f0:	28 2f       	mov	r18, r24
    44f2:	30 e0       	ldi	r19, 0x00	; 0
    44f4:	f9 01       	movw	r30, r18
    44f6:	ee 0f       	add	r30, r30
    44f8:	ff 1f       	adc	r31, r31
    44fa:	e2 0f       	add	r30, r18
    44fc:	f3 1f       	adc	r31, r19
    44fe:	ee 0f       	add	r30, r30
    4500:	ff 1f       	adc	r31, r31
    4502:	e5 5c       	subi	r30, 0xC5	; 197
    4504:	f9 4e       	sbci	r31, 0xE9	; 233
    4506:	94 e0       	ldi	r25, 0x04	; 4
    4508:	94 83       	std	Z+4, r25	; 0x04
    450a:	71 ce       	rjmp	.-798    	; 0x41ee <_turn_off>
    450c:	08 95       	ret

0000450e <status_leds_longPuls>:
    450e:	90 e0       	ldi	r25, 0x00	; 0
    4510:	fc 01       	movw	r30, r24
    4512:	ee 0f       	add	r30, r30
    4514:	ff 1f       	adc	r31, r31
    4516:	df 01       	movw	r26, r30
    4518:	a8 0f       	add	r26, r24
    451a:	b9 1f       	adc	r27, r25
    451c:	aa 0f       	add	r26, r26
    451e:	bb 1f       	adc	r27, r27
    4520:	a5 5c       	subi	r26, 0xC5	; 197
    4522:	b9 4e       	sbci	r27, 0xE9	; 233
    4524:	26 e0       	ldi	r18, 0x06	; 6
    4526:	15 96       	adiw	r26, 0x05	; 5
    4528:	2c 93       	st	X, r18
    452a:	15 97       	sbiw	r26, 0x05	; 5
    452c:	fd 01       	movw	r30, r26
    452e:	14 82       	std	Z+4, r1	; 0x04
    4530:	08 95       	ret

00004532 <status_leds_shortPuls>:
    4532:	90 e0       	ldi	r25, 0x00	; 0
    4534:	fc 01       	movw	r30, r24
    4536:	ee 0f       	add	r30, r30
    4538:	ff 1f       	adc	r31, r31
    453a:	df 01       	movw	r26, r30
    453c:	a8 0f       	add	r26, r24
    453e:	b9 1f       	adc	r27, r25
    4540:	aa 0f       	add	r26, r26
    4542:	bb 1f       	adc	r27, r27
    4544:	a5 5c       	subi	r26, 0xC5	; 197
    4546:	b9 4e       	sbci	r27, 0xE9	; 233
    4548:	15 96       	adiw	r26, 0x05	; 5
    454a:	1c 92       	st	X, r1
    454c:	15 97       	sbiw	r26, 0x05	; 5
    454e:	fd 01       	movw	r30, r26
    4550:	14 82       	std	Z+4, r1	; 0x04
    4552:	08 95       	ret

00004554 <fifo_init>:
    4554:	fc 01       	movw	r30, r24
    4556:	41 11       	cpse	r20, r1
    4558:	01 c0       	rjmp	.+2      	; 0x455c <fifo_init+0x8>
    455a:	2b d3       	rcall	.+1622   	; 0x4bb2 <abort>
    455c:	84 2f       	mov	r24, r20
    455e:	90 e0       	ldi	r25, 0x00	; 0
    4560:	9c 01       	movw	r18, r24
    4562:	21 50       	subi	r18, 0x01	; 1
    4564:	31 09       	sbc	r19, r1
    4566:	82 23       	and	r24, r18
    4568:	93 23       	and	r25, r19
    456a:	89 2b       	or	r24, r25
    456c:	09 f0       	breq	.+2      	; 0x4570 <fifo_init+0x1c>
    456e:	21 d3       	rcall	.+1602   	; 0x4bb2 <abort>
    4570:	41 38       	cpi	r20, 0x81	; 129
    4572:	08 f0       	brcs	.+2      	; 0x4576 <fifo_init+0x22>
    4574:	1e d3       	rcall	.+1596   	; 0x4bb2 <abort>
    4576:	12 82       	std	Z+2, r1	; 0x02
    4578:	13 82       	std	Z+3, r1	; 0x03
    457a:	44 83       	std	Z+4, r20	; 0x04
    457c:	44 0f       	add	r20, r20
    457e:	41 50       	subi	r20, 0x01	; 1
    4580:	45 83       	std	Z+5, r20	; 0x05
    4582:	71 83       	std	Z+1, r23	; 0x01
    4584:	60 83       	st	Z, r22
    4586:	80 e0       	ldi	r24, 0x00	; 0
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	08 95       	ret

0000458c <__subsf3>:
    458c:	50 58       	subi	r21, 0x80	; 128

0000458e <__addsf3>:
    458e:	bb 27       	eor	r27, r27
    4590:	aa 27       	eor	r26, r26
    4592:	0e d0       	rcall	.+28     	; 0x45b0 <__addsf3x>
    4594:	48 c1       	rjmp	.+656    	; 0x4826 <__fp_round>
    4596:	39 d1       	rcall	.+626    	; 0x480a <__fp_pscA>
    4598:	30 f0       	brcs	.+12     	; 0x45a6 <__addsf3+0x18>
    459a:	3e d1       	rcall	.+636    	; 0x4818 <__fp_pscB>
    459c:	20 f0       	brcs	.+8      	; 0x45a6 <__addsf3+0x18>
    459e:	31 f4       	brne	.+12     	; 0x45ac <__addsf3+0x1e>
    45a0:	9f 3f       	cpi	r25, 0xFF	; 255
    45a2:	11 f4       	brne	.+4      	; 0x45a8 <__addsf3+0x1a>
    45a4:	1e f4       	brtc	.+6      	; 0x45ac <__addsf3+0x1e>
    45a6:	2e c1       	rjmp	.+604    	; 0x4804 <__fp_nan>
    45a8:	0e f4       	brtc	.+2      	; 0x45ac <__addsf3+0x1e>
    45aa:	e0 95       	com	r30
    45ac:	e7 fb       	bst	r30, 7
    45ae:	24 c1       	rjmp	.+584    	; 0x47f8 <__fp_inf>

000045b0 <__addsf3x>:
    45b0:	e9 2f       	mov	r30, r25
    45b2:	4a d1       	rcall	.+660    	; 0x4848 <__fp_split3>
    45b4:	80 f3       	brcs	.-32     	; 0x4596 <__addsf3+0x8>
    45b6:	ba 17       	cp	r27, r26
    45b8:	62 07       	cpc	r22, r18
    45ba:	73 07       	cpc	r23, r19
    45bc:	84 07       	cpc	r24, r20
    45be:	95 07       	cpc	r25, r21
    45c0:	18 f0       	brcs	.+6      	; 0x45c8 <__addsf3x+0x18>
    45c2:	71 f4       	brne	.+28     	; 0x45e0 <__addsf3x+0x30>
    45c4:	9e f5       	brtc	.+102    	; 0x462c <__addsf3x+0x7c>
    45c6:	62 c1       	rjmp	.+708    	; 0x488c <__fp_zero>
    45c8:	0e f4       	brtc	.+2      	; 0x45cc <__addsf3x+0x1c>
    45ca:	e0 95       	com	r30
    45cc:	0b 2e       	mov	r0, r27
    45ce:	ba 2f       	mov	r27, r26
    45d0:	a0 2d       	mov	r26, r0
    45d2:	0b 01       	movw	r0, r22
    45d4:	b9 01       	movw	r22, r18
    45d6:	90 01       	movw	r18, r0
    45d8:	0c 01       	movw	r0, r24
    45da:	ca 01       	movw	r24, r20
    45dc:	a0 01       	movw	r20, r0
    45de:	11 24       	eor	r1, r1
    45e0:	ff 27       	eor	r31, r31
    45e2:	59 1b       	sub	r21, r25
    45e4:	99 f0       	breq	.+38     	; 0x460c <__addsf3x+0x5c>
    45e6:	59 3f       	cpi	r21, 0xF9	; 249
    45e8:	50 f4       	brcc	.+20     	; 0x45fe <__addsf3x+0x4e>
    45ea:	50 3e       	cpi	r21, 0xE0	; 224
    45ec:	68 f1       	brcs	.+90     	; 0x4648 <__addsf3x+0x98>
    45ee:	1a 16       	cp	r1, r26
    45f0:	f0 40       	sbci	r31, 0x00	; 0
    45f2:	a2 2f       	mov	r26, r18
    45f4:	23 2f       	mov	r18, r19
    45f6:	34 2f       	mov	r19, r20
    45f8:	44 27       	eor	r20, r20
    45fa:	58 5f       	subi	r21, 0xF8	; 248
    45fc:	f3 cf       	rjmp	.-26     	; 0x45e4 <__addsf3x+0x34>
    45fe:	46 95       	lsr	r20
    4600:	37 95       	ror	r19
    4602:	27 95       	ror	r18
    4604:	a7 95       	ror	r26
    4606:	f0 40       	sbci	r31, 0x00	; 0
    4608:	53 95       	inc	r21
    460a:	c9 f7       	brne	.-14     	; 0x45fe <__addsf3x+0x4e>
    460c:	7e f4       	brtc	.+30     	; 0x462c <__addsf3x+0x7c>
    460e:	1f 16       	cp	r1, r31
    4610:	ba 0b       	sbc	r27, r26
    4612:	62 0b       	sbc	r22, r18
    4614:	73 0b       	sbc	r23, r19
    4616:	84 0b       	sbc	r24, r20
    4618:	ba f0       	brmi	.+46     	; 0x4648 <__addsf3x+0x98>
    461a:	91 50       	subi	r25, 0x01	; 1
    461c:	a1 f0       	breq	.+40     	; 0x4646 <__addsf3x+0x96>
    461e:	ff 0f       	add	r31, r31
    4620:	bb 1f       	adc	r27, r27
    4622:	66 1f       	adc	r22, r22
    4624:	77 1f       	adc	r23, r23
    4626:	88 1f       	adc	r24, r24
    4628:	c2 f7       	brpl	.-16     	; 0x461a <__addsf3x+0x6a>
    462a:	0e c0       	rjmp	.+28     	; 0x4648 <__addsf3x+0x98>
    462c:	ba 0f       	add	r27, r26
    462e:	62 1f       	adc	r22, r18
    4630:	73 1f       	adc	r23, r19
    4632:	84 1f       	adc	r24, r20
    4634:	48 f4       	brcc	.+18     	; 0x4648 <__addsf3x+0x98>
    4636:	87 95       	ror	r24
    4638:	77 95       	ror	r23
    463a:	67 95       	ror	r22
    463c:	b7 95       	ror	r27
    463e:	f7 95       	ror	r31
    4640:	9e 3f       	cpi	r25, 0xFE	; 254
    4642:	08 f0       	brcs	.+2      	; 0x4646 <__addsf3x+0x96>
    4644:	b3 cf       	rjmp	.-154    	; 0x45ac <__addsf3+0x1e>
    4646:	93 95       	inc	r25
    4648:	88 0f       	add	r24, r24
    464a:	08 f0       	brcs	.+2      	; 0x464e <__addsf3x+0x9e>
    464c:	99 27       	eor	r25, r25
    464e:	ee 0f       	add	r30, r30
    4650:	97 95       	ror	r25
    4652:	87 95       	ror	r24
    4654:	08 95       	ret

00004656 <__divsf3>:
    4656:	0c d0       	rcall	.+24     	; 0x4670 <__divsf3x>
    4658:	e6 c0       	rjmp	.+460    	; 0x4826 <__fp_round>
    465a:	de d0       	rcall	.+444    	; 0x4818 <__fp_pscB>
    465c:	40 f0       	brcs	.+16     	; 0x466e <__divsf3+0x18>
    465e:	d5 d0       	rcall	.+426    	; 0x480a <__fp_pscA>
    4660:	30 f0       	brcs	.+12     	; 0x466e <__divsf3+0x18>
    4662:	21 f4       	brne	.+8      	; 0x466c <__divsf3+0x16>
    4664:	5f 3f       	cpi	r21, 0xFF	; 255
    4666:	19 f0       	breq	.+6      	; 0x466e <__divsf3+0x18>
    4668:	c7 c0       	rjmp	.+398    	; 0x47f8 <__fp_inf>
    466a:	51 11       	cpse	r21, r1
    466c:	10 c1       	rjmp	.+544    	; 0x488e <__fp_szero>
    466e:	ca c0       	rjmp	.+404    	; 0x4804 <__fp_nan>

00004670 <__divsf3x>:
    4670:	eb d0       	rcall	.+470    	; 0x4848 <__fp_split3>
    4672:	98 f3       	brcs	.-26     	; 0x465a <__divsf3+0x4>

00004674 <__divsf3_pse>:
    4674:	99 23       	and	r25, r25
    4676:	c9 f3       	breq	.-14     	; 0x466a <__divsf3+0x14>
    4678:	55 23       	and	r21, r21
    467a:	b1 f3       	breq	.-20     	; 0x4668 <__divsf3+0x12>
    467c:	95 1b       	sub	r25, r21
    467e:	55 0b       	sbc	r21, r21
    4680:	bb 27       	eor	r27, r27
    4682:	aa 27       	eor	r26, r26
    4684:	62 17       	cp	r22, r18
    4686:	73 07       	cpc	r23, r19
    4688:	84 07       	cpc	r24, r20
    468a:	38 f0       	brcs	.+14     	; 0x469a <__divsf3_pse+0x26>
    468c:	9f 5f       	subi	r25, 0xFF	; 255
    468e:	5f 4f       	sbci	r21, 0xFF	; 255
    4690:	22 0f       	add	r18, r18
    4692:	33 1f       	adc	r19, r19
    4694:	44 1f       	adc	r20, r20
    4696:	aa 1f       	adc	r26, r26
    4698:	a9 f3       	breq	.-22     	; 0x4684 <__divsf3_pse+0x10>
    469a:	33 d0       	rcall	.+102    	; 0x4702 <__divsf3_pse+0x8e>
    469c:	0e 2e       	mov	r0, r30
    469e:	3a f0       	brmi	.+14     	; 0x46ae <__divsf3_pse+0x3a>
    46a0:	e0 e8       	ldi	r30, 0x80	; 128
    46a2:	30 d0       	rcall	.+96     	; 0x4704 <__divsf3_pse+0x90>
    46a4:	91 50       	subi	r25, 0x01	; 1
    46a6:	50 40       	sbci	r21, 0x00	; 0
    46a8:	e6 95       	lsr	r30
    46aa:	00 1c       	adc	r0, r0
    46ac:	ca f7       	brpl	.-14     	; 0x46a0 <__divsf3_pse+0x2c>
    46ae:	29 d0       	rcall	.+82     	; 0x4702 <__divsf3_pse+0x8e>
    46b0:	fe 2f       	mov	r31, r30
    46b2:	27 d0       	rcall	.+78     	; 0x4702 <__divsf3_pse+0x8e>
    46b4:	66 0f       	add	r22, r22
    46b6:	77 1f       	adc	r23, r23
    46b8:	88 1f       	adc	r24, r24
    46ba:	bb 1f       	adc	r27, r27
    46bc:	26 17       	cp	r18, r22
    46be:	37 07       	cpc	r19, r23
    46c0:	48 07       	cpc	r20, r24
    46c2:	ab 07       	cpc	r26, r27
    46c4:	b0 e8       	ldi	r27, 0x80	; 128
    46c6:	09 f0       	breq	.+2      	; 0x46ca <__divsf3_pse+0x56>
    46c8:	bb 0b       	sbc	r27, r27
    46ca:	80 2d       	mov	r24, r0
    46cc:	bf 01       	movw	r22, r30
    46ce:	ff 27       	eor	r31, r31
    46d0:	93 58       	subi	r25, 0x83	; 131
    46d2:	5f 4f       	sbci	r21, 0xFF	; 255
    46d4:	2a f0       	brmi	.+10     	; 0x46e0 <__divsf3_pse+0x6c>
    46d6:	9e 3f       	cpi	r25, 0xFE	; 254
    46d8:	51 05       	cpc	r21, r1
    46da:	68 f0       	brcs	.+26     	; 0x46f6 <__divsf3_pse+0x82>
    46dc:	8d c0       	rjmp	.+282    	; 0x47f8 <__fp_inf>
    46de:	d7 c0       	rjmp	.+430    	; 0x488e <__fp_szero>
    46e0:	5f 3f       	cpi	r21, 0xFF	; 255
    46e2:	ec f3       	brlt	.-6      	; 0x46de <__divsf3_pse+0x6a>
    46e4:	98 3e       	cpi	r25, 0xE8	; 232
    46e6:	dc f3       	brlt	.-10     	; 0x46de <__divsf3_pse+0x6a>
    46e8:	86 95       	lsr	r24
    46ea:	77 95       	ror	r23
    46ec:	67 95       	ror	r22
    46ee:	b7 95       	ror	r27
    46f0:	f7 95       	ror	r31
    46f2:	9f 5f       	subi	r25, 0xFF	; 255
    46f4:	c9 f7       	brne	.-14     	; 0x46e8 <__divsf3_pse+0x74>
    46f6:	88 0f       	add	r24, r24
    46f8:	91 1d       	adc	r25, r1
    46fa:	96 95       	lsr	r25
    46fc:	87 95       	ror	r24
    46fe:	97 f9       	bld	r25, 7
    4700:	08 95       	ret
    4702:	e1 e0       	ldi	r30, 0x01	; 1
    4704:	66 0f       	add	r22, r22
    4706:	77 1f       	adc	r23, r23
    4708:	88 1f       	adc	r24, r24
    470a:	bb 1f       	adc	r27, r27
    470c:	62 17       	cp	r22, r18
    470e:	73 07       	cpc	r23, r19
    4710:	84 07       	cpc	r24, r20
    4712:	ba 07       	cpc	r27, r26
    4714:	20 f0       	brcs	.+8      	; 0x471e <__divsf3_pse+0xaa>
    4716:	62 1b       	sub	r22, r18
    4718:	73 0b       	sbc	r23, r19
    471a:	84 0b       	sbc	r24, r20
    471c:	ba 0b       	sbc	r27, r26
    471e:	ee 1f       	adc	r30, r30
    4720:	88 f7       	brcc	.-30     	; 0x4704 <__divsf3_pse+0x90>
    4722:	e0 95       	com	r30
    4724:	08 95       	ret

00004726 <__fixunssfsi>:
    4726:	98 d0       	rcall	.+304    	; 0x4858 <__fp_splitA>
    4728:	88 f0       	brcs	.+34     	; 0x474c <__fixunssfsi+0x26>
    472a:	9f 57       	subi	r25, 0x7F	; 127
    472c:	90 f0       	brcs	.+36     	; 0x4752 <__fixunssfsi+0x2c>
    472e:	b9 2f       	mov	r27, r25
    4730:	99 27       	eor	r25, r25
    4732:	b7 51       	subi	r27, 0x17	; 23
    4734:	a0 f0       	brcs	.+40     	; 0x475e <__fixunssfsi+0x38>
    4736:	d1 f0       	breq	.+52     	; 0x476c <__fixunssfsi+0x46>
    4738:	66 0f       	add	r22, r22
    473a:	77 1f       	adc	r23, r23
    473c:	88 1f       	adc	r24, r24
    473e:	99 1f       	adc	r25, r25
    4740:	1a f0       	brmi	.+6      	; 0x4748 <__fixunssfsi+0x22>
    4742:	ba 95       	dec	r27
    4744:	c9 f7       	brne	.-14     	; 0x4738 <__fixunssfsi+0x12>
    4746:	12 c0       	rjmp	.+36     	; 0x476c <__fixunssfsi+0x46>
    4748:	b1 30       	cpi	r27, 0x01	; 1
    474a:	81 f0       	breq	.+32     	; 0x476c <__fixunssfsi+0x46>
    474c:	9f d0       	rcall	.+318    	; 0x488c <__fp_zero>
    474e:	b1 e0       	ldi	r27, 0x01	; 1
    4750:	08 95       	ret
    4752:	9c c0       	rjmp	.+312    	; 0x488c <__fp_zero>
    4754:	67 2f       	mov	r22, r23
    4756:	78 2f       	mov	r23, r24
    4758:	88 27       	eor	r24, r24
    475a:	b8 5f       	subi	r27, 0xF8	; 248
    475c:	39 f0       	breq	.+14     	; 0x476c <__fixunssfsi+0x46>
    475e:	b9 3f       	cpi	r27, 0xF9	; 249
    4760:	cc f3       	brlt	.-14     	; 0x4754 <__fixunssfsi+0x2e>
    4762:	86 95       	lsr	r24
    4764:	77 95       	ror	r23
    4766:	67 95       	ror	r22
    4768:	b3 95       	inc	r27
    476a:	d9 f7       	brne	.-10     	; 0x4762 <__fixunssfsi+0x3c>
    476c:	3e f4       	brtc	.+14     	; 0x477c <__fixunssfsi+0x56>
    476e:	90 95       	com	r25
    4770:	80 95       	com	r24
    4772:	70 95       	com	r23
    4774:	61 95       	neg	r22
    4776:	7f 4f       	sbci	r23, 0xFF	; 255
    4778:	8f 4f       	sbci	r24, 0xFF	; 255
    477a:	9f 4f       	sbci	r25, 0xFF	; 255
    477c:	08 95       	ret

0000477e <__floatunsisf>:
    477e:	e8 94       	clt
    4780:	09 c0       	rjmp	.+18     	; 0x4794 <__floatsisf+0x12>

00004782 <__floatsisf>:
    4782:	97 fb       	bst	r25, 7
    4784:	3e f4       	brtc	.+14     	; 0x4794 <__floatsisf+0x12>
    4786:	90 95       	com	r25
    4788:	80 95       	com	r24
    478a:	70 95       	com	r23
    478c:	61 95       	neg	r22
    478e:	7f 4f       	sbci	r23, 0xFF	; 255
    4790:	8f 4f       	sbci	r24, 0xFF	; 255
    4792:	9f 4f       	sbci	r25, 0xFF	; 255
    4794:	99 23       	and	r25, r25
    4796:	a9 f0       	breq	.+42     	; 0x47c2 <__floatsisf+0x40>
    4798:	f9 2f       	mov	r31, r25
    479a:	96 e9       	ldi	r25, 0x96	; 150
    479c:	bb 27       	eor	r27, r27
    479e:	93 95       	inc	r25
    47a0:	f6 95       	lsr	r31
    47a2:	87 95       	ror	r24
    47a4:	77 95       	ror	r23
    47a6:	67 95       	ror	r22
    47a8:	b7 95       	ror	r27
    47aa:	f1 11       	cpse	r31, r1
    47ac:	f8 cf       	rjmp	.-16     	; 0x479e <__floatsisf+0x1c>
    47ae:	fa f4       	brpl	.+62     	; 0x47ee <__floatsisf+0x6c>
    47b0:	bb 0f       	add	r27, r27
    47b2:	11 f4       	brne	.+4      	; 0x47b8 <__floatsisf+0x36>
    47b4:	60 ff       	sbrs	r22, 0
    47b6:	1b c0       	rjmp	.+54     	; 0x47ee <__floatsisf+0x6c>
    47b8:	6f 5f       	subi	r22, 0xFF	; 255
    47ba:	7f 4f       	sbci	r23, 0xFF	; 255
    47bc:	8f 4f       	sbci	r24, 0xFF	; 255
    47be:	9f 4f       	sbci	r25, 0xFF	; 255
    47c0:	16 c0       	rjmp	.+44     	; 0x47ee <__floatsisf+0x6c>
    47c2:	88 23       	and	r24, r24
    47c4:	11 f0       	breq	.+4      	; 0x47ca <__floatsisf+0x48>
    47c6:	96 e9       	ldi	r25, 0x96	; 150
    47c8:	11 c0       	rjmp	.+34     	; 0x47ec <__floatsisf+0x6a>
    47ca:	77 23       	and	r23, r23
    47cc:	21 f0       	breq	.+8      	; 0x47d6 <__floatsisf+0x54>
    47ce:	9e e8       	ldi	r25, 0x8E	; 142
    47d0:	87 2f       	mov	r24, r23
    47d2:	76 2f       	mov	r23, r22
    47d4:	05 c0       	rjmp	.+10     	; 0x47e0 <__floatsisf+0x5e>
    47d6:	66 23       	and	r22, r22
    47d8:	71 f0       	breq	.+28     	; 0x47f6 <__floatsisf+0x74>
    47da:	96 e8       	ldi	r25, 0x86	; 134
    47dc:	86 2f       	mov	r24, r22
    47de:	70 e0       	ldi	r23, 0x00	; 0
    47e0:	60 e0       	ldi	r22, 0x00	; 0
    47e2:	2a f0       	brmi	.+10     	; 0x47ee <__floatsisf+0x6c>
    47e4:	9a 95       	dec	r25
    47e6:	66 0f       	add	r22, r22
    47e8:	77 1f       	adc	r23, r23
    47ea:	88 1f       	adc	r24, r24
    47ec:	da f7       	brpl	.-10     	; 0x47e4 <__floatsisf+0x62>
    47ee:	88 0f       	add	r24, r24
    47f0:	96 95       	lsr	r25
    47f2:	87 95       	ror	r24
    47f4:	97 f9       	bld	r25, 7
    47f6:	08 95       	ret

000047f8 <__fp_inf>:
    47f8:	97 f9       	bld	r25, 7
    47fa:	9f 67       	ori	r25, 0x7F	; 127
    47fc:	80 e8       	ldi	r24, 0x80	; 128
    47fe:	70 e0       	ldi	r23, 0x00	; 0
    4800:	60 e0       	ldi	r22, 0x00	; 0
    4802:	08 95       	ret

00004804 <__fp_nan>:
    4804:	9f ef       	ldi	r25, 0xFF	; 255
    4806:	80 ec       	ldi	r24, 0xC0	; 192
    4808:	08 95       	ret

0000480a <__fp_pscA>:
    480a:	00 24       	eor	r0, r0
    480c:	0a 94       	dec	r0
    480e:	16 16       	cp	r1, r22
    4810:	17 06       	cpc	r1, r23
    4812:	18 06       	cpc	r1, r24
    4814:	09 06       	cpc	r0, r25
    4816:	08 95       	ret

00004818 <__fp_pscB>:
    4818:	00 24       	eor	r0, r0
    481a:	0a 94       	dec	r0
    481c:	12 16       	cp	r1, r18
    481e:	13 06       	cpc	r1, r19
    4820:	14 06       	cpc	r1, r20
    4822:	05 06       	cpc	r0, r21
    4824:	08 95       	ret

00004826 <__fp_round>:
    4826:	09 2e       	mov	r0, r25
    4828:	03 94       	inc	r0
    482a:	00 0c       	add	r0, r0
    482c:	11 f4       	brne	.+4      	; 0x4832 <__fp_round+0xc>
    482e:	88 23       	and	r24, r24
    4830:	52 f0       	brmi	.+20     	; 0x4846 <__fp_round+0x20>
    4832:	bb 0f       	add	r27, r27
    4834:	40 f4       	brcc	.+16     	; 0x4846 <__fp_round+0x20>
    4836:	bf 2b       	or	r27, r31
    4838:	11 f4       	brne	.+4      	; 0x483e <__fp_round+0x18>
    483a:	60 ff       	sbrs	r22, 0
    483c:	04 c0       	rjmp	.+8      	; 0x4846 <__fp_round+0x20>
    483e:	6f 5f       	subi	r22, 0xFF	; 255
    4840:	7f 4f       	sbci	r23, 0xFF	; 255
    4842:	8f 4f       	sbci	r24, 0xFF	; 255
    4844:	9f 4f       	sbci	r25, 0xFF	; 255
    4846:	08 95       	ret

00004848 <__fp_split3>:
    4848:	57 fd       	sbrc	r21, 7
    484a:	90 58       	subi	r25, 0x80	; 128
    484c:	44 0f       	add	r20, r20
    484e:	55 1f       	adc	r21, r21
    4850:	59 f0       	breq	.+22     	; 0x4868 <__fp_splitA+0x10>
    4852:	5f 3f       	cpi	r21, 0xFF	; 255
    4854:	71 f0       	breq	.+28     	; 0x4872 <__fp_splitA+0x1a>
    4856:	47 95       	ror	r20

00004858 <__fp_splitA>:
    4858:	88 0f       	add	r24, r24
    485a:	97 fb       	bst	r25, 7
    485c:	99 1f       	adc	r25, r25
    485e:	61 f0       	breq	.+24     	; 0x4878 <__fp_splitA+0x20>
    4860:	9f 3f       	cpi	r25, 0xFF	; 255
    4862:	79 f0       	breq	.+30     	; 0x4882 <__fp_splitA+0x2a>
    4864:	87 95       	ror	r24
    4866:	08 95       	ret
    4868:	12 16       	cp	r1, r18
    486a:	13 06       	cpc	r1, r19
    486c:	14 06       	cpc	r1, r20
    486e:	55 1f       	adc	r21, r21
    4870:	f2 cf       	rjmp	.-28     	; 0x4856 <__fp_split3+0xe>
    4872:	46 95       	lsr	r20
    4874:	f1 df       	rcall	.-30     	; 0x4858 <__fp_splitA>
    4876:	08 c0       	rjmp	.+16     	; 0x4888 <__fp_splitA+0x30>
    4878:	16 16       	cp	r1, r22
    487a:	17 06       	cpc	r1, r23
    487c:	18 06       	cpc	r1, r24
    487e:	99 1f       	adc	r25, r25
    4880:	f1 cf       	rjmp	.-30     	; 0x4864 <__fp_splitA+0xc>
    4882:	86 95       	lsr	r24
    4884:	71 05       	cpc	r23, r1
    4886:	61 05       	cpc	r22, r1
    4888:	08 94       	sec
    488a:	08 95       	ret

0000488c <__fp_zero>:
    488c:	e8 94       	clt

0000488e <__fp_szero>:
    488e:	bb 27       	eor	r27, r27
    4890:	66 27       	eor	r22, r22
    4892:	77 27       	eor	r23, r23
    4894:	cb 01       	movw	r24, r22
    4896:	97 f9       	bld	r25, 7
    4898:	08 95       	ret

0000489a <__mulsf3>:
    489a:	0b d0       	rcall	.+22     	; 0x48b2 <__mulsf3x>
    489c:	c4 cf       	rjmp	.-120    	; 0x4826 <__fp_round>
    489e:	b5 df       	rcall	.-150    	; 0x480a <__fp_pscA>
    48a0:	28 f0       	brcs	.+10     	; 0x48ac <__mulsf3+0x12>
    48a2:	ba df       	rcall	.-140    	; 0x4818 <__fp_pscB>
    48a4:	18 f0       	brcs	.+6      	; 0x48ac <__mulsf3+0x12>
    48a6:	95 23       	and	r25, r21
    48a8:	09 f0       	breq	.+2      	; 0x48ac <__mulsf3+0x12>
    48aa:	a6 cf       	rjmp	.-180    	; 0x47f8 <__fp_inf>
    48ac:	ab cf       	rjmp	.-170    	; 0x4804 <__fp_nan>
    48ae:	11 24       	eor	r1, r1
    48b0:	ee cf       	rjmp	.-36     	; 0x488e <__fp_szero>

000048b2 <__mulsf3x>:
    48b2:	ca df       	rcall	.-108    	; 0x4848 <__fp_split3>
    48b4:	a0 f3       	brcs	.-24     	; 0x489e <__mulsf3+0x4>

000048b6 <__mulsf3_pse>:
    48b6:	95 9f       	mul	r25, r21
    48b8:	d1 f3       	breq	.-12     	; 0x48ae <__mulsf3+0x14>
    48ba:	95 0f       	add	r25, r21
    48bc:	50 e0       	ldi	r21, 0x00	; 0
    48be:	55 1f       	adc	r21, r21
    48c0:	62 9f       	mul	r22, r18
    48c2:	f0 01       	movw	r30, r0
    48c4:	72 9f       	mul	r23, r18
    48c6:	bb 27       	eor	r27, r27
    48c8:	f0 0d       	add	r31, r0
    48ca:	b1 1d       	adc	r27, r1
    48cc:	63 9f       	mul	r22, r19
    48ce:	aa 27       	eor	r26, r26
    48d0:	f0 0d       	add	r31, r0
    48d2:	b1 1d       	adc	r27, r1
    48d4:	aa 1f       	adc	r26, r26
    48d6:	64 9f       	mul	r22, r20
    48d8:	66 27       	eor	r22, r22
    48da:	b0 0d       	add	r27, r0
    48dc:	a1 1d       	adc	r26, r1
    48de:	66 1f       	adc	r22, r22
    48e0:	82 9f       	mul	r24, r18
    48e2:	22 27       	eor	r18, r18
    48e4:	b0 0d       	add	r27, r0
    48e6:	a1 1d       	adc	r26, r1
    48e8:	62 1f       	adc	r22, r18
    48ea:	73 9f       	mul	r23, r19
    48ec:	b0 0d       	add	r27, r0
    48ee:	a1 1d       	adc	r26, r1
    48f0:	62 1f       	adc	r22, r18
    48f2:	83 9f       	mul	r24, r19
    48f4:	a0 0d       	add	r26, r0
    48f6:	61 1d       	adc	r22, r1
    48f8:	22 1f       	adc	r18, r18
    48fa:	74 9f       	mul	r23, r20
    48fc:	33 27       	eor	r19, r19
    48fe:	a0 0d       	add	r26, r0
    4900:	61 1d       	adc	r22, r1
    4902:	23 1f       	adc	r18, r19
    4904:	84 9f       	mul	r24, r20
    4906:	60 0d       	add	r22, r0
    4908:	21 1d       	adc	r18, r1
    490a:	82 2f       	mov	r24, r18
    490c:	76 2f       	mov	r23, r22
    490e:	6a 2f       	mov	r22, r26
    4910:	11 24       	eor	r1, r1
    4912:	9f 57       	subi	r25, 0x7F	; 127
    4914:	50 40       	sbci	r21, 0x00	; 0
    4916:	8a f0       	brmi	.+34     	; 0x493a <__mulsf3_pse+0x84>
    4918:	e1 f0       	breq	.+56     	; 0x4952 <__mulsf3_pse+0x9c>
    491a:	88 23       	and	r24, r24
    491c:	4a f0       	brmi	.+18     	; 0x4930 <__mulsf3_pse+0x7a>
    491e:	ee 0f       	add	r30, r30
    4920:	ff 1f       	adc	r31, r31
    4922:	bb 1f       	adc	r27, r27
    4924:	66 1f       	adc	r22, r22
    4926:	77 1f       	adc	r23, r23
    4928:	88 1f       	adc	r24, r24
    492a:	91 50       	subi	r25, 0x01	; 1
    492c:	50 40       	sbci	r21, 0x00	; 0
    492e:	a9 f7       	brne	.-22     	; 0x491a <__mulsf3_pse+0x64>
    4930:	9e 3f       	cpi	r25, 0xFE	; 254
    4932:	51 05       	cpc	r21, r1
    4934:	70 f0       	brcs	.+28     	; 0x4952 <__mulsf3_pse+0x9c>
    4936:	60 cf       	rjmp	.-320    	; 0x47f8 <__fp_inf>
    4938:	aa cf       	rjmp	.-172    	; 0x488e <__fp_szero>
    493a:	5f 3f       	cpi	r21, 0xFF	; 255
    493c:	ec f3       	brlt	.-6      	; 0x4938 <__mulsf3_pse+0x82>
    493e:	98 3e       	cpi	r25, 0xE8	; 232
    4940:	dc f3       	brlt	.-10     	; 0x4938 <__mulsf3_pse+0x82>
    4942:	86 95       	lsr	r24
    4944:	77 95       	ror	r23
    4946:	67 95       	ror	r22
    4948:	b7 95       	ror	r27
    494a:	f7 95       	ror	r31
    494c:	e7 95       	ror	r30
    494e:	9f 5f       	subi	r25, 0xFF	; 255
    4950:	c1 f7       	brne	.-16     	; 0x4942 <__mulsf3_pse+0x8c>
    4952:	fe 2b       	or	r31, r30
    4954:	88 0f       	add	r24, r24
    4956:	91 1d       	adc	r25, r1
    4958:	96 95       	lsr	r25
    495a:	87 95       	ror	r24
    495c:	97 f9       	bld	r25, 7
    495e:	08 95       	ret

00004960 <__tablejump2__>:
    4960:	ee 0f       	add	r30, r30
    4962:	ff 1f       	adc	r31, r31
    4964:	88 1f       	adc	r24, r24
    4966:	8b bf       	out	0x3b, r24	; 59
    4968:	07 90       	elpm	r0, Z+
    496a:	f6 91       	elpm	r31, Z
    496c:	e0 2d       	mov	r30, r0
    496e:	19 94       	eijmp

00004970 <malloc>:
    4970:	0f 93       	push	r16
    4972:	1f 93       	push	r17
    4974:	cf 93       	push	r28
    4976:	df 93       	push	r29
    4978:	82 30       	cpi	r24, 0x02	; 2
    497a:	91 05       	cpc	r25, r1
    497c:	10 f4       	brcc	.+4      	; 0x4982 <malloc+0x12>
    497e:	82 e0       	ldi	r24, 0x02	; 2
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	e0 91 57 16 	lds	r30, 0x1657	; 0x801657 <__flp>
    4986:	f0 91 58 16 	lds	r31, 0x1658	; 0x801658 <__flp+0x1>
    498a:	20 e0       	ldi	r18, 0x00	; 0
    498c:	30 e0       	ldi	r19, 0x00	; 0
    498e:	a0 e0       	ldi	r26, 0x00	; 0
    4990:	b0 e0       	ldi	r27, 0x00	; 0
    4992:	30 97       	sbiw	r30, 0x00	; 0
    4994:	19 f1       	breq	.+70     	; 0x49dc <malloc+0x6c>
    4996:	40 81       	ld	r20, Z
    4998:	51 81       	ldd	r21, Z+1	; 0x01
    499a:	02 81       	ldd	r16, Z+2	; 0x02
    499c:	13 81       	ldd	r17, Z+3	; 0x03
    499e:	48 17       	cp	r20, r24
    49a0:	59 07       	cpc	r21, r25
    49a2:	c8 f0       	brcs	.+50     	; 0x49d6 <malloc+0x66>
    49a4:	84 17       	cp	r24, r20
    49a6:	95 07       	cpc	r25, r21
    49a8:	69 f4       	brne	.+26     	; 0x49c4 <malloc+0x54>
    49aa:	10 97       	sbiw	r26, 0x00	; 0
    49ac:	31 f0       	breq	.+12     	; 0x49ba <malloc+0x4a>
    49ae:	12 96       	adiw	r26, 0x02	; 2
    49b0:	0c 93       	st	X, r16
    49b2:	12 97       	sbiw	r26, 0x02	; 2
    49b4:	13 96       	adiw	r26, 0x03	; 3
    49b6:	1c 93       	st	X, r17
    49b8:	27 c0       	rjmp	.+78     	; 0x4a08 <malloc+0x98>
    49ba:	00 93 57 16 	sts	0x1657, r16	; 0x801657 <__flp>
    49be:	10 93 58 16 	sts	0x1658, r17	; 0x801658 <__flp+0x1>
    49c2:	22 c0       	rjmp	.+68     	; 0x4a08 <malloc+0x98>
    49c4:	21 15       	cp	r18, r1
    49c6:	31 05       	cpc	r19, r1
    49c8:	19 f0       	breq	.+6      	; 0x49d0 <malloc+0x60>
    49ca:	42 17       	cp	r20, r18
    49cc:	53 07       	cpc	r21, r19
    49ce:	18 f4       	brcc	.+6      	; 0x49d6 <malloc+0x66>
    49d0:	9a 01       	movw	r18, r20
    49d2:	bd 01       	movw	r22, r26
    49d4:	ef 01       	movw	r28, r30
    49d6:	df 01       	movw	r26, r30
    49d8:	f8 01       	movw	r30, r16
    49da:	db cf       	rjmp	.-74     	; 0x4992 <malloc+0x22>
    49dc:	21 15       	cp	r18, r1
    49de:	31 05       	cpc	r19, r1
    49e0:	f9 f0       	breq	.+62     	; 0x4a20 <malloc+0xb0>
    49e2:	28 1b       	sub	r18, r24
    49e4:	39 0b       	sbc	r19, r25
    49e6:	24 30       	cpi	r18, 0x04	; 4
    49e8:	31 05       	cpc	r19, r1
    49ea:	80 f4       	brcc	.+32     	; 0x4a0c <malloc+0x9c>
    49ec:	8a 81       	ldd	r24, Y+2	; 0x02
    49ee:	9b 81       	ldd	r25, Y+3	; 0x03
    49f0:	61 15       	cp	r22, r1
    49f2:	71 05       	cpc	r23, r1
    49f4:	21 f0       	breq	.+8      	; 0x49fe <malloc+0x8e>
    49f6:	fb 01       	movw	r30, r22
    49f8:	93 83       	std	Z+3, r25	; 0x03
    49fa:	82 83       	std	Z+2, r24	; 0x02
    49fc:	04 c0       	rjmp	.+8      	; 0x4a06 <malloc+0x96>
    49fe:	90 93 58 16 	sts	0x1658, r25	; 0x801658 <__flp+0x1>
    4a02:	80 93 57 16 	sts	0x1657, r24	; 0x801657 <__flp>
    4a06:	fe 01       	movw	r30, r28
    4a08:	32 96       	adiw	r30, 0x02	; 2
    4a0a:	44 c0       	rjmp	.+136    	; 0x4a94 <malloc+0x124>
    4a0c:	fe 01       	movw	r30, r28
    4a0e:	e2 0f       	add	r30, r18
    4a10:	f3 1f       	adc	r31, r19
    4a12:	81 93       	st	Z+, r24
    4a14:	91 93       	st	Z+, r25
    4a16:	22 50       	subi	r18, 0x02	; 2
    4a18:	31 09       	sbc	r19, r1
    4a1a:	39 83       	std	Y+1, r19	; 0x01
    4a1c:	28 83       	st	Y, r18
    4a1e:	3a c0       	rjmp	.+116    	; 0x4a94 <malloc+0x124>
    4a20:	20 91 55 16 	lds	r18, 0x1655	; 0x801655 <__brkval>
    4a24:	30 91 56 16 	lds	r19, 0x1656	; 0x801656 <__brkval+0x1>
    4a28:	23 2b       	or	r18, r19
    4a2a:	41 f4       	brne	.+16     	; 0x4a3c <malloc+0xcc>
    4a2c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    4a30:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    4a34:	30 93 56 16 	sts	0x1656, r19	; 0x801656 <__brkval+0x1>
    4a38:	20 93 55 16 	sts	0x1655, r18	; 0x801655 <__brkval>
    4a3c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    4a40:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    4a44:	21 15       	cp	r18, r1
    4a46:	31 05       	cpc	r19, r1
    4a48:	41 f4       	brne	.+16     	; 0x4a5a <malloc+0xea>
    4a4a:	2d b7       	in	r18, 0x3d	; 61
    4a4c:	3e b7       	in	r19, 0x3e	; 62
    4a4e:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    4a52:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    4a56:	24 1b       	sub	r18, r20
    4a58:	35 0b       	sbc	r19, r21
    4a5a:	e0 91 55 16 	lds	r30, 0x1655	; 0x801655 <__brkval>
    4a5e:	f0 91 56 16 	lds	r31, 0x1656	; 0x801656 <__brkval+0x1>
    4a62:	e2 17       	cp	r30, r18
    4a64:	f3 07       	cpc	r31, r19
    4a66:	a0 f4       	brcc	.+40     	; 0x4a90 <malloc+0x120>
    4a68:	2e 1b       	sub	r18, r30
    4a6a:	3f 0b       	sbc	r19, r31
    4a6c:	28 17       	cp	r18, r24
    4a6e:	39 07       	cpc	r19, r25
    4a70:	78 f0       	brcs	.+30     	; 0x4a90 <malloc+0x120>
    4a72:	ac 01       	movw	r20, r24
    4a74:	4e 5f       	subi	r20, 0xFE	; 254
    4a76:	5f 4f       	sbci	r21, 0xFF	; 255
    4a78:	24 17       	cp	r18, r20
    4a7a:	35 07       	cpc	r19, r21
    4a7c:	48 f0       	brcs	.+18     	; 0x4a90 <malloc+0x120>
    4a7e:	4e 0f       	add	r20, r30
    4a80:	5f 1f       	adc	r21, r31
    4a82:	50 93 56 16 	sts	0x1656, r21	; 0x801656 <__brkval+0x1>
    4a86:	40 93 55 16 	sts	0x1655, r20	; 0x801655 <__brkval>
    4a8a:	81 93       	st	Z+, r24
    4a8c:	91 93       	st	Z+, r25
    4a8e:	02 c0       	rjmp	.+4      	; 0x4a94 <malloc+0x124>
    4a90:	e0 e0       	ldi	r30, 0x00	; 0
    4a92:	f0 e0       	ldi	r31, 0x00	; 0
    4a94:	cf 01       	movw	r24, r30
    4a96:	df 91       	pop	r29
    4a98:	cf 91       	pop	r28
    4a9a:	1f 91       	pop	r17
    4a9c:	0f 91       	pop	r16
    4a9e:	08 95       	ret

00004aa0 <free>:
    4aa0:	cf 93       	push	r28
    4aa2:	df 93       	push	r29
    4aa4:	00 97       	sbiw	r24, 0x00	; 0
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <free+0xa>
    4aa8:	81 c0       	rjmp	.+258    	; 0x4bac <free+0x10c>
    4aaa:	fc 01       	movw	r30, r24
    4aac:	32 97       	sbiw	r30, 0x02	; 2
    4aae:	13 82       	std	Z+3, r1	; 0x03
    4ab0:	12 82       	std	Z+2, r1	; 0x02
    4ab2:	a0 91 57 16 	lds	r26, 0x1657	; 0x801657 <__flp>
    4ab6:	b0 91 58 16 	lds	r27, 0x1658	; 0x801658 <__flp+0x1>
    4aba:	10 97       	sbiw	r26, 0x00	; 0
    4abc:	81 f4       	brne	.+32     	; 0x4ade <free+0x3e>
    4abe:	20 81       	ld	r18, Z
    4ac0:	31 81       	ldd	r19, Z+1	; 0x01
    4ac2:	82 0f       	add	r24, r18
    4ac4:	93 1f       	adc	r25, r19
    4ac6:	20 91 55 16 	lds	r18, 0x1655	; 0x801655 <__brkval>
    4aca:	30 91 56 16 	lds	r19, 0x1656	; 0x801656 <__brkval+0x1>
    4ace:	28 17       	cp	r18, r24
    4ad0:	39 07       	cpc	r19, r25
    4ad2:	51 f5       	brne	.+84     	; 0x4b28 <free+0x88>
    4ad4:	f0 93 56 16 	sts	0x1656, r31	; 0x801656 <__brkval+0x1>
    4ad8:	e0 93 55 16 	sts	0x1655, r30	; 0x801655 <__brkval>
    4adc:	67 c0       	rjmp	.+206    	; 0x4bac <free+0x10c>
    4ade:	ed 01       	movw	r28, r26
    4ae0:	20 e0       	ldi	r18, 0x00	; 0
    4ae2:	30 e0       	ldi	r19, 0x00	; 0
    4ae4:	ce 17       	cp	r28, r30
    4ae6:	df 07       	cpc	r29, r31
    4ae8:	40 f4       	brcc	.+16     	; 0x4afa <free+0x5a>
    4aea:	4a 81       	ldd	r20, Y+2	; 0x02
    4aec:	5b 81       	ldd	r21, Y+3	; 0x03
    4aee:	9e 01       	movw	r18, r28
    4af0:	41 15       	cp	r20, r1
    4af2:	51 05       	cpc	r21, r1
    4af4:	f1 f0       	breq	.+60     	; 0x4b32 <free+0x92>
    4af6:	ea 01       	movw	r28, r20
    4af8:	f5 cf       	rjmp	.-22     	; 0x4ae4 <free+0x44>
    4afa:	d3 83       	std	Z+3, r29	; 0x03
    4afc:	c2 83       	std	Z+2, r28	; 0x02
    4afe:	40 81       	ld	r20, Z
    4b00:	51 81       	ldd	r21, Z+1	; 0x01
    4b02:	84 0f       	add	r24, r20
    4b04:	95 1f       	adc	r25, r21
    4b06:	c8 17       	cp	r28, r24
    4b08:	d9 07       	cpc	r29, r25
    4b0a:	59 f4       	brne	.+22     	; 0x4b22 <free+0x82>
    4b0c:	88 81       	ld	r24, Y
    4b0e:	99 81       	ldd	r25, Y+1	; 0x01
    4b10:	84 0f       	add	r24, r20
    4b12:	95 1f       	adc	r25, r21
    4b14:	02 96       	adiw	r24, 0x02	; 2
    4b16:	91 83       	std	Z+1, r25	; 0x01
    4b18:	80 83       	st	Z, r24
    4b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b1e:	93 83       	std	Z+3, r25	; 0x03
    4b20:	82 83       	std	Z+2, r24	; 0x02
    4b22:	21 15       	cp	r18, r1
    4b24:	31 05       	cpc	r19, r1
    4b26:	29 f4       	brne	.+10     	; 0x4b32 <free+0x92>
    4b28:	f0 93 58 16 	sts	0x1658, r31	; 0x801658 <__flp+0x1>
    4b2c:	e0 93 57 16 	sts	0x1657, r30	; 0x801657 <__flp>
    4b30:	3d c0       	rjmp	.+122    	; 0x4bac <free+0x10c>
    4b32:	e9 01       	movw	r28, r18
    4b34:	fb 83       	std	Y+3, r31	; 0x03
    4b36:	ea 83       	std	Y+2, r30	; 0x02
    4b38:	49 91       	ld	r20, Y+
    4b3a:	59 91       	ld	r21, Y+
    4b3c:	c4 0f       	add	r28, r20
    4b3e:	d5 1f       	adc	r29, r21
    4b40:	ec 17       	cp	r30, r28
    4b42:	fd 07       	cpc	r31, r29
    4b44:	61 f4       	brne	.+24     	; 0x4b5e <free+0xbe>
    4b46:	80 81       	ld	r24, Z
    4b48:	91 81       	ldd	r25, Z+1	; 0x01
    4b4a:	84 0f       	add	r24, r20
    4b4c:	95 1f       	adc	r25, r21
    4b4e:	02 96       	adiw	r24, 0x02	; 2
    4b50:	e9 01       	movw	r28, r18
    4b52:	99 83       	std	Y+1, r25	; 0x01
    4b54:	88 83       	st	Y, r24
    4b56:	82 81       	ldd	r24, Z+2	; 0x02
    4b58:	93 81       	ldd	r25, Z+3	; 0x03
    4b5a:	9b 83       	std	Y+3, r25	; 0x03
    4b5c:	8a 83       	std	Y+2, r24	; 0x02
    4b5e:	e0 e0       	ldi	r30, 0x00	; 0
    4b60:	f0 e0       	ldi	r31, 0x00	; 0
    4b62:	12 96       	adiw	r26, 0x02	; 2
    4b64:	8d 91       	ld	r24, X+
    4b66:	9c 91       	ld	r25, X
    4b68:	13 97       	sbiw	r26, 0x03	; 3
    4b6a:	00 97       	sbiw	r24, 0x00	; 0
    4b6c:	19 f0       	breq	.+6      	; 0x4b74 <free+0xd4>
    4b6e:	fd 01       	movw	r30, r26
    4b70:	dc 01       	movw	r26, r24
    4b72:	f7 cf       	rjmp	.-18     	; 0x4b62 <free+0xc2>
    4b74:	8d 91       	ld	r24, X+
    4b76:	9c 91       	ld	r25, X
    4b78:	11 97       	sbiw	r26, 0x01	; 1
    4b7a:	9d 01       	movw	r18, r26
    4b7c:	2e 5f       	subi	r18, 0xFE	; 254
    4b7e:	3f 4f       	sbci	r19, 0xFF	; 255
    4b80:	82 0f       	add	r24, r18
    4b82:	93 1f       	adc	r25, r19
    4b84:	20 91 55 16 	lds	r18, 0x1655	; 0x801655 <__brkval>
    4b88:	30 91 56 16 	lds	r19, 0x1656	; 0x801656 <__brkval+0x1>
    4b8c:	28 17       	cp	r18, r24
    4b8e:	39 07       	cpc	r19, r25
    4b90:	69 f4       	brne	.+26     	; 0x4bac <free+0x10c>
    4b92:	30 97       	sbiw	r30, 0x00	; 0
    4b94:	29 f4       	brne	.+10     	; 0x4ba0 <free+0x100>
    4b96:	10 92 58 16 	sts	0x1658, r1	; 0x801658 <__flp+0x1>
    4b9a:	10 92 57 16 	sts	0x1657, r1	; 0x801657 <__flp>
    4b9e:	02 c0       	rjmp	.+4      	; 0x4ba4 <free+0x104>
    4ba0:	13 82       	std	Z+3, r1	; 0x03
    4ba2:	12 82       	std	Z+2, r1	; 0x02
    4ba4:	b0 93 56 16 	sts	0x1656, r27	; 0x801656 <__brkval+0x1>
    4ba8:	a0 93 55 16 	sts	0x1655, r26	; 0x801655 <__brkval>
    4bac:	df 91       	pop	r29
    4bae:	cf 91       	pop	r28
    4bb0:	08 95       	ret

00004bb2 <abort>:
    4bb2:	81 e0       	ldi	r24, 0x01	; 1
    4bb4:	90 e0       	ldi	r25, 0x00	; 0
    4bb6:	f8 94       	cli
    4bb8:	7d c3       	rjmp	.+1786   	; 0x52b4 <_exit>

00004bba <memcpy>:
    4bba:	fb 01       	movw	r30, r22
    4bbc:	dc 01       	movw	r26, r24
    4bbe:	02 c0       	rjmp	.+4      	; 0x4bc4 <memcpy+0xa>
    4bc0:	01 90       	ld	r0, Z+
    4bc2:	0d 92       	st	X+, r0
    4bc4:	41 50       	subi	r20, 0x01	; 1
    4bc6:	50 40       	sbci	r21, 0x00	; 0
    4bc8:	d8 f7       	brcc	.-10     	; 0x4bc0 <memcpy+0x6>
    4bca:	08 95       	ret

00004bcc <memset>:
    4bcc:	dc 01       	movw	r26, r24
    4bce:	01 c0       	rjmp	.+2      	; 0x4bd2 <memset+0x6>
    4bd0:	6d 93       	st	X+, r22
    4bd2:	41 50       	subi	r20, 0x01	; 1
    4bd4:	50 40       	sbci	r21, 0x00	; 0
    4bd6:	e0 f7       	brcc	.-8      	; 0x4bd0 <memset+0x4>
    4bd8:	08 95       	ret

00004bda <strcasestr>:
    4bda:	fb 01       	movw	r30, r22
    4bdc:	51 91       	ld	r21, Z+
    4bde:	55 23       	and	r21, r21
    4be0:	b1 f0       	breq	.+44     	; 0x4c0e <strcasestr+0x34>
    4be2:	bf 01       	movw	r22, r30
    4be4:	dc 01       	movw	r26, r24
    4be6:	05 2e       	mov	r0, r21
    4be8:	4d 91       	ld	r20, X+
    4bea:	44 23       	and	r20, r20
    4bec:	69 f0       	breq	.+26     	; 0x4c08 <strcasestr+0x2e>
    4bee:	10 d0       	rcall	.+32     	; 0x4c10 <strcasestr+0x36>
    4bf0:	d9 f7       	brne	.-10     	; 0x4be8 <strcasestr+0xe>
    4bf2:	cd 01       	movw	r24, r26
    4bf4:	01 90       	ld	r0, Z+
    4bf6:	00 20       	and	r0, r0
    4bf8:	49 f0       	breq	.+18     	; 0x4c0c <strcasestr+0x32>
    4bfa:	4d 91       	ld	r20, X+
    4bfc:	41 11       	cpse	r20, r1
    4bfe:	08 d0       	rcall	.+16     	; 0x4c10 <strcasestr+0x36>
    4c00:	c9 f3       	breq	.-14     	; 0x4bf4 <strcasestr+0x1a>
    4c02:	fb 01       	movw	r30, r22
    4c04:	41 11       	cpse	r20, r1
    4c06:	ee cf       	rjmp	.-36     	; 0x4be4 <strcasestr+0xa>
    4c08:	81 e0       	ldi	r24, 0x01	; 1
    4c0a:	90 e0       	ldi	r25, 0x00	; 0
    4c0c:	01 97       	sbiw	r24, 0x01	; 1
    4c0e:	08 95       	ret
    4c10:	40 25       	eor	r20, r0
    4c12:	39 f0       	breq	.+14     	; 0x4c22 <strcasestr+0x48>
    4c14:	40 32       	cpi	r20, 0x20	; 32
    4c16:	29 f4       	brne	.+10     	; 0x4c22 <strcasestr+0x48>
    4c18:	40 29       	or	r20, r0
    4c1a:	4b 57       	subi	r20, 0x7B	; 123
    4c1c:	46 5e       	subi	r20, 0xE6	; 230
    4c1e:	08 f0       	brcs	.+2      	; 0x4c22 <strcasestr+0x48>
    4c20:	18 94       	sez
    4c22:	08 95       	ret

00004c24 <strcat>:
    4c24:	fb 01       	movw	r30, r22
    4c26:	dc 01       	movw	r26, r24
    4c28:	0d 90       	ld	r0, X+
    4c2a:	00 20       	and	r0, r0
    4c2c:	e9 f7       	brne	.-6      	; 0x4c28 <strcat+0x4>
    4c2e:	11 97       	sbiw	r26, 0x01	; 1
    4c30:	01 90       	ld	r0, Z+
    4c32:	0d 92       	st	X+, r0
    4c34:	00 20       	and	r0, r0
    4c36:	e1 f7       	brne	.-8      	; 0x4c30 <strcat+0xc>
    4c38:	08 95       	ret

00004c3a <strcpy>:
    4c3a:	fb 01       	movw	r30, r22
    4c3c:	dc 01       	movw	r26, r24
    4c3e:	01 90       	ld	r0, Z+
    4c40:	0d 92       	st	X+, r0
    4c42:	00 20       	and	r0, r0
    4c44:	e1 f7       	brne	.-8      	; 0x4c3e <strcpy+0x4>
    4c46:	08 95       	ret

00004c48 <strncasecmp>:
    4c48:	fb 01       	movw	r30, r22
    4c4a:	dc 01       	movw	r26, r24
    4c4c:	41 50       	subi	r20, 0x01	; 1
    4c4e:	50 40       	sbci	r21, 0x00	; 0
    4c50:	88 f0       	brcs	.+34     	; 0x4c74 <strncasecmp+0x2c>
    4c52:	8d 91       	ld	r24, X+
    4c54:	81 34       	cpi	r24, 0x41	; 65
    4c56:	1c f0       	brlt	.+6      	; 0x4c5e <strncasecmp+0x16>
    4c58:	8b 35       	cpi	r24, 0x5B	; 91
    4c5a:	0c f4       	brge	.+2      	; 0x4c5e <strncasecmp+0x16>
    4c5c:	80 5e       	subi	r24, 0xE0	; 224
    4c5e:	61 91       	ld	r22, Z+
    4c60:	61 34       	cpi	r22, 0x41	; 65
    4c62:	1c f0       	brlt	.+6      	; 0x4c6a <strncasecmp+0x22>
    4c64:	6b 35       	cpi	r22, 0x5B	; 91
    4c66:	0c f4       	brge	.+2      	; 0x4c6a <strncasecmp+0x22>
    4c68:	60 5e       	subi	r22, 0xE0	; 224
    4c6a:	86 1b       	sub	r24, r22
    4c6c:	61 11       	cpse	r22, r1
    4c6e:	71 f3       	breq	.-36     	; 0x4c4c <strncasecmp+0x4>
    4c70:	99 0b       	sbc	r25, r25
    4c72:	08 95       	ret
    4c74:	88 1b       	sub	r24, r24
    4c76:	fc cf       	rjmp	.-8      	; 0x4c70 <strncasecmp+0x28>

00004c78 <printf>:
    4c78:	cf 93       	push	r28
    4c7a:	df 93       	push	r29
    4c7c:	cd b7       	in	r28, 0x3d	; 61
    4c7e:	de b7       	in	r29, 0x3e	; 62
    4c80:	ae 01       	movw	r20, r28
    4c82:	4a 5f       	subi	r20, 0xFA	; 250
    4c84:	5f 4f       	sbci	r21, 0xFF	; 255
    4c86:	fa 01       	movw	r30, r20
    4c88:	61 91       	ld	r22, Z+
    4c8a:	71 91       	ld	r23, Z+
    4c8c:	af 01       	movw	r20, r30
    4c8e:	80 91 5b 16 	lds	r24, 0x165B	; 0x80165b <__iob+0x2>
    4c92:	90 91 5c 16 	lds	r25, 0x165C	; 0x80165c <__iob+0x3>
    4c96:	61 d0       	rcall	.+194    	; 0x4d5a <vfprintf>
    4c98:	df 91       	pop	r29
    4c9a:	cf 91       	pop	r28
    4c9c:	08 95       	ret

00004c9e <puts>:
    4c9e:	0f 93       	push	r16
    4ca0:	1f 93       	push	r17
    4ca2:	cf 93       	push	r28
    4ca4:	df 93       	push	r29
    4ca6:	e0 91 5b 16 	lds	r30, 0x165B	; 0x80165b <__iob+0x2>
    4caa:	f0 91 5c 16 	lds	r31, 0x165C	; 0x80165c <__iob+0x3>
    4cae:	23 81       	ldd	r18, Z+3	; 0x03
    4cb0:	21 ff       	sbrs	r18, 1
    4cb2:	1b c0       	rjmp	.+54     	; 0x4cea <puts+0x4c>
    4cb4:	8c 01       	movw	r16, r24
    4cb6:	d0 e0       	ldi	r29, 0x00	; 0
    4cb8:	c0 e0       	ldi	r28, 0x00	; 0
    4cba:	f8 01       	movw	r30, r16
    4cbc:	81 91       	ld	r24, Z+
    4cbe:	8f 01       	movw	r16, r30
    4cc0:	60 91 5b 16 	lds	r22, 0x165B	; 0x80165b <__iob+0x2>
    4cc4:	70 91 5c 16 	lds	r23, 0x165C	; 0x80165c <__iob+0x3>
    4cc8:	db 01       	movw	r26, r22
    4cca:	18 96       	adiw	r26, 0x08	; 8
    4ccc:	ed 91       	ld	r30, X+
    4cce:	fc 91       	ld	r31, X
    4cd0:	19 97       	sbiw	r26, 0x09	; 9
    4cd2:	88 23       	and	r24, r24
    4cd4:	31 f0       	breq	.+12     	; 0x4ce2 <puts+0x44>
    4cd6:	19 95       	eicall
    4cd8:	89 2b       	or	r24, r25
    4cda:	79 f3       	breq	.-34     	; 0x4cba <puts+0x1c>
    4cdc:	df ef       	ldi	r29, 0xFF	; 255
    4cde:	cf ef       	ldi	r28, 0xFF	; 255
    4ce0:	ec cf       	rjmp	.-40     	; 0x4cba <puts+0x1c>
    4ce2:	8a e0       	ldi	r24, 0x0A	; 10
    4ce4:	19 95       	eicall
    4ce6:	89 2b       	or	r24, r25
    4ce8:	19 f0       	breq	.+6      	; 0x4cf0 <puts+0x52>
    4cea:	8f ef       	ldi	r24, 0xFF	; 255
    4cec:	9f ef       	ldi	r25, 0xFF	; 255
    4cee:	02 c0       	rjmp	.+4      	; 0x4cf4 <puts+0x56>
    4cf0:	8d 2f       	mov	r24, r29
    4cf2:	9c 2f       	mov	r25, r28
    4cf4:	df 91       	pop	r29
    4cf6:	cf 91       	pop	r28
    4cf8:	1f 91       	pop	r17
    4cfa:	0f 91       	pop	r16
    4cfc:	08 95       	ret

00004cfe <sprintf>:
    4cfe:	0f 93       	push	r16
    4d00:	1f 93       	push	r17
    4d02:	cf 93       	push	r28
    4d04:	df 93       	push	r29
    4d06:	cd b7       	in	r28, 0x3d	; 61
    4d08:	de b7       	in	r29, 0x3e	; 62
    4d0a:	2e 97       	sbiw	r28, 0x0e	; 14
    4d0c:	0f b6       	in	r0, 0x3f	; 63
    4d0e:	f8 94       	cli
    4d10:	de bf       	out	0x3e, r29	; 62
    4d12:	0f be       	out	0x3f, r0	; 63
    4d14:	cd bf       	out	0x3d, r28	; 61
    4d16:	0e 89       	ldd	r16, Y+22	; 0x16
    4d18:	1f 89       	ldd	r17, Y+23	; 0x17
    4d1a:	86 e0       	ldi	r24, 0x06	; 6
    4d1c:	8c 83       	std	Y+4, r24	; 0x04
    4d1e:	1a 83       	std	Y+2, r17	; 0x02
    4d20:	09 83       	std	Y+1, r16	; 0x01
    4d22:	8f ef       	ldi	r24, 0xFF	; 255
    4d24:	9f e7       	ldi	r25, 0x7F	; 127
    4d26:	9e 83       	std	Y+6, r25	; 0x06
    4d28:	8d 83       	std	Y+5, r24	; 0x05
    4d2a:	ae 01       	movw	r20, r28
    4d2c:	46 5e       	subi	r20, 0xE6	; 230
    4d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    4d30:	68 8d       	ldd	r22, Y+24	; 0x18
    4d32:	79 8d       	ldd	r23, Y+25	; 0x19
    4d34:	ce 01       	movw	r24, r28
    4d36:	01 96       	adiw	r24, 0x01	; 1
    4d38:	10 d0       	rcall	.+32     	; 0x4d5a <vfprintf>
    4d3a:	ef 81       	ldd	r30, Y+7	; 0x07
    4d3c:	f8 85       	ldd	r31, Y+8	; 0x08
    4d3e:	e0 0f       	add	r30, r16
    4d40:	f1 1f       	adc	r31, r17
    4d42:	10 82       	st	Z, r1
    4d44:	2e 96       	adiw	r28, 0x0e	; 14
    4d46:	0f b6       	in	r0, 0x3f	; 63
    4d48:	f8 94       	cli
    4d4a:	de bf       	out	0x3e, r29	; 62
    4d4c:	0f be       	out	0x3f, r0	; 63
    4d4e:	cd bf       	out	0x3d, r28	; 61
    4d50:	df 91       	pop	r29
    4d52:	cf 91       	pop	r28
    4d54:	1f 91       	pop	r17
    4d56:	0f 91       	pop	r16
    4d58:	08 95       	ret

00004d5a <vfprintf>:
    4d5a:	2f 92       	push	r2
    4d5c:	3f 92       	push	r3
    4d5e:	4f 92       	push	r4
    4d60:	5f 92       	push	r5
    4d62:	6f 92       	push	r6
    4d64:	7f 92       	push	r7
    4d66:	8f 92       	push	r8
    4d68:	9f 92       	push	r9
    4d6a:	af 92       	push	r10
    4d6c:	bf 92       	push	r11
    4d6e:	cf 92       	push	r12
    4d70:	df 92       	push	r13
    4d72:	ef 92       	push	r14
    4d74:	ff 92       	push	r15
    4d76:	0f 93       	push	r16
    4d78:	1f 93       	push	r17
    4d7a:	cf 93       	push	r28
    4d7c:	df 93       	push	r29
    4d7e:	cd b7       	in	r28, 0x3d	; 61
    4d80:	de b7       	in	r29, 0x3e	; 62
    4d82:	2b 97       	sbiw	r28, 0x0b	; 11
    4d84:	0f b6       	in	r0, 0x3f	; 63
    4d86:	f8 94       	cli
    4d88:	de bf       	out	0x3e, r29	; 62
    4d8a:	0f be       	out	0x3f, r0	; 63
    4d8c:	cd bf       	out	0x3d, r28	; 61
    4d8e:	6c 01       	movw	r12, r24
    4d90:	7b 01       	movw	r14, r22
    4d92:	8a 01       	movw	r16, r20
    4d94:	fc 01       	movw	r30, r24
    4d96:	17 82       	std	Z+7, r1	; 0x07
    4d98:	16 82       	std	Z+6, r1	; 0x06
    4d9a:	83 81       	ldd	r24, Z+3	; 0x03
    4d9c:	81 ff       	sbrs	r24, 1
    4d9e:	bf c1       	rjmp	.+894    	; 0x511e <vfprintf+0x3c4>
    4da0:	ce 01       	movw	r24, r28
    4da2:	01 96       	adiw	r24, 0x01	; 1
    4da4:	3c 01       	movw	r6, r24
    4da6:	f6 01       	movw	r30, r12
    4da8:	93 81       	ldd	r25, Z+3	; 0x03
    4daa:	f7 01       	movw	r30, r14
    4dac:	93 fd       	sbrc	r25, 3
    4dae:	85 91       	lpm	r24, Z+
    4db0:	93 ff       	sbrs	r25, 3
    4db2:	81 91       	ld	r24, Z+
    4db4:	7f 01       	movw	r14, r30
    4db6:	88 23       	and	r24, r24
    4db8:	09 f4       	brne	.+2      	; 0x4dbc <vfprintf+0x62>
    4dba:	ad c1       	rjmp	.+858    	; 0x5116 <vfprintf+0x3bc>
    4dbc:	85 32       	cpi	r24, 0x25	; 37
    4dbe:	39 f4       	brne	.+14     	; 0x4dce <vfprintf+0x74>
    4dc0:	93 fd       	sbrc	r25, 3
    4dc2:	85 91       	lpm	r24, Z+
    4dc4:	93 ff       	sbrs	r25, 3
    4dc6:	81 91       	ld	r24, Z+
    4dc8:	7f 01       	movw	r14, r30
    4dca:	85 32       	cpi	r24, 0x25	; 37
    4dcc:	21 f4       	brne	.+8      	; 0x4dd6 <vfprintf+0x7c>
    4dce:	b6 01       	movw	r22, r12
    4dd0:	90 e0       	ldi	r25, 0x00	; 0
    4dd2:	d6 d1       	rcall	.+940    	; 0x5180 <fputc>
    4dd4:	e8 cf       	rjmp	.-48     	; 0x4da6 <vfprintf+0x4c>
    4dd6:	91 2c       	mov	r9, r1
    4dd8:	21 2c       	mov	r2, r1
    4dda:	31 2c       	mov	r3, r1
    4ddc:	ff e1       	ldi	r31, 0x1F	; 31
    4dde:	f3 15       	cp	r31, r3
    4de0:	d8 f0       	brcs	.+54     	; 0x4e18 <vfprintf+0xbe>
    4de2:	8b 32       	cpi	r24, 0x2B	; 43
    4de4:	79 f0       	breq	.+30     	; 0x4e04 <vfprintf+0xaa>
    4de6:	38 f4       	brcc	.+14     	; 0x4df6 <vfprintf+0x9c>
    4de8:	80 32       	cpi	r24, 0x20	; 32
    4dea:	79 f0       	breq	.+30     	; 0x4e0a <vfprintf+0xb0>
    4dec:	83 32       	cpi	r24, 0x23	; 35
    4dee:	a1 f4       	brne	.+40     	; 0x4e18 <vfprintf+0xbe>
    4df0:	23 2d       	mov	r18, r3
    4df2:	20 61       	ori	r18, 0x10	; 16
    4df4:	1d c0       	rjmp	.+58     	; 0x4e30 <vfprintf+0xd6>
    4df6:	8d 32       	cpi	r24, 0x2D	; 45
    4df8:	61 f0       	breq	.+24     	; 0x4e12 <vfprintf+0xb8>
    4dfa:	80 33       	cpi	r24, 0x30	; 48
    4dfc:	69 f4       	brne	.+26     	; 0x4e18 <vfprintf+0xbe>
    4dfe:	23 2d       	mov	r18, r3
    4e00:	21 60       	ori	r18, 0x01	; 1
    4e02:	16 c0       	rjmp	.+44     	; 0x4e30 <vfprintf+0xd6>
    4e04:	83 2d       	mov	r24, r3
    4e06:	82 60       	ori	r24, 0x02	; 2
    4e08:	38 2e       	mov	r3, r24
    4e0a:	e3 2d       	mov	r30, r3
    4e0c:	e4 60       	ori	r30, 0x04	; 4
    4e0e:	3e 2e       	mov	r3, r30
    4e10:	2a c0       	rjmp	.+84     	; 0x4e66 <vfprintf+0x10c>
    4e12:	f3 2d       	mov	r31, r3
    4e14:	f8 60       	ori	r31, 0x08	; 8
    4e16:	1d c0       	rjmp	.+58     	; 0x4e52 <vfprintf+0xf8>
    4e18:	37 fc       	sbrc	r3, 7
    4e1a:	2d c0       	rjmp	.+90     	; 0x4e76 <vfprintf+0x11c>
    4e1c:	20 ed       	ldi	r18, 0xD0	; 208
    4e1e:	28 0f       	add	r18, r24
    4e20:	2a 30       	cpi	r18, 0x0A	; 10
    4e22:	40 f0       	brcs	.+16     	; 0x4e34 <vfprintf+0xda>
    4e24:	8e 32       	cpi	r24, 0x2E	; 46
    4e26:	b9 f4       	brne	.+46     	; 0x4e56 <vfprintf+0xfc>
    4e28:	36 fc       	sbrc	r3, 6
    4e2a:	75 c1       	rjmp	.+746    	; 0x5116 <vfprintf+0x3bc>
    4e2c:	23 2d       	mov	r18, r3
    4e2e:	20 64       	ori	r18, 0x40	; 64
    4e30:	32 2e       	mov	r3, r18
    4e32:	19 c0       	rjmp	.+50     	; 0x4e66 <vfprintf+0x10c>
    4e34:	36 fe       	sbrs	r3, 6
    4e36:	06 c0       	rjmp	.+12     	; 0x4e44 <vfprintf+0xea>
    4e38:	8a e0       	ldi	r24, 0x0A	; 10
    4e3a:	98 9e       	mul	r9, r24
    4e3c:	20 0d       	add	r18, r0
    4e3e:	11 24       	eor	r1, r1
    4e40:	92 2e       	mov	r9, r18
    4e42:	11 c0       	rjmp	.+34     	; 0x4e66 <vfprintf+0x10c>
    4e44:	ea e0       	ldi	r30, 0x0A	; 10
    4e46:	2e 9e       	mul	r2, r30
    4e48:	20 0d       	add	r18, r0
    4e4a:	11 24       	eor	r1, r1
    4e4c:	22 2e       	mov	r2, r18
    4e4e:	f3 2d       	mov	r31, r3
    4e50:	f0 62       	ori	r31, 0x20	; 32
    4e52:	3f 2e       	mov	r3, r31
    4e54:	08 c0       	rjmp	.+16     	; 0x4e66 <vfprintf+0x10c>
    4e56:	8c 36       	cpi	r24, 0x6C	; 108
    4e58:	21 f4       	brne	.+8      	; 0x4e62 <vfprintf+0x108>
    4e5a:	83 2d       	mov	r24, r3
    4e5c:	80 68       	ori	r24, 0x80	; 128
    4e5e:	38 2e       	mov	r3, r24
    4e60:	02 c0       	rjmp	.+4      	; 0x4e66 <vfprintf+0x10c>
    4e62:	88 36       	cpi	r24, 0x68	; 104
    4e64:	41 f4       	brne	.+16     	; 0x4e76 <vfprintf+0x11c>
    4e66:	f7 01       	movw	r30, r14
    4e68:	93 fd       	sbrc	r25, 3
    4e6a:	85 91       	lpm	r24, Z+
    4e6c:	93 ff       	sbrs	r25, 3
    4e6e:	81 91       	ld	r24, Z+
    4e70:	7f 01       	movw	r14, r30
    4e72:	81 11       	cpse	r24, r1
    4e74:	b3 cf       	rjmp	.-154    	; 0x4ddc <vfprintf+0x82>
    4e76:	98 2f       	mov	r25, r24
    4e78:	9f 7d       	andi	r25, 0xDF	; 223
    4e7a:	95 54       	subi	r25, 0x45	; 69
    4e7c:	93 30       	cpi	r25, 0x03	; 3
    4e7e:	28 f4       	brcc	.+10     	; 0x4e8a <vfprintf+0x130>
    4e80:	0c 5f       	subi	r16, 0xFC	; 252
    4e82:	1f 4f       	sbci	r17, 0xFF	; 255
    4e84:	9f e3       	ldi	r25, 0x3F	; 63
    4e86:	99 83       	std	Y+1, r25	; 0x01
    4e88:	0d c0       	rjmp	.+26     	; 0x4ea4 <vfprintf+0x14a>
    4e8a:	83 36       	cpi	r24, 0x63	; 99
    4e8c:	31 f0       	breq	.+12     	; 0x4e9a <vfprintf+0x140>
    4e8e:	83 37       	cpi	r24, 0x73	; 115
    4e90:	71 f0       	breq	.+28     	; 0x4eae <vfprintf+0x154>
    4e92:	83 35       	cpi	r24, 0x53	; 83
    4e94:	09 f0       	breq	.+2      	; 0x4e98 <vfprintf+0x13e>
    4e96:	55 c0       	rjmp	.+170    	; 0x4f42 <vfprintf+0x1e8>
    4e98:	20 c0       	rjmp	.+64     	; 0x4eda <vfprintf+0x180>
    4e9a:	f8 01       	movw	r30, r16
    4e9c:	80 81       	ld	r24, Z
    4e9e:	89 83       	std	Y+1, r24	; 0x01
    4ea0:	0e 5f       	subi	r16, 0xFE	; 254
    4ea2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ea4:	88 24       	eor	r8, r8
    4ea6:	83 94       	inc	r8
    4ea8:	91 2c       	mov	r9, r1
    4eaa:	53 01       	movw	r10, r6
    4eac:	12 c0       	rjmp	.+36     	; 0x4ed2 <vfprintf+0x178>
    4eae:	28 01       	movw	r4, r16
    4eb0:	f2 e0       	ldi	r31, 0x02	; 2
    4eb2:	4f 0e       	add	r4, r31
    4eb4:	51 1c       	adc	r5, r1
    4eb6:	f8 01       	movw	r30, r16
    4eb8:	a0 80       	ld	r10, Z
    4eba:	b1 80       	ldd	r11, Z+1	; 0x01
    4ebc:	36 fe       	sbrs	r3, 6
    4ebe:	03 c0       	rjmp	.+6      	; 0x4ec6 <vfprintf+0x16c>
    4ec0:	69 2d       	mov	r22, r9
    4ec2:	70 e0       	ldi	r23, 0x00	; 0
    4ec4:	02 c0       	rjmp	.+4      	; 0x4eca <vfprintf+0x170>
    4ec6:	6f ef       	ldi	r22, 0xFF	; 255
    4ec8:	7f ef       	ldi	r23, 0xFF	; 255
    4eca:	c5 01       	movw	r24, r10
    4ecc:	4e d1       	rcall	.+668    	; 0x516a <strnlen>
    4ece:	4c 01       	movw	r8, r24
    4ed0:	82 01       	movw	r16, r4
    4ed2:	f3 2d       	mov	r31, r3
    4ed4:	ff 77       	andi	r31, 0x7F	; 127
    4ed6:	3f 2e       	mov	r3, r31
    4ed8:	15 c0       	rjmp	.+42     	; 0x4f04 <vfprintf+0x1aa>
    4eda:	28 01       	movw	r4, r16
    4edc:	22 e0       	ldi	r18, 0x02	; 2
    4ede:	42 0e       	add	r4, r18
    4ee0:	51 1c       	adc	r5, r1
    4ee2:	f8 01       	movw	r30, r16
    4ee4:	a0 80       	ld	r10, Z
    4ee6:	b1 80       	ldd	r11, Z+1	; 0x01
    4ee8:	36 fe       	sbrs	r3, 6
    4eea:	03 c0       	rjmp	.+6      	; 0x4ef2 <vfprintf+0x198>
    4eec:	69 2d       	mov	r22, r9
    4eee:	70 e0       	ldi	r23, 0x00	; 0
    4ef0:	02 c0       	rjmp	.+4      	; 0x4ef6 <vfprintf+0x19c>
    4ef2:	6f ef       	ldi	r22, 0xFF	; 255
    4ef4:	7f ef       	ldi	r23, 0xFF	; 255
    4ef6:	c5 01       	movw	r24, r10
    4ef8:	2d d1       	rcall	.+602    	; 0x5154 <strnlen_P>
    4efa:	4c 01       	movw	r8, r24
    4efc:	f3 2d       	mov	r31, r3
    4efe:	f0 68       	ori	r31, 0x80	; 128
    4f00:	3f 2e       	mov	r3, r31
    4f02:	82 01       	movw	r16, r4
    4f04:	33 fc       	sbrc	r3, 3
    4f06:	19 c0       	rjmp	.+50     	; 0x4f3a <vfprintf+0x1e0>
    4f08:	82 2d       	mov	r24, r2
    4f0a:	90 e0       	ldi	r25, 0x00	; 0
    4f0c:	88 16       	cp	r8, r24
    4f0e:	99 06       	cpc	r9, r25
    4f10:	a0 f4       	brcc	.+40     	; 0x4f3a <vfprintf+0x1e0>
    4f12:	b6 01       	movw	r22, r12
    4f14:	80 e2       	ldi	r24, 0x20	; 32
    4f16:	90 e0       	ldi	r25, 0x00	; 0
    4f18:	33 d1       	rcall	.+614    	; 0x5180 <fputc>
    4f1a:	2a 94       	dec	r2
    4f1c:	f5 cf       	rjmp	.-22     	; 0x4f08 <vfprintf+0x1ae>
    4f1e:	f5 01       	movw	r30, r10
    4f20:	37 fc       	sbrc	r3, 7
    4f22:	85 91       	lpm	r24, Z+
    4f24:	37 fe       	sbrs	r3, 7
    4f26:	81 91       	ld	r24, Z+
    4f28:	5f 01       	movw	r10, r30
    4f2a:	b6 01       	movw	r22, r12
    4f2c:	90 e0       	ldi	r25, 0x00	; 0
    4f2e:	28 d1       	rcall	.+592    	; 0x5180 <fputc>
    4f30:	21 10       	cpse	r2, r1
    4f32:	2a 94       	dec	r2
    4f34:	21 e0       	ldi	r18, 0x01	; 1
    4f36:	82 1a       	sub	r8, r18
    4f38:	91 08       	sbc	r9, r1
    4f3a:	81 14       	cp	r8, r1
    4f3c:	91 04       	cpc	r9, r1
    4f3e:	79 f7       	brne	.-34     	; 0x4f1e <vfprintf+0x1c4>
    4f40:	e1 c0       	rjmp	.+450    	; 0x5104 <vfprintf+0x3aa>
    4f42:	84 36       	cpi	r24, 0x64	; 100
    4f44:	11 f0       	breq	.+4      	; 0x4f4a <vfprintf+0x1f0>
    4f46:	89 36       	cpi	r24, 0x69	; 105
    4f48:	39 f5       	brne	.+78     	; 0x4f98 <vfprintf+0x23e>
    4f4a:	f8 01       	movw	r30, r16
    4f4c:	37 fe       	sbrs	r3, 7
    4f4e:	07 c0       	rjmp	.+14     	; 0x4f5e <vfprintf+0x204>
    4f50:	60 81       	ld	r22, Z
    4f52:	71 81       	ldd	r23, Z+1	; 0x01
    4f54:	82 81       	ldd	r24, Z+2	; 0x02
    4f56:	93 81       	ldd	r25, Z+3	; 0x03
    4f58:	0c 5f       	subi	r16, 0xFC	; 252
    4f5a:	1f 4f       	sbci	r17, 0xFF	; 255
    4f5c:	08 c0       	rjmp	.+16     	; 0x4f6e <vfprintf+0x214>
    4f5e:	60 81       	ld	r22, Z
    4f60:	71 81       	ldd	r23, Z+1	; 0x01
    4f62:	07 2e       	mov	r0, r23
    4f64:	00 0c       	add	r0, r0
    4f66:	88 0b       	sbc	r24, r24
    4f68:	99 0b       	sbc	r25, r25
    4f6a:	0e 5f       	subi	r16, 0xFE	; 254
    4f6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4f6e:	f3 2d       	mov	r31, r3
    4f70:	ff 76       	andi	r31, 0x6F	; 111
    4f72:	3f 2e       	mov	r3, r31
    4f74:	97 ff       	sbrs	r25, 7
    4f76:	09 c0       	rjmp	.+18     	; 0x4f8a <vfprintf+0x230>
    4f78:	90 95       	com	r25
    4f7a:	80 95       	com	r24
    4f7c:	70 95       	com	r23
    4f7e:	61 95       	neg	r22
    4f80:	7f 4f       	sbci	r23, 0xFF	; 255
    4f82:	8f 4f       	sbci	r24, 0xFF	; 255
    4f84:	9f 4f       	sbci	r25, 0xFF	; 255
    4f86:	f0 68       	ori	r31, 0x80	; 128
    4f88:	3f 2e       	mov	r3, r31
    4f8a:	2a e0       	ldi	r18, 0x0A	; 10
    4f8c:	30 e0       	ldi	r19, 0x00	; 0
    4f8e:	a3 01       	movw	r20, r6
    4f90:	33 d1       	rcall	.+614    	; 0x51f8 <__ultoa_invert>
    4f92:	88 2e       	mov	r8, r24
    4f94:	86 18       	sub	r8, r6
    4f96:	44 c0       	rjmp	.+136    	; 0x5020 <vfprintf+0x2c6>
    4f98:	85 37       	cpi	r24, 0x75	; 117
    4f9a:	31 f4       	brne	.+12     	; 0x4fa8 <vfprintf+0x24e>
    4f9c:	23 2d       	mov	r18, r3
    4f9e:	2f 7e       	andi	r18, 0xEF	; 239
    4fa0:	b2 2e       	mov	r11, r18
    4fa2:	2a e0       	ldi	r18, 0x0A	; 10
    4fa4:	30 e0       	ldi	r19, 0x00	; 0
    4fa6:	25 c0       	rjmp	.+74     	; 0x4ff2 <vfprintf+0x298>
    4fa8:	93 2d       	mov	r25, r3
    4faa:	99 7f       	andi	r25, 0xF9	; 249
    4fac:	b9 2e       	mov	r11, r25
    4fae:	8f 36       	cpi	r24, 0x6F	; 111
    4fb0:	c1 f0       	breq	.+48     	; 0x4fe2 <vfprintf+0x288>
    4fb2:	18 f4       	brcc	.+6      	; 0x4fba <vfprintf+0x260>
    4fb4:	88 35       	cpi	r24, 0x58	; 88
    4fb6:	79 f0       	breq	.+30     	; 0x4fd6 <vfprintf+0x27c>
    4fb8:	ae c0       	rjmp	.+348    	; 0x5116 <vfprintf+0x3bc>
    4fba:	80 37       	cpi	r24, 0x70	; 112
    4fbc:	19 f0       	breq	.+6      	; 0x4fc4 <vfprintf+0x26a>
    4fbe:	88 37       	cpi	r24, 0x78	; 120
    4fc0:	21 f0       	breq	.+8      	; 0x4fca <vfprintf+0x270>
    4fc2:	a9 c0       	rjmp	.+338    	; 0x5116 <vfprintf+0x3bc>
    4fc4:	e9 2f       	mov	r30, r25
    4fc6:	e0 61       	ori	r30, 0x10	; 16
    4fc8:	be 2e       	mov	r11, r30
    4fca:	b4 fe       	sbrs	r11, 4
    4fcc:	0d c0       	rjmp	.+26     	; 0x4fe8 <vfprintf+0x28e>
    4fce:	fb 2d       	mov	r31, r11
    4fd0:	f4 60       	ori	r31, 0x04	; 4
    4fd2:	bf 2e       	mov	r11, r31
    4fd4:	09 c0       	rjmp	.+18     	; 0x4fe8 <vfprintf+0x28e>
    4fd6:	34 fe       	sbrs	r3, 4
    4fd8:	0a c0       	rjmp	.+20     	; 0x4fee <vfprintf+0x294>
    4fda:	29 2f       	mov	r18, r25
    4fdc:	26 60       	ori	r18, 0x06	; 6
    4fde:	b2 2e       	mov	r11, r18
    4fe0:	06 c0       	rjmp	.+12     	; 0x4fee <vfprintf+0x294>
    4fe2:	28 e0       	ldi	r18, 0x08	; 8
    4fe4:	30 e0       	ldi	r19, 0x00	; 0
    4fe6:	05 c0       	rjmp	.+10     	; 0x4ff2 <vfprintf+0x298>
    4fe8:	20 e1       	ldi	r18, 0x10	; 16
    4fea:	30 e0       	ldi	r19, 0x00	; 0
    4fec:	02 c0       	rjmp	.+4      	; 0x4ff2 <vfprintf+0x298>
    4fee:	20 e1       	ldi	r18, 0x10	; 16
    4ff0:	32 e0       	ldi	r19, 0x02	; 2
    4ff2:	f8 01       	movw	r30, r16
    4ff4:	b7 fe       	sbrs	r11, 7
    4ff6:	07 c0       	rjmp	.+14     	; 0x5006 <vfprintf+0x2ac>
    4ff8:	60 81       	ld	r22, Z
    4ffa:	71 81       	ldd	r23, Z+1	; 0x01
    4ffc:	82 81       	ldd	r24, Z+2	; 0x02
    4ffe:	93 81       	ldd	r25, Z+3	; 0x03
    5000:	0c 5f       	subi	r16, 0xFC	; 252
    5002:	1f 4f       	sbci	r17, 0xFF	; 255
    5004:	06 c0       	rjmp	.+12     	; 0x5012 <vfprintf+0x2b8>
    5006:	60 81       	ld	r22, Z
    5008:	71 81       	ldd	r23, Z+1	; 0x01
    500a:	80 e0       	ldi	r24, 0x00	; 0
    500c:	90 e0       	ldi	r25, 0x00	; 0
    500e:	0e 5f       	subi	r16, 0xFE	; 254
    5010:	1f 4f       	sbci	r17, 0xFF	; 255
    5012:	a3 01       	movw	r20, r6
    5014:	f1 d0       	rcall	.+482    	; 0x51f8 <__ultoa_invert>
    5016:	88 2e       	mov	r8, r24
    5018:	86 18       	sub	r8, r6
    501a:	fb 2d       	mov	r31, r11
    501c:	ff 77       	andi	r31, 0x7F	; 127
    501e:	3f 2e       	mov	r3, r31
    5020:	36 fe       	sbrs	r3, 6
    5022:	0d c0       	rjmp	.+26     	; 0x503e <vfprintf+0x2e4>
    5024:	23 2d       	mov	r18, r3
    5026:	2e 7f       	andi	r18, 0xFE	; 254
    5028:	a2 2e       	mov	r10, r18
    502a:	89 14       	cp	r8, r9
    502c:	58 f4       	brcc	.+22     	; 0x5044 <vfprintf+0x2ea>
    502e:	34 fe       	sbrs	r3, 4
    5030:	0b c0       	rjmp	.+22     	; 0x5048 <vfprintf+0x2ee>
    5032:	32 fc       	sbrc	r3, 2
    5034:	09 c0       	rjmp	.+18     	; 0x5048 <vfprintf+0x2ee>
    5036:	83 2d       	mov	r24, r3
    5038:	8e 7e       	andi	r24, 0xEE	; 238
    503a:	a8 2e       	mov	r10, r24
    503c:	05 c0       	rjmp	.+10     	; 0x5048 <vfprintf+0x2ee>
    503e:	b8 2c       	mov	r11, r8
    5040:	a3 2c       	mov	r10, r3
    5042:	03 c0       	rjmp	.+6      	; 0x504a <vfprintf+0x2f0>
    5044:	b8 2c       	mov	r11, r8
    5046:	01 c0       	rjmp	.+2      	; 0x504a <vfprintf+0x2f0>
    5048:	b9 2c       	mov	r11, r9
    504a:	a4 fe       	sbrs	r10, 4
    504c:	0f c0       	rjmp	.+30     	; 0x506c <vfprintf+0x312>
    504e:	fe 01       	movw	r30, r28
    5050:	e8 0d       	add	r30, r8
    5052:	f1 1d       	adc	r31, r1
    5054:	80 81       	ld	r24, Z
    5056:	80 33       	cpi	r24, 0x30	; 48
    5058:	21 f4       	brne	.+8      	; 0x5062 <vfprintf+0x308>
    505a:	9a 2d       	mov	r25, r10
    505c:	99 7e       	andi	r25, 0xE9	; 233
    505e:	a9 2e       	mov	r10, r25
    5060:	09 c0       	rjmp	.+18     	; 0x5074 <vfprintf+0x31a>
    5062:	a2 fe       	sbrs	r10, 2
    5064:	06 c0       	rjmp	.+12     	; 0x5072 <vfprintf+0x318>
    5066:	b3 94       	inc	r11
    5068:	b3 94       	inc	r11
    506a:	04 c0       	rjmp	.+8      	; 0x5074 <vfprintf+0x31a>
    506c:	8a 2d       	mov	r24, r10
    506e:	86 78       	andi	r24, 0x86	; 134
    5070:	09 f0       	breq	.+2      	; 0x5074 <vfprintf+0x31a>
    5072:	b3 94       	inc	r11
    5074:	a3 fc       	sbrc	r10, 3
    5076:	10 c0       	rjmp	.+32     	; 0x5098 <vfprintf+0x33e>
    5078:	a0 fe       	sbrs	r10, 0
    507a:	06 c0       	rjmp	.+12     	; 0x5088 <vfprintf+0x32e>
    507c:	b2 14       	cp	r11, r2
    507e:	80 f4       	brcc	.+32     	; 0x50a0 <vfprintf+0x346>
    5080:	28 0c       	add	r2, r8
    5082:	92 2c       	mov	r9, r2
    5084:	9b 18       	sub	r9, r11
    5086:	0d c0       	rjmp	.+26     	; 0x50a2 <vfprintf+0x348>
    5088:	b2 14       	cp	r11, r2
    508a:	58 f4       	brcc	.+22     	; 0x50a2 <vfprintf+0x348>
    508c:	b6 01       	movw	r22, r12
    508e:	80 e2       	ldi	r24, 0x20	; 32
    5090:	90 e0       	ldi	r25, 0x00	; 0
    5092:	76 d0       	rcall	.+236    	; 0x5180 <fputc>
    5094:	b3 94       	inc	r11
    5096:	f8 cf       	rjmp	.-16     	; 0x5088 <vfprintf+0x32e>
    5098:	b2 14       	cp	r11, r2
    509a:	18 f4       	brcc	.+6      	; 0x50a2 <vfprintf+0x348>
    509c:	2b 18       	sub	r2, r11
    509e:	02 c0       	rjmp	.+4      	; 0x50a4 <vfprintf+0x34a>
    50a0:	98 2c       	mov	r9, r8
    50a2:	21 2c       	mov	r2, r1
    50a4:	a4 fe       	sbrs	r10, 4
    50a6:	0f c0       	rjmp	.+30     	; 0x50c6 <vfprintf+0x36c>
    50a8:	b6 01       	movw	r22, r12
    50aa:	80 e3       	ldi	r24, 0x30	; 48
    50ac:	90 e0       	ldi	r25, 0x00	; 0
    50ae:	68 d0       	rcall	.+208    	; 0x5180 <fputc>
    50b0:	a2 fe       	sbrs	r10, 2
    50b2:	16 c0       	rjmp	.+44     	; 0x50e0 <vfprintf+0x386>
    50b4:	a1 fc       	sbrc	r10, 1
    50b6:	03 c0       	rjmp	.+6      	; 0x50be <vfprintf+0x364>
    50b8:	88 e7       	ldi	r24, 0x78	; 120
    50ba:	90 e0       	ldi	r25, 0x00	; 0
    50bc:	02 c0       	rjmp	.+4      	; 0x50c2 <vfprintf+0x368>
    50be:	88 e5       	ldi	r24, 0x58	; 88
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	b6 01       	movw	r22, r12
    50c4:	0c c0       	rjmp	.+24     	; 0x50de <vfprintf+0x384>
    50c6:	8a 2d       	mov	r24, r10
    50c8:	86 78       	andi	r24, 0x86	; 134
    50ca:	51 f0       	breq	.+20     	; 0x50e0 <vfprintf+0x386>
    50cc:	a1 fe       	sbrs	r10, 1
    50ce:	02 c0       	rjmp	.+4      	; 0x50d4 <vfprintf+0x37a>
    50d0:	8b e2       	ldi	r24, 0x2B	; 43
    50d2:	01 c0       	rjmp	.+2      	; 0x50d6 <vfprintf+0x37c>
    50d4:	80 e2       	ldi	r24, 0x20	; 32
    50d6:	a7 fc       	sbrc	r10, 7
    50d8:	8d e2       	ldi	r24, 0x2D	; 45
    50da:	b6 01       	movw	r22, r12
    50dc:	90 e0       	ldi	r25, 0x00	; 0
    50de:	50 d0       	rcall	.+160    	; 0x5180 <fputc>
    50e0:	89 14       	cp	r8, r9
    50e2:	30 f4       	brcc	.+12     	; 0x50f0 <vfprintf+0x396>
    50e4:	b6 01       	movw	r22, r12
    50e6:	80 e3       	ldi	r24, 0x30	; 48
    50e8:	90 e0       	ldi	r25, 0x00	; 0
    50ea:	4a d0       	rcall	.+148    	; 0x5180 <fputc>
    50ec:	9a 94       	dec	r9
    50ee:	f8 cf       	rjmp	.-16     	; 0x50e0 <vfprintf+0x386>
    50f0:	8a 94       	dec	r8
    50f2:	f3 01       	movw	r30, r6
    50f4:	e8 0d       	add	r30, r8
    50f6:	f1 1d       	adc	r31, r1
    50f8:	80 81       	ld	r24, Z
    50fa:	b6 01       	movw	r22, r12
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	40 d0       	rcall	.+128    	; 0x5180 <fputc>
    5100:	81 10       	cpse	r8, r1
    5102:	f6 cf       	rjmp	.-20     	; 0x50f0 <vfprintf+0x396>
    5104:	22 20       	and	r2, r2
    5106:	09 f4       	brne	.+2      	; 0x510a <vfprintf+0x3b0>
    5108:	4e ce       	rjmp	.-868    	; 0x4da6 <vfprintf+0x4c>
    510a:	b6 01       	movw	r22, r12
    510c:	80 e2       	ldi	r24, 0x20	; 32
    510e:	90 e0       	ldi	r25, 0x00	; 0
    5110:	37 d0       	rcall	.+110    	; 0x5180 <fputc>
    5112:	2a 94       	dec	r2
    5114:	f7 cf       	rjmp	.-18     	; 0x5104 <vfprintf+0x3aa>
    5116:	f6 01       	movw	r30, r12
    5118:	86 81       	ldd	r24, Z+6	; 0x06
    511a:	97 81       	ldd	r25, Z+7	; 0x07
    511c:	02 c0       	rjmp	.+4      	; 0x5122 <vfprintf+0x3c8>
    511e:	8f ef       	ldi	r24, 0xFF	; 255
    5120:	9f ef       	ldi	r25, 0xFF	; 255
    5122:	2b 96       	adiw	r28, 0x0b	; 11
    5124:	0f b6       	in	r0, 0x3f	; 63
    5126:	f8 94       	cli
    5128:	de bf       	out	0x3e, r29	; 62
    512a:	0f be       	out	0x3f, r0	; 63
    512c:	cd bf       	out	0x3d, r28	; 61
    512e:	df 91       	pop	r29
    5130:	cf 91       	pop	r28
    5132:	1f 91       	pop	r17
    5134:	0f 91       	pop	r16
    5136:	ff 90       	pop	r15
    5138:	ef 90       	pop	r14
    513a:	df 90       	pop	r13
    513c:	cf 90       	pop	r12
    513e:	bf 90       	pop	r11
    5140:	af 90       	pop	r10
    5142:	9f 90       	pop	r9
    5144:	8f 90       	pop	r8
    5146:	7f 90       	pop	r7
    5148:	6f 90       	pop	r6
    514a:	5f 90       	pop	r5
    514c:	4f 90       	pop	r4
    514e:	3f 90       	pop	r3
    5150:	2f 90       	pop	r2
    5152:	08 95       	ret

00005154 <strnlen_P>:
    5154:	fc 01       	movw	r30, r24
    5156:	05 90       	lpm	r0, Z+
    5158:	61 50       	subi	r22, 0x01	; 1
    515a:	70 40       	sbci	r23, 0x00	; 0
    515c:	01 10       	cpse	r0, r1
    515e:	d8 f7       	brcc	.-10     	; 0x5156 <strnlen_P+0x2>
    5160:	80 95       	com	r24
    5162:	90 95       	com	r25
    5164:	8e 0f       	add	r24, r30
    5166:	9f 1f       	adc	r25, r31
    5168:	08 95       	ret

0000516a <strnlen>:
    516a:	fc 01       	movw	r30, r24
    516c:	61 50       	subi	r22, 0x01	; 1
    516e:	70 40       	sbci	r23, 0x00	; 0
    5170:	01 90       	ld	r0, Z+
    5172:	01 10       	cpse	r0, r1
    5174:	d8 f7       	brcc	.-10     	; 0x516c <strnlen+0x2>
    5176:	80 95       	com	r24
    5178:	90 95       	com	r25
    517a:	8e 0f       	add	r24, r30
    517c:	9f 1f       	adc	r25, r31
    517e:	08 95       	ret

00005180 <fputc>:
    5180:	0f 93       	push	r16
    5182:	1f 93       	push	r17
    5184:	cf 93       	push	r28
    5186:	df 93       	push	r29
    5188:	fb 01       	movw	r30, r22
    518a:	23 81       	ldd	r18, Z+3	; 0x03
    518c:	21 fd       	sbrc	r18, 1
    518e:	03 c0       	rjmp	.+6      	; 0x5196 <fputc+0x16>
    5190:	8f ef       	ldi	r24, 0xFF	; 255
    5192:	9f ef       	ldi	r25, 0xFF	; 255
    5194:	2c c0       	rjmp	.+88     	; 0x51ee <fputc+0x6e>
    5196:	22 ff       	sbrs	r18, 2
    5198:	16 c0       	rjmp	.+44     	; 0x51c6 <fputc+0x46>
    519a:	46 81       	ldd	r20, Z+6	; 0x06
    519c:	57 81       	ldd	r21, Z+7	; 0x07
    519e:	24 81       	ldd	r18, Z+4	; 0x04
    51a0:	35 81       	ldd	r19, Z+5	; 0x05
    51a2:	42 17       	cp	r20, r18
    51a4:	53 07       	cpc	r21, r19
    51a6:	44 f4       	brge	.+16     	; 0x51b8 <fputc+0x38>
    51a8:	a0 81       	ld	r26, Z
    51aa:	b1 81       	ldd	r27, Z+1	; 0x01
    51ac:	9d 01       	movw	r18, r26
    51ae:	2f 5f       	subi	r18, 0xFF	; 255
    51b0:	3f 4f       	sbci	r19, 0xFF	; 255
    51b2:	31 83       	std	Z+1, r19	; 0x01
    51b4:	20 83       	st	Z, r18
    51b6:	8c 93       	st	X, r24
    51b8:	26 81       	ldd	r18, Z+6	; 0x06
    51ba:	37 81       	ldd	r19, Z+7	; 0x07
    51bc:	2f 5f       	subi	r18, 0xFF	; 255
    51be:	3f 4f       	sbci	r19, 0xFF	; 255
    51c0:	37 83       	std	Z+7, r19	; 0x07
    51c2:	26 83       	std	Z+6, r18	; 0x06
    51c4:	14 c0       	rjmp	.+40     	; 0x51ee <fputc+0x6e>
    51c6:	8b 01       	movw	r16, r22
    51c8:	ec 01       	movw	r28, r24
    51ca:	fb 01       	movw	r30, r22
    51cc:	00 84       	ldd	r0, Z+8	; 0x08
    51ce:	f1 85       	ldd	r31, Z+9	; 0x09
    51d0:	e0 2d       	mov	r30, r0
    51d2:	19 95       	eicall
    51d4:	89 2b       	or	r24, r25
    51d6:	e1 f6       	brne	.-72     	; 0x5190 <fputc+0x10>
    51d8:	d8 01       	movw	r26, r16
    51da:	16 96       	adiw	r26, 0x06	; 6
    51dc:	8d 91       	ld	r24, X+
    51de:	9c 91       	ld	r25, X
    51e0:	17 97       	sbiw	r26, 0x07	; 7
    51e2:	01 96       	adiw	r24, 0x01	; 1
    51e4:	17 96       	adiw	r26, 0x07	; 7
    51e6:	9c 93       	st	X, r25
    51e8:	8e 93       	st	-X, r24
    51ea:	16 97       	sbiw	r26, 0x06	; 6
    51ec:	ce 01       	movw	r24, r28
    51ee:	df 91       	pop	r29
    51f0:	cf 91       	pop	r28
    51f2:	1f 91       	pop	r17
    51f4:	0f 91       	pop	r16
    51f6:	08 95       	ret

000051f8 <__ultoa_invert>:
    51f8:	fa 01       	movw	r30, r20
    51fa:	aa 27       	eor	r26, r26
    51fc:	28 30       	cpi	r18, 0x08	; 8
    51fe:	51 f1       	breq	.+84     	; 0x5254 <__ultoa_invert+0x5c>
    5200:	20 31       	cpi	r18, 0x10	; 16
    5202:	81 f1       	breq	.+96     	; 0x5264 <__ultoa_invert+0x6c>
    5204:	e8 94       	clt
    5206:	6f 93       	push	r22
    5208:	6e 7f       	andi	r22, 0xFE	; 254
    520a:	6e 5f       	subi	r22, 0xFE	; 254
    520c:	7f 4f       	sbci	r23, 0xFF	; 255
    520e:	8f 4f       	sbci	r24, 0xFF	; 255
    5210:	9f 4f       	sbci	r25, 0xFF	; 255
    5212:	af 4f       	sbci	r26, 0xFF	; 255
    5214:	b1 e0       	ldi	r27, 0x01	; 1
    5216:	3e d0       	rcall	.+124    	; 0x5294 <__ultoa_invert+0x9c>
    5218:	b4 e0       	ldi	r27, 0x04	; 4
    521a:	3c d0       	rcall	.+120    	; 0x5294 <__ultoa_invert+0x9c>
    521c:	67 0f       	add	r22, r23
    521e:	78 1f       	adc	r23, r24
    5220:	89 1f       	adc	r24, r25
    5222:	9a 1f       	adc	r25, r26
    5224:	a1 1d       	adc	r26, r1
    5226:	68 0f       	add	r22, r24
    5228:	79 1f       	adc	r23, r25
    522a:	8a 1f       	adc	r24, r26
    522c:	91 1d       	adc	r25, r1
    522e:	a1 1d       	adc	r26, r1
    5230:	6a 0f       	add	r22, r26
    5232:	71 1d       	adc	r23, r1
    5234:	81 1d       	adc	r24, r1
    5236:	91 1d       	adc	r25, r1
    5238:	a1 1d       	adc	r26, r1
    523a:	20 d0       	rcall	.+64     	; 0x527c <__ultoa_invert+0x84>
    523c:	09 f4       	brne	.+2      	; 0x5240 <__ultoa_invert+0x48>
    523e:	68 94       	set
    5240:	3f 91       	pop	r19
    5242:	2a e0       	ldi	r18, 0x0A	; 10
    5244:	26 9f       	mul	r18, r22
    5246:	11 24       	eor	r1, r1
    5248:	30 19       	sub	r19, r0
    524a:	30 5d       	subi	r19, 0xD0	; 208
    524c:	31 93       	st	Z+, r19
    524e:	de f6       	brtc	.-74     	; 0x5206 <__ultoa_invert+0xe>
    5250:	cf 01       	movw	r24, r30
    5252:	08 95       	ret
    5254:	46 2f       	mov	r20, r22
    5256:	47 70       	andi	r20, 0x07	; 7
    5258:	40 5d       	subi	r20, 0xD0	; 208
    525a:	41 93       	st	Z+, r20
    525c:	b3 e0       	ldi	r27, 0x03	; 3
    525e:	0f d0       	rcall	.+30     	; 0x527e <__ultoa_invert+0x86>
    5260:	c9 f7       	brne	.-14     	; 0x5254 <__ultoa_invert+0x5c>
    5262:	f6 cf       	rjmp	.-20     	; 0x5250 <__ultoa_invert+0x58>
    5264:	46 2f       	mov	r20, r22
    5266:	4f 70       	andi	r20, 0x0F	; 15
    5268:	40 5d       	subi	r20, 0xD0	; 208
    526a:	4a 33       	cpi	r20, 0x3A	; 58
    526c:	18 f0       	brcs	.+6      	; 0x5274 <__ultoa_invert+0x7c>
    526e:	49 5d       	subi	r20, 0xD9	; 217
    5270:	31 fd       	sbrc	r19, 1
    5272:	40 52       	subi	r20, 0x20	; 32
    5274:	41 93       	st	Z+, r20
    5276:	02 d0       	rcall	.+4      	; 0x527c <__ultoa_invert+0x84>
    5278:	a9 f7       	brne	.-22     	; 0x5264 <__ultoa_invert+0x6c>
    527a:	ea cf       	rjmp	.-44     	; 0x5250 <__ultoa_invert+0x58>
    527c:	b4 e0       	ldi	r27, 0x04	; 4
    527e:	a6 95       	lsr	r26
    5280:	97 95       	ror	r25
    5282:	87 95       	ror	r24
    5284:	77 95       	ror	r23
    5286:	67 95       	ror	r22
    5288:	ba 95       	dec	r27
    528a:	c9 f7       	brne	.-14     	; 0x527e <__ultoa_invert+0x86>
    528c:	00 97       	sbiw	r24, 0x00	; 0
    528e:	61 05       	cpc	r22, r1
    5290:	71 05       	cpc	r23, r1
    5292:	08 95       	ret
    5294:	9b 01       	movw	r18, r22
    5296:	ac 01       	movw	r20, r24
    5298:	0a 2e       	mov	r0, r26
    529a:	06 94       	lsr	r0
    529c:	57 95       	ror	r21
    529e:	47 95       	ror	r20
    52a0:	37 95       	ror	r19
    52a2:	27 95       	ror	r18
    52a4:	ba 95       	dec	r27
    52a6:	c9 f7       	brne	.-14     	; 0x529a <__ultoa_invert+0xa2>
    52a8:	62 0f       	add	r22, r18
    52aa:	73 1f       	adc	r23, r19
    52ac:	84 1f       	adc	r24, r20
    52ae:	95 1f       	adc	r25, r21
    52b0:	a0 1d       	adc	r26, r0
    52b2:	08 95       	ret

000052b4 <_exit>:
    52b4:	f8 94       	cli

000052b6 <__stop_program>:
    52b6:	ff cf       	rjmp	.-2      	; 0x52b6 <__stop_program>
