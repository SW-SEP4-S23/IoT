
Firmware0_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000518  00800200  00005a18  00005aac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005a18  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000ff0  00800718  00800718  00005fc4  2**0
                  ALLOC
  3 .comment      0000008c  00000000  00000000  00005fc4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006050  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000948  00000000  00000000  00006090  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c7a4  00000000  00000000  000069d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000332c  00000000  00000000  0001317c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00005f99  00000000  00000000  000164a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00002088  00000000  00000000  0001c444  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d95  00000000  00000000  0001e4cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000b0e3  00000000  00000000  00022261  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009f0  00000000  00000000  0002d344  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	46 c2       	rjmp	.+1164   	; 0x48e <__ctors_end>
       2:	00 00       	nop
       4:	65 c2       	rjmp	.+1226   	; 0x4d0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c2       	rjmp	.+1222   	; 0x4d0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c2       	rjmp	.+1218   	; 0x4d0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c2       	rjmp	.+1214   	; 0x4d0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c2       	rjmp	.+1210   	; 0x4d0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c2       	rjmp	.+1206   	; 0x4d0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c2       	rjmp	.+1202   	; 0x4d0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c2       	rjmp	.+1198   	; 0x4d0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c2       	rjmp	.+1194   	; 0x4d0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c2       	rjmp	.+1190   	; 0x4d0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c2       	rjmp	.+1186   	; 0x4d0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	32 c5       	rjmp	.+2660   	; 0xa96 <__vector_12>
      32:	00 00       	nop
      34:	4d c2       	rjmp	.+1178   	; 0x4d0 <__bad_interrupt>
      36:	00 00       	nop
      38:	4b c2       	rjmp	.+1174   	; 0x4d0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c2       	rjmp	.+1170   	; 0x4d0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	47 c2       	rjmp	.+1166   	; 0x4d0 <__bad_interrupt>
      42:	00 00       	nop
      44:	45 c2       	rjmp	.+1162   	; 0x4d0 <__bad_interrupt>
      46:	00 00       	nop
      48:	43 c2       	rjmp	.+1158   	; 0x4d0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	41 c2       	rjmp	.+1154   	; 0x4d0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	3f c2       	rjmp	.+1150   	; 0x4d0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c2       	rjmp	.+1146   	; 0x4d0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c2       	rjmp	.+1142   	; 0x4d0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c2       	rjmp	.+1138   	; 0x4d0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c2       	rjmp	.+1134   	; 0x4d0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <__vector_25>
      68:	0c 94 24 21 	jmp	0x4248	; 0x4248 <__vector_26>
      6c:	31 c2       	rjmp	.+1122   	; 0x4d0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	2f c2       	rjmp	.+1118   	; 0x4d0 <__bad_interrupt>
      72:	00 00       	nop
      74:	2d c2       	rjmp	.+1114   	; 0x4d0 <__bad_interrupt>
      76:	00 00       	nop
      78:	2b c2       	rjmp	.+1110   	; 0x4d0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	29 c2       	rjmp	.+1106   	; 0x4d0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	27 c2       	rjmp	.+1102   	; 0x4d0 <__bad_interrupt>
      82:	00 00       	nop
      84:	25 c2       	rjmp	.+1098   	; 0x4d0 <__bad_interrupt>
      86:	00 00       	nop
      88:	23 c2       	rjmp	.+1094   	; 0x4d0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	21 c2       	rjmp	.+1090   	; 0x4d0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	0c 94 68 21 	jmp	0x42d0	; 0x42d0 <__vector_36>
      94:	0c 94 ba 21 	jmp	0x4374	; 0x4374 <__vector_37>
      98:	1b c2       	rjmp	.+1078   	; 0x4d0 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	0c 94 05 26 	jmp	0x4c0a	; 0x4c0a <__vector_39>
      a0:	17 c2       	rjmp	.+1070   	; 0x4d0 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	15 c2       	rjmp	.+1066   	; 0x4d0 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	13 c2       	rjmp	.+1062   	; 0x4d0 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	11 c2       	rjmp	.+1058   	; 0x4d0 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	0f c2       	rjmp	.+1054   	; 0x4d0 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	0d c2       	rjmp	.+1050   	; 0x4d0 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	0b c2       	rjmp	.+1046   	; 0x4d0 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	09 c2       	rjmp	.+1042   	; 0x4d0 <__bad_interrupt>
      be:	00 00       	nop
      c0:	07 c2       	rjmp	.+1038   	; 0x4d0 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	05 c2       	rjmp	.+1034   	; 0x4d0 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	03 c2       	rjmp	.+1030   	; 0x4d0 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	0c 94 fe 21 	jmp	0x43fc	; 0x43fc <__vector_51>
      d0:	0c 94 50 22 	jmp	0x44a0	; 0x44a0 <__vector_52>
      d4:	fd c1       	rjmp	.+1018   	; 0x4d0 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	0c 94 94 22 	jmp	0x4528	; 0x4528 <__vector_54>
      dc:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__vector_55>
      e0:	f7 c1       	rjmp	.+1006   	; 0x4d0 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	be 01       	movw	r22, r28
      e6:	be 01       	movw	r22, r28
      e8:	be 01       	movw	r22, r28
      ea:	f8 01       	movw	r30, r16
      ec:	00 02       	muls	r16, r16
      ee:	16 02       	muls	r17, r22
      f0:	be 01       	movw	r22, r28
      f2:	be 01       	movw	r22, r28
      f4:	f8 01       	movw	r30, r16
      f6:	00 02       	muls	r16, r16
      f8:	27 26       	eor	r2, r23
      fa:	97 26       	eor	r9, r23
      fc:	97 26       	eor	r9, r23
      fe:	97 26       	eor	r9, r23
     100:	97 26       	eor	r9, r23
     102:	97 26       	eor	r9, r23
     104:	97 26       	eor	r9, r23
     106:	97 26       	eor	r9, r23
     108:	27 26       	eor	r2, r23
     10a:	97 26       	eor	r9, r23
     10c:	97 26       	eor	r9, r23
     10e:	97 26       	eor	r9, r23
     110:	97 26       	eor	r9, r23
     112:	97 26       	eor	r9, r23
     114:	97 26       	eor	r9, r23
     116:	97 26       	eor	r9, r23
     118:	29 26       	eor	r2, r25
     11a:	97 26       	eor	r9, r23
     11c:	97 26       	eor	r9, r23
     11e:	97 26       	eor	r9, r23
     120:	97 26       	eor	r9, r23
     122:	97 26       	eor	r9, r23
     124:	97 26       	eor	r9, r23
     126:	97 26       	eor	r9, r23
     128:	97 26       	eor	r9, r23
     12a:	97 26       	eor	r9, r23
     12c:	97 26       	eor	r9, r23
     12e:	97 26       	eor	r9, r23
     130:	97 26       	eor	r9, r23
     132:	97 26       	eor	r9, r23
     134:	97 26       	eor	r9, r23
     136:	97 26       	eor	r9, r23
     138:	29 26       	eor	r2, r25
     13a:	97 26       	eor	r9, r23
     13c:	97 26       	eor	r9, r23
     13e:	97 26       	eor	r9, r23
     140:	97 26       	eor	r9, r23
     142:	97 26       	eor	r9, r23
     144:	97 26       	eor	r9, r23
     146:	97 26       	eor	r9, r23
     148:	97 26       	eor	r9, r23
     14a:	97 26       	eor	r9, r23
     14c:	97 26       	eor	r9, r23
     14e:	97 26       	eor	r9, r23
     150:	97 26       	eor	r9, r23
     152:	97 26       	eor	r9, r23
     154:	97 26       	eor	r9, r23
     156:	97 26       	eor	r9, r23
     158:	93 26       	eor	r9, r19
     15a:	97 26       	eor	r9, r23
     15c:	97 26       	eor	r9, r23
     15e:	97 26       	eor	r9, r23
     160:	97 26       	eor	r9, r23
     162:	97 26       	eor	r9, r23
     164:	97 26       	eor	r9, r23
     166:	97 26       	eor	r9, r23
     168:	5e 26       	eor	r5, r30
     16a:	97 26       	eor	r9, r23
     16c:	97 26       	eor	r9, r23
     16e:	97 26       	eor	r9, r23
     170:	97 26       	eor	r9, r23
     172:	97 26       	eor	r9, r23
     174:	97 26       	eor	r9, r23
     176:	97 26       	eor	r9, r23
     178:	97 26       	eor	r9, r23
     17a:	97 26       	eor	r9, r23
     17c:	97 26       	eor	r9, r23
     17e:	97 26       	eor	r9, r23
     180:	97 26       	eor	r9, r23
     182:	97 26       	eor	r9, r23
     184:	97 26       	eor	r9, r23
     186:	97 26       	eor	r9, r23
     188:	52 26       	eor	r5, r18
     18a:	97 26       	eor	r9, r23
     18c:	97 26       	eor	r9, r23
     18e:	97 26       	eor	r9, r23
     190:	97 26       	eor	r9, r23
     192:	97 26       	eor	r9, r23
     194:	97 26       	eor	r9, r23
     196:	97 26       	eor	r9, r23
     198:	76 26       	eor	r7, r22

0000019a <prvIdleTask>:
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
    }
     19a:	05 ef       	ldi	r16, 0xF5	; 245
     19c:	14 e1       	ldi	r17, 0x14	; 20
     19e:	0f 2e       	mov	r0, r31
     1a0:	f5 e2       	ldi	r31, 0x25	; 37
     1a2:	ef 2e       	mov	r14, r31
     1a4:	f5 e1       	ldi	r31, 0x15	; 21
     1a6:	ff 2e       	mov	r15, r31
     1a8:	f0 2d       	mov	r31, r0
     1aa:	80 91 f4 14 	lds	r24, 0x14F4	; 0x8014f4 <uxDeletedTasksWaitingCleanUp>
     1ae:	88 23       	and	r24, r24
     1b0:	11 f1       	breq	.+68     	; 0x1f6 <prvIdleTask+0x5c>
     1b2:	0f b6       	in	r0, 0x3f	; 63
     1b4:	f8 94       	cli
     1b6:	0f 92       	push	r0
     1b8:	d8 01       	movw	r26, r16
     1ba:	17 96       	adiw	r26, 0x07	; 7
     1bc:	ed 91       	ld	r30, X+
     1be:	fc 91       	ld	r31, X
     1c0:	18 97       	sbiw	r26, 0x08	; 8
     1c2:	c0 85       	ldd	r28, Z+8	; 0x08
     1c4:	d1 85       	ldd	r29, Z+9	; 0x09
     1c6:	ce 01       	movw	r24, r28
     1c8:	02 96       	adiw	r24, 0x02	; 2
     1ca:	25 d3       	rcall	.+1610   	; 0x816 <uxListRemove>
     1cc:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <uxCurrentNumberOfTasks>
     1d0:	81 50       	subi	r24, 0x01	; 1
     1d2:	80 93 e8 14 	sts	0x14E8, r24	; 0x8014e8 <uxCurrentNumberOfTasks>
     1d6:	80 91 f4 14 	lds	r24, 0x14F4	; 0x8014f4 <uxDeletedTasksWaitingCleanUp>
     1da:	81 50       	subi	r24, 0x01	; 1
     1dc:	80 93 f4 14 	sts	0x14F4, r24	; 0x8014f4 <uxDeletedTasksWaitingCleanUp>
     1e0:	0f 90       	pop	r0
     1e2:	0f be       	out	0x3f, r0	; 63
     1e4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     1e6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     1e8:	8a d2       	rcall	.+1300   	; 0x6fe <vPortFree>
     1ea:	ce 01       	movw	r24, r28
     1ec:	88 d2       	rcall	.+1296   	; 0x6fe <vPortFree>
     1ee:	80 91 f4 14 	lds	r24, 0x14F4	; 0x8014f4 <uxDeletedTasksWaitingCleanUp>
     1f2:	81 11       	cpse	r24, r1
     1f4:	de cf       	rjmp	.-68     	; 0x1b2 <prvIdleTask+0x18>
     1f6:	f7 01       	movw	r30, r14
     1f8:	80 81       	ld	r24, Z
     1fa:	82 30       	cpi	r24, 0x02	; 2
     1fc:	08 f0       	brcs	.+2      	; 0x200 <prvIdleTask+0x66>
     1fe:	85 d3       	rcall	.+1802   	; 0x90a <vPortYield>
     200:	0e 94 f3 16 	call	0x2de6	; 0x2de6 <vApplicationIdleHook>
     204:	d2 cf       	rjmp	.-92     	; 0x1aa <prvIdleTask+0x10>

00000206 <prvTimerTask>:
     206:	cf 93       	push	r28
                pxNewTimer->ucStatus = 0x00;
                prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
            }

            return pxNewTimer;
        }
     208:	df 93       	push	r29
     20a:	cd b7       	in	r28, 0x3d	; 61
     20c:	de b7       	in	r29, 0x3e	; 62
     20e:	60 97       	sbiw	r28, 0x10	; 16
     210:	0f b6       	in	r0, 0x3f	; 63
     212:	f8 94       	cli
     214:	de bf       	out	0x3e, r29	; 62
     216:	0f be       	out	0x3f, r0	; 63
     218:	cd bf       	out	0x3d, r28	; 61
     21a:	ce 01       	movw	r24, r28
     21c:	01 96       	adiw	r24, 0x01	; 1
     21e:	9a 87       	std	Y+10, r25	; 0x0a
     220:	89 87       	std	Y+9, r24	; 0x09
     222:	81 2c       	mov	r8, r1
     224:	91 2c       	mov	r9, r1
     226:	a1 2c       	mov	r10, r1
     228:	b1 2c       	mov	r11, r1
     22a:	69 84       	ldd	r6, Y+9	; 0x09
     22c:	7a 84       	ldd	r7, Y+10	; 0x0a
     22e:	e0 91 9f 15 	lds	r30, 0x159F	; 0x80159f <pxCurrentTimerList>
     232:	f0 91 a0 15 	lds	r31, 0x15A0	; 0x8015a0 <pxCurrentTimerList+0x1>
     236:	80 81       	ld	r24, Z
     238:	88 23       	and	r24, r24
     23a:	09 f4       	brne	.+2      	; 0x23e <prvTimerTask+0x38>
     23c:	0e c1       	rjmp	.+540    	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     23e:	07 80       	ldd	r0, Z+7	; 0x07
     240:	f0 85       	ldd	r31, Z+8	; 0x08
     242:	e0 2d       	mov	r30, r0
     244:	20 80       	ld	r2, Z
     246:	31 80       	ldd	r3, Z+1	; 0x01
     248:	42 80       	ldd	r4, Z+2	; 0x02
     24a:	53 80       	ldd	r5, Z+3	; 0x03
     24c:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <vTaskSuspendAll>
     250:	ce 01       	movw	r24, r28
     252:	01 96       	adiw	r24, 0x01	; 1
     254:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <prvSampleTimeNow>
     258:	6b 87       	std	Y+11, r22	; 0x0b
     25a:	7c 87       	std	Y+12, r23	; 0x0c
     25c:	8d 87       	std	Y+13, r24	; 0x0d
     25e:	9e 87       	std	Y+14, r25	; 0x0e
     260:	89 81       	ldd	r24, Y+1	; 0x01
     262:	81 11       	cpse	r24, r1
     264:	64 c0       	rjmp	.+200    	; 0x32e <prvTimerTask+0x128>
     266:	8b 85       	ldd	r24, Y+11	; 0x0b
     268:	9c 85       	ldd	r25, Y+12	; 0x0c
     26a:	ad 85       	ldd	r26, Y+13	; 0x0d
     26c:	be 85       	ldd	r27, Y+14	; 0x0e
     26e:	82 15       	cp	r24, r2
     270:	93 05       	cpc	r25, r3
     272:	a4 05       	cpc	r26, r4
     274:	b5 05       	cpc	r27, r5
     276:	08 f4       	brcc	.+2      	; 0x27a <prvTimerTask+0x74>
     278:	44 c0       	rjmp	.+136    	; 0x302 <prvTimerTask+0xfc>
     27a:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskResumeAll>
     27e:	e0 91 9f 15 	lds	r30, 0x159F	; 0x80159f <pxCurrentTimerList>
     282:	f0 91 a0 15 	lds	r31, 0x15A0	; 0x8015a0 <pxCurrentTimerList+0x1>
     286:	07 80       	ldd	r0, Z+7	; 0x07
     288:	f0 85       	ldd	r31, Z+8	; 0x08
     28a:	e0 2d       	mov	r30, r0
     28c:	a0 85       	ldd	r26, Z+8	; 0x08
     28e:	b1 85       	ldd	r27, Z+9	; 0x09
     290:	b8 8b       	std	Y+16, r27	; 0x10
     292:	af 87       	std	Y+15, r26	; 0x0f
     294:	cd 01       	movw	r24, r26
     296:	02 96       	adiw	r24, 0x02	; 2
     298:	be d2       	rcall	.+1404   	; 0x816 <uxListRemove>
     29a:	ef 85       	ldd	r30, Y+15	; 0x0f
     29c:	f8 89       	ldd	r31, Y+16	; 0x10
     29e:	86 89       	ldd	r24, Z+22	; 0x16
     2a0:	82 ff       	sbrs	r24, 2
     2a2:	21 c0       	rjmp	.+66     	; 0x2e6 <prvTimerTask+0xe0>
     2a4:	46 85       	ldd	r20, Z+14	; 0x0e
     2a6:	57 85       	ldd	r21, Z+15	; 0x0f
     2a8:	60 89       	ldd	r22, Z+16	; 0x10
     2aa:	71 89       	ldd	r23, Z+17	; 0x11
     2ac:	42 0d       	add	r20, r2
     2ae:	53 1d       	adc	r21, r3
     2b0:	64 1d       	adc	r22, r4
     2b2:	75 1d       	adc	r23, r5
     2b4:	72 01       	movw	r14, r4
     2b6:	61 01       	movw	r12, r2
     2b8:	0b 85       	ldd	r16, Y+11	; 0x0b
     2ba:	1c 85       	ldd	r17, Y+12	; 0x0c
     2bc:	2d 85       	ldd	r18, Y+13	; 0x0d
     2be:	3e 85       	ldd	r19, Y+14	; 0x0e
     2c0:	cf 01       	movw	r24, r30
     2c2:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <prvInsertTimerInActiveList>
     2c6:	88 23       	and	r24, r24
     2c8:	99 f0       	breq	.+38     	; 0x2f0 <prvTimerTask+0xea>
     2ca:	c8 2c       	mov	r12, r8
     2cc:	d9 2c       	mov	r13, r9
     2ce:	ea 2c       	mov	r14, r10
     2d0:	fb 2c       	mov	r15, r11
     2d2:	00 e0       	ldi	r16, 0x00	; 0
     2d4:	10 e0       	ldi	r17, 0x00	; 0
     2d6:	a2 01       	movw	r20, r4
     2d8:	91 01       	movw	r18, r2
     2da:	60 e0       	ldi	r22, 0x00	; 0
     2dc:	8f 85       	ldd	r24, Y+15	; 0x0f
     2de:	98 89       	ldd	r25, Y+16	; 0x10
     2e0:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <xTimerGenericCommand>
     2e4:	05 c0       	rjmp	.+10     	; 0x2f0 <prvTimerTask+0xea>
     2e6:	8e 7f       	andi	r24, 0xFE	; 254
     2e8:	af 85       	ldd	r26, Y+15	; 0x0f
     2ea:	b8 89       	ldd	r27, Y+16	; 0x10
     2ec:	56 96       	adiw	r26, 0x16	; 22
     2ee:	8c 93       	st	X, r24
     2f0:	af 85       	ldd	r26, Y+15	; 0x0f
     2f2:	b8 89       	ldd	r27, Y+16	; 0x10
     2f4:	54 96       	adiw	r26, 0x14	; 20
     2f6:	ed 91       	ld	r30, X+
     2f8:	fc 91       	ld	r31, X
     2fa:	55 97       	sbiw	r26, 0x15	; 21
     2fc:	cd 01       	movw	r24, r26
     2fe:	19 95       	eicall
     300:	9e c0       	rjmp	.+316    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     302:	20 e0       	ldi	r18, 0x00	; 0
     304:	b2 01       	movw	r22, r4
     306:	a1 01       	movw	r20, r2
     308:	8b 85       	ldd	r24, Y+11	; 0x0b
     30a:	9c 85       	ldd	r25, Y+12	; 0x0c
     30c:	ad 85       	ldd	r26, Y+13	; 0x0d
     30e:	be 85       	ldd	r27, Y+14	; 0x0e
     310:	48 1b       	sub	r20, r24
     312:	59 0b       	sbc	r21, r25
     314:	6a 0b       	sbc	r22, r26
     316:	7b 0b       	sbc	r23, r27
     318:	80 91 9b 15 	lds	r24, 0x159B	; 0x80159b <xTimerQueue>
     31c:	90 91 9c 15 	lds	r25, 0x159C	; 0x80159c <xTimerQueue+0x1>
     320:	80 d6       	rcall	.+3328   	; 0x1022 <vQueueWaitForMessageRestricted>
     322:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskResumeAll>
     326:	81 11       	cpse	r24, r1
     328:	8a c0       	rjmp	.+276    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     32a:	ef d2       	rcall	.+1502   	; 0x90a <vPortYield>
     32c:	88 c0       	rjmp	.+272    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     32e:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskResumeAll>
     332:	85 c0       	rjmp	.+266    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	88 23       	and	r24, r24
     338:	0c f4       	brge	.+2      	; 0x33c <prvTimerTask+0x136>
     33a:	81 c0       	rjmp	.+258    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     33c:	4e 80       	ldd	r4, Y+6	; 0x06
     33e:	5f 80       	ldd	r5, Y+7	; 0x07
     340:	d2 01       	movw	r26, r4
     342:	1c 96       	adiw	r26, 0x0c	; 12
     344:	8d 91       	ld	r24, X+
     346:	9c 91       	ld	r25, X
     348:	1d 97       	sbiw	r26, 0x0d	; 13
     34a:	89 2b       	or	r24, r25
     34c:	19 f0       	breq	.+6      	; 0x354 <prvTimerTask+0x14e>
     34e:	c2 01       	movw	r24, r4
     350:	02 96       	adiw	r24, 0x02	; 2
     352:	61 d2       	rcall	.+1218   	; 0x816 <uxListRemove>
     354:	ce 01       	movw	r24, r28
     356:	08 96       	adiw	r24, 0x08	; 8
     358:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <prvSampleTimeNow>
     35c:	8b 01       	movw	r16, r22
     35e:	9c 01       	movw	r18, r24
     360:	e9 81       	ldd	r30, Y+1	; 0x01
     362:	0e 2e       	mov	r0, r30
     364:	00 0c       	add	r0, r0
     366:	ff 0b       	sbc	r31, r31
     368:	ea 30       	cpi	r30, 0x0A	; 10
     36a:	f1 05       	cpc	r31, r1
     36c:	08 f0       	brcs	.+2      	; 0x370 <prvTimerTask+0x16a>
     36e:	67 c0       	rjmp	.+206    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     370:	88 27       	eor	r24, r24
     372:	ee 58       	subi	r30, 0x8E	; 142
     374:	ff 4f       	sbci	r31, 0xFF	; 255
     376:	8f 4f       	sbci	r24, 0xFF	; 255
     378:	0c 94 60 28 	jmp	0x50c0	; 0x50c0 <__tablejump2__>
     37c:	f2 01       	movw	r30, r4
     37e:	86 89       	ldd	r24, Z+22	; 0x16
     380:	81 60       	ori	r24, 0x01	; 1
     382:	86 8b       	std	Z+22, r24	; 0x16
     384:	ca 80       	ldd	r12, Y+2	; 0x02
     386:	db 80       	ldd	r13, Y+3	; 0x03
     388:	ec 80       	ldd	r14, Y+4	; 0x04
     38a:	fd 80       	ldd	r15, Y+5	; 0x05
     38c:	46 85       	ldd	r20, Z+14	; 0x0e
     38e:	57 85       	ldd	r21, Z+15	; 0x0f
     390:	60 89       	ldd	r22, Z+16	; 0x10
     392:	71 89       	ldd	r23, Z+17	; 0x11
     394:	4c 0d       	add	r20, r12
     396:	5d 1d       	adc	r21, r13
     398:	6e 1d       	adc	r22, r14
     39a:	7f 1d       	adc	r23, r15
     39c:	c2 01       	movw	r24, r4
     39e:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <prvInsertTimerInActiveList>
     3a2:	88 23       	and	r24, r24
     3a4:	09 f4       	brne	.+2      	; 0x3a8 <prvTimerTask+0x1a2>
     3a6:	4b c0       	rjmp	.+150    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3a8:	d2 01       	movw	r26, r4
     3aa:	54 96       	adiw	r26, 0x14	; 20
     3ac:	ed 91       	ld	r30, X+
     3ae:	fc 91       	ld	r31, X
     3b0:	55 97       	sbiw	r26, 0x15	; 21
     3b2:	c2 01       	movw	r24, r4
     3b4:	19 95       	eicall
     3b6:	f2 01       	movw	r30, r4
     3b8:	86 89       	ldd	r24, Z+22	; 0x16
     3ba:	82 ff       	sbrs	r24, 2
     3bc:	40 c0       	rjmp	.+128    	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3be:	4a 81       	ldd	r20, Y+2	; 0x02
     3c0:	5b 81       	ldd	r21, Y+3	; 0x03
     3c2:	6c 81       	ldd	r22, Y+4	; 0x04
     3c4:	7d 81       	ldd	r23, Y+5	; 0x05
     3c6:	86 85       	ldd	r24, Z+14	; 0x0e
     3c8:	97 85       	ldd	r25, Z+15	; 0x0f
     3ca:	a0 89       	ldd	r26, Z+16	; 0x10
     3cc:	b1 89       	ldd	r27, Z+17	; 0x11
     3ce:	9a 01       	movw	r18, r20
     3d0:	ab 01       	movw	r20, r22
     3d2:	28 0f       	add	r18, r24
     3d4:	39 1f       	adc	r19, r25
     3d6:	4a 1f       	adc	r20, r26
     3d8:	5b 1f       	adc	r21, r27
     3da:	c8 2c       	mov	r12, r8
     3dc:	d9 2c       	mov	r13, r9
     3de:	ea 2c       	mov	r14, r10
     3e0:	fb 2c       	mov	r15, r11
     3e2:	00 e0       	ldi	r16, 0x00	; 0
     3e4:	10 e0       	ldi	r17, 0x00	; 0
     3e6:	60 e0       	ldi	r22, 0x00	; 0
     3e8:	c2 01       	movw	r24, r4
     3ea:	0e 94 fe 15 	call	0x2bfc	; 0x2bfc <xTimerGenericCommand>
     3ee:	27 c0       	rjmp	.+78     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     3f0:	d2 01       	movw	r26, r4
     3f2:	56 96       	adiw	r26, 0x16	; 22
     3f4:	8c 91       	ld	r24, X
     3f6:	56 97       	sbiw	r26, 0x16	; 22
     3f8:	8e 7f       	andi	r24, 0xFE	; 254
     3fa:	56 96       	adiw	r26, 0x16	; 22
     3fc:	8c 93       	st	X, r24
     3fe:	1f c0       	rjmp	.+62     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     400:	f2 01       	movw	r30, r4
     402:	86 89       	ldd	r24, Z+22	; 0x16
     404:	81 60       	ori	r24, 0x01	; 1
     406:	86 8b       	std	Z+22, r24	; 0x16
     408:	4a 81       	ldd	r20, Y+2	; 0x02
     40a:	5b 81       	ldd	r21, Y+3	; 0x03
     40c:	6c 81       	ldd	r22, Y+4	; 0x04
     40e:	7d 81       	ldd	r23, Y+5	; 0x05
     410:	46 87       	std	Z+14, r20	; 0x0e
     412:	57 87       	std	Z+15, r21	; 0x0f
     414:	60 8b       	std	Z+16, r22	; 0x10
     416:	71 8b       	std	Z+17, r23	; 0x11
     418:	40 0f       	add	r20, r16
     41a:	51 1f       	adc	r21, r17
     41c:	62 1f       	adc	r22, r18
     41e:	73 1f       	adc	r23, r19
     420:	68 01       	movw	r12, r16
     422:	79 01       	movw	r14, r18
     424:	c2 01       	movw	r24, r4
     426:	0e 94 6b 15 	call	0x2ad6	; 0x2ad6 <prvInsertTimerInActiveList>
     42a:	09 c0       	rjmp	.+18     	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     42c:	f2 01       	movw	r30, r4
     42e:	86 89       	ldd	r24, Z+22	; 0x16
     430:	81 fd       	sbrc	r24, 1
     432:	03 c0       	rjmp	.+6      	; 0x43a <__LOCK_REGION_LENGTH__+0x3a>
     434:	c2 01       	movw	r24, r4
     436:	63 d1       	rcall	.+710    	; 0x6fe <vPortFree>
     438:	02 c0       	rjmp	.+4      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     43a:	8e 7f       	andi	r24, 0xFE	; 254
     43c:	86 8b       	std	Z+22, r24	; 0x16
     43e:	28 2d       	mov	r18, r8
     440:	39 2d       	mov	r19, r9
     442:	4a 2d       	mov	r20, r10
     444:	5b 2d       	mov	r21, r11
     446:	66 2d       	mov	r22, r6
     448:	77 2d       	mov	r23, r7
     44a:	80 91 9b 15 	lds	r24, 0x159B	; 0x80159b <xTimerQueue>
     44e:	90 91 9c 15 	lds	r25, 0x159C	; 0x80159c <xTimerQueue+0x1>
     452:	4e d5       	rcall	.+2716   	; 0xef0 <xQueueReceive>
     454:	81 11       	cpse	r24, r1
     456:	6e cf       	rjmp	.-292    	; 0x334 <prvTimerTask+0x12e>
     458:	ea ce       	rjmp	.-556    	; 0x22e <prvTimerTask+0x28>
     45a:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <vTaskSuspendAll>
     45e:	ce 01       	movw	r24, r28
     460:	01 96       	adiw	r24, 0x01	; 1
     462:	0e 94 5c 16 	call	0x2cb8	; 0x2cb8 <prvSampleTimeNow>
     466:	6b 87       	std	Y+11, r22	; 0x0b
     468:	7c 87       	std	Y+12, r23	; 0x0c
     46a:	8d 87       	std	Y+13, r24	; 0x0d
     46c:	9e 87       	std	Y+14, r25	; 0x0e
     46e:	89 81       	ldd	r24, Y+1	; 0x01
     470:	81 11       	cpse	r24, r1
     472:	5d cf       	rjmp	.-326    	; 0x32e <prvTimerTask+0x128>
     474:	e0 91 9d 15 	lds	r30, 0x159D	; 0x80159d <pxOverflowTimerList>
     478:	f0 91 9e 15 	lds	r31, 0x159E	; 0x80159e <pxOverflowTimerList+0x1>
     47c:	80 81       	ld	r24, Z
     47e:	21 e0       	ldi	r18, 0x01	; 1
     480:	81 11       	cpse	r24, r1
     482:	20 e0       	ldi	r18, 0x00	; 0
     484:	28 2c       	mov	r2, r8
     486:	39 2c       	mov	r3, r9
     488:	4a 2c       	mov	r4, r10
     48a:	5b 2c       	mov	r5, r11
     48c:	3b cf       	rjmp	.-394    	; 0x304 <prvTimerTask+0xfe>

0000048e <__ctors_end>:
     48e:	11 24       	eor	r1, r1
     490:	1f be       	out	0x3f, r1	; 63
     492:	cf ef       	ldi	r28, 0xFF	; 255
     494:	d1 e2       	ldi	r29, 0x21	; 33
     496:	de bf       	out	0x3e, r29	; 62
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	00 e0       	ldi	r16, 0x00	; 0
     49c:	0c bf       	out	0x3c, r16	; 60

0000049e <__do_copy_data>:
     49e:	17 e0       	ldi	r17, 0x07	; 7
     4a0:	a0 e0       	ldi	r26, 0x00	; 0
     4a2:	b2 e0       	ldi	r27, 0x02	; 2
     4a4:	e8 e1       	ldi	r30, 0x18	; 24
     4a6:	fa e5       	ldi	r31, 0x5A	; 90
     4a8:	00 e0       	ldi	r16, 0x00	; 0
     4aa:	0b bf       	out	0x3b, r16	; 59
     4ac:	02 c0       	rjmp	.+4      	; 0x4b2 <__do_copy_data+0x14>
     4ae:	07 90       	elpm	r0, Z+
     4b0:	0d 92       	st	X+, r0
     4b2:	a8 31       	cpi	r26, 0x18	; 24
     4b4:	b1 07       	cpc	r27, r17
     4b6:	d9 f7       	brne	.-10     	; 0x4ae <__do_copy_data+0x10>

000004b8 <__do_clear_bss>:
     4b8:	27 e1       	ldi	r18, 0x17	; 23
     4ba:	a8 e1       	ldi	r26, 0x18	; 24
     4bc:	b7 e0       	ldi	r27, 0x07	; 7
     4be:	01 c0       	rjmp	.+2      	; 0x4c2 <.do_clear_bss_start>

000004c0 <.do_clear_bss_loop>:
     4c0:	1d 92       	st	X+, r1

000004c2 <.do_clear_bss_start>:
     4c2:	a8 30       	cpi	r26, 0x08	; 8
     4c4:	b2 07       	cpc	r27, r18
     4c6:	e1 f7       	brne	.-8      	; 0x4c0 <.do_clear_bss_loop>
     4c8:	0e 94 9a 17 	call	0x2f34	; 0x2f34 <main>
     4cc:	0c 94 0a 2d 	jmp	0x5a14	; 0x5a14 <_exit>

000004d0 <__bad_interrupt>:
     4d0:	97 cd       	rjmp	.-1234   	; 0x0 <__vectors>

000004d2 <trace_init>:
 #include <avr/io.h>
 #include <FreeRTOSConfig.h>
 #include "FreeRTOSTraceDriver.h"

 void trace_init(void)
 {
     4d2:	08 95       	ret

000004d4 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
     4d4:	cf 93       	push	r28
     4d6:	df 93       	push	r29
     4d8:	dc 01       	movw	r26, r24
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
     4da:	e4 e2       	ldi	r30, 0x24	; 36
     4dc:	f7 e0       	ldi	r31, 0x07	; 7
     4de:	01 c0       	rjmp	.+2      	; 0x4e2 <prvInsertBlockIntoFreeList+0xe>
     4e0:	f9 01       	movw	r30, r18
     4e2:	20 81       	ld	r18, Z
     4e4:	31 81       	ldd	r19, Z+1	; 0x01
     4e6:	2a 17       	cp	r18, r26
     4e8:	3b 07       	cpc	r19, r27
     4ea:	d0 f3       	brcs	.-12     	; 0x4e0 <prvInsertBlockIntoFreeList+0xc>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
     4ec:	82 81       	ldd	r24, Z+2	; 0x02
     4ee:	93 81       	ldd	r25, Z+3	; 0x03
     4f0:	af 01       	movw	r20, r30
     4f2:	48 0f       	add	r20, r24
     4f4:	59 1f       	adc	r21, r25
     4f6:	a4 17       	cp	r26, r20
     4f8:	b5 07       	cpc	r27, r21
     4fa:	49 f4       	brne	.+18     	; 0x50e <prvInsertBlockIntoFreeList+0x3a>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
     4fc:	12 96       	adiw	r26, 0x02	; 2
     4fe:	4d 91       	ld	r20, X+
     500:	5c 91       	ld	r21, X
     502:	13 97       	sbiw	r26, 0x03	; 3
     504:	84 0f       	add	r24, r20
     506:	95 1f       	adc	r25, r21
     508:	93 83       	std	Z+3, r25	; 0x03
     50a:	82 83       	std	Z+2, r24	; 0x02
     50c:	df 01       	movw	r26, r30

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
     50e:	12 96       	adiw	r26, 0x02	; 2
     510:	8d 91       	ld	r24, X+
     512:	9c 91       	ld	r25, X
     514:	13 97       	sbiw	r26, 0x03	; 3
     516:	ed 01       	movw	r28, r26
     518:	c8 0f       	add	r28, r24
     51a:	d9 1f       	adc	r29, r25
     51c:	2c 17       	cp	r18, r28
     51e:	3d 07       	cpc	r19, r29
     520:	d9 f4       	brne	.+54     	; 0x558 <prvInsertBlockIntoFreeList+0x84>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
     522:	20 91 22 07 	lds	r18, 0x0722	; 0x800722 <pxEnd>
     526:	30 91 23 07 	lds	r19, 0x0723	; 0x800723 <pxEnd+0x1>
     52a:	c2 17       	cp	r28, r18
     52c:	d3 07       	cpc	r29, r19
     52e:	81 f0       	breq	.+32     	; 0x550 <prvInsertBlockIntoFreeList+0x7c>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
     530:	2a 81       	ldd	r18, Y+2	; 0x02
     532:	3b 81       	ldd	r19, Y+3	; 0x03
     534:	82 0f       	add	r24, r18
     536:	93 1f       	adc	r25, r19
     538:	13 96       	adiw	r26, 0x03	; 3
     53a:	9c 93       	st	X, r25
     53c:	8e 93       	st	-X, r24
     53e:	12 97       	sbiw	r26, 0x02	; 2
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
     540:	c0 81       	ld	r28, Z
     542:	d1 81       	ldd	r29, Z+1	; 0x01
     544:	88 81       	ld	r24, Y
     546:	99 81       	ldd	r25, Y+1	; 0x01
     548:	11 96       	adiw	r26, 0x01	; 1
     54a:	9c 93       	st	X, r25
     54c:	8e 93       	st	-X, r24
     54e:	07 c0       	rjmp	.+14     	; 0x55e <prvInsertBlockIntoFreeList+0x8a>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
     550:	11 96       	adiw	r26, 0x01	; 1
     552:	dc 93       	st	X, r29
     554:	ce 93       	st	-X, r28
     556:	03 c0       	rjmp	.+6      	; 0x55e <prvInsertBlockIntoFreeList+0x8a>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
     558:	11 96       	adiw	r26, 0x01	; 1
     55a:	3c 93       	st	X, r19
     55c:	2e 93       	st	-X, r18

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
     55e:	ae 17       	cp	r26, r30
     560:	bf 07       	cpc	r27, r31
     562:	11 f0       	breq	.+4      	; 0x568 <prvInsertBlockIntoFreeList+0x94>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
     564:	b1 83       	std	Z+1, r27	; 0x01
     566:	a0 83       	st	Z, r26
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
     568:	df 91       	pop	r29
     56a:	cf 91       	pop	r28
     56c:	08 95       	ret

0000056e <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
     56e:	cf 92       	push	r12
     570:	df 92       	push	r13
     572:	ef 92       	push	r14
     574:	ff 92       	push	r15
     576:	0f 93       	push	r16
     578:	1f 93       	push	r17
     57a:	cf 93       	push	r28
     57c:	df 93       	push	r29
     57e:	ec 01       	movw	r28, r24
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;

    vTaskSuspendAll();
     580:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
     584:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <pxEnd>
     588:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <pxEnd+0x1>
     58c:	89 2b       	or	r24, r25
     58e:	41 f5       	brne	.+80     	; 0x5e0 <pvPortMalloc+0x72>

    pucAlignedHeap = ( uint8_t * ) uxAddress;

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
     590:	e4 e2       	ldi	r30, 0x24	; 36
     592:	f7 e0       	ldi	r31, 0x07	; 7
     594:	a8 e2       	ldi	r26, 0x28	; 40
     596:	b7 e0       	ldi	r27, 0x07	; 7
     598:	b1 83       	std	Z+1, r27	; 0x01
     59a:	a0 83       	st	Z, r26
    xStart.xBlockSize = ( size_t ) 0;
     59c:	13 82       	std	Z+3, r1	; 0x03
     59e:	12 82       	std	Z+2, r1	; 0x02
    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
    uxAddress -= xHeapStructSize;
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
    pxEnd = ( void * ) uxAddress;
     5a0:	e0 ed       	ldi	r30, 0xD0	; 208
     5a2:	f4 e1       	ldi	r31, 0x14	; 20
     5a4:	f0 93 23 07 	sts	0x0723, r31	; 0x800723 <pxEnd+0x1>
     5a8:	e0 93 22 07 	sts	0x0722, r30	; 0x800722 <pxEnd>
    pxEnd->xBlockSize = 0;
     5ac:	13 82       	std	Z+3, r1	; 0x03
     5ae:	12 82       	std	Z+2, r1	; 0x02
    pxEnd->pxNextFreeBlock = NULL;
     5b0:	11 82       	std	Z+1, r1	; 0x01
     5b2:	10 82       	st	Z, r1

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
     5b4:	88 ea       	ldi	r24, 0xA8	; 168
     5b6:	9d e0       	ldi	r25, 0x0D	; 13
     5b8:	13 96       	adiw	r26, 0x03	; 3
     5ba:	9c 93       	st	X, r25
     5bc:	8e 93       	st	-X, r24
     5be:	12 97       	sbiw	r26, 0x02	; 2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
     5c0:	ed 93       	st	X+, r30
     5c2:	fc 93       	st	X, r31

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5c4:	90 93 1f 07 	sts	0x071F, r25	; 0x80071f <xMinimumEverFreeBytesRemaining+0x1>
     5c8:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <xMinimumEverFreeBytesRemaining>
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
     5cc:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <xFreeBytesRemaining+0x1>
     5d0:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xFreeBytesRemaining>

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
     5d4:	80 e0       	ldi	r24, 0x00	; 0
     5d6:	90 e8       	ldi	r25, 0x80	; 128
     5d8:	90 93 19 07 	sts	0x0719, r25	; 0x800719 <__data_end+0x1>
     5dc:	80 93 18 07 	sts	0x0718, r24	; 0x800718 <__data_end>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
     5e0:	e0 90 18 07 	lds	r14, 0x0718	; 0x800718 <__data_end>
     5e4:	f0 90 19 07 	lds	r15, 0x0719	; 0x800719 <__data_end+0x1>
     5e8:	c7 01       	movw	r24, r14
     5ea:	8c 23       	and	r24, r28
     5ec:	9d 23       	and	r25, r29
     5ee:	89 2b       	or	r24, r25
     5f0:	09 f0       	breq	.+2      	; 0x5f4 <pvPortMalloc+0x86>
     5f2:	75 c0       	rjmp	.+234    	; 0x6de <pvPortMalloc+0x170>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     5f4:	20 97       	sbiw	r28, 0x00	; 0
     5f6:	09 f4       	brne	.+2      	; 0x5fa <pvPortMalloc+0x8c>
     5f8:	75 c0       	rjmp	.+234    	; 0x6e4 <pvPortMalloc+0x176>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
     5fa:	9e 01       	movw	r18, r28
     5fc:	2c 5f       	subi	r18, 0xFC	; 252
     5fe:	3f 4f       	sbci	r19, 0xFF	; 255
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
     600:	c2 17       	cp	r28, r18
     602:	d3 07       	cpc	r29, r19
     604:	08 f0       	brcs	.+2      	; 0x608 <pvPortMalloc+0x9a>
     606:	6e c0       	rjmp	.+220    	; 0x6e4 <pvPortMalloc+0x176>
            else 
            {
                xWantedSize = 0;
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
     608:	21 15       	cp	r18, r1
     60a:	31 05       	cpc	r19, r1
     60c:	09 f4       	brne	.+2      	; 0x610 <pvPortMalloc+0xa2>
     60e:	67 c0       	rjmp	.+206    	; 0x6de <pvPortMalloc+0x170>
     610:	00 91 20 07 	lds	r16, 0x0720	; 0x800720 <xFreeBytesRemaining>
     614:	10 91 21 07 	lds	r17, 0x0721	; 0x800721 <xFreeBytesRemaining+0x1>
     618:	02 17       	cp	r16, r18
     61a:	13 07       	cpc	r17, r19
     61c:	08 f4       	brcc	.+2      	; 0x620 <pvPortMalloc+0xb2>
     61e:	5f c0       	rjmp	.+190    	; 0x6de <pvPortMalloc+0x170>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;
     620:	c0 91 24 07 	lds	r28, 0x0724	; 0x800724 <xStart>
     624:	d0 91 25 07 	lds	r29, 0x0725	; 0x800725 <xStart+0x1>

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
     628:	e4 e2       	ldi	r30, 0x24	; 36
     62a:	f7 e0       	ldi	r31, 0x07	; 7
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     62c:	02 c0       	rjmp	.+4      	; 0x632 <pvPortMalloc+0xc4>
     62e:	fe 01       	movw	r30, r28
                {
                    pxPreviousBlock = pxBlock;
                    pxBlock = pxBlock->pxNextFreeBlock;
     630:	ec 01       	movw	r28, r24
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
                pxBlock = xStart.pxNextFreeBlock;

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
     632:	8a 81       	ldd	r24, Y+2	; 0x02
     634:	9b 81       	ldd	r25, Y+3	; 0x03
     636:	82 17       	cp	r24, r18
     638:	93 07       	cpc	r25, r19
     63a:	20 f4       	brcc	.+8      	; 0x644 <pvPortMalloc+0xd6>
     63c:	88 81       	ld	r24, Y
     63e:	99 81       	ldd	r25, Y+1	; 0x01
     640:	00 97       	sbiw	r24, 0x00	; 0
     642:	a9 f7       	brne	.-22     	; 0x62e <pvPortMalloc+0xc0>
                    pxBlock = pxBlock->pxNextFreeBlock;
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
     644:	80 91 22 07 	lds	r24, 0x0722	; 0x800722 <pxEnd>
     648:	90 91 23 07 	lds	r25, 0x0723	; 0x800723 <pxEnd+0x1>
     64c:	c8 17       	cp	r28, r24
     64e:	d9 07       	cpc	r29, r25
     650:	09 f4       	brne	.+2      	; 0x654 <pvPortMalloc+0xe6>
     652:	45 c0       	rjmp	.+138    	; 0x6de <pvPortMalloc+0x170>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
     654:	c0 80       	ld	r12, Z
     656:	d1 80       	ldd	r13, Z+1	; 0x01
     658:	84 e0       	ldi	r24, 0x04	; 4
     65a:	c8 0e       	add	r12, r24
     65c:	d1 1c       	adc	r13, r1

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
     65e:	88 81       	ld	r24, Y
     660:	99 81       	ldd	r25, Y+1	; 0x01
     662:	91 83       	std	Z+1, r25	; 0x01
     664:	80 83       	st	Z, r24

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
     666:	4a 81       	ldd	r20, Y+2	; 0x02
     668:	5b 81       	ldd	r21, Y+3	; 0x03
     66a:	42 1b       	sub	r20, r18
     66c:	53 0b       	sbc	r21, r19
     66e:	49 30       	cpi	r20, 0x09	; 9
     670:	51 05       	cpc	r21, r1
     672:	48 f0       	brcs	.+18     	; 0x686 <pvPortMalloc+0x118>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
     674:	ce 01       	movw	r24, r28
     676:	82 0f       	add	r24, r18
     678:	93 1f       	adc	r25, r19
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
     67a:	fc 01       	movw	r30, r24
     67c:	53 83       	std	Z+3, r21	; 0x03
     67e:	42 83       	std	Z+2, r20	; 0x02
                        pxBlock->xBlockSize = xWantedSize;
     680:	3b 83       	std	Y+3, r19	; 0x03
     682:	2a 83       	std	Y+2, r18	; 0x02

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
     684:	27 df       	rcall	.-434    	; 0x4d4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
     686:	8a 81       	ldd	r24, Y+2	; 0x02
     688:	9b 81       	ldd	r25, Y+3	; 0x03
     68a:	08 1b       	sub	r16, r24
     68c:	19 0b       	sbc	r17, r25
     68e:	10 93 21 07 	sts	0x0721, r17	; 0x800721 <xFreeBytesRemaining+0x1>
     692:	00 93 20 07 	sts	0x0720, r16	; 0x800720 <xFreeBytesRemaining>

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
     696:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <xMinimumEverFreeBytesRemaining>
     69a:	30 91 1f 07 	lds	r19, 0x071F	; 0x80071f <xMinimumEverFreeBytesRemaining+0x1>
     69e:	02 17       	cp	r16, r18
     6a0:	13 07       	cpc	r17, r19
     6a2:	20 f4       	brcc	.+8      	; 0x6ac <pvPortMalloc+0x13e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
     6a4:	10 93 1f 07 	sts	0x071F, r17	; 0x80071f <xMinimumEverFreeBytesRemaining+0x1>
     6a8:	00 93 1e 07 	sts	0x071E, r16	; 0x80071e <xMinimumEverFreeBytesRemaining>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
     6ac:	e8 2a       	or	r14, r24
     6ae:	f9 2a       	or	r15, r25
     6b0:	fb 82       	std	Y+3, r15	; 0x03
     6b2:	ea 82       	std	Y+2, r14	; 0x02
                    pxBlock->pxNextFreeBlock = NULL;
     6b4:	19 82       	std	Y+1, r1	; 0x01
     6b6:	18 82       	st	Y, r1
                    xNumberOfSuccessfulAllocations++;
     6b8:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <xNumberOfSuccessfulAllocations>
     6bc:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <xNumberOfSuccessfulAllocations+0x1>
     6c0:	01 96       	adiw	r24, 0x01	; 1
     6c2:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <xNumberOfSuccessfulAllocations+0x1>
     6c6:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <xNumberOfSuccessfulAllocations>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6ca:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
        {
            if( pvReturn == NULL )
     6ce:	c1 14       	cp	r12, r1
     6d0:	d1 04       	cpc	r13, r1
     6d2:	59 f4       	brne	.+22     	; 0x6ea <pvPortMalloc+0x17c>
            {
                extern void vApplicationMallocFailedHook( void );
                vApplicationMallocFailedHook();
     6d4:	0e 94 f9 16 	call	0x2df2	; 0x2df2 <vApplicationMallocFailedHook>
     6d8:	c1 2c       	mov	r12, r1
     6da:	d1 2c       	mov	r13, r1
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
     6dc:	06 c0       	rjmp	.+12     	; 0x6ea <pvPortMalloc+0x17c>
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
     6de:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskResumeAll>
     6e2:	f8 cf       	rjmp	.-16     	; 0x6d4 <pvPortMalloc+0x166>
     6e4:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskResumeAll>
     6e8:	f5 cf       	rjmp	.-22     	; 0x6d4 <pvPortMalloc+0x166>
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
    return pvReturn;
}
     6ea:	c6 01       	movw	r24, r12
     6ec:	df 91       	pop	r29
     6ee:	cf 91       	pop	r28
     6f0:	1f 91       	pop	r17
     6f2:	0f 91       	pop	r16
     6f4:	ff 90       	pop	r15
     6f6:	ef 90       	pop	r14
     6f8:	df 90       	pop	r13
     6fa:	cf 90       	pop	r12
     6fc:	08 95       	ret

000006fe <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
    uint8_t * puc = ( uint8_t * ) pv;
    BlockLink_t * pxLink;

    if( pv != NULL )
     702:	00 97       	sbiw	r24, 0x00	; 0
     704:	99 f1       	breq	.+102    	; 0x76c <vPortFree+0x6e>

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
        configASSERT( pxLink->pxNextFreeBlock == NULL );

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
     706:	fc 01       	movw	r30, r24
     708:	34 97       	sbiw	r30, 0x04	; 4
     70a:	22 81       	ldd	r18, Z+2	; 0x02
     70c:	33 81       	ldd	r19, Z+3	; 0x03
     70e:	40 91 18 07 	lds	r20, 0x0718	; 0x800718 <__data_end>
     712:	50 91 19 07 	lds	r21, 0x0719	; 0x800719 <__data_end+0x1>
     716:	b9 01       	movw	r22, r18
     718:	64 23       	and	r22, r20
     71a:	75 23       	and	r23, r21
     71c:	67 2b       	or	r22, r23
     71e:	31 f1       	breq	.+76     	; 0x76c <vPortFree+0x6e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
     720:	60 81       	ld	r22, Z
     722:	71 81       	ldd	r23, Z+1	; 0x01
     724:	67 2b       	or	r22, r23
     726:	11 f5       	brne	.+68     	; 0x76c <vPortFree+0x6e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
     728:	ef 01       	movw	r28, r30
     72a:	40 95       	com	r20
     72c:	50 95       	com	r21
     72e:	24 23       	and	r18, r20
     730:	35 23       	and	r19, r21
     732:	33 83       	std	Z+3, r19	; 0x03
     734:	22 83       	std	Z+2, r18	; 0x02

                vTaskSuspendAll();
     736:	0e 94 7f 0d 	call	0x1afe	; 0x1afe <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
     73a:	20 91 20 07 	lds	r18, 0x0720	; 0x800720 <xFreeBytesRemaining>
     73e:	30 91 21 07 	lds	r19, 0x0721	; 0x800721 <xFreeBytesRemaining+0x1>
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	9b 81       	ldd	r25, Y+3	; 0x03
     746:	82 0f       	add	r24, r18
     748:	93 1f       	adc	r25, r19
     74a:	90 93 21 07 	sts	0x0721, r25	; 0x800721 <xFreeBytesRemaining+0x1>
     74e:	80 93 20 07 	sts	0x0720, r24	; 0x800720 <xFreeBytesRemaining>
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
     752:	ce 01       	movw	r24, r28
     754:	bf de       	rcall	.-642    	; 0x4d4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
     756:	80 91 1a 07 	lds	r24, 0x071A	; 0x80071a <xNumberOfSuccessfulFrees>
     75a:	90 91 1b 07 	lds	r25, 0x071B	; 0x80071b <xNumberOfSuccessfulFrees+0x1>
     75e:	01 96       	adiw	r24, 0x01	; 1
     760:	90 93 1b 07 	sts	0x071B, r25	; 0x80071b <xNumberOfSuccessfulFrees+0x1>
     764:	80 93 1a 07 	sts	0x071A, r24	; 0x80071a <xNumberOfSuccessfulFrees>
                }
                ( void ) xTaskResumeAll();
     768:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
     76c:	df 91       	pop	r29
     76e:	cf 91       	pop	r28
     770:	08 95       	ret

00000772 <vListInitialise>:

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
}
     772:	fc 01       	movw	r30, r24
     774:	03 96       	adiw	r24, 0x03	; 3
     776:	92 83       	std	Z+2, r25	; 0x02
     778:	81 83       	std	Z+1, r24	; 0x01
     77a:	4f ef       	ldi	r20, 0xFF	; 255
     77c:	5f ef       	ldi	r21, 0xFF	; 255
     77e:	ba 01       	movw	r22, r20
     780:	43 83       	std	Z+3, r20	; 0x03
     782:	54 83       	std	Z+4, r21	; 0x04
     784:	65 83       	std	Z+5, r22	; 0x05
     786:	76 83       	std	Z+6, r23	; 0x06
     788:	90 87       	std	Z+8, r25	; 0x08
     78a:	87 83       	std	Z+7, r24	; 0x07
     78c:	92 87       	std	Z+10, r25	; 0x0a
     78e:	81 87       	std	Z+9, r24	; 0x09
     790:	10 82       	st	Z, r1
     792:	08 95       	ret

00000794 <vListInitialiseItem>:
     794:	fc 01       	movw	r30, r24
     796:	13 86       	std	Z+11, r1	; 0x0b
     798:	12 86       	std	Z+10, r1	; 0x0a
     79a:	08 95       	ret

0000079c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
     79c:	0f 93       	push	r16
     79e:	1f 93       	push	r17
     7a0:	cf 93       	push	r28
     7a2:	df 93       	push	r29
     7a4:	eb 01       	movw	r28, r22
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
     7a6:	08 81       	ld	r16, Y
     7a8:	19 81       	ldd	r17, Y+1	; 0x01
     7aa:	2a 81       	ldd	r18, Y+2	; 0x02
     7ac:	3b 81       	ldd	r19, Y+3	; 0x03
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
     7ae:	0f 3f       	cpi	r16, 0xFF	; 255
     7b0:	4f ef       	ldi	r20, 0xFF	; 255
     7b2:	14 07       	cpc	r17, r20
     7b4:	24 07       	cpc	r18, r20
     7b6:	34 07       	cpc	r19, r20
     7b8:	21 f4       	brne	.+8      	; 0x7c2 <vListInsert+0x26>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
     7ba:	fc 01       	movw	r30, r24
     7bc:	a1 85       	ldd	r26, Z+9	; 0x09
     7be:	b2 85       	ldd	r27, Z+10	; 0x0a
     7c0:	11 c0       	rjmp	.+34     	; 0x7e4 <vListInsert+0x48>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
     7c2:	dc 01       	movw	r26, r24
     7c4:	13 96       	adiw	r26, 0x03	; 3
     7c6:	01 c0       	rjmp	.+2      	; 0x7ca <vListInsert+0x2e>
     7c8:	df 01       	movw	r26, r30
     7ca:	14 96       	adiw	r26, 0x04	; 4
     7cc:	ed 91       	ld	r30, X+
     7ce:	fc 91       	ld	r31, X
     7d0:	15 97       	sbiw	r26, 0x05	; 5
     7d2:	40 81       	ld	r20, Z
     7d4:	51 81       	ldd	r21, Z+1	; 0x01
     7d6:	62 81       	ldd	r22, Z+2	; 0x02
     7d8:	73 81       	ldd	r23, Z+3	; 0x03
     7da:	04 17       	cp	r16, r20
     7dc:	15 07       	cpc	r17, r21
     7de:	26 07       	cpc	r18, r22
     7e0:	37 07       	cpc	r19, r23
     7e2:	90 f7       	brcc	.-28     	; 0x7c8 <vListInsert+0x2c>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
     7e4:	14 96       	adiw	r26, 0x04	; 4
     7e6:	ed 91       	ld	r30, X+
     7e8:	fc 91       	ld	r31, X
     7ea:	15 97       	sbiw	r26, 0x05	; 5
     7ec:	fd 83       	std	Y+5, r31	; 0x05
     7ee:	ec 83       	std	Y+4, r30	; 0x04
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
     7f0:	d7 83       	std	Z+7, r29	; 0x07
     7f2:	c6 83       	std	Z+6, r28	; 0x06
    pxNewListItem->pxPrevious = pxIterator;
     7f4:	bf 83       	std	Y+7, r27	; 0x07
     7f6:	ae 83       	std	Y+6, r26	; 0x06
    pxIterator->pxNext = pxNewListItem;
     7f8:	15 96       	adiw	r26, 0x05	; 5
     7fa:	dc 93       	st	X, r29
     7fc:	ce 93       	st	-X, r28
     7fe:	14 97       	sbiw	r26, 0x04	; 4

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
     800:	9b 87       	std	Y+11, r25	; 0x0b
     802:	8a 87       	std	Y+10, r24	; 0x0a

    ( pxList->uxNumberOfItems )++;
     804:	fc 01       	movw	r30, r24
     806:	20 81       	ld	r18, Z
     808:	2f 5f       	subi	r18, 0xFF	; 255
     80a:	20 83       	st	Z, r18
}
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	1f 91       	pop	r17
     812:	0f 91       	pop	r16
     814:	08 95       	ret

00000816 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
     816:	cf 93       	push	r28
     818:	df 93       	push	r29
     81a:	fc 01       	movw	r30, r24
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
     81c:	a2 85       	ldd	r26, Z+10	; 0x0a
     81e:	b3 85       	ldd	r27, Z+11	; 0x0b

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
     820:	c4 81       	ldd	r28, Z+4	; 0x04
     822:	d5 81       	ldd	r29, Z+5	; 0x05
     824:	86 81       	ldd	r24, Z+6	; 0x06
     826:	97 81       	ldd	r25, Z+7	; 0x07
     828:	9f 83       	std	Y+7, r25	; 0x07
     82a:	8e 83       	std	Y+6, r24	; 0x06
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
     82c:	c6 81       	ldd	r28, Z+6	; 0x06
     82e:	d7 81       	ldd	r29, Z+7	; 0x07
     830:	84 81       	ldd	r24, Z+4	; 0x04
     832:	95 81       	ldd	r25, Z+5	; 0x05
     834:	9d 83       	std	Y+5, r25	; 0x05
     836:	8c 83       	std	Y+4, r24	; 0x04

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
     838:	11 96       	adiw	r26, 0x01	; 1
     83a:	8d 91       	ld	r24, X+
     83c:	9c 91       	ld	r25, X
     83e:	12 97       	sbiw	r26, 0x02	; 2
     840:	e8 17       	cp	r30, r24
     842:	f9 07       	cpc	r31, r25
     844:	31 f4       	brne	.+12     	; 0x852 <uxListRemove+0x3c>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
     846:	86 81       	ldd	r24, Z+6	; 0x06
     848:	97 81       	ldd	r25, Z+7	; 0x07
     84a:	12 96       	adiw	r26, 0x02	; 2
     84c:	9c 93       	st	X, r25
     84e:	8e 93       	st	-X, r24
     850:	11 97       	sbiw	r26, 0x01	; 1
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
     852:	13 86       	std	Z+11, r1	; 0x0b
     854:	12 86       	std	Z+10, r1	; 0x0a
    ( pxList->uxNumberOfItems )--;
     856:	8c 91       	ld	r24, X
     858:	81 50       	subi	r24, 0x01	; 1
     85a:	8c 93       	st	X, r24

    return pxList->uxNumberOfItems;
     85c:	8c 91       	ld	r24, X
}
     85e:	df 91       	pop	r29
     860:	cf 91       	pop	r28
     862:	08 95       	ret

00000864 <pxPortInitialiseStack>:
{
    portSAVE_CONTEXT();
    vTaskSwitchContext();
    portRESTORE_CONTEXT();

    __asm__ __volatile__ ( "reti" );
     864:	fc 01       	movw	r30, r24
     866:	60 83       	st	Z, r22
     868:	31 97       	sbiw	r30, 0x01	; 1
     86a:	70 83       	st	Z, r23
     86c:	31 97       	sbiw	r30, 0x01	; 1
     86e:	10 82       	st	Z, r1
     870:	31 97       	sbiw	r30, 0x01	; 1
     872:	10 82       	st	Z, r1
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	20 e8       	ldi	r18, 0x80	; 128
     878:	20 83       	st	Z, r18
     87a:	31 97       	sbiw	r30, 0x01	; 1
     87c:	10 82       	st	Z, r1
     87e:	31 97       	sbiw	r30, 0x01	; 1
     880:	10 82       	st	Z, r1
     882:	31 97       	sbiw	r30, 0x01	; 1
     884:	10 82       	st	Z, r1
     886:	77 97       	sbiw	r30, 0x17	; 23
     888:	40 83       	st	Z, r20
     88a:	31 97       	sbiw	r30, 0x01	; 1
     88c:	50 83       	st	Z, r21
     88e:	86 97       	sbiw	r24, 0x26	; 38
     890:	08 95       	ret

00000892 <xPortStartScheduler>:
     892:	a8 95       	wdr
     894:	90 ec       	ldi	r25, 0xC0	; 192
     896:	88 e1       	ldi	r24, 0x18	; 24
     898:	0f b6       	in	r0, 0x3f	; 63
     89a:	f8 94       	cli
     89c:	a8 95       	wdr
     89e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     8a2:	0f be       	out	0x3f, r0	; 63
     8a4:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x700060>
     8a8:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
     8ac:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
     8b0:	cd 91       	ld	r28, X+
     8b2:	cd bf       	out	0x3d, r28	; 61
     8b4:	dd 91       	ld	r29, X+
     8b6:	de bf       	out	0x3e, r29	; 62
     8b8:	ff 91       	pop	r31
     8ba:	ef 91       	pop	r30
     8bc:	df 91       	pop	r29
     8be:	cf 91       	pop	r28
     8c0:	bf 91       	pop	r27
     8c2:	af 91       	pop	r26
     8c4:	9f 91       	pop	r25
     8c6:	8f 91       	pop	r24
     8c8:	7f 91       	pop	r23
     8ca:	6f 91       	pop	r22
     8cc:	5f 91       	pop	r21
     8ce:	4f 91       	pop	r20
     8d0:	3f 91       	pop	r19
     8d2:	2f 91       	pop	r18
     8d4:	1f 91       	pop	r17
     8d6:	0f 91       	pop	r16
     8d8:	ff 90       	pop	r15
     8da:	ef 90       	pop	r14
     8dc:	df 90       	pop	r13
     8de:	cf 90       	pop	r12
     8e0:	bf 90       	pop	r11
     8e2:	af 90       	pop	r10
     8e4:	9f 90       	pop	r9
     8e6:	8f 90       	pop	r8
     8e8:	7f 90       	pop	r7
     8ea:	6f 90       	pop	r6
     8ec:	5f 90       	pop	r5
     8ee:	4f 90       	pop	r4
     8f0:	3f 90       	pop	r3
     8f2:	2f 90       	pop	r2
     8f4:	1f 90       	pop	r1
     8f6:	0f 90       	pop	r0
     8f8:	0c be       	out	0x3c, r0	; 60
     8fa:	0f 90       	pop	r0
     8fc:	0b be       	out	0x3b, r0	; 59
     8fe:	0f 90       	pop	r0
     900:	0f be       	out	0x3f, r0	; 63
     902:	0f 90       	pop	r0
     904:	08 95       	ret
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	08 95       	ret

0000090a <vPortYield>:
     90a:	0f 92       	push	r0
     90c:	0f b6       	in	r0, 0x3f	; 63
     90e:	f8 94       	cli
     910:	0f 92       	push	r0
     912:	0b b6       	in	r0, 0x3b	; 59
     914:	0f 92       	push	r0
     916:	0c b6       	in	r0, 0x3c	; 60
     918:	0f 92       	push	r0
     91a:	1f 92       	push	r1
     91c:	11 24       	eor	r1, r1
     91e:	2f 92       	push	r2
     920:	3f 92       	push	r3
     922:	4f 92       	push	r4
     924:	5f 92       	push	r5
     926:	6f 92       	push	r6
     928:	7f 92       	push	r7
     92a:	8f 92       	push	r8
     92c:	9f 92       	push	r9
     92e:	af 92       	push	r10
     930:	bf 92       	push	r11
     932:	cf 92       	push	r12
     934:	df 92       	push	r13
     936:	ef 92       	push	r14
     938:	ff 92       	push	r15
     93a:	0f 93       	push	r16
     93c:	1f 93       	push	r17
     93e:	2f 93       	push	r18
     940:	3f 93       	push	r19
     942:	4f 93       	push	r20
     944:	5f 93       	push	r21
     946:	6f 93       	push	r22
     948:	7f 93       	push	r23
     94a:	8f 93       	push	r24
     94c:	9f 93       	push	r25
     94e:	af 93       	push	r26
     950:	bf 93       	push	r27
     952:	cf 93       	push	r28
     954:	df 93       	push	r29
     956:	ef 93       	push	r30
     958:	ff 93       	push	r31
     95a:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
     95e:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
     962:	0d b6       	in	r0, 0x3d	; 61
     964:	0d 92       	st	X+, r0
     966:	0e b6       	in	r0, 0x3e	; 62
     968:	0d 92       	st	X+, r0
     96a:	0e 94 2c 10 	call	0x2058	; 0x2058 <vTaskSwitchContext>
     96e:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
     972:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
     976:	cd 91       	ld	r28, X+
     978:	cd bf       	out	0x3d, r28	; 61
     97a:	dd 91       	ld	r29, X+
     97c:	de bf       	out	0x3e, r29	; 62
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	df 91       	pop	r29
     984:	cf 91       	pop	r28
     986:	bf 91       	pop	r27
     988:	af 91       	pop	r26
     98a:	9f 91       	pop	r25
     98c:	8f 91       	pop	r24
     98e:	7f 91       	pop	r23
     990:	6f 91       	pop	r22
     992:	5f 91       	pop	r21
     994:	4f 91       	pop	r20
     996:	3f 91       	pop	r19
     998:	2f 91       	pop	r18
     99a:	1f 91       	pop	r17
     99c:	0f 91       	pop	r16
     99e:	ff 90       	pop	r15
     9a0:	ef 90       	pop	r14
     9a2:	df 90       	pop	r13
     9a4:	cf 90       	pop	r12
     9a6:	bf 90       	pop	r11
     9a8:	af 90       	pop	r10
     9aa:	9f 90       	pop	r9
     9ac:	8f 90       	pop	r8
     9ae:	7f 90       	pop	r7
     9b0:	6f 90       	pop	r6
     9b2:	5f 90       	pop	r5
     9b4:	4f 90       	pop	r4
     9b6:	3f 90       	pop	r3
     9b8:	2f 90       	pop	r2
     9ba:	1f 90       	pop	r1
     9bc:	0f 90       	pop	r0
     9be:	0c be       	out	0x3c, r0	; 60
     9c0:	0f 90       	pop	r0
     9c2:	0b be       	out	0x3b, r0	; 59
     9c4:	0f 90       	pop	r0
     9c6:	0f be       	out	0x3f, r0	; 63
     9c8:	0f 90       	pop	r0
     9ca:	08 95       	ret

000009cc <vPortYieldFromTick>:
 * call comes from the tick ISR.
 */
void vPortYieldFromTick( void ) __attribute__ ( ( hot, flatten, naked ) );
void vPortYieldFromTick( void )
{
    portSAVE_CONTEXT();
     9cc:	0f 92       	push	r0
     9ce:	0f b6       	in	r0, 0x3f	; 63
     9d0:	f8 94       	cli
     9d2:	0f 92       	push	r0
     9d4:	0b b6       	in	r0, 0x3b	; 59
     9d6:	0f 92       	push	r0
     9d8:	0c b6       	in	r0, 0x3c	; 60
     9da:	0f 92       	push	r0
     9dc:	1f 92       	push	r1
     9de:	11 24       	eor	r1, r1
     9e0:	2f 92       	push	r2
     9e2:	3f 92       	push	r3
     9e4:	4f 92       	push	r4
     9e6:	5f 92       	push	r5
     9e8:	6f 92       	push	r6
     9ea:	7f 92       	push	r7
     9ec:	8f 92       	push	r8
     9ee:	9f 92       	push	r9
     9f0:	af 92       	push	r10
     9f2:	bf 92       	push	r11
     9f4:	cf 92       	push	r12
     9f6:	df 92       	push	r13
     9f8:	ef 92       	push	r14
     9fa:	ff 92       	push	r15
     9fc:	0f 93       	push	r16
     9fe:	1f 93       	push	r17
     a00:	2f 93       	push	r18
     a02:	3f 93       	push	r19
     a04:	4f 93       	push	r20
     a06:	5f 93       	push	r21
     a08:	6f 93       	push	r22
     a0a:	7f 93       	push	r23
     a0c:	8f 93       	push	r24
     a0e:	9f 93       	push	r25
     a10:	af 93       	push	r26
     a12:	bf 93       	push	r27
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ef 93       	push	r30
     a1a:	ff 93       	push	r31
     a1c:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
     a20:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
     a24:	0d b6       	in	r0, 0x3d	; 61
     a26:	0d 92       	st	X+, r0
     a28:	0e b6       	in	r0, 0x3e	; 62
     a2a:	0d 92       	st	X+, r0
    sleep_reset();        /* reset the sleep_mode() faster than sleep_disable(); */
     a2c:	13 be       	out	0x33, r1	; 51
    if( xTaskIncrementTick() != pdFALSE )
     a2e:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <xTaskIncrementTick>
     a32:	81 11       	cpse	r24, r1
    {
        vTaskSwitchContext();
     a34:	0e 94 2c 10 	call	0x2058	; 0x2058 <vTaskSwitchContext>
    }
    portRESTORE_CONTEXT();
     a38:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
     a3c:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
     a40:	cd 91       	ld	r28, X+
     a42:	cd bf       	out	0x3d, r28	; 61
     a44:	dd 91       	ld	r29, X+
     a46:	de bf       	out	0x3e, r29	; 62
     a48:	ff 91       	pop	r31
     a4a:	ef 91       	pop	r30
     a4c:	df 91       	pop	r29
     a4e:	cf 91       	pop	r28
     a50:	bf 91       	pop	r27
     a52:	af 91       	pop	r26
     a54:	9f 91       	pop	r25
     a56:	8f 91       	pop	r24
     a58:	7f 91       	pop	r23
     a5a:	6f 91       	pop	r22
     a5c:	5f 91       	pop	r21
     a5e:	4f 91       	pop	r20
     a60:	3f 91       	pop	r19
     a62:	2f 91       	pop	r18
     a64:	1f 91       	pop	r17
     a66:	0f 91       	pop	r16
     a68:	ff 90       	pop	r15
     a6a:	ef 90       	pop	r14
     a6c:	df 90       	pop	r13
     a6e:	cf 90       	pop	r12
     a70:	bf 90       	pop	r11
     a72:	af 90       	pop	r10
     a74:	9f 90       	pop	r9
     a76:	8f 90       	pop	r8
     a78:	7f 90       	pop	r7
     a7a:	6f 90       	pop	r6
     a7c:	5f 90       	pop	r5
     a7e:	4f 90       	pop	r4
     a80:	3f 90       	pop	r3
     a82:	2f 90       	pop	r2
     a84:	1f 90       	pop	r1
     a86:	0f 90       	pop	r0
     a88:	0c be       	out	0x3c, r0	; 60
     a8a:	0f 90       	pop	r0
     a8c:	0b be       	out	0x3b, r0	; 59
     a8e:	0f 90       	pop	r0
     a90:	0f be       	out	0x3f, r0	; 63
     a92:	0f 90       	pop	r0

    __asm__ __volatile__ ( "ret" );
     a94:	08 95       	ret

00000a96 <__vector_12>:
    ISR(portSCHEDULER_ISR, ISR_NAKED) __attribute__ ((hot, flatten));
/*  ISR(portSCHEDULER_ISR, ISR_NAKED ISR_NOBLOCK) __attribute__ ((hot, flatten));
 */
    ISR(portSCHEDULER_ISR)
    {
        vPortYieldFromTick();
     a96:	9a df       	rcall	.-204    	; 0x9cc <vPortYieldFromTick>
        __asm__ __volatile__ ( "reti" );
     a98:	18 95       	reti

00000a9a <prvIsQueueEmpty>:
    {
        xReturn = pdFALSE;
    }

    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
     a9a:	0f b6       	in	r0, 0x3f	; 63
     a9c:	f8 94       	cli
     a9e:	0f 92       	push	r0
     aa0:	fc 01       	movw	r30, r24
     aa2:	96 8d       	ldd	r25, Z+30	; 0x1e
     aa4:	0f 90       	pop	r0
     aa6:	0f be       	out	0x3f, r0	; 63
     aa8:	81 e0       	ldi	r24, 0x01	; 1
     aaa:	91 11       	cpse	r25, r1
     aac:	80 e0       	ldi	r24, 0x00	; 0
     aae:	08 95       	ret

00000ab0 <prvCopyDataToQueue>:
     ab0:	0f 93       	push	r16
     ab2:	1f 93       	push	r17
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	ec 01       	movw	r28, r24
     aba:	04 2f       	mov	r16, r20
     abc:	1e 8d       	ldd	r17, Y+30	; 0x1e
     abe:	48 a1       	ldd	r20, Y+32	; 0x20
     ac0:	41 11       	cpse	r20, r1
     ac2:	0c c0       	rjmp	.+24     	; 0xadc <prvCopyDataToQueue+0x2c>
     ac4:	88 81       	ld	r24, Y
     ac6:	99 81       	ldd	r25, Y+1	; 0x01
     ac8:	89 2b       	or	r24, r25
     aca:	09 f0       	breq	.+2      	; 0xace <prvCopyDataToQueue+0x1e>
     acc:	42 c0       	rjmp	.+132    	; 0xb52 <prvCopyDataToQueue+0xa2>
     ace:	8c 81       	ldd	r24, Y+4	; 0x04
     ad0:	9d 81       	ldd	r25, Y+5	; 0x05
     ad2:	0e 94 3d 12 	call	0x247a	; 0x247a <xTaskPriorityDisinherit>
     ad6:	1d 82       	std	Y+5, r1	; 0x05
     ad8:	1c 82       	std	Y+4, r1	; 0x04
     ada:	42 c0       	rjmp	.+132    	; 0xb60 <prvCopyDataToQueue+0xb0>
     adc:	01 11       	cpse	r16, r1
     ade:	17 c0       	rjmp	.+46     	; 0xb0e <prvCopyDataToQueue+0x5e>
     ae0:	50 e0       	ldi	r21, 0x00	; 0
     ae2:	8a 81       	ldd	r24, Y+2	; 0x02
     ae4:	9b 81       	ldd	r25, Y+3	; 0x03
     ae6:	0e 94 8d 29 	call	0x531a	; 0x531a <memcpy>
     aea:	28 a1       	ldd	r18, Y+32	; 0x20
     aec:	8a 81       	ldd	r24, Y+2	; 0x02
     aee:	9b 81       	ldd	r25, Y+3	; 0x03
     af0:	82 0f       	add	r24, r18
     af2:	91 1d       	adc	r25, r1
     af4:	9b 83       	std	Y+3, r25	; 0x03
     af6:	8a 83       	std	Y+2, r24	; 0x02
     af8:	2c 81       	ldd	r18, Y+4	; 0x04
     afa:	3d 81       	ldd	r19, Y+5	; 0x05
     afc:	82 17       	cp	r24, r18
     afe:	93 07       	cpc	r25, r19
     b00:	50 f1       	brcs	.+84     	; 0xb56 <prvCopyDataToQueue+0xa6>
     b02:	88 81       	ld	r24, Y
     b04:	99 81       	ldd	r25, Y+1	; 0x01
     b06:	9b 83       	std	Y+3, r25	; 0x03
     b08:	8a 83       	std	Y+2, r24	; 0x02
     b0a:	80 e0       	ldi	r24, 0x00	; 0
     b0c:	29 c0       	rjmp	.+82     	; 0xb60 <prvCopyDataToQueue+0xb0>
     b0e:	50 e0       	ldi	r21, 0x00	; 0
     b10:	8e 81       	ldd	r24, Y+6	; 0x06
     b12:	9f 81       	ldd	r25, Y+7	; 0x07
     b14:	0e 94 8d 29 	call	0x531a	; 0x531a <memcpy>
     b18:	88 a1       	ldd	r24, Y+32	; 0x20
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	91 95       	neg	r25
     b1e:	81 95       	neg	r24
     b20:	91 09       	sbc	r25, r1
     b22:	2e 81       	ldd	r18, Y+6	; 0x06
     b24:	3f 81       	ldd	r19, Y+7	; 0x07
     b26:	28 0f       	add	r18, r24
     b28:	39 1f       	adc	r19, r25
     b2a:	3f 83       	std	Y+7, r19	; 0x07
     b2c:	2e 83       	std	Y+6, r18	; 0x06
     b2e:	48 81       	ld	r20, Y
     b30:	59 81       	ldd	r21, Y+1	; 0x01
     b32:	24 17       	cp	r18, r20
     b34:	35 07       	cpc	r19, r21
     b36:	30 f4       	brcc	.+12     	; 0xb44 <prvCopyDataToQueue+0x94>
     b38:	2c 81       	ldd	r18, Y+4	; 0x04
     b3a:	3d 81       	ldd	r19, Y+5	; 0x05
     b3c:	82 0f       	add	r24, r18
     b3e:	93 1f       	adc	r25, r19
     b40:	9f 83       	std	Y+7, r25	; 0x07
     b42:	8e 83       	std	Y+6, r24	; 0x06
     b44:	02 30       	cpi	r16, 0x02	; 2
     b46:	49 f4       	brne	.+18     	; 0xb5a <prvCopyDataToQueue+0xaa>
     b48:	11 23       	and	r17, r17
     b4a:	49 f0       	breq	.+18     	; 0xb5e <prvCopyDataToQueue+0xae>
     b4c:	11 50       	subi	r17, 0x01	; 1
     b4e:	80 e0       	ldi	r24, 0x00	; 0
     b50:	07 c0       	rjmp	.+14     	; 0xb60 <prvCopyDataToQueue+0xb0>
     b52:	80 e0       	ldi	r24, 0x00	; 0
     b54:	05 c0       	rjmp	.+10     	; 0xb60 <prvCopyDataToQueue+0xb0>
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	03 c0       	rjmp	.+6      	; 0xb60 <prvCopyDataToQueue+0xb0>
     b5a:	80 e0       	ldi	r24, 0x00	; 0
     b5c:	01 c0       	rjmp	.+2      	; 0xb60 <prvCopyDataToQueue+0xb0>
     b5e:	80 e0       	ldi	r24, 0x00	; 0
     b60:	1f 5f       	subi	r17, 0xFF	; 255
     b62:	1e 8f       	std	Y+30, r17	; 0x1e
     b64:	df 91       	pop	r29
     b66:	cf 91       	pop	r28
     b68:	1f 91       	pop	r17
     b6a:	0f 91       	pop	r16
     b6c:	08 95       	ret

00000b6e <prvCopyDataFromQueue>:
     b6e:	fc 01       	movw	r30, r24
     b70:	40 a1       	ldd	r20, Z+32	; 0x20
     b72:	44 23       	and	r20, r20
     b74:	a9 f0       	breq	.+42     	; 0xba0 <prvCopyDataFromQueue+0x32>
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	26 81       	ldd	r18, Z+6	; 0x06
     b7a:	37 81       	ldd	r19, Z+7	; 0x07
     b7c:	24 0f       	add	r18, r20
     b7e:	35 1f       	adc	r19, r21
     b80:	37 83       	std	Z+7, r19	; 0x07
     b82:	26 83       	std	Z+6, r18	; 0x06
     b84:	84 81       	ldd	r24, Z+4	; 0x04
     b86:	95 81       	ldd	r25, Z+5	; 0x05
     b88:	28 17       	cp	r18, r24
     b8a:	39 07       	cpc	r19, r25
     b8c:	20 f0       	brcs	.+8      	; 0xb96 <prvCopyDataFromQueue+0x28>
     b8e:	80 81       	ld	r24, Z
     b90:	91 81       	ldd	r25, Z+1	; 0x01
     b92:	97 83       	std	Z+7, r25	; 0x07
     b94:	86 83       	std	Z+6, r24	; 0x06
     b96:	cb 01       	movw	r24, r22
     b98:	66 81       	ldd	r22, Z+6	; 0x06
     b9a:	77 81       	ldd	r23, Z+7	; 0x07
     b9c:	0c 94 8d 29 	jmp	0x531a	; 0x531a <memcpy>
     ba0:	08 95       	ret

00000ba2 <prvUnlockQueue>:
     ba2:	ef 92       	push	r14
     ba4:	ff 92       	push	r15
     ba6:	0f 93       	push	r16
     ba8:	1f 93       	push	r17
     baa:	cf 93       	push	r28
     bac:	8c 01       	movw	r16, r24
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	0f 92       	push	r0
     bb4:	fc 01       	movw	r30, r24
     bb6:	c2 a1       	ldd	r28, Z+34	; 0x22
     bb8:	1c 16       	cp	r1, r28
     bba:	ac f4       	brge	.+42     	; 0xbe6 <prvUnlockQueue+0x44>
     bbc:	83 89       	ldd	r24, Z+19	; 0x13
     bbe:	81 11       	cpse	r24, r1
     bc0:	06 c0       	rjmp	.+12     	; 0xbce <prvUnlockQueue+0x2c>
     bc2:	11 c0       	rjmp	.+34     	; 0xbe6 <prvUnlockQueue+0x44>
     bc4:	f8 01       	movw	r30, r16
     bc6:	83 89       	ldd	r24, Z+19	; 0x13
     bc8:	81 11       	cpse	r24, r1
     bca:	05 c0       	rjmp	.+10     	; 0xbd6 <prvUnlockQueue+0x34>
     bcc:	0c c0       	rjmp	.+24     	; 0xbe6 <prvUnlockQueue+0x44>
     bce:	78 01       	movw	r14, r16
     bd0:	f3 e1       	ldi	r31, 0x13	; 19
     bd2:	ef 0e       	add	r14, r31
     bd4:	f1 1c       	adc	r15, r1
     bd6:	c7 01       	movw	r24, r14
     bd8:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     bdc:	81 11       	cpse	r24, r1
     bde:	0e 94 26 12 	call	0x244c	; 0x244c <vTaskMissedYield>
     be2:	c1 50       	subi	r28, 0x01	; 1
     be4:	79 f7       	brne	.-34     	; 0xbc4 <prvUnlockQueue+0x22>
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	f8 01       	movw	r30, r16
     bea:	82 a3       	std	Z+34, r24	; 0x22
     bec:	0f 90       	pop	r0
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	0f 92       	push	r0
     bf6:	c1 a1       	ldd	r28, Z+33	; 0x21
     bf8:	1c 16       	cp	r1, r28
     bfa:	ac f4       	brge	.+42     	; 0xc26 <prvUnlockQueue+0x84>
     bfc:	80 85       	ldd	r24, Z+8	; 0x08
     bfe:	81 11       	cpse	r24, r1
     c00:	06 c0       	rjmp	.+12     	; 0xc0e <prvUnlockQueue+0x6c>
     c02:	11 c0       	rjmp	.+34     	; 0xc26 <prvUnlockQueue+0x84>
     c04:	f8 01       	movw	r30, r16
     c06:	80 85       	ldd	r24, Z+8	; 0x08
     c08:	81 11       	cpse	r24, r1
     c0a:	05 c0       	rjmp	.+10     	; 0xc16 <prvUnlockQueue+0x74>
     c0c:	0c c0       	rjmp	.+24     	; 0xc26 <prvUnlockQueue+0x84>
     c0e:	78 01       	movw	r14, r16
     c10:	f8 e0       	ldi	r31, 0x08	; 8
     c12:	ef 0e       	add	r14, r31
     c14:	f1 1c       	adc	r15, r1
     c16:	c7 01       	movw	r24, r14
     c18:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     c1c:	81 11       	cpse	r24, r1
     c1e:	0e 94 26 12 	call	0x244c	; 0x244c <vTaskMissedYield>
     c22:	c1 50       	subi	r28, 0x01	; 1
     c24:	79 f7       	brne	.-34     	; 0xc04 <prvUnlockQueue+0x62>
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	f8 01       	movw	r30, r16
     c2a:	81 a3       	std	Z+33, r24	; 0x21
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	cf 91       	pop	r28
     c32:	1f 91       	pop	r17
     c34:	0f 91       	pop	r16
     c36:	ff 90       	pop	r15
     c38:	ef 90       	pop	r14
     c3a:	08 95       	ret

00000c3c <xQueueGenericReset>:
     c3c:	cf 93       	push	r28
     c3e:	df 93       	push	r29
     c40:	ec 01       	movw	r28, r24
     c42:	0f b6       	in	r0, 0x3f	; 63
     c44:	f8 94       	cli
     c46:	0f 92       	push	r0
     c48:	e8 81       	ld	r30, Y
     c4a:	f9 81       	ldd	r31, Y+1	; 0x01
     c4c:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c4e:	28 a1       	ldd	r18, Y+32	; 0x20
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	30 e0       	ldi	r19, 0x00	; 0
     c54:	82 9f       	mul	r24, r18
     c56:	a0 01       	movw	r20, r0
     c58:	83 9f       	mul	r24, r19
     c5a:	50 0d       	add	r21, r0
     c5c:	92 9f       	mul	r25, r18
     c5e:	50 0d       	add	r21, r0
     c60:	11 24       	eor	r1, r1
     c62:	4e 0f       	add	r20, r30
     c64:	5f 1f       	adc	r21, r31
     c66:	5d 83       	std	Y+5, r21	; 0x05
     c68:	4c 83       	std	Y+4, r20	; 0x04
     c6a:	1e 8e       	std	Y+30, r1	; 0x1e
     c6c:	fb 83       	std	Y+3, r31	; 0x03
     c6e:	ea 83       	std	Y+2, r30	; 0x02
     c70:	01 97       	sbiw	r24, 0x01	; 1
     c72:	82 9f       	mul	r24, r18
     c74:	a0 01       	movw	r20, r0
     c76:	83 9f       	mul	r24, r19
     c78:	50 0d       	add	r21, r0
     c7a:	92 9f       	mul	r25, r18
     c7c:	50 0d       	add	r21, r0
     c7e:	11 24       	eor	r1, r1
     c80:	cf 01       	movw	r24, r30
     c82:	84 0f       	add	r24, r20
     c84:	95 1f       	adc	r25, r21
     c86:	9f 83       	std	Y+7, r25	; 0x07
     c88:	8e 83       	std	Y+6, r24	; 0x06
     c8a:	8f ef       	ldi	r24, 0xFF	; 255
     c8c:	89 a3       	std	Y+33, r24	; 0x21
     c8e:	8a a3       	std	Y+34, r24	; 0x22
     c90:	61 11       	cpse	r22, r1
     c92:	0b c0       	rjmp	.+22     	; 0xcaa <xQueueGenericReset+0x6e>
     c94:	88 85       	ldd	r24, Y+8	; 0x08
     c96:	88 23       	and	r24, r24
     c98:	71 f0       	breq	.+28     	; 0xcb6 <xQueueGenericReset+0x7a>
     c9a:	ce 01       	movw	r24, r28
     c9c:	08 96       	adiw	r24, 0x08	; 8
     c9e:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     ca2:	88 23       	and	r24, r24
     ca4:	41 f0       	breq	.+16     	; 0xcb6 <xQueueGenericReset+0x7a>
     ca6:	31 de       	rcall	.-926    	; 0x90a <vPortYield>
     ca8:	06 c0       	rjmp	.+12     	; 0xcb6 <xQueueGenericReset+0x7a>
     caa:	ce 01       	movw	r24, r28
     cac:	08 96       	adiw	r24, 0x08	; 8
     cae:	61 dd       	rcall	.-1342   	; 0x772 <vListInitialise>
     cb0:	ce 01       	movw	r24, r28
     cb2:	43 96       	adiw	r24, 0x13	; 19
     cb4:	5e dd       	rcall	.-1348   	; 0x772 <vListInitialise>
     cb6:	0f 90       	pop	r0
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <xQueueGenericCreate>:
     cc2:	0f 93       	push	r16
     cc4:	1f 93       	push	r17
     cc6:	cf 93       	push	r28
     cc8:	df 93       	push	r29
     cca:	08 2f       	mov	r16, r24
     ccc:	16 2f       	mov	r17, r22
     cce:	86 9f       	mul	r24, r22
     cd0:	c0 01       	movw	r24, r0
     cd2:	11 24       	eor	r1, r1
     cd4:	83 96       	adiw	r24, 0x23	; 35
     cd6:	4b dc       	rcall	.-1898   	; 0x56e <pvPortMalloc>
     cd8:	ec 01       	movw	r28, r24
     cda:	00 97       	sbiw	r24, 0x00	; 0
     cdc:	69 f0       	breq	.+26     	; 0xcf8 <xQueueGenericCreate+0x36>
     cde:	11 11       	cpse	r17, r1
     ce0:	03 c0       	rjmp	.+6      	; 0xce8 <xQueueGenericCreate+0x26>
     ce2:	99 83       	std	Y+1, r25	; 0x01
     ce4:	88 83       	st	Y, r24
     ce6:	03 c0       	rjmp	.+6      	; 0xcee <xQueueGenericCreate+0x2c>
     ce8:	83 96       	adiw	r24, 0x23	; 35
     cea:	99 83       	std	Y+1, r25	; 0x01
     cec:	88 83       	st	Y, r24
     cee:	0f 8f       	std	Y+31, r16	; 0x1f
     cf0:	18 a3       	std	Y+32, r17	; 0x20
     cf2:	61 e0       	ldi	r22, 0x01	; 1
     cf4:	ce 01       	movw	r24, r28
     cf6:	a2 df       	rcall	.-188    	; 0xc3c <xQueueGenericReset>
     cf8:	ce 01       	movw	r24, r28
     cfa:	df 91       	pop	r29
     cfc:	cf 91       	pop	r28
     cfe:	1f 91       	pop	r17
     d00:	0f 91       	pop	r16
     d02:	08 95       	ret

00000d04 <xQueueGenericSend>:
     d04:	9f 92       	push	r9
     d06:	af 92       	push	r10
     d08:	bf 92       	push	r11
     d0a:	cf 92       	push	r12
     d0c:	df 92       	push	r13
     d0e:	ef 92       	push	r14
     d10:	ff 92       	push	r15
     d12:	0f 93       	push	r16
     d14:	1f 93       	push	r17
     d16:	cf 93       	push	r28
     d18:	df 93       	push	r29
     d1a:	cd b7       	in	r28, 0x3d	; 61
     d1c:	de b7       	in	r29, 0x3e	; 62
     d1e:	29 97       	sbiw	r28, 0x09	; 9
     d20:	0f b6       	in	r0, 0x3f	; 63
     d22:	f8 94       	cli
     d24:	de bf       	out	0x3e, r29	; 62
     d26:	0f be       	out	0x3f, r0	; 63
     d28:	cd bf       	out	0x3d, r28	; 61
     d2a:	7c 01       	movw	r14, r24
     d2c:	5b 01       	movw	r10, r22
     d2e:	2e 83       	std	Y+6, r18	; 0x06
     d30:	3f 83       	std	Y+7, r19	; 0x07
     d32:	48 87       	std	Y+8, r20	; 0x08
     d34:	59 87       	std	Y+9, r21	; 0x09
     d36:	10 e0       	ldi	r17, 0x00	; 0
     d38:	99 24       	eor	r9, r9
     d3a:	93 94       	inc	r9
     d3c:	6c 01       	movw	r12, r24
     d3e:	88 e0       	ldi	r24, 0x08	; 8
     d40:	c8 0e       	add	r12, r24
     d42:	d1 1c       	adc	r13, r1
     d44:	0f b6       	in	r0, 0x3f	; 63
     d46:	f8 94       	cli
     d48:	0f 92       	push	r0
     d4a:	f7 01       	movw	r30, r14
     d4c:	96 8d       	ldd	r25, Z+30	; 0x1e
     d4e:	87 8d       	ldd	r24, Z+31	; 0x1f
     d50:	98 17       	cp	r25, r24
     d52:	10 f0       	brcs	.+4      	; 0xd58 <xQueueGenericSend+0x54>
     d54:	02 30       	cpi	r16, 0x02	; 2
     d56:	b1 f4       	brne	.+44     	; 0xd84 <xQueueGenericSend+0x80>
     d58:	40 2f       	mov	r20, r16
     d5a:	b5 01       	movw	r22, r10
     d5c:	c7 01       	movw	r24, r14
     d5e:	a8 de       	rcall	.-688    	; 0xab0 <prvCopyDataToQueue>
     d60:	f7 01       	movw	r30, r14
     d62:	93 89       	ldd	r25, Z+19	; 0x13
     d64:	99 23       	and	r25, r25
     d66:	41 f0       	breq	.+16     	; 0xd78 <xQueueGenericSend+0x74>
     d68:	c7 01       	movw	r24, r14
     d6a:	43 96       	adiw	r24, 0x13	; 19
     d6c:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     d70:	88 23       	and	r24, r24
     d72:	21 f0       	breq	.+8      	; 0xd7c <xQueueGenericSend+0x78>
     d74:	ca dd       	rcall	.-1132   	; 0x90a <vPortYield>
     d76:	02 c0       	rjmp	.+4      	; 0xd7c <xQueueGenericSend+0x78>
     d78:	81 11       	cpse	r24, r1
     d7a:	c7 dd       	rcall	.-1138   	; 0x90a <vPortYield>
     d7c:	0f 90       	pop	r0
     d7e:	0f be       	out	0x3f, r0	; 63
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	4e c0       	rjmp	.+156    	; 0xe20 <xQueueGenericSend+0x11c>
     d84:	8e 81       	ldd	r24, Y+6	; 0x06
     d86:	9f 81       	ldd	r25, Y+7	; 0x07
     d88:	a8 85       	ldd	r26, Y+8	; 0x08
     d8a:	b9 85       	ldd	r27, Y+9	; 0x09
     d8c:	89 2b       	or	r24, r25
     d8e:	8a 2b       	or	r24, r26
     d90:	8b 2b       	or	r24, r27
     d92:	21 f4       	brne	.+8      	; 0xd9c <xQueueGenericSend+0x98>
     d94:	0f 90       	pop	r0
     d96:	0f be       	out	0x3f, r0	; 63
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	42 c0       	rjmp	.+132    	; 0xe20 <xQueueGenericSend+0x11c>
     d9c:	11 11       	cpse	r17, r1
     d9e:	05 c0       	rjmp	.+10     	; 0xdaa <xQueueGenericSend+0xa6>
     da0:	ce 01       	movw	r24, r28
     da2:	01 96       	adiw	r24, 0x01	; 1
     da4:	0e 94 bc 11 	call	0x2378	; 0x2378 <vTaskInternalSetTimeOutState>
     da8:	19 2d       	mov	r17, r9
     daa:	0f 90       	pop	r0
     dac:	0f be       	out	0x3f, r0	; 63
     dae:	a7 d6       	rcall	.+3406   	; 0x1afe <vTaskSuspendAll>
     db0:	0f b6       	in	r0, 0x3f	; 63
     db2:	f8 94       	cli
     db4:	0f 92       	push	r0
     db6:	f7 01       	movw	r30, r14
     db8:	81 a1       	ldd	r24, Z+33	; 0x21
     dba:	8f 3f       	cpi	r24, 0xFF	; 255
     dbc:	09 f4       	brne	.+2      	; 0xdc0 <xQueueGenericSend+0xbc>
     dbe:	11 a2       	std	Z+33, r1	; 0x21
     dc0:	f7 01       	movw	r30, r14
     dc2:	82 a1       	ldd	r24, Z+34	; 0x22
     dc4:	8f 3f       	cpi	r24, 0xFF	; 255
     dc6:	09 f4       	brne	.+2      	; 0xdca <xQueueGenericSend+0xc6>
     dc8:	12 a2       	std	Z+34, r1	; 0x22
     dca:	0f 90       	pop	r0
     dcc:	0f be       	out	0x3f, r0	; 63
     dce:	be 01       	movw	r22, r28
     dd0:	6a 5f       	subi	r22, 0xFA	; 250
     dd2:	7f 4f       	sbci	r23, 0xFF	; 255
     dd4:	ce 01       	movw	r24, r28
     dd6:	01 96       	adiw	r24, 0x01	; 1
     dd8:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskCheckForTimeOut>
     ddc:	81 11       	cpse	r24, r1
     dde:	1c c0       	rjmp	.+56     	; 0xe18 <xQueueGenericSend+0x114>
     de0:	0f b6       	in	r0, 0x3f	; 63
     de2:	f8 94       	cli
     de4:	0f 92       	push	r0
     de6:	f7 01       	movw	r30, r14
     de8:	96 8d       	ldd	r25, Z+30	; 0x1e
     dea:	87 8d       	ldd	r24, Z+31	; 0x1f
     dec:	0f 90       	pop	r0
     dee:	0f be       	out	0x3f, r0	; 63
     df0:	98 13       	cpse	r25, r24
     df2:	0e c0       	rjmp	.+28     	; 0xe10 <xQueueGenericSend+0x10c>
     df4:	4e 81       	ldd	r20, Y+6	; 0x06
     df6:	5f 81       	ldd	r21, Y+7	; 0x07
     df8:	68 85       	ldd	r22, Y+8	; 0x08
     dfa:	79 85       	ldd	r23, Y+9	; 0x09
     dfc:	c6 01       	movw	r24, r12
     dfe:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskPlaceOnEventList>
     e02:	c7 01       	movw	r24, r14
     e04:	ce de       	rcall	.-612    	; 0xba2 <prvUnlockQueue>
     e06:	bf d7       	rcall	.+3966   	; 0x1d86 <xTaskResumeAll>
     e08:	81 11       	cpse	r24, r1
     e0a:	9c cf       	rjmp	.-200    	; 0xd44 <xQueueGenericSend+0x40>
     e0c:	7e dd       	rcall	.-1284   	; 0x90a <vPortYield>
     e0e:	9a cf       	rjmp	.-204    	; 0xd44 <xQueueGenericSend+0x40>
     e10:	c7 01       	movw	r24, r14
     e12:	c7 de       	rcall	.-626    	; 0xba2 <prvUnlockQueue>
     e14:	b8 d7       	rcall	.+3952   	; 0x1d86 <xTaskResumeAll>
     e16:	96 cf       	rjmp	.-212    	; 0xd44 <xQueueGenericSend+0x40>
     e18:	c7 01       	movw	r24, r14
     e1a:	c3 de       	rcall	.-634    	; 0xba2 <prvUnlockQueue>
     e1c:	b4 d7       	rcall	.+3944   	; 0x1d86 <xTaskResumeAll>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	29 96       	adiw	r28, 0x09	; 9
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	df 91       	pop	r29
     e2e:	cf 91       	pop	r28
     e30:	1f 91       	pop	r17
     e32:	0f 91       	pop	r16
     e34:	ff 90       	pop	r15
     e36:	ef 90       	pop	r14
     e38:	df 90       	pop	r13
     e3a:	cf 90       	pop	r12
     e3c:	bf 90       	pop	r11
     e3e:	af 90       	pop	r10
     e40:	9f 90       	pop	r9
     e42:	08 95       	ret

00000e44 <xQueueCreateMutex>:
     e44:	0f 93       	push	r16
     e46:	cf 93       	push	r28
     e48:	df 93       	push	r29
     e4a:	48 2f       	mov	r20, r24
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	38 df       	rcall	.-400    	; 0xcc2 <xQueueGenericCreate>
     e52:	ec 01       	movw	r28, r24
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	61 f0       	breq	.+24     	; 0xe70 <xQueueCreateMutex+0x2c>
     e58:	1d 82       	std	Y+5, r1	; 0x05
     e5a:	1c 82       	std	Y+4, r1	; 0x04
     e5c:	19 82       	std	Y+1, r1	; 0x01
     e5e:	18 82       	st	Y, r1
     e60:	1e 82       	std	Y+6, r1	; 0x06
     e62:	00 e0       	ldi	r16, 0x00	; 0
     e64:	20 e0       	ldi	r18, 0x00	; 0
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	a9 01       	movw	r20, r18
     e6a:	60 e0       	ldi	r22, 0x00	; 0
     e6c:	70 e0       	ldi	r23, 0x00	; 0
     e6e:	4a df       	rcall	.-364    	; 0xd04 <xQueueGenericSend>
     e70:	ce 01       	movw	r24, r28
     e72:	df 91       	pop	r29
     e74:	cf 91       	pop	r28
     e76:	0f 91       	pop	r16
     e78:	08 95       	ret

00000e7a <xQueueGenericSendFromISR>:
     e7a:	ef 92       	push	r14
     e7c:	ff 92       	push	r15
     e7e:	0f 93       	push	r16
     e80:	1f 93       	push	r17
     e82:	cf 93       	push	r28
     e84:	df 93       	push	r29
     e86:	8a 01       	movw	r16, r20
     e88:	fc 01       	movw	r30, r24
     e8a:	56 8d       	ldd	r21, Z+30	; 0x1e
     e8c:	37 8d       	ldd	r19, Z+31	; 0x1f
     e8e:	53 17       	cp	r21, r19
     e90:	10 f0       	brcs	.+4      	; 0xe96 <xQueueGenericSendFromISR+0x1c>
     e92:	22 30       	cpi	r18, 0x02	; 2
     e94:	f9 f4       	brne	.+62     	; 0xed4 <xQueueGenericSendFromISR+0x5a>
     e96:	42 2f       	mov	r20, r18
     e98:	78 01       	movw	r14, r16
     e9a:	ec 01       	movw	r28, r24
     e9c:	1a a1       	ldd	r17, Y+34	; 0x22
     e9e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ea0:	ce 01       	movw	r24, r28
     ea2:	06 de       	rcall	.-1012   	; 0xab0 <prvCopyDataToQueue>
     ea4:	1f 3f       	cpi	r17, 0xFF	; 255
     ea6:	81 f4       	brne	.+32     	; 0xec8 <xQueueGenericSendFromISR+0x4e>
     ea8:	8b 89       	ldd	r24, Y+19	; 0x13
     eaa:	88 23       	and	r24, r24
     eac:	a9 f0       	breq	.+42     	; 0xed8 <xQueueGenericSendFromISR+0x5e>
     eae:	ce 01       	movw	r24, r28
     eb0:	43 96       	adiw	r24, 0x13	; 19
     eb2:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     eb6:	88 23       	and	r24, r24
     eb8:	89 f0       	breq	.+34     	; 0xedc <xQueueGenericSendFromISR+0x62>
     eba:	e1 14       	cp	r14, r1
     ebc:	f1 04       	cpc	r15, r1
     ebe:	81 f0       	breq	.+32     	; 0xee0 <xQueueGenericSendFromISR+0x66>
     ec0:	81 e0       	ldi	r24, 0x01	; 1
     ec2:	f7 01       	movw	r30, r14
     ec4:	80 83       	st	Z, r24
     ec6:	0d c0       	rjmp	.+26     	; 0xee2 <xQueueGenericSendFromISR+0x68>
     ec8:	ff 24       	eor	r15, r15
     eca:	f3 94       	inc	r15
     ecc:	f1 0e       	add	r15, r17
     ece:	fa a2       	std	Y+34, r15	; 0x22
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	07 c0       	rjmp	.+14     	; 0xee2 <xQueueGenericSendFromISR+0x68>
     ed4:	80 e0       	ldi	r24, 0x00	; 0
     ed6:	05 c0       	rjmp	.+10     	; 0xee2 <xQueueGenericSendFromISR+0x68>
     ed8:	81 e0       	ldi	r24, 0x01	; 1
     eda:	03 c0       	rjmp	.+6      	; 0xee2 <xQueueGenericSendFromISR+0x68>
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	01 c0       	rjmp	.+2      	; 0xee2 <xQueueGenericSendFromISR+0x68>
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	df 91       	pop	r29
     ee4:	cf 91       	pop	r28
     ee6:	1f 91       	pop	r17
     ee8:	0f 91       	pop	r16
     eea:	ff 90       	pop	r15
     eec:	ef 90       	pop	r14
     eee:	08 95       	ret

00000ef0 <xQueueReceive>:
     ef0:	9f 92       	push	r9
     ef2:	af 92       	push	r10
     ef4:	bf 92       	push	r11
     ef6:	cf 92       	push	r12
     ef8:	df 92       	push	r13
     efa:	ef 92       	push	r14
     efc:	ff 92       	push	r15
     efe:	0f 93       	push	r16
     f00:	1f 93       	push	r17
     f02:	cf 93       	push	r28
     f04:	df 93       	push	r29
     f06:	cd b7       	in	r28, 0x3d	; 61
     f08:	de b7       	in	r29, 0x3e	; 62
     f0a:	29 97       	sbiw	r28, 0x09	; 9
     f0c:	0f b6       	in	r0, 0x3f	; 63
     f0e:	f8 94       	cli
     f10:	de bf       	out	0x3e, r29	; 62
     f12:	0f be       	out	0x3f, r0	; 63
     f14:	cd bf       	out	0x3d, r28	; 61
     f16:	8c 01       	movw	r16, r24
     f18:	5b 01       	movw	r10, r22
     f1a:	2e 83       	std	Y+6, r18	; 0x06
     f1c:	3f 83       	std	Y+7, r19	; 0x07
     f1e:	48 87       	std	Y+8, r20	; 0x08
     f20:	59 87       	std	Y+9, r21	; 0x09
     f22:	e1 2c       	mov	r14, r1
     f24:	99 24       	eor	r9, r9
     f26:	93 94       	inc	r9
     f28:	6c 01       	movw	r12, r24
     f2a:	83 e1       	ldi	r24, 0x13	; 19
     f2c:	c8 0e       	add	r12, r24
     f2e:	d1 1c       	adc	r13, r1
     f30:	0f b6       	in	r0, 0x3f	; 63
     f32:	f8 94       	cli
     f34:	0f 92       	push	r0
     f36:	f8 01       	movw	r30, r16
     f38:	f6 8c       	ldd	r15, Z+30	; 0x1e
     f3a:	ff 20       	and	r15, r15
     f3c:	99 f0       	breq	.+38     	; 0xf64 <xQueueReceive+0x74>
     f3e:	b5 01       	movw	r22, r10
     f40:	c8 01       	movw	r24, r16
     f42:	15 de       	rcall	.-982    	; 0xb6e <prvCopyDataFromQueue>
     f44:	fa 94       	dec	r15
     f46:	f8 01       	movw	r30, r16
     f48:	f6 8e       	std	Z+30, r15	; 0x1e
     f4a:	80 85       	ldd	r24, Z+8	; 0x08
     f4c:	88 23       	and	r24, r24
     f4e:	31 f0       	breq	.+12     	; 0xf5c <xQueueReceive+0x6c>
     f50:	c8 01       	movw	r24, r16
     f52:	08 96       	adiw	r24, 0x08	; 8
     f54:	0e 94 f6 10 	call	0x21ec	; 0x21ec <xTaskRemoveFromEventList>
     f58:	81 11       	cpse	r24, r1
     f5a:	d7 dc       	rcall	.-1618   	; 0x90a <vPortYield>
     f5c:	0f 90       	pop	r0
     f5e:	0f be       	out	0x3f, r0	; 63
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	4d c0       	rjmp	.+154    	; 0xffe <xQueueReceive+0x10e>
     f64:	8e 81       	ldd	r24, Y+6	; 0x06
     f66:	9f 81       	ldd	r25, Y+7	; 0x07
     f68:	a8 85       	ldd	r26, Y+8	; 0x08
     f6a:	b9 85       	ldd	r27, Y+9	; 0x09
     f6c:	89 2b       	or	r24, r25
     f6e:	8a 2b       	or	r24, r26
     f70:	8b 2b       	or	r24, r27
     f72:	21 f4       	brne	.+8      	; 0xf7c <xQueueReceive+0x8c>
     f74:	0f 90       	pop	r0
     f76:	0f be       	out	0x3f, r0	; 63
     f78:	80 e0       	ldi	r24, 0x00	; 0
     f7a:	41 c0       	rjmp	.+130    	; 0xffe <xQueueReceive+0x10e>
     f7c:	e1 10       	cpse	r14, r1
     f7e:	05 c0       	rjmp	.+10     	; 0xf8a <xQueueReceive+0x9a>
     f80:	ce 01       	movw	r24, r28
     f82:	01 96       	adiw	r24, 0x01	; 1
     f84:	0e 94 bc 11 	call	0x2378	; 0x2378 <vTaskInternalSetTimeOutState>
     f88:	e9 2c       	mov	r14, r9
     f8a:	0f 90       	pop	r0
     f8c:	0f be       	out	0x3f, r0	; 63
     f8e:	b7 d5       	rcall	.+2926   	; 0x1afe <vTaskSuspendAll>
     f90:	0f b6       	in	r0, 0x3f	; 63
     f92:	f8 94       	cli
     f94:	0f 92       	push	r0
     f96:	f8 01       	movw	r30, r16
     f98:	81 a1       	ldd	r24, Z+33	; 0x21
     f9a:	8f 3f       	cpi	r24, 0xFF	; 255
     f9c:	09 f4       	brne	.+2      	; 0xfa0 <xQueueReceive+0xb0>
     f9e:	11 a2       	std	Z+33, r1	; 0x21
     fa0:	f8 01       	movw	r30, r16
     fa2:	82 a1       	ldd	r24, Z+34	; 0x22
     fa4:	8f 3f       	cpi	r24, 0xFF	; 255
     fa6:	09 f4       	brne	.+2      	; 0xfaa <xQueueReceive+0xba>
     fa8:	12 a2       	std	Z+34, r1	; 0x22
     faa:	0f 90       	pop	r0
     fac:	0f be       	out	0x3f, r0	; 63
     fae:	be 01       	movw	r22, r28
     fb0:	6a 5f       	subi	r22, 0xFA	; 250
     fb2:	7f 4f       	sbci	r23, 0xFF	; 255
     fb4:	ce 01       	movw	r24, r28
     fb6:	01 96       	adiw	r24, 0x01	; 1
     fb8:	0e 94 cd 11 	call	0x239a	; 0x239a <xTaskCheckForTimeOut>
     fbc:	81 11       	cpse	r24, r1
     fbe:	16 c0       	rjmp	.+44     	; 0xfec <xQueueReceive+0xfc>
     fc0:	c8 01       	movw	r24, r16
     fc2:	6b dd       	rcall	.-1322   	; 0xa9a <prvIsQueueEmpty>
     fc4:	88 23       	and	r24, r24
     fc6:	71 f0       	breq	.+28     	; 0xfe4 <xQueueReceive+0xf4>
     fc8:	4e 81       	ldd	r20, Y+6	; 0x06
     fca:	5f 81       	ldd	r21, Y+7	; 0x07
     fcc:	68 85       	ldd	r22, Y+8	; 0x08
     fce:	79 85       	ldd	r23, Y+9	; 0x09
     fd0:	c6 01       	movw	r24, r12
     fd2:	0e 94 9d 10 	call	0x213a	; 0x213a <vTaskPlaceOnEventList>
     fd6:	c8 01       	movw	r24, r16
     fd8:	e4 dd       	rcall	.-1080   	; 0xba2 <prvUnlockQueue>
     fda:	d5 d6       	rcall	.+3498   	; 0x1d86 <xTaskResumeAll>
     fdc:	81 11       	cpse	r24, r1
     fde:	a8 cf       	rjmp	.-176    	; 0xf30 <xQueueReceive+0x40>
     fe0:	94 dc       	rcall	.-1752   	; 0x90a <vPortYield>
     fe2:	a6 cf       	rjmp	.-180    	; 0xf30 <xQueueReceive+0x40>
     fe4:	c8 01       	movw	r24, r16
     fe6:	dd dd       	rcall	.-1094   	; 0xba2 <prvUnlockQueue>
     fe8:	ce d6       	rcall	.+3484   	; 0x1d86 <xTaskResumeAll>
     fea:	a2 cf       	rjmp	.-188    	; 0xf30 <xQueueReceive+0x40>
     fec:	c8 01       	movw	r24, r16
     fee:	d9 dd       	rcall	.-1102   	; 0xba2 <prvUnlockQueue>
     ff0:	ca d6       	rcall	.+3476   	; 0x1d86 <xTaskResumeAll>
     ff2:	c8 01       	movw	r24, r16
     ff4:	52 dd       	rcall	.-1372   	; 0xa9a <prvIsQueueEmpty>
     ff6:	88 23       	and	r24, r24
     ff8:	09 f4       	brne	.+2      	; 0xffc <xQueueReceive+0x10c>
     ffa:	9a cf       	rjmp	.-204    	; 0xf30 <xQueueReceive+0x40>
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	29 96       	adiw	r28, 0x09	; 9
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	df 91       	pop	r29
    100c:	cf 91       	pop	r28
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	ff 90       	pop	r15
    1014:	ef 90       	pop	r14
    1016:	df 90       	pop	r13
    1018:	cf 90       	pop	r12
    101a:	bf 90       	pop	r11
    101c:	af 90       	pop	r10
    101e:	9f 90       	pop	r9
    1020:	08 95       	ret

00001022 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
    1022:	cf 93       	push	r28
    1024:	df 93       	push	r29
    1026:	ec 01       	movw	r28, r24
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
    1028:	0f b6       	in	r0, 0x3f	; 63
    102a:	f8 94       	cli
    102c:	0f 92       	push	r0
    102e:	89 a1       	ldd	r24, Y+33	; 0x21
    1030:	8f 3f       	cpi	r24, 0xFF	; 255
    1032:	09 f4       	brne	.+2      	; 0x1036 <vQueueWaitForMessageRestricted+0x14>
    1034:	19 a2       	std	Y+33, r1	; 0x21
    1036:	8a a1       	ldd	r24, Y+34	; 0x22
    1038:	8f 3f       	cpi	r24, 0xFF	; 255
    103a:	09 f4       	brne	.+2      	; 0x103e <vQueueWaitForMessageRestricted+0x1c>
    103c:	1a a2       	std	Y+34, r1	; 0x22
    103e:	0f 90       	pop	r0
    1040:	0f be       	out	0x3f, r0	; 63

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
    1042:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1044:	81 11       	cpse	r24, r1
    1046:	04 c0       	rjmp	.+8      	; 0x1050 <vQueueWaitForMessageRestricted+0x2e>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
    1048:	ce 01       	movw	r24, r28
    104a:	43 96       	adiw	r24, 0x13	; 19
    104c:	0e 94 b4 10 	call	0x2168	; 0x2168 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
    1050:	ce 01       	movw	r24, r28
    1052:	a7 dd       	rcall	.-1202   	; 0xba2 <prvUnlockQueue>
    }
    1054:	df 91       	pop	r29
    1056:	cf 91       	pop	r28
    1058:	08 95       	ret

0000105a <prvBytesInBuffer>:

    configASSERT( pxStreamBuffer );

    xReturn = prvBytesInBuffer( pxStreamBuffer );
    return xReturn;
}
    105a:	fc 01       	movw	r30, r24
    105c:	44 81       	ldd	r20, Z+4	; 0x04
    105e:	55 81       	ldd	r21, Z+5	; 0x05
    1060:	22 81       	ldd	r18, Z+2	; 0x02
    1062:	33 81       	ldd	r19, Z+3	; 0x03
    1064:	24 0f       	add	r18, r20
    1066:	35 1f       	adc	r19, r21
    1068:	80 81       	ld	r24, Z
    106a:	91 81       	ldd	r25, Z+1	; 0x01
    106c:	b9 01       	movw	r22, r18
    106e:	68 1b       	sub	r22, r24
    1070:	79 0b       	sbc	r23, r25
    1072:	cb 01       	movw	r24, r22
    1074:	64 17       	cp	r22, r20
    1076:	75 07       	cpc	r23, r21
    1078:	10 f0       	brcs	.+4      	; 0x107e <prvBytesInBuffer+0x24>
    107a:	84 1b       	sub	r24, r20
    107c:	95 0b       	sbc	r25, r21
    107e:	08 95       	ret

00001080 <prvWriteBytesToBuffer>:
    1080:	af 92       	push	r10
    1082:	bf 92       	push	r11
    1084:	cf 92       	push	r12
    1086:	df 92       	push	r13
    1088:	ef 92       	push	r14
    108a:	ff 92       	push	r15
    108c:	0f 93       	push	r16
    108e:	1f 93       	push	r17
    1090:	cf 93       	push	r28
    1092:	df 93       	push	r29
    1094:	6c 01       	movw	r12, r24
    1096:	5b 01       	movw	r10, r22
    1098:	7a 01       	movw	r14, r20
    109a:	fc 01       	movw	r30, r24
    109c:	c2 81       	ldd	r28, Z+2	; 0x02
    109e:	d3 81       	ldd	r29, Z+3	; 0x03
    10a0:	04 81       	ldd	r16, Z+4	; 0x04
    10a2:	15 81       	ldd	r17, Z+5	; 0x05
    10a4:	0c 1b       	sub	r16, r28
    10a6:	1d 0b       	sbc	r17, r29
    10a8:	40 17       	cp	r20, r16
    10aa:	51 07       	cpc	r21, r17
    10ac:	08 f4       	brcc	.+2      	; 0x10b0 <prvWriteBytesToBuffer+0x30>
    10ae:	8a 01       	movw	r16, r20
    10b0:	f6 01       	movw	r30, r12
    10b2:	84 85       	ldd	r24, Z+12	; 0x0c
    10b4:	95 85       	ldd	r25, Z+13	; 0x0d
    10b6:	a8 01       	movw	r20, r16
    10b8:	b5 01       	movw	r22, r10
    10ba:	8c 0f       	add	r24, r28
    10bc:	9d 1f       	adc	r25, r29
    10be:	0e 94 8d 29 	call	0x531a	; 0x531a <memcpy>
    10c2:	0e 15       	cp	r16, r14
    10c4:	1f 05       	cpc	r17, r15
    10c6:	58 f4       	brcc	.+22     	; 0x10de <prvWriteBytesToBuffer+0x5e>
    10c8:	a7 01       	movw	r20, r14
    10ca:	40 1b       	sub	r20, r16
    10cc:	51 0b       	sbc	r21, r17
    10ce:	b5 01       	movw	r22, r10
    10d0:	60 0f       	add	r22, r16
    10d2:	71 1f       	adc	r23, r17
    10d4:	f6 01       	movw	r30, r12
    10d6:	84 85       	ldd	r24, Z+12	; 0x0c
    10d8:	95 85       	ldd	r25, Z+13	; 0x0d
    10da:	0e 94 8d 29 	call	0x531a	; 0x531a <memcpy>
    10de:	ce 01       	movw	r24, r28
    10e0:	8e 0d       	add	r24, r14
    10e2:	9f 1d       	adc	r25, r15
    10e4:	f6 01       	movw	r30, r12
    10e6:	24 81       	ldd	r18, Z+4	; 0x04
    10e8:	35 81       	ldd	r19, Z+5	; 0x05
    10ea:	82 17       	cp	r24, r18
    10ec:	93 07       	cpc	r25, r19
    10ee:	10 f0       	brcs	.+4      	; 0x10f4 <prvWriteBytesToBuffer+0x74>
    10f0:	82 1b       	sub	r24, r18
    10f2:	93 0b       	sbc	r25, r19
    10f4:	f6 01       	movw	r30, r12
    10f6:	93 83       	std	Z+3, r25	; 0x03
    10f8:	82 83       	std	Z+2, r24	; 0x02
    10fa:	c7 01       	movw	r24, r14
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	1f 91       	pop	r17
    1102:	0f 91       	pop	r16
    1104:	ff 90       	pop	r15
    1106:	ef 90       	pop	r14
    1108:	df 90       	pop	r13
    110a:	cf 90       	pop	r12
    110c:	bf 90       	pop	r11
    110e:	af 90       	pop	r10
    1110:	08 95       	ret

00001112 <prvWriteMessageToBuffer>:
    1112:	cf 92       	push	r12
    1114:	df 92       	push	r13
    1116:	ef 92       	push	r14
    1118:	ff 92       	push	r15
    111a:	0f 93       	push	r16
    111c:	1f 93       	push	r17
    111e:	cf 93       	push	r28
    1120:	df 93       	push	r29
    1122:	1f 92       	push	r1
    1124:	1f 92       	push	r1
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	5a 83       	std	Y+2, r21	; 0x02
    112c:	49 83       	std	Y+1, r20	; 0x01
    112e:	21 15       	cp	r18, r1
    1130:	31 05       	cpc	r19, r1
    1132:	c9 f0       	breq	.+50     	; 0x1166 <prvWriteMessageToBuffer+0x54>
    1134:	6b 01       	movw	r12, r22
    1136:	7c 01       	movw	r14, r24
    1138:	fc 01       	movw	r30, r24
    113a:	86 85       	ldd	r24, Z+14	; 0x0e
    113c:	80 fd       	sbrc	r24, 0
    113e:	08 c0       	rjmp	.+16     	; 0x1150 <prvWriteMessageToBuffer+0x3e>
    1140:	ca 01       	movw	r24, r20
    1142:	24 17       	cp	r18, r20
    1144:	35 07       	cpc	r19, r21
    1146:	08 f4       	brcc	.+2      	; 0x114a <prvWriteMessageToBuffer+0x38>
    1148:	c9 01       	movw	r24, r18
    114a:	9a 83       	std	Y+2, r25	; 0x02
    114c:	89 83       	std	Y+1, r24	; 0x01
    114e:	11 c0       	rjmp	.+34     	; 0x1172 <prvWriteMessageToBuffer+0x60>
    1150:	20 17       	cp	r18, r16
    1152:	31 07       	cpc	r19, r17
    1154:	58 f0       	brcs	.+22     	; 0x116c <prvWriteMessageToBuffer+0x5a>
    1156:	42 e0       	ldi	r20, 0x02	; 2
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	be 01       	movw	r22, r28
    115c:	6f 5f       	subi	r22, 0xFF	; 255
    115e:	7f 4f       	sbci	r23, 0xFF	; 255
    1160:	c7 01       	movw	r24, r14
    1162:	8e df       	rcall	.-228    	; 0x1080 <prvWriteBytesToBuffer>
    1164:	06 c0       	rjmp	.+12     	; 0x1172 <prvWriteMessageToBuffer+0x60>
    1166:	80 e0       	ldi	r24, 0x00	; 0
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	08 c0       	rjmp	.+16     	; 0x117c <prvWriteMessageToBuffer+0x6a>
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	05 c0       	rjmp	.+10     	; 0x117c <prvWriteMessageToBuffer+0x6a>
    1172:	49 81       	ldd	r20, Y+1	; 0x01
    1174:	5a 81       	ldd	r21, Y+2	; 0x02
    1176:	b6 01       	movw	r22, r12
    1178:	c7 01       	movw	r24, r14
    117a:	82 df       	rcall	.-252    	; 0x1080 <prvWriteBytesToBuffer>
    117c:	0f 90       	pop	r0
    117e:	0f 90       	pop	r0
    1180:	df 91       	pop	r29
    1182:	cf 91       	pop	r28
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	08 95       	ret

00001192 <prvReadBytesFromBuffer>:
    1192:	af 92       	push	r10
    1194:	bf 92       	push	r11
    1196:	cf 92       	push	r12
    1198:	df 92       	push	r13
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
    11a2:	cf 93       	push	r28
    11a4:	df 93       	push	r29
    11a6:	7c 01       	movw	r14, r24
    11a8:	5b 01       	movw	r10, r22
    11aa:	e9 01       	movw	r28, r18
    11ac:	42 17       	cp	r20, r18
    11ae:	53 07       	cpc	r21, r19
    11b0:	08 f4       	brcc	.+2      	; 0x11b4 <prvReadBytesFromBuffer+0x22>
    11b2:	ea 01       	movw	r28, r20
    11b4:	20 97       	sbiw	r28, 0x00	; 0
    11b6:	79 f1       	breq	.+94     	; 0x1216 <prvReadBytesFromBuffer+0x84>
    11b8:	f7 01       	movw	r30, r14
    11ba:	00 81       	ld	r16, Z
    11bc:	11 81       	ldd	r17, Z+1	; 0x01
    11be:	c4 80       	ldd	r12, Z+4	; 0x04
    11c0:	d5 80       	ldd	r13, Z+5	; 0x05
    11c2:	c0 1a       	sub	r12, r16
    11c4:	d1 0a       	sbc	r13, r17
    11c6:	cc 15       	cp	r28, r12
    11c8:	dd 05       	cpc	r29, r13
    11ca:	08 f4       	brcc	.+2      	; 0x11ce <prvReadBytesFromBuffer+0x3c>
    11cc:	6e 01       	movw	r12, r28
    11ce:	f7 01       	movw	r30, r14
    11d0:	64 85       	ldd	r22, Z+12	; 0x0c
    11d2:	75 85       	ldd	r23, Z+13	; 0x0d
    11d4:	60 0f       	add	r22, r16
    11d6:	71 1f       	adc	r23, r17
    11d8:	a6 01       	movw	r20, r12
    11da:	c5 01       	movw	r24, r10
    11dc:	0e 94 8d 29 	call	0x531a	; 0x531a <memcpy>
    11e0:	cc 16       	cp	r12, r28
    11e2:	dd 06       	cpc	r13, r29
    11e4:	58 f4       	brcc	.+22     	; 0x11fc <prvReadBytesFromBuffer+0x6a>
    11e6:	ae 01       	movw	r20, r28
    11e8:	4c 19       	sub	r20, r12
    11ea:	5d 09       	sbc	r21, r13
    11ec:	f7 01       	movw	r30, r14
    11ee:	64 85       	ldd	r22, Z+12	; 0x0c
    11f0:	75 85       	ldd	r23, Z+13	; 0x0d
    11f2:	c5 01       	movw	r24, r10
    11f4:	8c 0d       	add	r24, r12
    11f6:	9d 1d       	adc	r25, r13
    11f8:	0e 94 8d 29 	call	0x531a	; 0x531a <memcpy>
    11fc:	0c 0f       	add	r16, r28
    11fe:	1d 1f       	adc	r17, r29
    1200:	f7 01       	movw	r30, r14
    1202:	84 81       	ldd	r24, Z+4	; 0x04
    1204:	95 81       	ldd	r25, Z+5	; 0x05
    1206:	08 17       	cp	r16, r24
    1208:	19 07       	cpc	r17, r25
    120a:	10 f0       	brcs	.+4      	; 0x1210 <prvReadBytesFromBuffer+0x7e>
    120c:	08 1b       	sub	r16, r24
    120e:	19 0b       	sbc	r17, r25
    1210:	f7 01       	movw	r30, r14
    1212:	11 83       	std	Z+1, r17	; 0x01
    1214:	00 83       	st	Z, r16
    1216:	ce 01       	movw	r24, r28
    1218:	df 91       	pop	r29
    121a:	cf 91       	pop	r28
    121c:	1f 91       	pop	r17
    121e:	0f 91       	pop	r16
    1220:	ff 90       	pop	r15
    1222:	ef 90       	pop	r14
    1224:	df 90       	pop	r13
    1226:	cf 90       	pop	r12
    1228:	bf 90       	pop	r11
    122a:	af 90       	pop	r10
    122c:	08 95       	ret

0000122e <xStreamBufferGenericCreate>:
    122e:	ff 92       	push	r15
    1230:	0f 93       	push	r16
    1232:	1f 93       	push	r17
    1234:	cf 93       	push	r28
    1236:	df 93       	push	r29
    1238:	8b 01       	movw	r16, r22
    123a:	ff 24       	eor	r15, r15
    123c:	f3 94       	inc	r15
    123e:	41 30       	cpi	r20, 0x01	; 1
    1240:	09 f0       	breq	.+2      	; 0x1244 <xStreamBufferGenericCreate+0x16>
    1242:	f1 2c       	mov	r15, r1
    1244:	01 15       	cp	r16, r1
    1246:	11 05       	cpc	r17, r1
    1248:	11 f4       	brne	.+4      	; 0x124e <xStreamBufferGenericCreate+0x20>
    124a:	01 e0       	ldi	r16, 0x01	; 1
    124c:	10 e0       	ldi	r17, 0x00	; 0
    124e:	9c 01       	movw	r18, r24
    1250:	20 5f       	subi	r18, 0xF0	; 240
    1252:	3f 4f       	sbci	r19, 0xFF	; 255
    1254:	82 17       	cp	r24, r18
    1256:	93 07       	cpc	r25, r19
    1258:	b0 f4       	brcc	.+44     	; 0x1286 <xStreamBufferGenericCreate+0x58>
    125a:	ec 01       	movw	r28, r24
    125c:	21 96       	adiw	r28, 0x01	; 1
    125e:	c9 01       	movw	r24, r18
    1260:	86 d9       	rcall	.-3316   	; 0x56e <pvPortMalloc>
    1262:	fc 01       	movw	r30, r24
    1264:	89 2b       	or	r24, r25
    1266:	89 f0       	breq	.+34     	; 0x128a <xStreamBufferGenericCreate+0x5c>
    1268:	8f e0       	ldi	r24, 0x0F	; 15
    126a:	df 01       	movw	r26, r30
    126c:	1d 92       	st	X+, r1
    126e:	8a 95       	dec	r24
    1270:	e9 f7       	brne	.-6      	; 0x126c <xStreamBufferGenericCreate+0x3e>
    1272:	cf 01       	movw	r24, r30
    1274:	0f 96       	adiw	r24, 0x0f	; 15
    1276:	95 87       	std	Z+13, r25	; 0x0d
    1278:	84 87       	std	Z+12, r24	; 0x0c
    127a:	d5 83       	std	Z+5, r29	; 0x05
    127c:	c4 83       	std	Z+4, r28	; 0x04
    127e:	17 83       	std	Z+7, r17	; 0x07
    1280:	06 83       	std	Z+6, r16	; 0x06
    1282:	f6 86       	std	Z+14, r15	; 0x0e
    1284:	02 c0       	rjmp	.+4      	; 0x128a <xStreamBufferGenericCreate+0x5c>
    1286:	e0 e0       	ldi	r30, 0x00	; 0
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	cf 01       	movw	r24, r30
    128c:	df 91       	pop	r29
    128e:	cf 91       	pop	r28
    1290:	1f 91       	pop	r17
    1292:	0f 91       	pop	r16
    1294:	ff 90       	pop	r15
    1296:	08 95       	ret

00001298 <xStreamBufferReset>:
    1298:	0f b6       	in	r0, 0x3f	; 63
    129a:	f8 94       	cli
    129c:	0f 92       	push	r0
    129e:	dc 01       	movw	r26, r24
    12a0:	18 96       	adiw	r26, 0x08	; 8
    12a2:	2d 91       	ld	r18, X+
    12a4:	3c 91       	ld	r19, X
    12a6:	19 97       	sbiw	r26, 0x09	; 9
    12a8:	23 2b       	or	r18, r19
    12aa:	51 f5       	brne	.+84     	; 0x1300 <xStreamBufferReset+0x68>
    12ac:	1a 96       	adiw	r26, 0x0a	; 10
    12ae:	2d 91       	ld	r18, X+
    12b0:	3c 91       	ld	r19, X
    12b2:	1b 97       	sbiw	r26, 0x0b	; 11
    12b4:	23 2b       	or	r18, r19
    12b6:	31 f5       	brne	.+76     	; 0x1304 <xStreamBufferReset+0x6c>
    12b8:	1e 96       	adiw	r26, 0x0e	; 14
    12ba:	2c 91       	ld	r18, X
    12bc:	1e 97       	sbiw	r26, 0x0e	; 14
    12be:	16 96       	adiw	r26, 0x06	; 6
    12c0:	4d 91       	ld	r20, X+
    12c2:	5c 91       	ld	r21, X
    12c4:	17 97       	sbiw	r26, 0x07	; 7
    12c6:	14 96       	adiw	r26, 0x04	; 4
    12c8:	6d 91       	ld	r22, X+
    12ca:	7c 91       	ld	r23, X
    12cc:	15 97       	sbiw	r26, 0x05	; 5
    12ce:	1c 96       	adiw	r26, 0x0c	; 12
    12d0:	ed 91       	ld	r30, X+
    12d2:	fc 91       	ld	r31, X
    12d4:	1d 97       	sbiw	r26, 0x0d	; 13
    12d6:	3f e0       	ldi	r19, 0x0F	; 15
    12d8:	1d 92       	st	X+, r1
    12da:	3a 95       	dec	r19
    12dc:	e9 f7       	brne	.-6      	; 0x12d8 <xStreamBufferReset+0x40>
    12de:	dc 01       	movw	r26, r24
    12e0:	1d 96       	adiw	r26, 0x0d	; 13
    12e2:	fc 93       	st	X, r31
    12e4:	ee 93       	st	-X, r30
    12e6:	1c 97       	sbiw	r26, 0x0c	; 12
    12e8:	15 96       	adiw	r26, 0x05	; 5
    12ea:	7c 93       	st	X, r23
    12ec:	6e 93       	st	-X, r22
    12ee:	14 97       	sbiw	r26, 0x04	; 4
    12f0:	17 96       	adiw	r26, 0x07	; 7
    12f2:	5c 93       	st	X, r21
    12f4:	4e 93       	st	-X, r20
    12f6:	16 97       	sbiw	r26, 0x06	; 6
    12f8:	1e 96       	adiw	r26, 0x0e	; 14
    12fa:	2c 93       	st	X, r18
    12fc:	81 e0       	ldi	r24, 0x01	; 1
    12fe:	03 c0       	rjmp	.+6      	; 0x1306 <xStreamBufferReset+0x6e>
    1300:	80 e0       	ldi	r24, 0x00	; 0
    1302:	01 c0       	rjmp	.+2      	; 0x1306 <xStreamBufferReset+0x6e>
    1304:	80 e0       	ldi	r24, 0x00	; 0
    1306:	0f 90       	pop	r0
    1308:	0f be       	out	0x3f, r0	; 63
    130a:	08 95       	ret

0000130c <xStreamBufferSpacesAvailable>:
    130c:	fc 01       	movw	r30, r24
    130e:	24 81       	ldd	r18, Z+4	; 0x04
    1310:	35 81       	ldd	r19, Z+5	; 0x05
    1312:	80 81       	ld	r24, Z
    1314:	91 81       	ldd	r25, Z+1	; 0x01
    1316:	42 81       	ldd	r20, Z+2	; 0x02
    1318:	53 81       	ldd	r21, Z+3	; 0x03
    131a:	82 0f       	add	r24, r18
    131c:	93 1f       	adc	r25, r19
    131e:	01 97       	sbiw	r24, 0x01	; 1
    1320:	84 1b       	sub	r24, r20
    1322:	95 0b       	sbc	r25, r21
    1324:	82 17       	cp	r24, r18
    1326:	93 07       	cpc	r25, r19
    1328:	10 f0       	brcs	.+4      	; 0x132e <xStreamBufferSpacesAvailable+0x22>
    132a:	82 1b       	sub	r24, r18
    132c:	93 0b       	sbc	r25, r19
    132e:	08 95       	ret

00001330 <xStreamBufferSend>:

size_t xStreamBufferSend( StreamBufferHandle_t xStreamBuffer,
                          const void * pvTxData,
                          size_t xDataLengthBytes,
                          TickType_t xTicksToWait )
{
    1330:	2f 92       	push	r2
    1332:	3f 92       	push	r3
    1334:	4f 92       	push	r4
    1336:	5f 92       	push	r5
    1338:	6f 92       	push	r6
    133a:	7f 92       	push	r7
    133c:	8f 92       	push	r8
    133e:	9f 92       	push	r9
    1340:	af 92       	push	r10
    1342:	bf 92       	push	r11
    1344:	cf 92       	push	r12
    1346:	df 92       	push	r13
    1348:	ef 92       	push	r14
    134a:	ff 92       	push	r15
    134c:	0f 93       	push	r16
    134e:	1f 93       	push	r17
    1350:	cf 93       	push	r28
    1352:	df 93       	push	r29
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    1358:	2b 97       	sbiw	r28, 0x0b	; 11
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	de bf       	out	0x3e, r29	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	cd bf       	out	0x3d, r28	; 61
    1364:	4c 01       	movw	r8, r24
    1366:	7b 87       	std	Y+11, r23	; 0x0b
    1368:	6a 87       	std	Y+10, r22	; 0x0a
    136a:	1a 01       	movw	r2, r20
    136c:	0e 83       	std	Y+6, r16	; 0x06
    136e:	1f 83       	std	Y+7, r17	; 0x07
    1370:	28 87       	std	Y+8, r18	; 0x08
    1372:	39 87       	std	Y+9, r19	; 0x09
    size_t xRequiredSpace = xDataLengthBytes;
    TimeOut_t xTimeOut;

    /* The maximum amount of space a stream buffer will ever report is its length
     * minus 1. */
    const size_t xMaxReportedSpace = pxStreamBuffer->xLength - ( size_t ) 1;
    1374:	fc 01       	movw	r30, r24
    1376:	84 81       	ldd	r24, Z+4	; 0x04
    1378:	95 81       	ldd	r25, Z+5	; 0x05
    137a:	01 97       	sbiw	r24, 0x01	; 1

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    137c:	26 85       	ldd	r18, Z+14	; 0x0e
    137e:	20 ff       	sbrs	r18, 0
    1380:	0c c0       	rjmp	.+24     	; 0x139a <xStreamBufferSend+0x6a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    1382:	2a 01       	movw	r4, r20
    1384:	f2 e0       	ldi	r31, 0x02	; 2
    1386:	4f 0e       	add	r4, r31
    1388:	51 1c       	adc	r5, r1
        /* Overflow? */
        configASSERT( xRequiredSpace > xDataLengthBytes );

        /* If this is a message buffer then it must be possible to write the
         * whole message. */
        if( xRequiredSpace > xMaxReportedSpace )
    138a:	84 15       	cp	r24, r4
    138c:	95 05       	cpc	r25, r5
    138e:	50 f4       	brcc	.+20     	; 0x13a4 <xStreamBufferSend+0x74>
        {
            /* The message would not fit even if the entire buffer was empty,
             * so don't wait for space. */
            xTicksToWait = ( TickType_t ) 0;
    1390:	1e 82       	std	Y+6, r1	; 0x06
    1392:	1f 82       	std	Y+7, r1	; 0x07
    1394:	18 86       	std	Y+8, r1	; 0x08
    1396:	19 86       	std	Y+9, r1	; 0x09
    1398:	46 c0       	rjmp	.+140    	; 0x1426 <xStreamBufferSend+0xf6>
    139a:	2a 01       	movw	r4, r20
    139c:	84 17       	cp	r24, r20
    139e:	95 07       	cpc	r25, r21
    13a0:	08 f4       	brcc	.+2      	; 0x13a4 <xStreamBufferSend+0x74>
    13a2:	2c 01       	movw	r4, r24
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    13a4:	8e 81       	ldd	r24, Y+6	; 0x06
    13a6:	9f 81       	ldd	r25, Y+7	; 0x07
    13a8:	a8 85       	ldd	r26, Y+8	; 0x08
    13aa:	b9 85       	ldd	r27, Y+9	; 0x09
    13ac:	89 2b       	or	r24, r25
    13ae:	8a 2b       	or	r24, r26
    13b0:	8b 2b       	or	r24, r27
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <xStreamBufferSend+0x86>
    13b4:	38 c0       	rjmp	.+112    	; 0x1426 <xStreamBufferSend+0xf6>
    {
        vTaskSetTimeOutState( &xTimeOut );
    13b6:	ce 01       	movw	r24, r28
    13b8:	01 96       	adiw	r24, 0x01	; 1
    13ba:	c8 d7       	rcall	.+3984   	; 0x234c <vTaskSetTimeOutState>

        do
        {
            /* Wait until the required number of bytes are free in the message
             * buffer. */
            taskENTER_CRITICAL();
    13bc:	0f b6       	in	r0, 0x3f	; 63
    13be:	f8 94       	cli
    13c0:	0f 92       	push	r0
            {
                xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    13c2:	c4 01       	movw	r24, r8
    13c4:	a3 df       	rcall	.-186    	; 0x130c <xStreamBufferSpacesAvailable>
    13c6:	3c 01       	movw	r6, r24

                if( xSpace < xRequiredSpace )
    13c8:	84 15       	cp	r24, r4
    13ca:	95 05       	cpc	r25, r5
    13cc:	38 f5       	brcc	.+78     	; 0x141c <xStreamBufferSend+0xec>
                {
                    /* Clear notification state as going to wait for space. */
                    ( void ) xTaskNotifyStateClear( NULL );
    13ce:	60 e0       	ldi	r22, 0x00	; 0
    13d0:	80 e0       	ldi	r24, 0x00	; 0
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <xTaskGenericNotifyStateClear>

                    /* Should only be one writer. */
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
    13d8:	0e 94 2a 12 	call	0x2454	; 0x2454 <xTaskGetCurrentTaskHandle>
    13dc:	f4 01       	movw	r30, r8
    13de:	93 87       	std	Z+11, r25	; 0x0b
    13e0:	82 87       	std	Z+10, r24	; 0x0a
                {
                    taskEXIT_CRITICAL();
                    break;
                }
            }
            taskEXIT_CRITICAL();
    13e2:	0f 90       	pop	r0
    13e4:	0f be       	out	0x3f, r0	; 63

            traceBLOCKING_ON_STREAM_BUFFER_SEND( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    13e6:	ae 80       	ldd	r10, Y+6	; 0x06
    13e8:	bf 80       	ldd	r11, Y+7	; 0x07
    13ea:	c8 84       	ldd	r12, Y+8	; 0x08
    13ec:	d9 84       	ldd	r13, Y+9	; 0x09
    13ee:	e1 2c       	mov	r14, r1
    13f0:	f1 2c       	mov	r15, r1
    13f2:	00 e0       	ldi	r16, 0x00	; 0
    13f4:	10 e0       	ldi	r17, 0x00	; 0
    13f6:	98 01       	movw	r18, r16
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	ba 01       	movw	r22, r20
    13fe:	80 e0       	ldi	r24, 0x00	; 0
    1400:	0e 94 98 12 	call	0x2530	; 0x2530 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToSend = NULL;
    1404:	f4 01       	movw	r30, r8
    1406:	13 86       	std	Z+11, r1	; 0x0b
    1408:	12 86       	std	Z+10, r1	; 0x0a
        } while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
    140a:	be 01       	movw	r22, r28
    140c:	6a 5f       	subi	r22, 0xFA	; 250
    140e:	7f 4f       	sbci	r23, 0xFF	; 255
    1410:	ce 01       	movw	r24, r28
    1412:	01 96       	adiw	r24, 0x01	; 1
    1414:	c2 d7       	rcall	.+3972   	; 0x239a <xTaskCheckForTimeOut>
    1416:	88 23       	and	r24, r24
    1418:	89 f2       	breq	.-94     	; 0x13bc <xStreamBufferSend+0x8c>
    141a:	02 c0       	rjmp	.+4      	; 0x1420 <xStreamBufferSend+0xf0>
                    configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
                    pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
                }
                else
                {
                    taskEXIT_CRITICAL();
    141c:	0f 90       	pop	r0
    141e:	0f be       	out	0x3f, r0	; 63
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    if( xSpace == ( size_t ) 0 )
    1420:	61 14       	cp	r6, r1
    1422:	71 04       	cpc	r7, r1
    {
        xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    1424:	19 f4       	brne	.+6      	; 0x142c <xStreamBufferSend+0xfc>
    1426:	c4 01       	movw	r24, r8
    1428:	71 df       	rcall	.-286    	; 0x130c <xStreamBufferSpacesAvailable>
    142a:	3c 01       	movw	r6, r24
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    142c:	82 01       	movw	r16, r4
    142e:	93 01       	movw	r18, r6
    1430:	a1 01       	movw	r20, r2
    1432:	6a 85       	ldd	r22, Y+10	; 0x0a
    1434:	7b 85       	ldd	r23, Y+11	; 0x0b
    1436:	c4 01       	movw	r24, r8
    1438:	6c de       	rcall	.-808    	; 0x1112 <prvWriteMessageToBuffer>

    if( xReturn > ( size_t ) 0 )
    143a:	6c 01       	movw	r12, r24
    143c:	89 2b       	or	r24, r25
    {
        traceSTREAM_BUFFER_SEND( xStreamBuffer, xReturn );

        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    143e:	e9 f0       	breq	.+58     	; 0x147a <xStreamBufferSend+0x14a>
    1440:	c4 01       	movw	r24, r8
    1442:	0b de       	rcall	.-1002   	; 0x105a <prvBytesInBuffer>
    1444:	f4 01       	movw	r30, r8
    1446:	26 81       	ldd	r18, Z+6	; 0x06
    1448:	37 81       	ldd	r19, Z+7	; 0x07
    144a:	82 17       	cp	r24, r18
    144c:	93 07       	cpc	r25, r19
        {
            sbSEND_COMPLETED( pxStreamBuffer );
    144e:	a8 f0       	brcs	.+42     	; 0x147a <xStreamBufferSend+0x14a>
    1450:	56 d3       	rcall	.+1708   	; 0x1afe <vTaskSuspendAll>
    1452:	f4 01       	movw	r30, r8
    1454:	80 85       	ldd	r24, Z+8	; 0x08
    1456:	91 85       	ldd	r25, Z+9	; 0x09
    1458:	89 2b       	or	r24, r25
    145a:	71 f0       	breq	.+28     	; 0x1478 <xStreamBufferSend+0x148>
    145c:	80 85       	ldd	r24, Z+8	; 0x08
    145e:	91 85       	ldd	r25, Z+9	; 0x09
    1460:	e1 2c       	mov	r14, r1
    1462:	f1 2c       	mov	r15, r1
    1464:	00 e0       	ldi	r16, 0x00	; 0
    1466:	20 e0       	ldi	r18, 0x00	; 0
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	a9 01       	movw	r20, r18
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	0e 94 3f 13 	call	0x267e	; 0x267e <xTaskGenericNotify>
    1472:	f4 01       	movw	r30, r8
    1474:	11 86       	std	Z+9, r1	; 0x09
    1476:	10 86       	std	Z+8, r1	; 0x08
    1478:	86 d4       	rcall	.+2316   	; 0x1d86 <xTaskResumeAll>
        mtCOVERAGE_TEST_MARKER();
        traceSTREAM_BUFFER_SEND_FAILED( xStreamBuffer );
    }

    return xReturn;
}
    147a:	c6 01       	movw	r24, r12
    147c:	2b 96       	adiw	r28, 0x0b	; 11
    147e:	0f b6       	in	r0, 0x3f	; 63
    1480:	f8 94       	cli
    1482:	de bf       	out	0x3e, r29	; 62
    1484:	0f be       	out	0x3f, r0	; 63
    1486:	cd bf       	out	0x3d, r28	; 61
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	9f 90       	pop	r9
    149e:	8f 90       	pop	r8
    14a0:	7f 90       	pop	r7
    14a2:	6f 90       	pop	r6
    14a4:	5f 90       	pop	r5
    14a6:	4f 90       	pop	r4
    14a8:	3f 90       	pop	r3
    14aa:	2f 90       	pop	r2
    14ac:	08 95       	ret

000014ae <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
                                 const void * pvTxData,
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    14ae:	af 92       	push	r10
    14b0:	bf 92       	push	r11
    14b2:	cf 92       	push	r12
    14b4:	df 92       	push	r13
    14b6:	ef 92       	push	r14
    14b8:	ff 92       	push	r15
    14ba:	0f 93       	push	r16
    14bc:	1f 93       	push	r17
    14be:	cf 93       	push	r28
    14c0:	df 93       	push	r29
    14c2:	ec 01       	movw	r28, r24
    14c4:	7b 01       	movw	r14, r22
    14c6:	5a 01       	movw	r10, r20
    14c8:	69 01       	movw	r12, r18

    /* This send function is used to write to both message buffers and stream
     * buffers.  If this is a message buffer then the space needed must be
     * increased by the amount of bytes needed to store the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    14ca:	8e 85       	ldd	r24, Y+14	; 0x0e
    14cc:	80 ff       	sbrs	r24, 0
    14ce:	04 c0       	rjmp	.+8      	; 0x14d8 <xStreamBufferSendFromISR+0x2a>
    {
        xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
    14d0:	8a 01       	movw	r16, r20
    14d2:	0e 5f       	subi	r16, 0xFE	; 254
    14d4:	1f 4f       	sbci	r17, 0xFF	; 255
    14d6:	01 c0       	rjmp	.+2      	; 0x14da <xStreamBufferSendFromISR+0x2c>
                                 size_t xDataLengthBytes,
                                 BaseType_t * const pxHigherPriorityTaskWoken )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReturn, xSpace;
    size_t xRequiredSpace = xDataLengthBytes;
    14d8:	8a 01       	movw	r16, r20
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
    14da:	ce 01       	movw	r24, r28
    14dc:	17 df       	rcall	.-466    	; 0x130c <xStreamBufferSpacesAvailable>
    xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
    14de:	9c 01       	movw	r18, r24
    14e0:	a5 01       	movw	r20, r10
    14e2:	b7 01       	movw	r22, r14
    14e4:	ce 01       	movw	r24, r28
    14e6:	15 de       	rcall	.-982    	; 0x1112 <prvWriteMessageToBuffer>
    14e8:	5c 01       	movw	r10, r24

    if( xReturn > ( size_t ) 0 )
    14ea:	89 2b       	or	r24, r25
    {
        /* Was a task waiting for the data? */
        if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
    14ec:	c1 f0       	breq	.+48     	; 0x151e <xStreamBufferSendFromISR+0x70>
    14ee:	ce 01       	movw	r24, r28
    14f0:	b4 dd       	rcall	.-1176   	; 0x105a <prvBytesInBuffer>
    14f2:	2e 81       	ldd	r18, Y+6	; 0x06
    14f4:	3f 81       	ldd	r19, Y+7	; 0x07
    14f6:	82 17       	cp	r24, r18
    14f8:	93 07       	cpc	r25, r19
    14fa:	88 f0       	brcs	.+34     	; 0x151e <xStreamBufferSendFromISR+0x70>
        {
            sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
    14fc:	88 85       	ldd	r24, Y+8	; 0x08
    14fe:	99 85       	ldd	r25, Y+9	; 0x09
    1500:	89 2b       	or	r24, r25
    1502:	69 f0       	breq	.+26     	; 0x151e <xStreamBufferSendFromISR+0x70>
    1504:	88 85       	ldd	r24, Y+8	; 0x08
    1506:	99 85       	ldd	r25, Y+9	; 0x09
    1508:	e1 2c       	mov	r14, r1
    150a:	f1 2c       	mov	r15, r1
    150c:	00 e0       	ldi	r16, 0x00	; 0
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	a9 01       	movw	r20, r18
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	0e 94 33 14 	call	0x2866	; 0x2866 <xTaskGenericNotifyFromISR>
    151a:	19 86       	std	Y+9, r1	; 0x09
    151c:	18 86       	std	Y+8, r1	; 0x08
    }

    traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

    return xReturn;
}
    151e:	c5 01       	movw	r24, r10
    1520:	df 91       	pop	r29
    1522:	cf 91       	pop	r28
    1524:	1f 91       	pop	r17
    1526:	0f 91       	pop	r16
    1528:	ff 90       	pop	r15
    152a:	ef 90       	pop	r14
    152c:	df 90       	pop	r13
    152e:	cf 90       	pop	r12
    1530:	bf 90       	pop	r11
    1532:	af 90       	pop	r10
    1534:	08 95       	ret

00001536 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    1536:	2f 92       	push	r2
    1538:	3f 92       	push	r3
    153a:	4f 92       	push	r4
    153c:	5f 92       	push	r5
    153e:	6f 92       	push	r6
    1540:	7f 92       	push	r7
    1542:	8f 92       	push	r8
    1544:	9f 92       	push	r9
    1546:	af 92       	push	r10
    1548:	bf 92       	push	r11
    154a:	cf 92       	push	r12
    154c:	df 92       	push	r13
    154e:	ef 92       	push	r14
    1550:	ff 92       	push	r15
    1552:	0f 93       	push	r16
    1554:	1f 93       	push	r17
    1556:	cf 93       	push	r28
    1558:	df 93       	push	r29
    155a:	1f 92       	push	r1
    155c:	1f 92       	push	r1
    155e:	cd b7       	in	r28, 0x3d	; 61
    1560:	de b7       	in	r29, 0x3e	; 62
    1562:	4c 01       	movw	r8, r24
    1564:	1b 01       	movw	r2, r22
    1566:	2a 01       	movw	r4, r20
    1568:	58 01       	movw	r10, r16
    156a:	69 01       	movw	r12, r18
    /* This receive function is used by both message buffers, which store
     * discrete messages, and stream buffers, which store a continuous stream of
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    156c:	fc 01       	movw	r30, r24
    156e:	86 85       	ldd	r24, Z+14	; 0x0e
    1570:	80 fd       	sbrc	r24, 0
    1572:	03 c0       	rjmp	.+6      	; 0x157a <xStreamBufferReceive+0x44>
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    }
    else
    {
        xBytesToStoreMessageLength = 0;
    1574:	61 2c       	mov	r6, r1
    1576:	71 2c       	mov	r7, r1
    1578:	04 c0       	rjmp	.+8      	; 0x1582 <xStreamBufferReceive+0x4c>
     * bytes.  Discrete messages include an additional
     * sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
     * message. */
    if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
    {
        xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
    157a:	68 94       	set
    157c:	66 24       	eor	r6, r6
    157e:	61 f8       	bld	r6, 1
    1580:	71 2c       	mov	r7, r1
    else
    {
        xBytesToStoreMessageLength = 0;
    }

    if( xTicksToWait != ( TickType_t ) 0 )
    1582:	a1 14       	cp	r10, r1
    1584:	b1 04       	cpc	r11, r1
    1586:	c1 04       	cpc	r12, r1
    1588:	d1 04       	cpc	r13, r1
    158a:	41 f1       	breq	.+80     	; 0x15dc <xStreamBufferReceive+0xa6>
    {
        /* Checking if there is data and clearing the notification state must be
         * performed atomically. */
        taskENTER_CRITICAL();
    158c:	0f b6       	in	r0, 0x3f	; 63
    158e:	f8 94       	cli
    1590:	0f 92       	push	r0
        {
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    1592:	c4 01       	movw	r24, r8
    1594:	62 dd       	rcall	.-1340   	; 0x105a <prvBytesInBuffer>
    1596:	8c 01       	movw	r16, r24
            /* If this function was invoked by a message buffer read then
             * xBytesToStoreMessageLength holds the number of bytes used to hold
             * the length of the next discrete message.  If this function was
             * invoked by a stream buffer read then xBytesToStoreMessageLength will
             * be 0. */
            if( xBytesAvailable <= xBytesToStoreMessageLength )
    1598:	68 16       	cp	r6, r24
    159a:	79 06       	cpc	r7, r25
    159c:	48 f0       	brcs	.+18     	; 0x15b0 <xStreamBufferReceive+0x7a>
            {
                /* Clear notification state as going to wait for data. */
                ( void ) xTaskNotifyStateClear( NULL );
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <xTaskGenericNotifyStateClear>

                /* Should only be one reader. */
                configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
                pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
    15a8:	55 d7       	rcall	.+3754   	; 0x2454 <xTaskGetCurrentTaskHandle>
    15aa:	f4 01       	movw	r30, r8
    15ac:	91 87       	std	Z+9, r25	; 0x09
    15ae:	80 87       	std	Z+8, r24	; 0x08
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
    15b0:	0f 90       	pop	r0
    15b2:	0f be       	out	0x3f, r0	; 63

        if( xBytesAvailable <= xBytesToStoreMessageLength )
    15b4:	60 16       	cp	r6, r16
    15b6:	71 06       	cpc	r7, r17
    15b8:	b8 f0       	brcs	.+46     	; 0x15e8 <xStreamBufferReceive+0xb2>
        {
            /* Wait for data to be available. */
            traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
            ( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
    15ba:	e1 2c       	mov	r14, r1
    15bc:	f1 2c       	mov	r15, r1
    15be:	00 e0       	ldi	r16, 0x00	; 0
    15c0:	10 e0       	ldi	r17, 0x00	; 0
    15c2:	98 01       	movw	r18, r16
    15c4:	40 e0       	ldi	r20, 0x00	; 0
    15c6:	50 e0       	ldi	r21, 0x00	; 0
    15c8:	ba 01       	movw	r22, r20
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	b1 d7       	rcall	.+3938   	; 0x2530 <xTaskGenericNotifyWait>
            pxStreamBuffer->xTaskWaitingToReceive = NULL;
    15ce:	f4 01       	movw	r30, r8
    15d0:	11 86       	std	Z+9, r1	; 0x09

            /* Recheck the data available after blocking. */
            xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15d2:	10 86       	std	Z+8, r1	; 0x08
    15d4:	c4 01       	movw	r24, r8
    15d6:	41 dd       	rcall	.-1406   	; 0x105a <prvBytesInBuffer>
    15d8:	8c 01       	movw	r16, r24
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
    15da:	03 c0       	rjmp	.+6      	; 0x15e2 <xStreamBufferReceive+0xac>
    15dc:	c4 01       	movw	r24, r8
    15de:	3d dd       	rcall	.-1414   	; 0x105a <prvBytesInBuffer>
    15e0:	8c 01       	movw	r16, r24
    /* Whether receiving a discrete message (where xBytesToStoreMessageLength
     * holds the number of bytes used to store the message length) or a stream of
     * bytes (where xBytesToStoreMessageLength is zero), the number of bytes
     * available must be greater than xBytesToStoreMessageLength to be able to
     * read bytes from the buffer. */
    if( xBytesAvailable > xBytesToStoreMessageLength )
    15e2:	60 16       	cp	r6, r16
    15e4:	71 06       	cpc	r7, r17
    15e6:	c8 f5       	brcc	.+114    	; 0x165a <xStreamBufferReceive+0x124>
                                        size_t xBytesToStoreMessageLength )
{
    size_t xOriginalTail, xReceivedLength, xNextMessageLength;
    configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

    if( xBytesToStoreMessageLength != ( size_t ) 0 )
    15e8:	61 14       	cp	r6, r1
    15ea:	71 04       	cpc	r7, r1
    15ec:	c1 f0       	breq	.+48     	; 0x161e <xStreamBufferReceive+0xe8>
    {
        /* A discrete message is being received.  First receive the length
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
    15ee:	f4 01       	movw	r30, r8
    15f0:	c0 80       	ld	r12, Z
    15f2:	d1 80       	ldd	r13, Z+1	; 0x01
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
    15f4:	98 01       	movw	r18, r16
    15f6:	a3 01       	movw	r20, r6
    15f8:	be 01       	movw	r22, r28
    15fa:	6f 5f       	subi	r22, 0xFF	; 255
    15fc:	7f 4f       	sbci	r23, 0xFF	; 255
    15fe:	c4 01       	movw	r24, r8
    1600:	c8 dd       	rcall	.-1136   	; 0x1192 <prvReadBytesFromBuffer>
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    1602:	89 81       	ldd	r24, Y+1	; 0x01
    1604:	9a 81       	ldd	r25, Y+2	; 0x02

        /* Reduce the number of bytes available by the number of bytes just
         * read out. */
        xBytesAvailable -= xBytesToStoreMessageLength;
    1606:	06 19       	sub	r16, r6
    1608:	17 09       	sbc	r17, r7

        /* Check there is enough space in the buffer provided by the
         * user. */
        if( xNextMessageLength > xBufferLengthBytes )
    160a:	48 16       	cp	r4, r24
    160c:	59 06       	cpc	r5, r25
    160e:	30 f4       	brcc	.+12     	; 0x161c <xStreamBufferReceive+0xe6>
        {
            /* The user has provided insufficient space to read the message
             * so return the buffer to its previous state (so the length of
             * the message is in the buffer again). */
            pxStreamBuffer->xTail = xOriginalTail;
    1610:	f4 01       	movw	r30, r8
    1612:	d1 82       	std	Z+1, r13	; 0x01
    1614:	c0 82       	st	Z, r12
            xNextMessageLength = 0;
    1616:	41 2c       	mov	r4, r1
    1618:	51 2c       	mov	r5, r1
         * of the message.  A copy of the tail is stored so the buffer can be
         * returned to its prior state if the length of the message is too
         * large for the provided buffer. */
        xOriginalTail = pxStreamBuffer->xTail;
        ( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
        xNextMessageLength = ( size_t ) xTempNextMessageLength;
    161a:	01 c0       	rjmp	.+2      	; 0x161e <xStreamBufferReceive+0xe8>
         * message), so read as many bytes as possible. */
        xNextMessageLength = xBufferLengthBytes;
    }

    /* Read the actual data. */
    xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
    161c:	2c 01       	movw	r4, r24
    161e:	98 01       	movw	r18, r16
    1620:	a2 01       	movw	r20, r4
    1622:	b1 01       	movw	r22, r2
    1624:	c4 01       	movw	r24, r8
    1626:	b5 dd       	rcall	.-1174   	; 0x1192 <prvReadBytesFromBuffer>
    if( xBytesAvailable > xBytesToStoreMessageLength )
    {
        xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );

        /* Was a task waiting for space in the buffer? */
        if( xReceivedLength != ( size_t ) 0 )
    1628:	6c 01       	movw	r12, r24
    162a:	89 2b       	or	r24, r25
        {
            traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
            sbRECEIVE_COMPLETED( pxStreamBuffer );
    162c:	c1 f0       	breq	.+48     	; 0x165e <xStreamBufferReceive+0x128>
    162e:	67 d2       	rcall	.+1230   	; 0x1afe <vTaskSuspendAll>
    1630:	f4 01       	movw	r30, r8
    1632:	82 85       	ldd	r24, Z+10	; 0x0a
    1634:	93 85       	ldd	r25, Z+11	; 0x0b
    1636:	89 2b       	or	r24, r25
    1638:	71 f0       	breq	.+28     	; 0x1656 <xStreamBufferReceive+0x120>
    163a:	82 85       	ldd	r24, Z+10	; 0x0a
    163c:	93 85       	ldd	r25, Z+11	; 0x0b
    163e:	e1 2c       	mov	r14, r1
    1640:	f1 2c       	mov	r15, r1
    1642:	00 e0       	ldi	r16, 0x00	; 0
    1644:	20 e0       	ldi	r18, 0x00	; 0
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	a9 01       	movw	r20, r18
    164a:	60 e0       	ldi	r22, 0x00	; 0
    164c:	0e 94 3f 13 	call	0x267e	; 0x267e <xTaskGenericNotify>
    1650:	f4 01       	movw	r30, r8
    1652:	13 86       	std	Z+11, r1	; 0x0b
    1654:	12 86       	std	Z+10, r1	; 0x0a
    1656:	97 d3       	rcall	.+1838   	; 0x1d86 <xTaskResumeAll>
    1658:	02 c0       	rjmp	.+4      	; 0x165e <xStreamBufferReceive+0x128>
                             void * pvRxData,
                             size_t xBufferLengthBytes,
                             TickType_t xTicksToWait )
{
    StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
    size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
    165a:	c1 2c       	mov	r12, r1
    165c:	d1 2c       	mov	r13, r1
        traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
        mtCOVERAGE_TEST_MARKER();
    }

    return xReceivedLength;
}
    165e:	c6 01       	movw	r24, r12
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	df 91       	pop	r29
    1666:	cf 91       	pop	r28
    1668:	1f 91       	pop	r17
    166a:	0f 91       	pop	r16
    166c:	ff 90       	pop	r15
    166e:	ef 90       	pop	r14
    1670:	df 90       	pop	r13
    1672:	cf 90       	pop	r12
    1674:	bf 90       	pop	r11
    1676:	af 90       	pop	r10
    1678:	9f 90       	pop	r9
    167a:	8f 90       	pop	r8
    167c:	7f 90       	pop	r7
    167e:	6f 90       	pop	r6
    1680:	5f 90       	pop	r5
    1682:	4f 90       	pop	r4
    1684:	3f 90       	pop	r3
    1686:	2f 90       	pop	r2
    1688:	08 95       	ret

0000168a <prvResetNextTaskUnblockTime>:
    168a:	e0 91 0d 15 	lds	r30, 0x150D	; 0x80150d <pxDelayedTaskList>
    168e:	f0 91 0e 15 	lds	r31, 0x150E	; 0x80150e <pxDelayedTaskList+0x1>
    1692:	80 81       	ld	r24, Z
    1694:	81 11       	cpse	r24, r1
    1696:	0c c0       	rjmp	.+24     	; 0x16b0 <prvResetNextTaskUnblockTime+0x26>
    1698:	8f ef       	ldi	r24, 0xFF	; 255
    169a:	9f ef       	ldi	r25, 0xFF	; 255
    169c:	dc 01       	movw	r26, r24
    169e:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <xNextTaskUnblockTime>
    16a2:	90 93 d8 14 	sts	0x14D8, r25	; 0x8014d8 <xNextTaskUnblockTime+0x1>
    16a6:	a0 93 d9 14 	sts	0x14D9, r26	; 0x8014d9 <xNextTaskUnblockTime+0x2>
    16aa:	b0 93 da 14 	sts	0x14DA, r27	; 0x8014da <xNextTaskUnblockTime+0x3>
    16ae:	08 95       	ret
    16b0:	e0 91 0d 15 	lds	r30, 0x150D	; 0x80150d <pxDelayedTaskList>
    16b4:	f0 91 0e 15 	lds	r31, 0x150E	; 0x80150e <pxDelayedTaskList+0x1>
    16b8:	07 80       	ldd	r0, Z+7	; 0x07
    16ba:	f0 85       	ldd	r31, Z+8	; 0x08
    16bc:	e0 2d       	mov	r30, r0
    16be:	80 81       	ld	r24, Z
    16c0:	91 81       	ldd	r25, Z+1	; 0x01
    16c2:	a2 81       	ldd	r26, Z+2	; 0x02
    16c4:	b3 81       	ldd	r27, Z+3	; 0x03
    16c6:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <xNextTaskUnblockTime>
    16ca:	90 93 d8 14 	sts	0x14D8, r25	; 0x8014d8 <xNextTaskUnblockTime+0x1>
    16ce:	a0 93 d9 14 	sts	0x14D9, r26	; 0x8014d9 <xNextTaskUnblockTime+0x2>
    16d2:	b0 93 da 14 	sts	0x14DA, r27	; 0x8014da <xNextTaskUnblockTime+0x3>
    16d6:	08 95       	ret

000016d8 <prvAddCurrentTaskToDelayedList>:
    16d8:	8f 92       	push	r8
    16da:	9f 92       	push	r9
    16dc:	af 92       	push	r10
    16de:	bf 92       	push	r11
    16e0:	cf 92       	push	r12
    16e2:	df 92       	push	r13
    16e4:	ef 92       	push	r14
    16e6:	ff 92       	push	r15
    16e8:	cf 93       	push	r28
    16ea:	df 93       	push	r29
    16ec:	6b 01       	movw	r12, r22
    16ee:	7c 01       	movw	r14, r24
    16f0:	c4 2f       	mov	r28, r20
    16f2:	80 90 e4 14 	lds	r8, 0x14E4	; 0x8014e4 <xTickCount>
    16f6:	90 90 e5 14 	lds	r9, 0x14E5	; 0x8014e5 <xTickCount+0x1>
    16fa:	a0 90 e6 14 	lds	r10, 0x14E6	; 0x8014e6 <xTickCount+0x2>
    16fe:	b0 90 e7 14 	lds	r11, 0x14E7	; 0x8014e7 <xTickCount+0x3>
    1702:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <pxCurrentTCB>
    1706:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    170a:	02 96       	adiw	r24, 0x02	; 2
    170c:	84 d8       	rcall	.-3832   	; 0x816 <uxListRemove>
    170e:	8f ef       	ldi	r24, 0xFF	; 255
    1710:	c8 16       	cp	r12, r24
    1712:	d8 06       	cpc	r13, r24
    1714:	e8 06       	cpc	r14, r24
    1716:	f8 06       	cpc	r15, r24
    1718:	b1 f5       	brne	.+108    	; 0x1786 <prvAddCurrentTaskToDelayedList+0xae>
    171a:	cc 23       	and	r28, r28
    171c:	a1 f1       	breq	.+104    	; 0x1786 <prvAddCurrentTaskToDelayedList+0xae>
    171e:	e9 ee       	ldi	r30, 0xE9	; 233
    1720:	f4 e1       	ldi	r31, 0x14	; 20
    1722:	a1 81       	ldd	r26, Z+1	; 0x01
    1724:	b2 81       	ldd	r27, Z+2	; 0x02
    1726:	c0 91 93 15 	lds	r28, 0x1593	; 0x801593 <pxCurrentTCB>
    172a:	d0 91 94 15 	lds	r29, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    172e:	bf 83       	std	Y+7, r27	; 0x07
    1730:	ae 83       	std	Y+6, r26	; 0x06
    1732:	c0 91 93 15 	lds	r28, 0x1593	; 0x801593 <pxCurrentTCB>
    1736:	d0 91 94 15 	lds	r29, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    173a:	16 96       	adiw	r26, 0x06	; 6
    173c:	8d 91       	ld	r24, X+
    173e:	9c 91       	ld	r25, X
    1740:	17 97       	sbiw	r26, 0x07	; 7
    1742:	99 87       	std	Y+9, r25	; 0x09
    1744:	88 87       	std	Y+8, r24	; 0x08
    1746:	16 96       	adiw	r26, 0x06	; 6
    1748:	cd 91       	ld	r28, X+
    174a:	dc 91       	ld	r29, X
    174c:	17 97       	sbiw	r26, 0x07	; 7
    174e:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <pxCurrentTCB>
    1752:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    1756:	02 96       	adiw	r24, 0x02	; 2
    1758:	9d 83       	std	Y+5, r25	; 0x05
    175a:	8c 83       	std	Y+4, r24	; 0x04
    175c:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <pxCurrentTCB>
    1760:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    1764:	02 96       	adiw	r24, 0x02	; 2
    1766:	17 96       	adiw	r26, 0x07	; 7
    1768:	9c 93       	st	X, r25
    176a:	8e 93       	st	-X, r24
    176c:	16 97       	sbiw	r26, 0x06	; 6
    176e:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
    1772:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    1776:	1d 96       	adiw	r26, 0x0d	; 13
    1778:	fc 93       	st	X, r31
    177a:	ee 93       	st	-X, r30
    177c:	1c 97       	sbiw	r26, 0x0c	; 12
    177e:	80 81       	ld	r24, Z
    1780:	8f 5f       	subi	r24, 0xFF	; 255
    1782:	80 83       	st	Z, r24
    1784:	3f c0       	rjmp	.+126    	; 0x1804 <prvAddCurrentTaskToDelayedList+0x12c>
    1786:	c8 0c       	add	r12, r8
    1788:	d9 1c       	adc	r13, r9
    178a:	ea 1c       	adc	r14, r10
    178c:	fb 1c       	adc	r15, r11
    178e:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    1792:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    1796:	c2 82       	std	Z+2, r12	; 0x02
    1798:	d3 82       	std	Z+3, r13	; 0x03
    179a:	e4 82       	std	Z+4, r14	; 0x04
    179c:	f5 82       	std	Z+5, r15	; 0x05
    179e:	c8 14       	cp	r12, r8
    17a0:	d9 04       	cpc	r13, r9
    17a2:	ea 04       	cpc	r14, r10
    17a4:	fb 04       	cpc	r15, r11
    17a6:	68 f4       	brcc	.+26     	; 0x17c2 <prvAddCurrentTaskToDelayedList+0xea>
    17a8:	60 91 93 15 	lds	r22, 0x1593	; 0x801593 <pxCurrentTCB>
    17ac:	70 91 94 15 	lds	r23, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    17b0:	80 91 0b 15 	lds	r24, 0x150B	; 0x80150b <pxOverflowDelayedTaskList>
    17b4:	90 91 0c 15 	lds	r25, 0x150C	; 0x80150c <pxOverflowDelayedTaskList+0x1>
    17b8:	6e 5f       	subi	r22, 0xFE	; 254
    17ba:	7f 4f       	sbci	r23, 0xFF	; 255
    17bc:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    17c0:	21 c0       	rjmp	.+66     	; 0x1804 <prvAddCurrentTaskToDelayedList+0x12c>
    17c2:	60 91 93 15 	lds	r22, 0x1593	; 0x801593 <pxCurrentTCB>
    17c6:	70 91 94 15 	lds	r23, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    17ca:	80 91 0d 15 	lds	r24, 0x150D	; 0x80150d <pxDelayedTaskList>
    17ce:	90 91 0e 15 	lds	r25, 0x150E	; 0x80150e <pxDelayedTaskList+0x1>
    17d2:	6e 5f       	subi	r22, 0xFE	; 254
    17d4:	7f 4f       	sbci	r23, 0xFF	; 255
    17d6:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    17da:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <xNextTaskUnblockTime>
    17de:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <xNextTaskUnblockTime+0x1>
    17e2:	a0 91 d9 14 	lds	r26, 0x14D9	; 0x8014d9 <xNextTaskUnblockTime+0x2>
    17e6:	b0 91 da 14 	lds	r27, 0x14DA	; 0x8014da <xNextTaskUnblockTime+0x3>
    17ea:	c8 16       	cp	r12, r24
    17ec:	d9 06       	cpc	r13, r25
    17ee:	ea 06       	cpc	r14, r26
    17f0:	fb 06       	cpc	r15, r27
    17f2:	40 f4       	brcc	.+16     	; 0x1804 <prvAddCurrentTaskToDelayedList+0x12c>
    17f4:	c0 92 d7 14 	sts	0x14D7, r12	; 0x8014d7 <xNextTaskUnblockTime>
    17f8:	d0 92 d8 14 	sts	0x14D8, r13	; 0x8014d8 <xNextTaskUnblockTime+0x1>
    17fc:	e0 92 d9 14 	sts	0x14D9, r14	; 0x8014d9 <xNextTaskUnblockTime+0x2>
    1800:	f0 92 da 14 	sts	0x14DA, r15	; 0x8014da <xNextTaskUnblockTime+0x3>
    1804:	df 91       	pop	r29
    1806:	cf 91       	pop	r28
    1808:	ff 90       	pop	r15
    180a:	ef 90       	pop	r14
    180c:	df 90       	pop	r13
    180e:	cf 90       	pop	r12
    1810:	bf 90       	pop	r11
    1812:	af 90       	pop	r10
    1814:	9f 90       	pop	r9
    1816:	8f 90       	pop	r8
    1818:	08 95       	ret

0000181a <xTaskCreate>:
    181a:	4f 92       	push	r4
    181c:	5f 92       	push	r5
    181e:	6f 92       	push	r6
    1820:	7f 92       	push	r7
    1822:	8f 92       	push	r8
    1824:	9f 92       	push	r9
    1826:	af 92       	push	r10
    1828:	bf 92       	push	r11
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	4c 01       	movw	r8, r24
    183c:	6b 01       	movw	r12, r22
    183e:	5a 01       	movw	r10, r20
    1840:	29 01       	movw	r4, r18
    1842:	ca 01       	movw	r24, r20
    1844:	0e 94 b7 02 	call	0x56e	; 0x56e <pvPortMalloc>
    1848:	3c 01       	movw	r6, r24
    184a:	89 2b       	or	r24, r25
    184c:	09 f4       	brne	.+2      	; 0x1850 <xTaskCreate+0x36>
    184e:	0d c1       	rjmp	.+538    	; 0x1a6a <xTaskCreate+0x250>
    1850:	84 e3       	ldi	r24, 0x34	; 52
    1852:	90 e0       	ldi	r25, 0x00	; 0
    1854:	0e 94 b7 02 	call	0x56e	; 0x56e <pvPortMalloc>
    1858:	ec 01       	movw	r28, r24
    185a:	89 2b       	or	r24, r25
    185c:	99 f0       	breq	.+38     	; 0x1884 <xTaskCreate+0x6a>
    185e:	7c 8e       	std	Y+28, r7	; 0x1c
    1860:	6b 8e       	std	Y+27, r6	; 0x1b
    1862:	a5 01       	movw	r20, r10
    1864:	65 ea       	ldi	r22, 0xA5	; 165
    1866:	70 e0       	ldi	r23, 0x00	; 0
    1868:	c3 01       	movw	r24, r6
    186a:	0e 94 96 29 	call	0x532c	; 0x532c <memset>
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	a8 1a       	sub	r10, r24
    1872:	b1 08       	sbc	r11, r1
    1874:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1876:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1878:	a8 0e       	add	r10, r24
    187a:	b9 1e       	adc	r11, r25
    187c:	c1 14       	cp	r12, r1
    187e:	d1 04       	cpc	r13, r1
    1880:	29 f4       	brne	.+10     	; 0x188c <xTaskCreate+0x72>
    1882:	20 c0       	rjmp	.+64     	; 0x18c4 <xTaskCreate+0xaa>
    1884:	c3 01       	movw	r24, r6
    1886:	0e 94 7f 03 	call	0x6fe	; 0x6fe <vPortFree>
    188a:	ef c0       	rjmp	.+478    	; 0x1a6a <xTaskCreate+0x250>
    188c:	d6 01       	movw	r26, r12
    188e:	8c 91       	ld	r24, X
    1890:	8d 8f       	std	Y+29, r24	; 0x1d
    1892:	8c 91       	ld	r24, X
    1894:	88 23       	and	r24, r24
    1896:	a1 f0       	breq	.+40     	; 0x18c0 <xTaskCreate+0xa6>
    1898:	ae 01       	movw	r20, r28
    189a:	42 5e       	subi	r20, 0xE2	; 226
    189c:	5f 4f       	sbci	r21, 0xFF	; 255
    189e:	f6 01       	movw	r30, r12
    18a0:	31 96       	adiw	r30, 0x01	; 1
    18a2:	b0 e1       	ldi	r27, 0x10	; 16
    18a4:	cb 0e       	add	r12, r27
    18a6:	d1 1c       	adc	r13, r1
    18a8:	cf 01       	movw	r24, r30
    18aa:	21 91       	ld	r18, Z+
    18ac:	da 01       	movw	r26, r20
    18ae:	2d 93       	st	X+, r18
    18b0:	ad 01       	movw	r20, r26
    18b2:	dc 01       	movw	r26, r24
    18b4:	8c 91       	ld	r24, X
    18b6:	88 23       	and	r24, r24
    18b8:	19 f0       	breq	.+6      	; 0x18c0 <xTaskCreate+0xa6>
    18ba:	ce 16       	cp	r12, r30
    18bc:	df 06       	cpc	r13, r31
    18be:	a1 f7       	brne	.-24     	; 0x18a8 <xTaskCreate+0x8e>
    18c0:	1c a6       	std	Y+44, r1	; 0x2c
    18c2:	01 c0       	rjmp	.+2      	; 0x18c6 <xTaskCreate+0xac>
    18c4:	1d 8e       	std	Y+29, r1	; 0x1d
    18c6:	0a 30       	cpi	r16, 0x0A	; 10
    18c8:	08 f0       	brcs	.+2      	; 0x18cc <xTaskCreate+0xb2>
    18ca:	09 e0       	ldi	r16, 0x09	; 9
    18cc:	0a 8f       	std	Y+26, r16	; 0x1a
    18ce:	0d a7       	std	Y+45, r16	; 0x2d
    18d0:	1e a6       	std	Y+46, r1	; 0x2e
    18d2:	6e 01       	movw	r12, r28
    18d4:	b2 e0       	ldi	r27, 0x02	; 2
    18d6:	cb 0e       	add	r12, r27
    18d8:	d1 1c       	adc	r13, r1
    18da:	c6 01       	movw	r24, r12
    18dc:	0e 94 ca 03 	call	0x794	; 0x794 <vListInitialiseItem>
    18e0:	ce 01       	movw	r24, r28
    18e2:	0e 96       	adiw	r24, 0x0e	; 14
    18e4:	0e 94 ca 03 	call	0x794	; 0x794 <vListInitialiseItem>
    18e8:	db 87       	std	Y+11, r29	; 0x0b
    18ea:	ca 87       	std	Y+10, r28	; 0x0a
    18ec:	8a e0       	ldi	r24, 0x0A	; 10
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	a0 e0       	ldi	r26, 0x00	; 0
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	80 1b       	sub	r24, r16
    18f6:	91 09       	sbc	r25, r1
    18f8:	a1 09       	sbc	r26, r1
    18fa:	b1 09       	sbc	r27, r1
    18fc:	8e 87       	std	Y+14, r24	; 0x0e
    18fe:	9f 87       	std	Y+15, r25	; 0x0f
    1900:	a8 8b       	std	Y+16, r26	; 0x10
    1902:	b9 8b       	std	Y+17, r27	; 0x11
    1904:	df 8b       	std	Y+23, r29	; 0x17
    1906:	ce 8b       	std	Y+22, r28	; 0x16
    1908:	84 e0       	ldi	r24, 0x04	; 4
    190a:	fe 01       	movw	r30, r28
    190c:	bf 96       	adiw	r30, 0x2f	; 47
    190e:	df 01       	movw	r26, r30
    1910:	1d 92       	st	X+, r1
    1912:	8a 95       	dec	r24
    1914:	e9 f7       	brne	.-6      	; 0x1910 <xTaskCreate+0xf6>
    1916:	1b aa       	std	Y+51, r1	; 0x33
    1918:	a2 01       	movw	r20, r4
    191a:	b4 01       	movw	r22, r8
    191c:	c5 01       	movw	r24, r10
    191e:	0e 94 32 04 	call	0x864	; 0x864 <pxPortInitialiseStack>
    1922:	99 83       	std	Y+1, r25	; 0x01
    1924:	88 83       	st	Y, r24
    1926:	e1 14       	cp	r14, r1
    1928:	f1 04       	cpc	r15, r1
    192a:	19 f0       	breq	.+6      	; 0x1932 <xTaskCreate+0x118>
    192c:	f7 01       	movw	r30, r14
    192e:	d1 83       	std	Z+1, r29	; 0x01
    1930:	c0 83       	st	Z, r28
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	0f 92       	push	r0
    1938:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <uxCurrentNumberOfTasks>
    193c:	8f 5f       	subi	r24, 0xFF	; 255
    193e:	80 93 e8 14 	sts	0x14E8, r24	; 0x8014e8 <uxCurrentNumberOfTasks>
    1942:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <pxCurrentTCB>
    1946:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    194a:	89 2b       	or	r24, r25
    194c:	d1 f5       	brne	.+116    	; 0x19c2 <xTaskCreate+0x1a8>
    194e:	d0 93 94 15 	sts	0x1594, r29	; 0x801594 <pxCurrentTCB+0x1>
    1952:	c0 93 93 15 	sts	0x1593, r28	; 0x801593 <pxCurrentTCB>
    1956:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <uxCurrentNumberOfTasks>
    195a:	81 30       	cpi	r24, 0x01	; 1
    195c:	09 f0       	breq	.+2      	; 0x1960 <xTaskCreate+0x146>
    195e:	41 c0       	rjmp	.+130    	; 0x19e2 <xTaskCreate+0x1c8>
    1960:	05 e2       	ldi	r16, 0x25	; 37
    1962:	15 e1       	ldi	r17, 0x15	; 21
    1964:	0f 2e       	mov	r0, r31
    1966:	f3 e9       	ldi	r31, 0x93	; 147
    1968:	ef 2e       	mov	r14, r31
    196a:	f5 e1       	ldi	r31, 0x15	; 21
    196c:	ff 2e       	mov	r15, r31
    196e:	f0 2d       	mov	r31, r0
    1970:	c8 01       	movw	r24, r16
    1972:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1976:	05 5f       	subi	r16, 0xF5	; 245
    1978:	1f 4f       	sbci	r17, 0xFF	; 255
    197a:	0e 15       	cp	r16, r14
    197c:	1f 05       	cpc	r17, r15
    197e:	c1 f7       	brne	.-16     	; 0x1970 <xTaskCreate+0x156>
    1980:	8a e1       	ldi	r24, 0x1A	; 26
    1982:	95 e1       	ldi	r25, 0x15	; 21
    1984:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1988:	8f e0       	ldi	r24, 0x0F	; 15
    198a:	95 e1       	ldi	r25, 0x15	; 21
    198c:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	95 e1       	ldi	r25, 0x15	; 21
    1994:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    1998:	85 ef       	ldi	r24, 0xF5	; 245
    199a:	94 e1       	ldi	r25, 0x14	; 20
    199c:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    19a0:	89 ee       	ldi	r24, 0xE9	; 233
    19a2:	94 e1       	ldi	r25, 0x14	; 20
    19a4:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    19a8:	8a e1       	ldi	r24, 0x1A	; 26
    19aa:	95 e1       	ldi	r25, 0x15	; 21
    19ac:	90 93 0e 15 	sts	0x150E, r25	; 0x80150e <pxDelayedTaskList+0x1>
    19b0:	80 93 0d 15 	sts	0x150D, r24	; 0x80150d <pxDelayedTaskList>
    19b4:	8f e0       	ldi	r24, 0x0F	; 15
    19b6:	95 e1       	ldi	r25, 0x15	; 21
    19b8:	90 93 0c 15 	sts	0x150C, r25	; 0x80150c <pxOverflowDelayedTaskList+0x1>
    19bc:	80 93 0b 15 	sts	0x150B, r24	; 0x80150b <pxOverflowDelayedTaskList>
    19c0:	10 c0       	rjmp	.+32     	; 0x19e2 <xTaskCreate+0x1c8>
    19c2:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <xSchedulerRunning>
    19c6:	81 11       	cpse	r24, r1
    19c8:	0c c0       	rjmp	.+24     	; 0x19e2 <xTaskCreate+0x1c8>
    19ca:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    19ce:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    19d2:	92 8d       	ldd	r25, Z+26	; 0x1a
    19d4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    19d6:	89 17       	cp	r24, r25
    19d8:	20 f0       	brcs	.+8      	; 0x19e2 <xTaskCreate+0x1c8>
    19da:	d0 93 94 15 	sts	0x1594, r29	; 0x801594 <pxCurrentTCB+0x1>
    19de:	c0 93 93 15 	sts	0x1593, r28	; 0x801593 <pxCurrentTCB>
    19e2:	80 91 db 14 	lds	r24, 0x14DB	; 0x8014db <uxTaskNumber>
    19e6:	8f 5f       	subi	r24, 0xFF	; 255
    19e8:	80 93 db 14 	sts	0x14DB, r24	; 0x8014db <uxTaskNumber>
    19ec:	ea 8d       	ldd	r30, Y+26	; 0x1a
    19ee:	80 91 e3 14 	lds	r24, 0x14E3	; 0x8014e3 <uxTopReadyPriority>
    19f2:	8e 17       	cp	r24, r30
    19f4:	10 f4       	brcc	.+4      	; 0x19fa <xTaskCreate+0x1e0>
    19f6:	e0 93 e3 14 	sts	0x14E3, r30	; 0x8014e3 <uxTopReadyPriority>
    19fa:	8b e0       	ldi	r24, 0x0B	; 11
    19fc:	8e 9f       	mul	r24, r30
    19fe:	f0 01       	movw	r30, r0
    1a00:	11 24       	eor	r1, r1
    1a02:	eb 5d       	subi	r30, 0xDB	; 219
    1a04:	fa 4e       	sbci	r31, 0xEA	; 234
    1a06:	01 80       	ldd	r0, Z+1	; 0x01
    1a08:	f2 81       	ldd	r31, Z+2	; 0x02
    1a0a:	e0 2d       	mov	r30, r0
    1a0c:	ff 83       	std	Y+7, r31	; 0x07
    1a0e:	ee 83       	std	Y+6, r30	; 0x06
    1a10:	26 81       	ldd	r18, Z+6	; 0x06
    1a12:	37 81       	ldd	r19, Z+7	; 0x07
    1a14:	39 87       	std	Y+9, r19	; 0x09
    1a16:	28 87       	std	Y+8, r18	; 0x08
    1a18:	a6 81       	ldd	r26, Z+6	; 0x06
    1a1a:	b7 81       	ldd	r27, Z+7	; 0x07
    1a1c:	15 96       	adiw	r26, 0x05	; 5
    1a1e:	dc 92       	st	X, r13
    1a20:	ce 92       	st	-X, r12
    1a22:	14 97       	sbiw	r26, 0x04	; 4
    1a24:	d7 82       	std	Z+7, r13	; 0x07
    1a26:	c6 82       	std	Z+6, r12	; 0x06
    1a28:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1a2a:	8e 9f       	mul	r24, r30
    1a2c:	f0 01       	movw	r30, r0
    1a2e:	11 24       	eor	r1, r1
    1a30:	eb 5d       	subi	r30, 0xDB	; 219
    1a32:	fa 4e       	sbci	r31, 0xEA	; 234
    1a34:	fd 87       	std	Y+13, r31	; 0x0d
    1a36:	ec 87       	std	Y+12, r30	; 0x0c
    1a38:	80 81       	ld	r24, Z
    1a3a:	8f 5f       	subi	r24, 0xFF	; 255
    1a3c:	80 83       	st	Z, r24
    1a3e:	0f 90       	pop	r0
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <xSchedulerRunning>
    1a46:	88 23       	and	r24, r24
    1a48:	61 f0       	breq	.+24     	; 0x1a62 <xTaskCreate+0x248>
    1a4a:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    1a4e:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    1a52:	92 8d       	ldd	r25, Z+26	; 0x1a
    1a54:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1a56:	98 17       	cp	r25, r24
    1a58:	30 f4       	brcc	.+12     	; 0x1a66 <xTaskCreate+0x24c>
    1a5a:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	05 c0       	rjmp	.+10     	; 0x1a6c <xTaskCreate+0x252>
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	03 c0       	rjmp	.+6      	; 0x1a6c <xTaskCreate+0x252>
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	01 c0       	rjmp	.+2      	; 0x1a6c <xTaskCreate+0x252>
    1a6a:	8f ef       	ldi	r24, 0xFF	; 255
    1a6c:	df 91       	pop	r29
    1a6e:	cf 91       	pop	r28
    1a70:	1f 91       	pop	r17
    1a72:	0f 91       	pop	r16
    1a74:	ff 90       	pop	r15
    1a76:	ef 90       	pop	r14
    1a78:	df 90       	pop	r13
    1a7a:	cf 90       	pop	r12
    1a7c:	bf 90       	pop	r11
    1a7e:	af 90       	pop	r10
    1a80:	9f 90       	pop	r9
    1a82:	8f 90       	pop	r8
    1a84:	7f 90       	pop	r7
    1a86:	6f 90       	pop	r6
    1a88:	5f 90       	pop	r5
    1a8a:	4f 90       	pop	r4
    1a8c:	08 95       	ret

00001a8e <vTaskStartScheduler>:
    1a8e:	ef 92       	push	r14
    1a90:	ff 92       	push	r15
    1a92:	0f 93       	push	r16
    1a94:	0f 2e       	mov	r0, r31
    1a96:	f5 ed       	ldi	r31, 0xD5	; 213
    1a98:	ef 2e       	mov	r14, r31
    1a9a:	f4 e1       	ldi	r31, 0x14	; 20
    1a9c:	ff 2e       	mov	r15, r31
    1a9e:	f0 2d       	mov	r31, r0
    1aa0:	00 e0       	ldi	r16, 0x00	; 0
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 ec       	ldi	r20, 0xC0	; 192
    1aa8:	50 e0       	ldi	r21, 0x00	; 0
    1aaa:	6f e6       	ldi	r22, 0x6F	; 111
    1aac:	72 e0       	ldi	r23, 0x02	; 2
    1aae:	8d ec       	ldi	r24, 0xCD	; 205
    1ab0:	90 e0       	ldi	r25, 0x00	; 0
    1ab2:	b3 de       	rcall	.-666    	; 0x181a <xTaskCreate>
    1ab4:	81 30       	cpi	r24, 0x01	; 1
    1ab6:	e9 f4       	brne	.+58     	; 0x1af2 <vTaskStartScheduler+0x64>
    1ab8:	0e 94 dd 15 	call	0x2bba	; 0x2bba <xTimerCreateTimerTask>
    1abc:	81 30       	cpi	r24, 0x01	; 1
    1abe:	c9 f4       	brne	.+50     	; 0x1af2 <vTaskStartScheduler+0x64>
    1ac0:	f8 94       	cli
    1ac2:	8f ef       	ldi	r24, 0xFF	; 255
    1ac4:	9f ef       	ldi	r25, 0xFF	; 255
    1ac6:	dc 01       	movw	r26, r24
    1ac8:	80 93 d7 14 	sts	0x14D7, r24	; 0x8014d7 <xNextTaskUnblockTime>
    1acc:	90 93 d8 14 	sts	0x14D8, r25	; 0x8014d8 <xNextTaskUnblockTime+0x1>
    1ad0:	a0 93 d9 14 	sts	0x14D9, r26	; 0x8014d9 <xNextTaskUnblockTime+0x2>
    1ad4:	b0 93 da 14 	sts	0x14DA, r27	; 0x8014da <xNextTaskUnblockTime+0x3>
    1ad8:	81 e0       	ldi	r24, 0x01	; 1
    1ada:	80 93 e2 14 	sts	0x14E2, r24	; 0x8014e2 <xSchedulerRunning>
    1ade:	10 92 e4 14 	sts	0x14E4, r1	; 0x8014e4 <xTickCount>
    1ae2:	10 92 e5 14 	sts	0x14E5, r1	; 0x8014e5 <xTickCount+0x1>
    1ae6:	10 92 e6 14 	sts	0x14E6, r1	; 0x8014e6 <xTickCount+0x2>
    1aea:	10 92 e7 14 	sts	0x14E7, r1	; 0x8014e7 <xTickCount+0x3>
    1aee:	0e 94 49 04 	call	0x892	; 0x892 <xPortStartScheduler>
    1af2:	80 91 06 02 	lds	r24, 0x0206	; 0x800206 <uxTopUsedPriority>
    1af6:	0f 91       	pop	r16
    1af8:	ff 90       	pop	r15
    1afa:	ef 90       	pop	r14
    1afc:	08 95       	ret

00001afe <vTaskSuspendAll>:
    1afe:	80 91 d4 14 	lds	r24, 0x14D4	; 0x8014d4 <uxSchedulerSuspended>
    1b02:	8f 5f       	subi	r24, 0xFF	; 255
    1b04:	80 93 d4 14 	sts	0x14D4, r24	; 0x8014d4 <uxSchedulerSuspended>
    1b08:	08 95       	ret

00001b0a <xTaskGetTickCount>:
    1b0a:	0f b6       	in	r0, 0x3f	; 63
    1b0c:	f8 94       	cli
    1b0e:	0f 92       	push	r0
    1b10:	60 91 e4 14 	lds	r22, 0x14E4	; 0x8014e4 <xTickCount>
    1b14:	70 91 e5 14 	lds	r23, 0x14E5	; 0x8014e5 <xTickCount+0x1>
    1b18:	80 91 e6 14 	lds	r24, 0x14E6	; 0x8014e6 <xTickCount+0x2>
    1b1c:	90 91 e7 14 	lds	r25, 0x14E7	; 0x8014e7 <xTickCount+0x3>
    1b20:	0f 90       	pop	r0
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	08 95       	ret

00001b26 <xTaskIncrementTick>:
    1b26:	cf 92       	push	r12
    1b28:	df 92       	push	r13
    1b2a:	ef 92       	push	r14
    1b2c:	ff 92       	push	r15
    1b2e:	0f 93       	push	r16
    1b30:	1f 93       	push	r17
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	80 91 d4 14 	lds	r24, 0x14D4	; 0x8014d4 <uxSchedulerSuspended>
    1b3a:	81 11       	cpse	r24, r1
    1b3c:	07 c1       	rjmp	.+526    	; 0x1d4c <xTaskIncrementTick+0x226>
    1b3e:	c0 90 e4 14 	lds	r12, 0x14E4	; 0x8014e4 <xTickCount>
    1b42:	d0 90 e5 14 	lds	r13, 0x14E5	; 0x8014e5 <xTickCount+0x1>
    1b46:	e0 90 e6 14 	lds	r14, 0x14E6	; 0x8014e6 <xTickCount+0x2>
    1b4a:	f0 90 e7 14 	lds	r15, 0x14E7	; 0x8014e7 <xTickCount+0x3>
    1b4e:	8f ef       	ldi	r24, 0xFF	; 255
    1b50:	c8 1a       	sub	r12, r24
    1b52:	d8 0a       	sbc	r13, r24
    1b54:	e8 0a       	sbc	r14, r24
    1b56:	f8 0a       	sbc	r15, r24
    1b58:	c0 92 e4 14 	sts	0x14E4, r12	; 0x8014e4 <xTickCount>
    1b5c:	d0 92 e5 14 	sts	0x14E5, r13	; 0x8014e5 <xTickCount+0x1>
    1b60:	e0 92 e6 14 	sts	0x14E6, r14	; 0x8014e6 <xTickCount+0x2>
    1b64:	f0 92 e7 14 	sts	0x14E7, r15	; 0x8014e7 <xTickCount+0x3>
    1b68:	c1 14       	cp	r12, r1
    1b6a:	d1 04       	cpc	r13, r1
    1b6c:	e1 04       	cpc	r14, r1
    1b6e:	f1 04       	cpc	r15, r1
    1b70:	b1 f4       	brne	.+44     	; 0x1b9e <xTaskIncrementTick+0x78>
    1b72:	80 91 0d 15 	lds	r24, 0x150D	; 0x80150d <pxDelayedTaskList>
    1b76:	90 91 0e 15 	lds	r25, 0x150E	; 0x80150e <pxDelayedTaskList+0x1>
    1b7a:	20 91 0b 15 	lds	r18, 0x150B	; 0x80150b <pxOverflowDelayedTaskList>
    1b7e:	30 91 0c 15 	lds	r19, 0x150C	; 0x80150c <pxOverflowDelayedTaskList+0x1>
    1b82:	30 93 0e 15 	sts	0x150E, r19	; 0x80150e <pxDelayedTaskList+0x1>
    1b86:	20 93 0d 15 	sts	0x150D, r18	; 0x80150d <pxDelayedTaskList>
    1b8a:	90 93 0c 15 	sts	0x150C, r25	; 0x80150c <pxOverflowDelayedTaskList+0x1>
    1b8e:	80 93 0b 15 	sts	0x150B, r24	; 0x80150b <pxOverflowDelayedTaskList>
    1b92:	80 91 dc 14 	lds	r24, 0x14DC	; 0x8014dc <xNumOfOverflows>
    1b96:	8f 5f       	subi	r24, 0xFF	; 255
    1b98:	80 93 dc 14 	sts	0x14DC, r24	; 0x8014dc <xNumOfOverflows>
    1b9c:	76 dd       	rcall	.-1300   	; 0x168a <prvResetNextTaskUnblockTime>
    1b9e:	80 91 d7 14 	lds	r24, 0x14D7	; 0x8014d7 <xNextTaskUnblockTime>
    1ba2:	90 91 d8 14 	lds	r25, 0x14D8	; 0x8014d8 <xNextTaskUnblockTime+0x1>
    1ba6:	a0 91 d9 14 	lds	r26, 0x14D9	; 0x8014d9 <xNextTaskUnblockTime+0x2>
    1baa:	b0 91 da 14 	lds	r27, 0x14DA	; 0x8014da <xNextTaskUnblockTime+0x3>
    1bae:	c8 16       	cp	r12, r24
    1bb0:	d9 06       	cpc	r13, r25
    1bb2:	ea 06       	cpc	r14, r26
    1bb4:	fb 06       	cpc	r15, r27
    1bb6:	10 f4       	brcc	.+4      	; 0x1bbc <xTaskIncrementTick+0x96>
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	b3 c0       	rjmp	.+358    	; 0x1d22 <xTaskIncrementTick+0x1fc>
    1bbc:	80 e0       	ldi	r24, 0x00	; 0
    1bbe:	4b e0       	ldi	r20, 0x0B	; 11
    1bc0:	51 e0       	ldi	r21, 0x01	; 1
    1bc2:	e0 91 0d 15 	lds	r30, 0x150D	; 0x80150d <pxDelayedTaskList>
    1bc6:	f0 91 0e 15 	lds	r31, 0x150E	; 0x80150e <pxDelayedTaskList+0x1>
    1bca:	90 81       	ld	r25, Z
    1bcc:	91 11       	cpse	r25, r1
    1bce:	0c c0       	rjmp	.+24     	; 0x1be8 <xTaskIncrementTick+0xc2>
    1bd0:	4f ef       	ldi	r20, 0xFF	; 255
    1bd2:	5f ef       	ldi	r21, 0xFF	; 255
    1bd4:	ba 01       	movw	r22, r20
    1bd6:	40 93 d7 14 	sts	0x14D7, r20	; 0x8014d7 <xNextTaskUnblockTime>
    1bda:	50 93 d8 14 	sts	0x14D8, r21	; 0x8014d8 <xNextTaskUnblockTime+0x1>
    1bde:	60 93 d9 14 	sts	0x14D9, r22	; 0x8014d9 <xNextTaskUnblockTime+0x2>
    1be2:	70 93 da 14 	sts	0x14DA, r23	; 0x8014da <xNextTaskUnblockTime+0x3>
    1be6:	9d c0       	rjmp	.+314    	; 0x1d22 <xTaskIncrementTick+0x1fc>
    1be8:	e0 91 0d 15 	lds	r30, 0x150D	; 0x80150d <pxDelayedTaskList>
    1bec:	f0 91 0e 15 	lds	r31, 0x150E	; 0x80150e <pxDelayedTaskList+0x1>
    1bf0:	07 80       	ldd	r0, Z+7	; 0x07
    1bf2:	f0 85       	ldd	r31, Z+8	; 0x08
    1bf4:	e0 2d       	mov	r30, r0
    1bf6:	00 84       	ldd	r0, Z+8	; 0x08
    1bf8:	f1 85       	ldd	r31, Z+9	; 0x09
    1bfa:	e0 2d       	mov	r30, r0
    1bfc:	02 81       	ldd	r16, Z+2	; 0x02
    1bfe:	13 81       	ldd	r17, Z+3	; 0x03
    1c00:	24 81       	ldd	r18, Z+4	; 0x04
    1c02:	35 81       	ldd	r19, Z+5	; 0x05
    1c04:	c0 16       	cp	r12, r16
    1c06:	d1 06       	cpc	r13, r17
    1c08:	e2 06       	cpc	r14, r18
    1c0a:	f3 06       	cpc	r15, r19
    1c0c:	48 f4       	brcc	.+18     	; 0x1c20 <xTaskIncrementTick+0xfa>
    1c0e:	00 93 d7 14 	sts	0x14D7, r16	; 0x8014d7 <xNextTaskUnblockTime>
    1c12:	10 93 d8 14 	sts	0x14D8, r17	; 0x8014d8 <xNextTaskUnblockTime+0x1>
    1c16:	20 93 d9 14 	sts	0x14D9, r18	; 0x8014d9 <xNextTaskUnblockTime+0x2>
    1c1a:	30 93 da 14 	sts	0x14DA, r19	; 0x8014da <xNextTaskUnblockTime+0x3>
    1c1e:	81 c0       	rjmp	.+258    	; 0x1d22 <xTaskIncrementTick+0x1fc>
    1c20:	a4 85       	ldd	r26, Z+12	; 0x0c
    1c22:	b5 85       	ldd	r27, Z+13	; 0x0d
    1c24:	c6 81       	ldd	r28, Z+6	; 0x06
    1c26:	d7 81       	ldd	r29, Z+7	; 0x07
    1c28:	20 85       	ldd	r18, Z+8	; 0x08
    1c2a:	31 85       	ldd	r19, Z+9	; 0x09
    1c2c:	3f 83       	std	Y+7, r19	; 0x07
    1c2e:	2e 83       	std	Y+6, r18	; 0x06
    1c30:	c0 85       	ldd	r28, Z+8	; 0x08
    1c32:	d1 85       	ldd	r29, Z+9	; 0x09
    1c34:	26 81       	ldd	r18, Z+6	; 0x06
    1c36:	37 81       	ldd	r19, Z+7	; 0x07
    1c38:	3d 83       	std	Y+5, r19	; 0x05
    1c3a:	2c 83       	std	Y+4, r18	; 0x04
    1c3c:	9f 01       	movw	r18, r30
    1c3e:	2e 5f       	subi	r18, 0xFE	; 254
    1c40:	3f 4f       	sbci	r19, 0xFF	; 255
    1c42:	11 96       	adiw	r26, 0x01	; 1
    1c44:	6d 91       	ld	r22, X+
    1c46:	7c 91       	ld	r23, X
    1c48:	12 97       	sbiw	r26, 0x02	; 2
    1c4a:	62 17       	cp	r22, r18
    1c4c:	73 07       	cpc	r23, r19
    1c4e:	31 f4       	brne	.+12     	; 0x1c5c <xTaskIncrementTick+0x136>
    1c50:	60 85       	ldd	r22, Z+8	; 0x08
    1c52:	71 85       	ldd	r23, Z+9	; 0x09
    1c54:	12 96       	adiw	r26, 0x02	; 2
    1c56:	7c 93       	st	X, r23
    1c58:	6e 93       	st	-X, r22
    1c5a:	11 97       	sbiw	r26, 0x01	; 1
    1c5c:	15 86       	std	Z+13, r1	; 0x0d
    1c5e:	14 86       	std	Z+12, r1	; 0x0c
    1c60:	9c 91       	ld	r25, X
    1c62:	91 50       	subi	r25, 0x01	; 1
    1c64:	9c 93       	st	X, r25
    1c66:	a0 8d       	ldd	r26, Z+24	; 0x18
    1c68:	b1 8d       	ldd	r27, Z+25	; 0x19
    1c6a:	10 97       	sbiw	r26, 0x00	; 0
    1c6c:	09 f1       	breq	.+66     	; 0x1cb0 <xTaskIncrementTick+0x18a>
    1c6e:	c2 89       	ldd	r28, Z+18	; 0x12
    1c70:	d3 89       	ldd	r29, Z+19	; 0x13
    1c72:	64 89       	ldd	r22, Z+20	; 0x14
    1c74:	75 89       	ldd	r23, Z+21	; 0x15
    1c76:	7f 83       	std	Y+7, r23	; 0x07
    1c78:	6e 83       	std	Y+6, r22	; 0x06
    1c7a:	c4 89       	ldd	r28, Z+20	; 0x14
    1c7c:	d5 89       	ldd	r29, Z+21	; 0x15
    1c7e:	62 89       	ldd	r22, Z+18	; 0x12
    1c80:	73 89       	ldd	r23, Z+19	; 0x13
    1c82:	7d 83       	std	Y+5, r23	; 0x05
    1c84:	6c 83       	std	Y+4, r22	; 0x04
    1c86:	11 96       	adiw	r26, 0x01	; 1
    1c88:	cd 91       	ld	r28, X+
    1c8a:	dc 91       	ld	r29, X
    1c8c:	12 97       	sbiw	r26, 0x02	; 2
    1c8e:	bf 01       	movw	r22, r30
    1c90:	62 5f       	subi	r22, 0xF2	; 242
    1c92:	7f 4f       	sbci	r23, 0xFF	; 255
    1c94:	c6 17       	cp	r28, r22
    1c96:	d7 07       	cpc	r29, r23
    1c98:	31 f4       	brne	.+12     	; 0x1ca6 <xTaskIncrementTick+0x180>
    1c9a:	64 89       	ldd	r22, Z+20	; 0x14
    1c9c:	75 89       	ldd	r23, Z+21	; 0x15
    1c9e:	12 96       	adiw	r26, 0x02	; 2
    1ca0:	7c 93       	st	X, r23
    1ca2:	6e 93       	st	-X, r22
    1ca4:	11 97       	sbiw	r26, 0x01	; 1
    1ca6:	11 8e       	std	Z+25, r1	; 0x19
    1ca8:	10 8e       	std	Z+24, r1	; 0x18
    1caa:	9c 91       	ld	r25, X
    1cac:	91 50       	subi	r25, 0x01	; 1
    1cae:	9c 93       	st	X, r25
    1cb0:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cb2:	90 91 e3 14 	lds	r25, 0x14E3	; 0x8014e3 <uxTopReadyPriority>
    1cb6:	9a 17       	cp	r25, r26
    1cb8:	10 f4       	brcc	.+4      	; 0x1cbe <xTaskIncrementTick+0x198>
    1cba:	a0 93 e3 14 	sts	0x14E3, r26	; 0x8014e3 <uxTopReadyPriority>
    1cbe:	4a 9f       	mul	r20, r26
    1cc0:	d0 01       	movw	r26, r0
    1cc2:	11 24       	eor	r1, r1
    1cc4:	ab 5d       	subi	r26, 0xDB	; 219
    1cc6:	ba 4e       	sbci	r27, 0xEA	; 234
    1cc8:	11 96       	adiw	r26, 0x01	; 1
    1cca:	0d 90       	ld	r0, X+
    1ccc:	bc 91       	ld	r27, X
    1cce:	a0 2d       	mov	r26, r0
    1cd0:	b7 83       	std	Z+7, r27	; 0x07
    1cd2:	a6 83       	std	Z+6, r26	; 0x06
    1cd4:	16 96       	adiw	r26, 0x06	; 6
    1cd6:	6d 91       	ld	r22, X+
    1cd8:	7c 91       	ld	r23, X
    1cda:	17 97       	sbiw	r26, 0x07	; 7
    1cdc:	71 87       	std	Z+9, r23	; 0x09
    1cde:	60 87       	std	Z+8, r22	; 0x08
    1ce0:	16 96       	adiw	r26, 0x06	; 6
    1ce2:	cd 91       	ld	r28, X+
    1ce4:	dc 91       	ld	r29, X
    1ce6:	17 97       	sbiw	r26, 0x07	; 7
    1ce8:	3d 83       	std	Y+5, r19	; 0x05
    1cea:	2c 83       	std	Y+4, r18	; 0x04
    1cec:	17 96       	adiw	r26, 0x07	; 7
    1cee:	3c 93       	st	X, r19
    1cf0:	2e 93       	st	-X, r18
    1cf2:	16 97       	sbiw	r26, 0x06	; 6
    1cf4:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1cf6:	4a 9f       	mul	r20, r26
    1cf8:	d0 01       	movw	r26, r0
    1cfa:	11 24       	eor	r1, r1
    1cfc:	ab 5d       	subi	r26, 0xDB	; 219
    1cfe:	ba 4e       	sbci	r27, 0xEA	; 234
    1d00:	b5 87       	std	Z+13, r27	; 0x0d
    1d02:	a4 87       	std	Z+12, r26	; 0x0c
    1d04:	9c 91       	ld	r25, X
    1d06:	9f 5f       	subi	r25, 0xFF	; 255
    1d08:	9c 93       	st	X, r25
    1d0a:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
    1d0e:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    1d12:	22 8d       	ldd	r18, Z+26	; 0x1a
    1d14:	5a 96       	adiw	r26, 0x1a	; 26
    1d16:	9c 91       	ld	r25, X
    1d18:	29 17       	cp	r18, r25
    1d1a:	08 f4       	brcc	.+2      	; 0x1d1e <xTaskIncrementTick+0x1f8>
    1d1c:	52 cf       	rjmp	.-348    	; 0x1bc2 <xTaskIncrementTick+0x9c>
    1d1e:	85 2f       	mov	r24, r21
    1d20:	50 cf       	rjmp	.-352    	; 0x1bc2 <xTaskIncrementTick+0x9c>
    1d22:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    1d26:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    1d2a:	e2 8d       	ldd	r30, Z+26	; 0x1a
    1d2c:	9b e0       	ldi	r25, 0x0B	; 11
    1d2e:	e9 9f       	mul	r30, r25
    1d30:	f0 01       	movw	r30, r0
    1d32:	11 24       	eor	r1, r1
    1d34:	eb 5d       	subi	r30, 0xDB	; 219
    1d36:	fa 4e       	sbci	r31, 0xEA	; 234
    1d38:	90 81       	ld	r25, Z
    1d3a:	92 30       	cpi	r25, 0x02	; 2
    1d3c:	08 f0       	brcs	.+2      	; 0x1d40 <xTaskIncrementTick+0x21a>
    1d3e:	81 e0       	ldi	r24, 0x01	; 1
    1d40:	90 91 dd 14 	lds	r25, 0x14DD	; 0x8014dd <xYieldPending>
    1d44:	99 23       	and	r25, r25
    1d46:	b1 f0       	breq	.+44     	; 0x1d74 <xTaskIncrementTick+0x24e>
    1d48:	81 e0       	ldi	r24, 0x01	; 1
    1d4a:	14 c0       	rjmp	.+40     	; 0x1d74 <xTaskIncrementTick+0x24e>
    1d4c:	80 91 de 14 	lds	r24, 0x14DE	; 0x8014de <xPendedTicks>
    1d50:	90 91 df 14 	lds	r25, 0x14DF	; 0x8014df <xPendedTicks+0x1>
    1d54:	a0 91 e0 14 	lds	r26, 0x14E0	; 0x8014e0 <xPendedTicks+0x2>
    1d58:	b0 91 e1 14 	lds	r27, 0x14E1	; 0x8014e1 <xPendedTicks+0x3>
    1d5c:	01 96       	adiw	r24, 0x01	; 1
    1d5e:	a1 1d       	adc	r26, r1
    1d60:	b1 1d       	adc	r27, r1
    1d62:	80 93 de 14 	sts	0x14DE, r24	; 0x8014de <xPendedTicks>
    1d66:	90 93 df 14 	sts	0x14DF, r25	; 0x8014df <xPendedTicks+0x1>
    1d6a:	a0 93 e0 14 	sts	0x14E0, r26	; 0x8014e0 <xPendedTicks+0x2>
    1d6e:	b0 93 e1 14 	sts	0x14E1, r27	; 0x8014e1 <xPendedTicks+0x3>
    1d72:	80 e0       	ldi	r24, 0x00	; 0
    1d74:	df 91       	pop	r29
    1d76:	cf 91       	pop	r28
    1d78:	1f 91       	pop	r17
    1d7a:	0f 91       	pop	r16
    1d7c:	ff 90       	pop	r15
    1d7e:	ef 90       	pop	r14
    1d80:	df 90       	pop	r13
    1d82:	cf 90       	pop	r12
    1d84:	08 95       	ret

00001d86 <xTaskResumeAll>:
    1d86:	cf 92       	push	r12
    1d88:	df 92       	push	r13
    1d8a:	ef 92       	push	r14
    1d8c:	ff 92       	push	r15
    1d8e:	0f 93       	push	r16
    1d90:	1f 93       	push	r17
    1d92:	cf 93       	push	r28
    1d94:	df 93       	push	r29
    1d96:	0f b6       	in	r0, 0x3f	; 63
    1d98:	f8 94       	cli
    1d9a:	0f 92       	push	r0
    1d9c:	80 91 d4 14 	lds	r24, 0x14D4	; 0x8014d4 <uxSchedulerSuspended>
    1da0:	81 50       	subi	r24, 0x01	; 1
    1da2:	80 93 d4 14 	sts	0x14D4, r24	; 0x8014d4 <uxSchedulerSuspended>
    1da6:	80 91 d4 14 	lds	r24, 0x14D4	; 0x8014d4 <uxSchedulerSuspended>
    1daa:	81 11       	cpse	r24, r1
    1dac:	c4 c0       	rjmp	.+392    	; 0x1f36 <xTaskResumeAll+0x1b0>
    1dae:	80 91 e8 14 	lds	r24, 0x14E8	; 0x8014e8 <uxCurrentNumberOfTasks>
    1db2:	81 11       	cpse	r24, r1
    1db4:	8b c0       	rjmp	.+278    	; 0x1ecc <xTaskResumeAll+0x146>
    1db6:	c2 c0       	rjmp	.+388    	; 0x1f3c <xTaskResumeAll+0x1b6>
    1db8:	d8 01       	movw	r26, r16
    1dba:	17 96       	adiw	r26, 0x07	; 7
    1dbc:	ed 91       	ld	r30, X+
    1dbe:	fc 91       	ld	r31, X
    1dc0:	18 97       	sbiw	r26, 0x08	; 8
    1dc2:	00 84       	ldd	r0, Z+8	; 0x08
    1dc4:	f1 85       	ldd	r31, Z+9	; 0x09
    1dc6:	e0 2d       	mov	r30, r0
    1dc8:	a0 8d       	ldd	r26, Z+24	; 0x18
    1dca:	b1 8d       	ldd	r27, Z+25	; 0x19
    1dcc:	82 89       	ldd	r24, Z+18	; 0x12
    1dce:	93 89       	ldd	r25, Z+19	; 0x13
    1dd0:	64 89       	ldd	r22, Z+20	; 0x14
    1dd2:	75 89       	ldd	r23, Z+21	; 0x15
    1dd4:	ec 01       	movw	r28, r24
    1dd6:	7f 83       	std	Y+7, r23	; 0x07
    1dd8:	6e 83       	std	Y+6, r22	; 0x06
    1dda:	84 89       	ldd	r24, Z+20	; 0x14
    1ddc:	95 89       	ldd	r25, Z+21	; 0x15
    1dde:	62 89       	ldd	r22, Z+18	; 0x12
    1de0:	73 89       	ldd	r23, Z+19	; 0x13
    1de2:	ec 01       	movw	r28, r24
    1de4:	7d 83       	std	Y+5, r23	; 0x05
    1de6:	6c 83       	std	Y+4, r22	; 0x04
    1de8:	cf 01       	movw	r24, r30
    1dea:	0e 96       	adiw	r24, 0x0e	; 14
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	6d 91       	ld	r22, X+
    1df0:	7c 91       	ld	r23, X
    1df2:	12 97       	sbiw	r26, 0x02	; 2
    1df4:	68 17       	cp	r22, r24
    1df6:	79 07       	cpc	r23, r25
    1df8:	31 f4       	brne	.+12     	; 0x1e06 <xTaskResumeAll+0x80>
    1dfa:	84 89       	ldd	r24, Z+20	; 0x14
    1dfc:	95 89       	ldd	r25, Z+21	; 0x15
    1dfe:	12 96       	adiw	r26, 0x02	; 2
    1e00:	9c 93       	st	X, r25
    1e02:	8e 93       	st	-X, r24
    1e04:	11 97       	sbiw	r26, 0x01	; 1
    1e06:	11 8e       	std	Z+25, r1	; 0x19
    1e08:	10 8e       	std	Z+24, r1	; 0x18
    1e0a:	8c 91       	ld	r24, X
    1e0c:	81 50       	subi	r24, 0x01	; 1
    1e0e:	8c 93       	st	X, r24
    1e10:	a4 85       	ldd	r26, Z+12	; 0x0c
    1e12:	b5 85       	ldd	r27, Z+13	; 0x0d
    1e14:	86 81       	ldd	r24, Z+6	; 0x06
    1e16:	97 81       	ldd	r25, Z+7	; 0x07
    1e18:	60 85       	ldd	r22, Z+8	; 0x08
    1e1a:	71 85       	ldd	r23, Z+9	; 0x09
    1e1c:	ec 01       	movw	r28, r24
    1e1e:	7f 83       	std	Y+7, r23	; 0x07
    1e20:	6e 83       	std	Y+6, r22	; 0x06
    1e22:	80 85       	ldd	r24, Z+8	; 0x08
    1e24:	91 85       	ldd	r25, Z+9	; 0x09
    1e26:	66 81       	ldd	r22, Z+6	; 0x06
    1e28:	77 81       	ldd	r23, Z+7	; 0x07
    1e2a:	ec 01       	movw	r28, r24
    1e2c:	7d 83       	std	Y+5, r23	; 0x05
    1e2e:	6c 83       	std	Y+4, r22	; 0x04
    1e30:	cf 01       	movw	r24, r30
    1e32:	02 96       	adiw	r24, 0x02	; 2
    1e34:	11 96       	adiw	r26, 0x01	; 1
    1e36:	6d 91       	ld	r22, X+
    1e38:	7c 91       	ld	r23, X
    1e3a:	12 97       	sbiw	r26, 0x02	; 2
    1e3c:	68 17       	cp	r22, r24
    1e3e:	79 07       	cpc	r23, r25
    1e40:	31 f4       	brne	.+12     	; 0x1e4e <xTaskResumeAll+0xc8>
    1e42:	60 85       	ldd	r22, Z+8	; 0x08
    1e44:	71 85       	ldd	r23, Z+9	; 0x09
    1e46:	12 96       	adiw	r26, 0x02	; 2
    1e48:	7c 93       	st	X, r23
    1e4a:	6e 93       	st	-X, r22
    1e4c:	11 97       	sbiw	r26, 0x01	; 1
    1e4e:	15 86       	std	Z+13, r1	; 0x0d
    1e50:	14 86       	std	Z+12, r1	; 0x0c
    1e52:	2c 91       	ld	r18, X
    1e54:	21 50       	subi	r18, 0x01	; 1
    1e56:	2c 93       	st	X, r18
    1e58:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1e5a:	20 91 e3 14 	lds	r18, 0x14E3	; 0x8014e3 <uxTopReadyPriority>
    1e5e:	2a 17       	cp	r18, r26
    1e60:	10 f4       	brcc	.+4      	; 0x1e66 <xTaskResumeAll+0xe0>
    1e62:	a0 93 e3 14 	sts	0x14E3, r26	; 0x8014e3 <uxTopReadyPriority>
    1e66:	3a 9f       	mul	r19, r26
    1e68:	d0 01       	movw	r26, r0
    1e6a:	11 24       	eor	r1, r1
    1e6c:	ab 5d       	subi	r26, 0xDB	; 219
    1e6e:	ba 4e       	sbci	r27, 0xEA	; 234
    1e70:	11 96       	adiw	r26, 0x01	; 1
    1e72:	0d 90       	ld	r0, X+
    1e74:	bc 91       	ld	r27, X
    1e76:	a0 2d       	mov	r26, r0
    1e78:	b7 83       	std	Z+7, r27	; 0x07
    1e7a:	a6 83       	std	Z+6, r26	; 0x06
    1e7c:	16 96       	adiw	r26, 0x06	; 6
    1e7e:	6d 91       	ld	r22, X+
    1e80:	7c 91       	ld	r23, X
    1e82:	17 97       	sbiw	r26, 0x07	; 7
    1e84:	71 87       	std	Z+9, r23	; 0x09
    1e86:	60 87       	std	Z+8, r22	; 0x08
    1e88:	16 96       	adiw	r26, 0x06	; 6
    1e8a:	6d 91       	ld	r22, X+
    1e8c:	7c 91       	ld	r23, X
    1e8e:	17 97       	sbiw	r26, 0x07	; 7
    1e90:	eb 01       	movw	r28, r22
    1e92:	9d 83       	std	Y+5, r25	; 0x05
    1e94:	8c 83       	std	Y+4, r24	; 0x04
    1e96:	17 96       	adiw	r26, 0x07	; 7
    1e98:	9c 93       	st	X, r25
    1e9a:	8e 93       	st	-X, r24
    1e9c:	16 97       	sbiw	r26, 0x06	; 6
    1e9e:	a2 8d       	ldd	r26, Z+26	; 0x1a
    1ea0:	3a 9f       	mul	r19, r26
    1ea2:	d0 01       	movw	r26, r0
    1ea4:	11 24       	eor	r1, r1
    1ea6:	ab 5d       	subi	r26, 0xDB	; 219
    1ea8:	ba 4e       	sbci	r27, 0xEA	; 234
    1eaa:	b5 87       	std	Z+13, r27	; 0x0d
    1eac:	a4 87       	std	Z+12, r26	; 0x0c
    1eae:	8c 91       	ld	r24, X
    1eb0:	8f 5f       	subi	r24, 0xFF	; 255
    1eb2:	8c 93       	st	X, r24
    1eb4:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
    1eb8:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    1ebc:	92 8d       	ldd	r25, Z+26	; 0x1a
    1ebe:	5a 96       	adiw	r26, 0x1a	; 26
    1ec0:	8c 91       	ld	r24, X
    1ec2:	98 17       	cp	r25, r24
    1ec4:	48 f0       	brcs	.+18     	; 0x1ed8 <xTaskResumeAll+0x152>
    1ec6:	40 93 dd 14 	sts	0x14DD, r20	; 0x8014dd <xYieldPending>
    1eca:	06 c0       	rjmp	.+12     	; 0x1ed8 <xTaskResumeAll+0x152>
    1ecc:	e0 e0       	ldi	r30, 0x00	; 0
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	00 e0       	ldi	r16, 0x00	; 0
    1ed2:	15 e1       	ldi	r17, 0x15	; 21
    1ed4:	3b e0       	ldi	r19, 0x0B	; 11
    1ed6:	41 e0       	ldi	r20, 0x01	; 1
    1ed8:	d8 01       	movw	r26, r16
    1eda:	8c 91       	ld	r24, X
    1edc:	81 11       	cpse	r24, r1
    1ede:	6c cf       	rjmp	.-296    	; 0x1db8 <xTaskResumeAll+0x32>
    1ee0:	ef 2b       	or	r30, r31
    1ee2:	09 f0       	breq	.+2      	; 0x1ee6 <xTaskResumeAll+0x160>
    1ee4:	d2 db       	rcall	.-2140   	; 0x168a <prvResetNextTaskUnblockTime>
    1ee6:	c0 90 de 14 	lds	r12, 0x14DE	; 0x8014de <xPendedTicks>
    1eea:	d0 90 df 14 	lds	r13, 0x14DF	; 0x8014df <xPendedTicks+0x1>
    1eee:	e0 90 e0 14 	lds	r14, 0x14E0	; 0x8014e0 <xPendedTicks+0x2>
    1ef2:	f0 90 e1 14 	lds	r15, 0x14E1	; 0x8014e1 <xPendedTicks+0x3>
    1ef6:	c1 14       	cp	r12, r1
    1ef8:	d1 04       	cpc	r13, r1
    1efa:	e1 04       	cpc	r14, r1
    1efc:	f1 04       	cpc	r15, r1
    1efe:	99 f0       	breq	.+38     	; 0x1f26 <xTaskResumeAll+0x1a0>
    1f00:	c1 e0       	ldi	r28, 0x01	; 1
    1f02:	11 de       	rcall	.-990    	; 0x1b26 <xTaskIncrementTick>
    1f04:	81 11       	cpse	r24, r1
    1f06:	c0 93 dd 14 	sts	0x14DD, r28	; 0x8014dd <xYieldPending>
    1f0a:	b1 e0       	ldi	r27, 0x01	; 1
    1f0c:	cb 1a       	sub	r12, r27
    1f0e:	d1 08       	sbc	r13, r1
    1f10:	e1 08       	sbc	r14, r1
    1f12:	f1 08       	sbc	r15, r1
    1f14:	b1 f7       	brne	.-20     	; 0x1f02 <xTaskResumeAll+0x17c>
    1f16:	10 92 de 14 	sts	0x14DE, r1	; 0x8014de <xPendedTicks>
    1f1a:	10 92 df 14 	sts	0x14DF, r1	; 0x8014df <xPendedTicks+0x1>
    1f1e:	10 92 e0 14 	sts	0x14E0, r1	; 0x8014e0 <xPendedTicks+0x2>
    1f22:	10 92 e1 14 	sts	0x14E1, r1	; 0x8014e1 <xPendedTicks+0x3>
    1f26:	80 91 dd 14 	lds	r24, 0x14DD	; 0x8014dd <xYieldPending>
    1f2a:	88 23       	and	r24, r24
    1f2c:	31 f0       	breq	.+12     	; 0x1f3a <xTaskResumeAll+0x1b4>
    1f2e:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    1f32:	81 e0       	ldi	r24, 0x01	; 1
    1f34:	03 c0       	rjmp	.+6      	; 0x1f3c <xTaskResumeAll+0x1b6>
    1f36:	80 e0       	ldi	r24, 0x00	; 0
    1f38:	01 c0       	rjmp	.+2      	; 0x1f3c <xTaskResumeAll+0x1b6>
    1f3a:	80 e0       	ldi	r24, 0x00	; 0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f be       	out	0x3f, r0	; 63
    1f40:	df 91       	pop	r29
    1f42:	cf 91       	pop	r28
    1f44:	1f 91       	pop	r17
    1f46:	0f 91       	pop	r16
    1f48:	ff 90       	pop	r15
    1f4a:	ef 90       	pop	r14
    1f4c:	df 90       	pop	r13
    1f4e:	cf 90       	pop	r12
    1f50:	08 95       	ret

00001f52 <xTaskDelayUntil>:
    1f52:	cf 92       	push	r12
    1f54:	df 92       	push	r13
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	ec 01       	movw	r28, r24
    1f64:	6a 01       	movw	r12, r20
    1f66:	7b 01       	movw	r14, r22
    1f68:	ca dd       	rcall	.-1132   	; 0x1afe <vTaskSuspendAll>
    1f6a:	00 91 e4 14 	lds	r16, 0x14E4	; 0x8014e4 <xTickCount>
    1f6e:	10 91 e5 14 	lds	r17, 0x14E5	; 0x8014e5 <xTickCount+0x1>
    1f72:	20 91 e6 14 	lds	r18, 0x14E6	; 0x8014e6 <xTickCount+0x2>
    1f76:	30 91 e7 14 	lds	r19, 0x14E7	; 0x8014e7 <xTickCount+0x3>
    1f7a:	88 81       	ld	r24, Y
    1f7c:	99 81       	ldd	r25, Y+1	; 0x01
    1f7e:	aa 81       	ldd	r26, Y+2	; 0x02
    1f80:	bb 81       	ldd	r27, Y+3	; 0x03
    1f82:	ac 01       	movw	r20, r24
    1f84:	bd 01       	movw	r22, r26
    1f86:	4c 0d       	add	r20, r12
    1f88:	5d 1d       	adc	r21, r13
    1f8a:	6e 1d       	adc	r22, r14
    1f8c:	7f 1d       	adc	r23, r15
    1f8e:	08 17       	cp	r16, r24
    1f90:	19 07       	cpc	r17, r25
    1f92:	2a 07       	cpc	r18, r26
    1f94:	3b 07       	cpc	r19, r27
    1f96:	b8 f4       	brcc	.+46     	; 0x1fc6 <xTaskDelayUntil+0x74>
    1f98:	48 17       	cp	r20, r24
    1f9a:	59 07       	cpc	r21, r25
    1f9c:	6a 07       	cpc	r22, r26
    1f9e:	7b 07       	cpc	r23, r27
    1fa0:	90 f5       	brcc	.+100    	; 0x2006 <xTaskDelayUntil+0xb4>
    1fa2:	ff 24       	eor	r15, r15
    1fa4:	f3 94       	inc	r15
    1fa6:	04 17       	cp	r16, r20
    1fa8:	15 07       	cpc	r17, r21
    1faa:	26 07       	cpc	r18, r22
    1fac:	37 07       	cpc	r19, r23
    1fae:	08 f0       	brcs	.+2      	; 0x1fb2 <xTaskDelayUntil+0x60>
    1fb0:	f1 2c       	mov	r15, r1
    1fb2:	48 83       	st	Y, r20
    1fb4:	59 83       	std	Y+1, r21	; 0x01
    1fb6:	6a 83       	std	Y+2, r22	; 0x02
    1fb8:	7b 83       	std	Y+3, r23	; 0x03
    1fba:	04 17       	cp	r16, r20
    1fbc:	15 07       	cpc	r17, r21
    1fbe:	26 07       	cpc	r18, r22
    1fc0:	37 07       	cpc	r19, r23
    1fc2:	a0 f4       	brcc	.+40     	; 0x1fec <xTaskDelayUntil+0x9a>
    1fc4:	0b c0       	rjmp	.+22     	; 0x1fdc <xTaskDelayUntil+0x8a>
    1fc6:	48 17       	cp	r20, r24
    1fc8:	59 07       	cpc	r21, r25
    1fca:	6a 07       	cpc	r22, r26
    1fcc:	7b 07       	cpc	r23, r27
    1fce:	a0 f0       	brcs	.+40     	; 0x1ff8 <xTaskDelayUntil+0xa6>
    1fd0:	04 17       	cp	r16, r20
    1fd2:	15 07       	cpc	r17, r21
    1fd4:	26 07       	cpc	r18, r22
    1fd6:	37 07       	cpc	r19, r23
    1fd8:	78 f0       	brcs	.+30     	; 0x1ff8 <xTaskDelayUntil+0xa6>
    1fda:	15 c0       	rjmp	.+42     	; 0x2006 <xTaskDelayUntil+0xb4>
    1fdc:	cb 01       	movw	r24, r22
    1fde:	ba 01       	movw	r22, r20
    1fe0:	60 1b       	sub	r22, r16
    1fe2:	71 0b       	sbc	r23, r17
    1fe4:	82 0b       	sbc	r24, r18
    1fe6:	93 0b       	sbc	r25, r19
    1fe8:	40 e0       	ldi	r20, 0x00	; 0
    1fea:	76 db       	rcall	.-2324   	; 0x16d8 <prvAddCurrentTaskToDelayedList>
    1fec:	cc de       	rcall	.-616    	; 0x1d86 <xTaskResumeAll>
    1fee:	81 11       	cpse	r24, r1
    1ff0:	10 c0       	rjmp	.+32     	; 0x2012 <xTaskDelayUntil+0xc0>
    1ff2:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    1ff6:	0d c0       	rjmp	.+26     	; 0x2012 <xTaskDelayUntil+0xc0>
    1ff8:	48 83       	st	Y, r20
    1ffa:	59 83       	std	Y+1, r21	; 0x01
    1ffc:	6a 83       	std	Y+2, r22	; 0x02
    1ffe:	7b 83       	std	Y+3, r23	; 0x03
    2000:	ff 24       	eor	r15, r15
    2002:	f3 94       	inc	r15
    2004:	eb cf       	rjmp	.-42     	; 0x1fdc <xTaskDelayUntil+0x8a>
    2006:	48 83       	st	Y, r20
    2008:	59 83       	std	Y+1, r21	; 0x01
    200a:	6a 83       	std	Y+2, r22	; 0x02
    200c:	7b 83       	std	Y+3, r23	; 0x03
    200e:	f1 2c       	mov	r15, r1
    2010:	ed cf       	rjmp	.-38     	; 0x1fec <xTaskDelayUntil+0x9a>
    2012:	8f 2d       	mov	r24, r15
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	df 90       	pop	r13
    2022:	cf 90       	pop	r12
    2024:	08 95       	ret

00002026 <vTaskDelay>:
    2026:	cf 92       	push	r12
    2028:	df 92       	push	r13
    202a:	ef 92       	push	r14
    202c:	ff 92       	push	r15
    202e:	6b 01       	movw	r12, r22
    2030:	7c 01       	movw	r14, r24
    2032:	67 2b       	or	r22, r23
    2034:	68 2b       	or	r22, r24
    2036:	69 2b       	or	r22, r25
    2038:	41 f0       	breq	.+16     	; 0x204a <vTaskDelay+0x24>
    203a:	61 dd       	rcall	.-1342   	; 0x1afe <vTaskSuspendAll>
    203c:	40 e0       	ldi	r20, 0x00	; 0
    203e:	c7 01       	movw	r24, r14
    2040:	b6 01       	movw	r22, r12
    2042:	4a db       	rcall	.-2412   	; 0x16d8 <prvAddCurrentTaskToDelayedList>
    2044:	a0 de       	rcall	.-704    	; 0x1d86 <xTaskResumeAll>
    2046:	81 11       	cpse	r24, r1
    2048:	02 c0       	rjmp	.+4      	; 0x204e <vTaskDelay+0x28>
    204a:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    204e:	ff 90       	pop	r15
    2050:	ef 90       	pop	r14
    2052:	df 90       	pop	r13
    2054:	cf 90       	pop	r12
    2056:	08 95       	ret

00002058 <vTaskSwitchContext>:
    2058:	80 91 d4 14 	lds	r24, 0x14D4	; 0x8014d4 <uxSchedulerSuspended>
    205c:	88 23       	and	r24, r24
    205e:	21 f0       	breq	.+8      	; 0x2068 <vTaskSwitchContext+0x10>
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	80 93 dd 14 	sts	0x14DD, r24	; 0x8014dd <xYieldPending>
    2066:	08 95       	ret
    2068:	10 92 dd 14 	sts	0x14DD, r1	; 0x8014dd <xYieldPending>
    206c:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
    2070:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    2074:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    2078:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    207c:	2d 91       	ld	r18, X+
    207e:	3c 91       	ld	r19, X
    2080:	83 8d       	ldd	r24, Z+27	; 0x1b
    2082:	94 8d       	ldd	r25, Z+28	; 0x1c
    2084:	82 17       	cp	r24, r18
    2086:	93 07       	cpc	r25, r19
    2088:	58 f0       	brcs	.+22     	; 0x20a0 <vTaskSwitchContext+0x48>
    208a:	60 91 93 15 	lds	r22, 0x1593	; 0x801593 <pxCurrentTCB>
    208e:	70 91 94 15 	lds	r23, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    2092:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <pxCurrentTCB>
    2096:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    209a:	63 5e       	subi	r22, 0xE3	; 227
    209c:	7f 4f       	sbci	r23, 0xFF	; 255
    209e:	b5 d6       	rcall	.+3434   	; 0x2e0a <vApplicationStackOverflowHook>
    20a0:	80 91 e3 14 	lds	r24, 0x14E3	; 0x8014e3 <uxTopReadyPriority>
    20a4:	28 2f       	mov	r18, r24
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	9b e0       	ldi	r25, 0x0B	; 11
    20aa:	89 9f       	mul	r24, r25
    20ac:	f0 01       	movw	r30, r0
    20ae:	11 24       	eor	r1, r1
    20b0:	eb 5d       	subi	r30, 0xDB	; 219
    20b2:	fa 4e       	sbci	r31, 0xEA	; 234
    20b4:	90 81       	ld	r25, Z
    20b6:	91 11       	cpse	r25, r1
    20b8:	0e c0       	rjmp	.+28     	; 0x20d6 <vTaskSwitchContext+0x7e>
    20ba:	4b e0       	ldi	r20, 0x0B	; 11
    20bc:	81 50       	subi	r24, 0x01	; 1
    20be:	28 2f       	mov	r18, r24
    20c0:	30 e0       	ldi	r19, 0x00	; 0
    20c2:	42 9f       	mul	r20, r18
    20c4:	f0 01       	movw	r30, r0
    20c6:	43 9f       	mul	r20, r19
    20c8:	f0 0d       	add	r31, r0
    20ca:	11 24       	eor	r1, r1
    20cc:	eb 5d       	subi	r30, 0xDB	; 219
    20ce:	fa 4e       	sbci	r31, 0xEA	; 234
    20d0:	90 81       	ld	r25, Z
    20d2:	99 23       	and	r25, r25
    20d4:	99 f3       	breq	.-26     	; 0x20bc <vTaskSwitchContext+0x64>
    20d6:	9b e0       	ldi	r25, 0x0B	; 11
    20d8:	92 9f       	mul	r25, r18
    20da:	a0 01       	movw	r20, r0
    20dc:	93 9f       	mul	r25, r19
    20de:	50 0d       	add	r21, r0
    20e0:	11 24       	eor	r1, r1
    20e2:	da 01       	movw	r26, r20
    20e4:	ab 5d       	subi	r26, 0xDB	; 219
    20e6:	ba 4e       	sbci	r27, 0xEA	; 234
    20e8:	11 96       	adiw	r26, 0x01	; 1
    20ea:	ed 91       	ld	r30, X+
    20ec:	fc 91       	ld	r31, X
    20ee:	12 97       	sbiw	r26, 0x02	; 2
    20f0:	04 80       	ldd	r0, Z+4	; 0x04
    20f2:	f5 81       	ldd	r31, Z+5	; 0x05
    20f4:	e0 2d       	mov	r30, r0
    20f6:	12 96       	adiw	r26, 0x02	; 2
    20f8:	fc 93       	st	X, r31
    20fa:	ee 93       	st	-X, r30
    20fc:	11 97       	sbiw	r26, 0x01	; 1
    20fe:	48 5d       	subi	r20, 0xD8	; 216
    2100:	5a 4e       	sbci	r21, 0xEA	; 234
    2102:	e4 17       	cp	r30, r20
    2104:	f5 07       	cpc	r31, r21
    2106:	29 f4       	brne	.+10     	; 0x2112 <vTaskSwitchContext+0xba>
    2108:	44 81       	ldd	r20, Z+4	; 0x04
    210a:	55 81       	ldd	r21, Z+5	; 0x05
    210c:	fd 01       	movw	r30, r26
    210e:	52 83       	std	Z+2, r21	; 0x02
    2110:	41 83       	std	Z+1, r20	; 0x01
    2112:	9b e0       	ldi	r25, 0x0B	; 11
    2114:	92 9f       	mul	r25, r18
    2116:	f0 01       	movw	r30, r0
    2118:	93 9f       	mul	r25, r19
    211a:	f0 0d       	add	r31, r0
    211c:	11 24       	eor	r1, r1
    211e:	eb 5d       	subi	r30, 0xDB	; 219
    2120:	fa 4e       	sbci	r31, 0xEA	; 234
    2122:	01 80       	ldd	r0, Z+1	; 0x01
    2124:	f2 81       	ldd	r31, Z+2	; 0x02
    2126:	e0 2d       	mov	r30, r0
    2128:	20 85       	ldd	r18, Z+8	; 0x08
    212a:	31 85       	ldd	r19, Z+9	; 0x09
    212c:	30 93 94 15 	sts	0x1594, r19	; 0x801594 <pxCurrentTCB+0x1>
    2130:	20 93 93 15 	sts	0x1593, r18	; 0x801593 <pxCurrentTCB>
    2134:	80 93 e3 14 	sts	0x14E3, r24	; 0x8014e3 <uxTopReadyPriority>
    2138:	08 95       	ret

0000213a <vTaskPlaceOnEventList>:
    213a:	cf 92       	push	r12
    213c:	df 92       	push	r13
    213e:	ef 92       	push	r14
    2140:	ff 92       	push	r15
    2142:	6a 01       	movw	r12, r20
    2144:	7b 01       	movw	r14, r22
    2146:	60 91 93 15 	lds	r22, 0x1593	; 0x801593 <pxCurrentTCB>
    214a:	70 91 94 15 	lds	r23, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    214e:	62 5f       	subi	r22, 0xF2	; 242
    2150:	7f 4f       	sbci	r23, 0xFF	; 255
    2152:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	c7 01       	movw	r24, r14
    215a:	b6 01       	movw	r22, r12
    215c:	bd da       	rcall	.-2694   	; 0x16d8 <prvAddCurrentTaskToDelayedList>
    215e:	ff 90       	pop	r15
    2160:	ef 90       	pop	r14
    2162:	df 90       	pop	r13
    2164:	cf 90       	pop	r12
    2166:	08 95       	ret

00002168 <vTaskPlaceOnEventListRestricted>:
    2168:	cf 93       	push	r28
    216a:	df 93       	push	r29
    216c:	fc 01       	movw	r30, r24
    216e:	cb 01       	movw	r24, r22
    2170:	ba 01       	movw	r22, r20
    2172:	a1 81       	ldd	r26, Z+1	; 0x01
    2174:	b2 81       	ldd	r27, Z+2	; 0x02
    2176:	c0 91 93 15 	lds	r28, 0x1593	; 0x801593 <pxCurrentTCB>
    217a:	d0 91 94 15 	lds	r29, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    217e:	bb 8b       	std	Y+19, r27	; 0x13
    2180:	aa 8b       	std	Y+18, r26	; 0x12
    2182:	c0 91 93 15 	lds	r28, 0x1593	; 0x801593 <pxCurrentTCB>
    2186:	d0 91 94 15 	lds	r29, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    218a:	16 96       	adiw	r26, 0x06	; 6
    218c:	4d 91       	ld	r20, X+
    218e:	5c 91       	ld	r21, X
    2190:	17 97       	sbiw	r26, 0x07	; 7
    2192:	5d 8b       	std	Y+21, r21	; 0x15
    2194:	4c 8b       	std	Y+20, r20	; 0x14
    2196:	16 96       	adiw	r26, 0x06	; 6
    2198:	cd 91       	ld	r28, X+
    219a:	dc 91       	ld	r29, X
    219c:	17 97       	sbiw	r26, 0x07	; 7
    219e:	40 91 93 15 	lds	r20, 0x1593	; 0x801593 <pxCurrentTCB>
    21a2:	50 91 94 15 	lds	r21, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    21a6:	42 5f       	subi	r20, 0xF2	; 242
    21a8:	5f 4f       	sbci	r21, 0xFF	; 255
    21aa:	5d 83       	std	Y+5, r21	; 0x05
    21ac:	4c 83       	std	Y+4, r20	; 0x04
    21ae:	40 91 93 15 	lds	r20, 0x1593	; 0x801593 <pxCurrentTCB>
    21b2:	50 91 94 15 	lds	r21, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    21b6:	42 5f       	subi	r20, 0xF2	; 242
    21b8:	5f 4f       	sbci	r21, 0xFF	; 255
    21ba:	17 96       	adiw	r26, 0x07	; 7
    21bc:	5c 93       	st	X, r21
    21be:	4e 93       	st	-X, r20
    21c0:	16 97       	sbiw	r26, 0x06	; 6
    21c2:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
    21c6:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    21ca:	59 96       	adiw	r26, 0x19	; 25
    21cc:	fc 93       	st	X, r31
    21ce:	ee 93       	st	-X, r30
    21d0:	58 97       	sbiw	r26, 0x18	; 24
    21d2:	30 81       	ld	r19, Z
    21d4:	3f 5f       	subi	r19, 0xFF	; 255
    21d6:	30 83       	st	Z, r19
    21d8:	22 23       	and	r18, r18
    21da:	19 f0       	breq	.+6      	; 0x21e2 <vTaskPlaceOnEventListRestricted+0x7a>
    21dc:	6f ef       	ldi	r22, 0xFF	; 255
    21de:	7f ef       	ldi	r23, 0xFF	; 255
    21e0:	cb 01       	movw	r24, r22
    21e2:	42 2f       	mov	r20, r18
    21e4:	79 da       	rcall	.-2830   	; 0x16d8 <prvAddCurrentTaskToDelayedList>
    21e6:	df 91       	pop	r29
    21e8:	cf 91       	pop	r28
    21ea:	08 95       	ret

000021ec <xTaskRemoveFromEventList>:
    21ec:	cf 93       	push	r28
    21ee:	df 93       	push	r29
    21f0:	dc 01       	movw	r26, r24
    21f2:	17 96       	adiw	r26, 0x07	; 7
    21f4:	ed 91       	ld	r30, X+
    21f6:	fc 91       	ld	r31, X
    21f8:	18 97       	sbiw	r26, 0x08	; 8
    21fa:	00 84       	ldd	r0, Z+8	; 0x08
    21fc:	f1 85       	ldd	r31, Z+9	; 0x09
    21fe:	e0 2d       	mov	r30, r0
    2200:	a0 8d       	ldd	r26, Z+24	; 0x18
    2202:	b1 8d       	ldd	r27, Z+25	; 0x19
    2204:	c2 89       	ldd	r28, Z+18	; 0x12
    2206:	d3 89       	ldd	r29, Z+19	; 0x13
    2208:	84 89       	ldd	r24, Z+20	; 0x14
    220a:	95 89       	ldd	r25, Z+21	; 0x15
    220c:	9f 83       	std	Y+7, r25	; 0x07
    220e:	8e 83       	std	Y+6, r24	; 0x06
    2210:	c4 89       	ldd	r28, Z+20	; 0x14
    2212:	d5 89       	ldd	r29, Z+21	; 0x15
    2214:	82 89       	ldd	r24, Z+18	; 0x12
    2216:	93 89       	ldd	r25, Z+19	; 0x13
    2218:	9d 83       	std	Y+5, r25	; 0x05
    221a:	8c 83       	std	Y+4, r24	; 0x04
    221c:	9f 01       	movw	r18, r30
    221e:	22 5f       	subi	r18, 0xF2	; 242
    2220:	3f 4f       	sbci	r19, 0xFF	; 255
    2222:	11 96       	adiw	r26, 0x01	; 1
    2224:	8d 91       	ld	r24, X+
    2226:	9c 91       	ld	r25, X
    2228:	12 97       	sbiw	r26, 0x02	; 2
    222a:	82 17       	cp	r24, r18
    222c:	93 07       	cpc	r25, r19
    222e:	31 f4       	brne	.+12     	; 0x223c <__stack+0x3d>
    2230:	84 89       	ldd	r24, Z+20	; 0x14
    2232:	95 89       	ldd	r25, Z+21	; 0x15
    2234:	12 96       	adiw	r26, 0x02	; 2
    2236:	9c 93       	st	X, r25
    2238:	8e 93       	st	-X, r24
    223a:	11 97       	sbiw	r26, 0x01	; 1
    223c:	11 8e       	std	Z+25, r1	; 0x19
    223e:	10 8e       	std	Z+24, r1	; 0x18
    2240:	8c 91       	ld	r24, X
    2242:	81 50       	subi	r24, 0x01	; 1
    2244:	8c 93       	st	X, r24
    2246:	80 91 d4 14 	lds	r24, 0x14D4	; 0x8014d4 <uxSchedulerSuspended>
    224a:	81 11       	cpse	r24, r1
    224c:	52 c0       	rjmp	.+164    	; 0x22f2 <__stack+0xf3>
    224e:	a4 85       	ldd	r26, Z+12	; 0x0c
    2250:	b5 85       	ldd	r27, Z+13	; 0x0d
    2252:	c6 81       	ldd	r28, Z+6	; 0x06
    2254:	d7 81       	ldd	r29, Z+7	; 0x07
    2256:	80 85       	ldd	r24, Z+8	; 0x08
    2258:	91 85       	ldd	r25, Z+9	; 0x09
    225a:	9f 83       	std	Y+7, r25	; 0x07
    225c:	8e 83       	std	Y+6, r24	; 0x06
    225e:	c0 85       	ldd	r28, Z+8	; 0x08
    2260:	d1 85       	ldd	r29, Z+9	; 0x09
    2262:	86 81       	ldd	r24, Z+6	; 0x06
    2264:	97 81       	ldd	r25, Z+7	; 0x07
    2266:	9d 83       	std	Y+5, r25	; 0x05
    2268:	8c 83       	std	Y+4, r24	; 0x04
    226a:	9f 01       	movw	r18, r30
    226c:	2e 5f       	subi	r18, 0xFE	; 254
    226e:	3f 4f       	sbci	r19, 0xFF	; 255
    2270:	11 96       	adiw	r26, 0x01	; 1
    2272:	8d 91       	ld	r24, X+
    2274:	9c 91       	ld	r25, X
    2276:	12 97       	sbiw	r26, 0x02	; 2
    2278:	82 17       	cp	r24, r18
    227a:	93 07       	cpc	r25, r19
    227c:	31 f4       	brne	.+12     	; 0x228a <__stack+0x8b>
    227e:	80 85       	ldd	r24, Z+8	; 0x08
    2280:	91 85       	ldd	r25, Z+9	; 0x09
    2282:	12 96       	adiw	r26, 0x02	; 2
    2284:	9c 93       	st	X, r25
    2286:	8e 93       	st	-X, r24
    2288:	11 97       	sbiw	r26, 0x01	; 1
    228a:	15 86       	std	Z+13, r1	; 0x0d
    228c:	14 86       	std	Z+12, r1	; 0x0c
    228e:	8c 91       	ld	r24, X
    2290:	81 50       	subi	r24, 0x01	; 1
    2292:	8c 93       	st	X, r24
    2294:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2296:	80 91 e3 14 	lds	r24, 0x14E3	; 0x8014e3 <uxTopReadyPriority>
    229a:	8a 17       	cp	r24, r26
    229c:	10 f4       	brcc	.+4      	; 0x22a2 <__stack+0xa3>
    229e:	a0 93 e3 14 	sts	0x14E3, r26	; 0x8014e3 <uxTopReadyPriority>
    22a2:	8b e0       	ldi	r24, 0x0B	; 11
    22a4:	8a 9f       	mul	r24, r26
    22a6:	d0 01       	movw	r26, r0
    22a8:	11 24       	eor	r1, r1
    22aa:	ab 5d       	subi	r26, 0xDB	; 219
    22ac:	ba 4e       	sbci	r27, 0xEA	; 234
    22ae:	11 96       	adiw	r26, 0x01	; 1
    22b0:	0d 90       	ld	r0, X+
    22b2:	bc 91       	ld	r27, X
    22b4:	a0 2d       	mov	r26, r0
    22b6:	b7 83       	std	Z+7, r27	; 0x07
    22b8:	a6 83       	std	Z+6, r26	; 0x06
    22ba:	16 96       	adiw	r26, 0x06	; 6
    22bc:	4d 91       	ld	r20, X+
    22be:	5c 91       	ld	r21, X
    22c0:	17 97       	sbiw	r26, 0x07	; 7
    22c2:	51 87       	std	Z+9, r21	; 0x09
    22c4:	40 87       	std	Z+8, r20	; 0x08
    22c6:	16 96       	adiw	r26, 0x06	; 6
    22c8:	cd 91       	ld	r28, X+
    22ca:	dc 91       	ld	r29, X
    22cc:	17 97       	sbiw	r26, 0x07	; 7
    22ce:	3d 83       	std	Y+5, r19	; 0x05
    22d0:	2c 83       	std	Y+4, r18	; 0x04
    22d2:	17 96       	adiw	r26, 0x07	; 7
    22d4:	3c 93       	st	X, r19
    22d6:	2e 93       	st	-X, r18
    22d8:	16 97       	sbiw	r26, 0x06	; 6
    22da:	a2 8d       	ldd	r26, Z+26	; 0x1a
    22dc:	8a 9f       	mul	r24, r26
    22de:	d0 01       	movw	r26, r0
    22e0:	11 24       	eor	r1, r1
    22e2:	ab 5d       	subi	r26, 0xDB	; 219
    22e4:	ba 4e       	sbci	r27, 0xEA	; 234
    22e6:	b5 87       	std	Z+13, r27	; 0x0d
    22e8:	a4 87       	std	Z+12, r26	; 0x0c
    22ea:	8c 91       	ld	r24, X
    22ec:	8f 5f       	subi	r24, 0xFF	; 255
    22ee:	8c 93       	st	X, r24
    22f0:	1c c0       	rjmp	.+56     	; 0x232a <__stack+0x12b>
    22f2:	40 e0       	ldi	r20, 0x00	; 0
    22f4:	55 e1       	ldi	r21, 0x15	; 21
    22f6:	da 01       	movw	r26, r20
    22f8:	11 96       	adiw	r26, 0x01	; 1
    22fa:	cd 91       	ld	r28, X+
    22fc:	dc 91       	ld	r29, X
    22fe:	12 97       	sbiw	r26, 0x02	; 2
    2300:	d3 8b       	std	Z+19, r29	; 0x13
    2302:	c2 8b       	std	Z+18, r28	; 0x12
    2304:	8e 81       	ldd	r24, Y+6	; 0x06
    2306:	9f 81       	ldd	r25, Y+7	; 0x07
    2308:	95 8b       	std	Z+21, r25	; 0x15
    230a:	84 8b       	std	Z+20, r24	; 0x14
    230c:	8e 81       	ldd	r24, Y+6	; 0x06
    230e:	9f 81       	ldd	r25, Y+7	; 0x07
    2310:	dc 01       	movw	r26, r24
    2312:	15 96       	adiw	r26, 0x05	; 5
    2314:	3c 93       	st	X, r19
    2316:	2e 93       	st	-X, r18
    2318:	14 97       	sbiw	r26, 0x04	; 4
    231a:	3f 83       	std	Y+7, r19	; 0x07
    231c:	2e 83       	std	Y+6, r18	; 0x06
    231e:	51 8f       	std	Z+25, r21	; 0x19
    2320:	40 8f       	std	Z+24, r20	; 0x18
    2322:	da 01       	movw	r26, r20
    2324:	8c 91       	ld	r24, X
    2326:	8f 5f       	subi	r24, 0xFF	; 255
    2328:	8c 93       	st	X, r24
    232a:	a0 91 93 15 	lds	r26, 0x1593	; 0x801593 <pxCurrentTCB>
    232e:	b0 91 94 15 	lds	r27, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    2332:	92 8d       	ldd	r25, Z+26	; 0x1a
    2334:	5a 96       	adiw	r26, 0x1a	; 26
    2336:	8c 91       	ld	r24, X
    2338:	89 17       	cp	r24, r25
    233a:	20 f4       	brcc	.+8      	; 0x2344 <__stack+0x145>
    233c:	81 e0       	ldi	r24, 0x01	; 1
    233e:	80 93 dd 14 	sts	0x14DD, r24	; 0x8014dd <xYieldPending>
    2342:	01 c0       	rjmp	.+2      	; 0x2346 <__stack+0x147>
    2344:	80 e0       	ldi	r24, 0x00	; 0
    2346:	df 91       	pop	r29
    2348:	cf 91       	pop	r28
    234a:	08 95       	ret

0000234c <vTaskSetTimeOutState>:
    234c:	0f b6       	in	r0, 0x3f	; 63
    234e:	f8 94       	cli
    2350:	0f 92       	push	r0
    2352:	20 91 dc 14 	lds	r18, 0x14DC	; 0x8014dc <xNumOfOverflows>
    2356:	fc 01       	movw	r30, r24
    2358:	20 83       	st	Z, r18
    235a:	40 91 e4 14 	lds	r20, 0x14E4	; 0x8014e4 <xTickCount>
    235e:	50 91 e5 14 	lds	r21, 0x14E5	; 0x8014e5 <xTickCount+0x1>
    2362:	60 91 e6 14 	lds	r22, 0x14E6	; 0x8014e6 <xTickCount+0x2>
    2366:	70 91 e7 14 	lds	r23, 0x14E7	; 0x8014e7 <xTickCount+0x3>
    236a:	41 83       	std	Z+1, r20	; 0x01
    236c:	52 83       	std	Z+2, r21	; 0x02
    236e:	63 83       	std	Z+3, r22	; 0x03
    2370:	74 83       	std	Z+4, r23	; 0x04
    2372:	0f 90       	pop	r0
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	08 95       	ret

00002378 <vTaskInternalSetTimeOutState>:
    2378:	20 91 dc 14 	lds	r18, 0x14DC	; 0x8014dc <xNumOfOverflows>
    237c:	fc 01       	movw	r30, r24
    237e:	20 83       	st	Z, r18
    2380:	40 91 e4 14 	lds	r20, 0x14E4	; 0x8014e4 <xTickCount>
    2384:	50 91 e5 14 	lds	r21, 0x14E5	; 0x8014e5 <xTickCount+0x1>
    2388:	60 91 e6 14 	lds	r22, 0x14E6	; 0x8014e6 <xTickCount+0x2>
    238c:	70 91 e7 14 	lds	r23, 0x14E7	; 0x8014e7 <xTickCount+0x3>
    2390:	41 83       	std	Z+1, r20	; 0x01
    2392:	52 83       	std	Z+2, r21	; 0x02
    2394:	63 83       	std	Z+3, r22	; 0x03
    2396:	74 83       	std	Z+4, r23	; 0x04
    2398:	08 95       	ret

0000239a <xTaskCheckForTimeOut>:
    239a:	cf 92       	push	r12
    239c:	df 92       	push	r13
    239e:	ef 92       	push	r14
    23a0:	ff 92       	push	r15
    23a2:	0f 93       	push	r16
    23a4:	1f 93       	push	r17
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	fb 01       	movw	r30, r22
    23ac:	0f b6       	in	r0, 0x3f	; 63
    23ae:	f8 94       	cli
    23b0:	0f 92       	push	r0
    23b2:	40 91 e4 14 	lds	r20, 0x14E4	; 0x8014e4 <xTickCount>
    23b6:	50 91 e5 14 	lds	r21, 0x14E5	; 0x8014e5 <xTickCount+0x1>
    23ba:	60 91 e6 14 	lds	r22, 0x14E6	; 0x8014e6 <xTickCount+0x2>
    23be:	70 91 e7 14 	lds	r23, 0x14E7	; 0x8014e7 <xTickCount+0x3>
    23c2:	00 81       	ld	r16, Z
    23c4:	11 81       	ldd	r17, Z+1	; 0x01
    23c6:	22 81       	ldd	r18, Z+2	; 0x02
    23c8:	33 81       	ldd	r19, Z+3	; 0x03
    23ca:	0f 3f       	cpi	r16, 0xFF	; 255
    23cc:	af ef       	ldi	r26, 0xFF	; 255
    23ce:	1a 07       	cpc	r17, r26
    23d0:	2a 07       	cpc	r18, r26
    23d2:	3a 07       	cpc	r19, r26
    23d4:	79 f1       	breq	.+94     	; 0x2434 <xTaskCheckForTimeOut+0x9a>
    23d6:	ec 01       	movw	r28, r24
    23d8:	c9 80       	ldd	r12, Y+1	; 0x01
    23da:	da 80       	ldd	r13, Y+2	; 0x02
    23dc:	eb 80       	ldd	r14, Y+3	; 0x03
    23de:	fc 80       	ldd	r15, Y+4	; 0x04
    23e0:	a0 91 dc 14 	lds	r26, 0x14DC	; 0x8014dc <xNumOfOverflows>
    23e4:	b8 81       	ld	r27, Y
    23e6:	ba 17       	cp	r27, r26
    23e8:	59 f0       	breq	.+22     	; 0x2400 <xTaskCheckForTimeOut+0x66>
    23ea:	4c 15       	cp	r20, r12
    23ec:	5d 05       	cpc	r21, r13
    23ee:	6e 05       	cpc	r22, r14
    23f0:	7f 05       	cpc	r23, r15
    23f2:	30 f0       	brcs	.+12     	; 0x2400 <xTaskCheckForTimeOut+0x66>
    23f4:	10 82       	st	Z, r1
    23f6:	11 82       	std	Z+1, r1	; 0x01
    23f8:	12 82       	std	Z+2, r1	; 0x02
    23fa:	13 82       	std	Z+3, r1	; 0x03
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	1b c0       	rjmp	.+54     	; 0x2436 <xTaskCheckForTimeOut+0x9c>
    2400:	4c 19       	sub	r20, r12
    2402:	5d 09       	sbc	r21, r13
    2404:	6e 09       	sbc	r22, r14
    2406:	7f 09       	sbc	r23, r15
    2408:	40 17       	cp	r20, r16
    240a:	51 07       	cpc	r21, r17
    240c:	62 07       	cpc	r22, r18
    240e:	73 07       	cpc	r23, r19
    2410:	58 f4       	brcc	.+22     	; 0x2428 <xTaskCheckForTimeOut+0x8e>
    2412:	04 1b       	sub	r16, r20
    2414:	15 0b       	sbc	r17, r21
    2416:	26 0b       	sbc	r18, r22
    2418:	37 0b       	sbc	r19, r23
    241a:	00 83       	st	Z, r16
    241c:	11 83       	std	Z+1, r17	; 0x01
    241e:	22 83       	std	Z+2, r18	; 0x02
    2420:	33 83       	std	Z+3, r19	; 0x03
    2422:	aa df       	rcall	.-172    	; 0x2378 <vTaskInternalSetTimeOutState>
    2424:	80 e0       	ldi	r24, 0x00	; 0
    2426:	07 c0       	rjmp	.+14     	; 0x2436 <xTaskCheckForTimeOut+0x9c>
    2428:	10 82       	st	Z, r1
    242a:	11 82       	std	Z+1, r1	; 0x01
    242c:	12 82       	std	Z+2, r1	; 0x02
    242e:	13 82       	std	Z+3, r1	; 0x03
    2430:	81 e0       	ldi	r24, 0x01	; 1
    2432:	01 c0       	rjmp	.+2      	; 0x2436 <xTaskCheckForTimeOut+0x9c>
    2434:	80 e0       	ldi	r24, 0x00	; 0
    2436:	0f 90       	pop	r0
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	df 91       	pop	r29
    243c:	cf 91       	pop	r28
    243e:	1f 91       	pop	r17
    2440:	0f 91       	pop	r16
    2442:	ff 90       	pop	r15
    2444:	ef 90       	pop	r14
    2446:	df 90       	pop	r13
    2448:	cf 90       	pop	r12
    244a:	08 95       	ret

0000244c <vTaskMissedYield>:
    244c:	81 e0       	ldi	r24, 0x01	; 1
    244e:	80 93 dd 14 	sts	0x14DD, r24	; 0x8014dd <xYieldPending>
    2452:	08 95       	ret

00002454 <xTaskGetCurrentTaskHandle>:
    2454:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <pxCurrentTCB>
    2458:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    245c:	08 95       	ret

0000245e <xTaskGetSchedulerState>:
    245e:	80 91 e2 14 	lds	r24, 0x14E2	; 0x8014e2 <xSchedulerRunning>
    2462:	88 23       	and	r24, r24
    2464:	31 f0       	breq	.+12     	; 0x2472 <xTaskGetSchedulerState+0x14>
    2466:	80 91 d4 14 	lds	r24, 0x14D4	; 0x8014d4 <uxSchedulerSuspended>
    246a:	88 23       	and	r24, r24
    246c:	21 f0       	breq	.+8      	; 0x2476 <xTaskGetSchedulerState+0x18>
    246e:	80 e0       	ldi	r24, 0x00	; 0
    2470:	08 95       	ret
    2472:	81 e0       	ldi	r24, 0x01	; 1
    2474:	08 95       	ret
    2476:	82 e0       	ldi	r24, 0x02	; 2
    2478:	08 95       	ret

0000247a <xTaskPriorityDisinherit>:
    247a:	0f 93       	push	r16
    247c:	1f 93       	push	r17
    247e:	cf 93       	push	r28
    2480:	df 93       	push	r29
    2482:	fc 01       	movw	r30, r24
    2484:	89 2b       	or	r24, r25
    2486:	09 f4       	brne	.+2      	; 0x248a <xTaskPriorityDisinherit+0x10>
    2488:	49 c0       	rjmp	.+146    	; 0x251c <xTaskPriorityDisinherit+0xa2>
    248a:	86 a5       	ldd	r24, Z+46	; 0x2e
    248c:	81 50       	subi	r24, 0x01	; 1
    248e:	86 a7       	std	Z+46, r24	; 0x2e
    2490:	22 8d       	ldd	r18, Z+26	; 0x1a
    2492:	95 a5       	ldd	r25, Z+45	; 0x2d
    2494:	29 17       	cp	r18, r25
    2496:	09 f4       	brne	.+2      	; 0x249a <xTaskPriorityDisinherit+0x20>
    2498:	43 c0       	rjmp	.+134    	; 0x2520 <xTaskPriorityDisinherit+0xa6>
    249a:	81 11       	cpse	r24, r1
    249c:	43 c0       	rjmp	.+134    	; 0x2524 <xTaskPriorityDisinherit+0xaa>
    249e:	ef 01       	movw	r28, r30
    24a0:	8f 01       	movw	r16, r30
    24a2:	0e 5f       	subi	r16, 0xFE	; 254
    24a4:	1f 4f       	sbci	r17, 0xFF	; 255
    24a6:	c8 01       	movw	r24, r16
    24a8:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
    24ac:	ed a5       	ldd	r30, Y+45	; 0x2d
    24ae:	ea 8f       	std	Y+26, r30	; 0x1a
    24b0:	8a e0       	ldi	r24, 0x0A	; 10
    24b2:	90 e0       	ldi	r25, 0x00	; 0
    24b4:	a0 e0       	ldi	r26, 0x00	; 0
    24b6:	b0 e0       	ldi	r27, 0x00	; 0
    24b8:	8e 1b       	sub	r24, r30
    24ba:	91 09       	sbc	r25, r1
    24bc:	a1 09       	sbc	r26, r1
    24be:	b1 09       	sbc	r27, r1
    24c0:	8e 87       	std	Y+14, r24	; 0x0e
    24c2:	9f 87       	std	Y+15, r25	; 0x0f
    24c4:	a8 8b       	std	Y+16, r26	; 0x10
    24c6:	b9 8b       	std	Y+17, r27	; 0x11
    24c8:	80 91 e3 14 	lds	r24, 0x14E3	; 0x8014e3 <uxTopReadyPriority>
    24cc:	8e 17       	cp	r24, r30
    24ce:	10 f4       	brcc	.+4      	; 0x24d4 <xTaskPriorityDisinherit+0x5a>
    24d0:	e0 93 e3 14 	sts	0x14E3, r30	; 0x8014e3 <uxTopReadyPriority>
    24d4:	8b e0       	ldi	r24, 0x0B	; 11
    24d6:	8e 9f       	mul	r24, r30
    24d8:	f0 01       	movw	r30, r0
    24da:	11 24       	eor	r1, r1
    24dc:	eb 5d       	subi	r30, 0xDB	; 219
    24de:	fa 4e       	sbci	r31, 0xEA	; 234
    24e0:	01 80       	ldd	r0, Z+1	; 0x01
    24e2:	f2 81       	ldd	r31, Z+2	; 0x02
    24e4:	e0 2d       	mov	r30, r0
    24e6:	ff 83       	std	Y+7, r31	; 0x07
    24e8:	ee 83       	std	Y+6, r30	; 0x06
    24ea:	26 81       	ldd	r18, Z+6	; 0x06
    24ec:	37 81       	ldd	r19, Z+7	; 0x07
    24ee:	39 87       	std	Y+9, r19	; 0x09
    24f0:	28 87       	std	Y+8, r18	; 0x08
    24f2:	a6 81       	ldd	r26, Z+6	; 0x06
    24f4:	b7 81       	ldd	r27, Z+7	; 0x07
    24f6:	15 96       	adiw	r26, 0x05	; 5
    24f8:	1c 93       	st	X, r17
    24fa:	0e 93       	st	-X, r16
    24fc:	14 97       	sbiw	r26, 0x04	; 4
    24fe:	17 83       	std	Z+7, r17	; 0x07
    2500:	06 83       	std	Z+6, r16	; 0x06
    2502:	ea 8d       	ldd	r30, Y+26	; 0x1a
    2504:	8e 9f       	mul	r24, r30
    2506:	f0 01       	movw	r30, r0
    2508:	11 24       	eor	r1, r1
    250a:	eb 5d       	subi	r30, 0xDB	; 219
    250c:	fa 4e       	sbci	r31, 0xEA	; 234
    250e:	fd 87       	std	Y+13, r31	; 0x0d
    2510:	ec 87       	std	Y+12, r30	; 0x0c
    2512:	80 81       	ld	r24, Z
    2514:	8f 5f       	subi	r24, 0xFF	; 255
    2516:	80 83       	st	Z, r24
    2518:	81 e0       	ldi	r24, 0x01	; 1
    251a:	05 c0       	rjmp	.+10     	; 0x2526 <xTaskPriorityDisinherit+0xac>
    251c:	80 e0       	ldi	r24, 0x00	; 0
    251e:	03 c0       	rjmp	.+6      	; 0x2526 <xTaskPriorityDisinherit+0xac>
    2520:	80 e0       	ldi	r24, 0x00	; 0
    2522:	01 c0       	rjmp	.+2      	; 0x2526 <xTaskPriorityDisinherit+0xac>
    2524:	80 e0       	ldi	r24, 0x00	; 0
    2526:	df 91       	pop	r29
    2528:	cf 91       	pop	r28
    252a:	1f 91       	pop	r17
    252c:	0f 91       	pop	r16
    252e:	08 95       	ret

00002530 <xTaskGenericNotifyWait>:
    2530:	4f 92       	push	r4
    2532:	5f 92       	push	r5
    2534:	6f 92       	push	r6
    2536:	7f 92       	push	r7
    2538:	af 92       	push	r10
    253a:	bf 92       	push	r11
    253c:	cf 92       	push	r12
    253e:	df 92       	push	r13
    2540:	ef 92       	push	r14
    2542:	ff 92       	push	r15
    2544:	0f 93       	push	r16
    2546:	1f 93       	push	r17
    2548:	cf 93       	push	r28
    254a:	df 93       	push	r29
    254c:	28 01       	movw	r4, r16
    254e:	39 01       	movw	r6, r18
    2550:	0f b6       	in	r0, 0x3f	; 63
    2552:	f8 94       	cli
    2554:	0f 92       	push	r0
    2556:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    255a:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    255e:	c8 2f       	mov	r28, r24
    2560:	d0 e0       	ldi	r29, 0x00	; 0
    2562:	ec 0f       	add	r30, r28
    2564:	fd 1f       	adc	r31, r29
    2566:	83 a9       	ldd	r24, Z+51	; 0x33
    2568:	82 30       	cpi	r24, 0x02	; 2
    256a:	71 f1       	breq	.+92     	; 0x25c8 <xTaskGenericNotifyWait+0x98>
    256c:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    2570:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    2574:	ce 01       	movw	r24, r28
    2576:	88 0f       	add	r24, r24
    2578:	99 1f       	adc	r25, r25
    257a:	88 0f       	add	r24, r24
    257c:	99 1f       	adc	r25, r25
    257e:	e8 0f       	add	r30, r24
    2580:	f9 1f       	adc	r31, r25
    2582:	87 a5       	ldd	r24, Z+47	; 0x2f
    2584:	90 a9       	ldd	r25, Z+48	; 0x30
    2586:	a1 a9       	ldd	r26, Z+49	; 0x31
    2588:	b2 a9       	ldd	r27, Z+50	; 0x32
    258a:	40 95       	com	r20
    258c:	50 95       	com	r21
    258e:	60 95       	com	r22
    2590:	70 95       	com	r23
    2592:	48 23       	and	r20, r24
    2594:	59 23       	and	r21, r25
    2596:	6a 23       	and	r22, r26
    2598:	7b 23       	and	r23, r27
    259a:	47 a7       	std	Z+47, r20	; 0x2f
    259c:	50 ab       	std	Z+48, r21	; 0x30
    259e:	61 ab       	std	Z+49, r22	; 0x31
    25a0:	72 ab       	std	Z+50, r23	; 0x32
    25a2:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    25a6:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    25aa:	ec 0f       	add	r30, r28
    25ac:	fd 1f       	adc	r31, r29
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	83 ab       	std	Z+51, r24	; 0x33
    25b2:	a1 14       	cp	r10, r1
    25b4:	b1 04       	cpc	r11, r1
    25b6:	c1 04       	cpc	r12, r1
    25b8:	d1 04       	cpc	r13, r1
    25ba:	31 f0       	breq	.+12     	; 0x25c8 <xTaskGenericNotifyWait+0x98>
    25bc:	41 e0       	ldi	r20, 0x01	; 1
    25be:	c6 01       	movw	r24, r12
    25c0:	b5 01       	movw	r22, r10
    25c2:	8a d8       	rcall	.-3820   	; 0x16d8 <prvAddCurrentTaskToDelayedList>
    25c4:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    25c8:	0f 90       	pop	r0
    25ca:	0f be       	out	0x3f, r0	; 63
    25cc:	0f b6       	in	r0, 0x3f	; 63
    25ce:	f8 94       	cli
    25d0:	0f 92       	push	r0
    25d2:	e1 14       	cp	r14, r1
    25d4:	f1 04       	cpc	r15, r1
    25d6:	a1 f0       	breq	.+40     	; 0x2600 <xTaskGenericNotifyWait+0xd0>
    25d8:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    25dc:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    25e0:	ce 01       	movw	r24, r28
    25e2:	88 0f       	add	r24, r24
    25e4:	99 1f       	adc	r25, r25
    25e6:	88 0f       	add	r24, r24
    25e8:	99 1f       	adc	r25, r25
    25ea:	e8 0f       	add	r30, r24
    25ec:	f9 1f       	adc	r31, r25
    25ee:	87 a5       	ldd	r24, Z+47	; 0x2f
    25f0:	90 a9       	ldd	r25, Z+48	; 0x30
    25f2:	a1 a9       	ldd	r26, Z+49	; 0x31
    25f4:	b2 a9       	ldd	r27, Z+50	; 0x32
    25f6:	f7 01       	movw	r30, r14
    25f8:	80 83       	st	Z, r24
    25fa:	91 83       	std	Z+1, r25	; 0x01
    25fc:	a2 83       	std	Z+2, r26	; 0x02
    25fe:	b3 83       	std	Z+3, r27	; 0x03
    2600:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    2604:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    2608:	ec 0f       	add	r30, r28
    260a:	fd 1f       	adc	r31, r29
    260c:	83 a9       	ldd	r24, Z+51	; 0x33
    260e:	82 30       	cpi	r24, 0x02	; 2
    2610:	e9 f4       	brne	.+58     	; 0x264c <xTaskGenericNotifyWait+0x11c>
    2612:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    2616:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    261a:	ce 01       	movw	r24, r28
    261c:	88 0f       	add	r24, r24
    261e:	99 1f       	adc	r25, r25
    2620:	88 0f       	add	r24, r24
    2622:	99 1f       	adc	r25, r25
    2624:	e8 0f       	add	r30, r24
    2626:	f9 1f       	adc	r31, r25
    2628:	87 a5       	ldd	r24, Z+47	; 0x2f
    262a:	90 a9       	ldd	r25, Z+48	; 0x30
    262c:	a1 a9       	ldd	r26, Z+49	; 0x31
    262e:	b2 a9       	ldd	r27, Z+50	; 0x32
    2630:	40 94       	com	r4
    2632:	50 94       	com	r5
    2634:	60 94       	com	r6
    2636:	70 94       	com	r7
    2638:	48 22       	and	r4, r24
    263a:	59 22       	and	r5, r25
    263c:	6a 22       	and	r6, r26
    263e:	7b 22       	and	r7, r27
    2640:	47 a6       	std	Z+47, r4	; 0x2f
    2642:	50 aa       	std	Z+48, r5	; 0x30
    2644:	61 aa       	std	Z+49, r6	; 0x31
    2646:	72 aa       	std	Z+50, r7	; 0x32
    2648:	81 e0       	ldi	r24, 0x01	; 1
    264a:	01 c0       	rjmp	.+2      	; 0x264e <xTaskGenericNotifyWait+0x11e>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	20 91 93 15 	lds	r18, 0x1593	; 0x801593 <pxCurrentTCB>
    2652:	30 91 94 15 	lds	r19, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    2656:	c2 0f       	add	r28, r18
    2658:	d3 1f       	adc	r29, r19
    265a:	1b aa       	std	Y+51, r1	; 0x33
    265c:	0f 90       	pop	r0
    265e:	0f be       	out	0x3f, r0	; 63
    2660:	df 91       	pop	r29
    2662:	cf 91       	pop	r28
    2664:	1f 91       	pop	r17
    2666:	0f 91       	pop	r16
    2668:	ff 90       	pop	r15
    266a:	ef 90       	pop	r14
    266c:	df 90       	pop	r13
    266e:	cf 90       	pop	r12
    2670:	bf 90       	pop	r11
    2672:	af 90       	pop	r10
    2674:	7f 90       	pop	r7
    2676:	6f 90       	pop	r6
    2678:	5f 90       	pop	r5
    267a:	4f 90       	pop	r4
    267c:	08 95       	ret

0000267e <xTaskGenericNotify>:
    267e:	8f 92       	push	r8
    2680:	9f 92       	push	r9
    2682:	af 92       	push	r10
    2684:	bf 92       	push	r11
    2686:	ef 92       	push	r14
    2688:	ff 92       	push	r15
    268a:	0f 93       	push	r16
    268c:	cf 93       	push	r28
    268e:	df 93       	push	r29
    2690:	dc 01       	movw	r26, r24
    2692:	0f b6       	in	r0, 0x3f	; 63
    2694:	f8 94       	cli
    2696:	0f 92       	push	r0
    2698:	e1 14       	cp	r14, r1
    269a:	f1 04       	cpc	r15, r1
    269c:	79 f0       	breq	.+30     	; 0x26bc <xTaskGenericNotify+0x3e>
    269e:	fc 01       	movw	r30, r24
    26a0:	84 e0       	ldi	r24, 0x04	; 4
    26a2:	68 9f       	mul	r22, r24
    26a4:	e0 0d       	add	r30, r0
    26a6:	f1 1d       	adc	r31, r1
    26a8:	11 24       	eor	r1, r1
    26aa:	87 a4       	ldd	r8, Z+47	; 0x2f
    26ac:	90 a8       	ldd	r9, Z+48	; 0x30
    26ae:	a1 a8       	ldd	r10, Z+49	; 0x31
    26b0:	b2 a8       	ldd	r11, Z+50	; 0x32
    26b2:	f7 01       	movw	r30, r14
    26b4:	80 82       	st	Z, r8
    26b6:	91 82       	std	Z+1, r9	; 0x01
    26b8:	a2 82       	std	Z+2, r10	; 0x02
    26ba:	b3 82       	std	Z+3, r11	; 0x03
    26bc:	70 e0       	ldi	r23, 0x00	; 0
    26be:	fd 01       	movw	r30, r26
    26c0:	e6 0f       	add	r30, r22
    26c2:	f7 1f       	adc	r31, r23
    26c4:	83 a9       	ldd	r24, Z+51	; 0x33
    26c6:	92 e0       	ldi	r25, 0x02	; 2
    26c8:	93 ab       	std	Z+51, r25	; 0x33
    26ca:	02 30       	cpi	r16, 0x02	; 2
    26cc:	f9 f0       	breq	.+62     	; 0x270c <xTaskGenericNotify+0x8e>
    26ce:	18 f4       	brcc	.+6      	; 0x26d6 <xTaskGenericNotify+0x58>
    26d0:	01 30       	cpi	r16, 0x01	; 1
    26d2:	31 f0       	breq	.+12     	; 0x26e0 <xTaskGenericNotify+0x62>
    26d4:	49 c0       	rjmp	.+146    	; 0x2768 <xTaskGenericNotify+0xea>
    26d6:	03 30       	cpi	r16, 0x03	; 3
    26d8:	69 f1       	breq	.+90     	; 0x2734 <xTaskGenericNotify+0xb6>
    26da:	04 30       	cpi	r16, 0x04	; 4
    26dc:	b9 f1       	breq	.+110    	; 0x274c <xTaskGenericNotify+0xce>
    26de:	44 c0       	rjmp	.+136    	; 0x2768 <xTaskGenericNotify+0xea>
    26e0:	66 0f       	add	r22, r22
    26e2:	77 1f       	adc	r23, r23
    26e4:	66 0f       	add	r22, r22
    26e6:	77 1f       	adc	r23, r23
    26e8:	fd 01       	movw	r30, r26
    26ea:	e6 0f       	add	r30, r22
    26ec:	f7 1f       	adc	r31, r23
    26ee:	87 a4       	ldd	r8, Z+47	; 0x2f
    26f0:	90 a8       	ldd	r9, Z+48	; 0x30
    26f2:	a1 a8       	ldd	r10, Z+49	; 0x31
    26f4:	b2 a8       	ldd	r11, Z+50	; 0x32
    26f6:	ba 01       	movw	r22, r20
    26f8:	a9 01       	movw	r20, r18
    26fa:	48 29       	or	r20, r8
    26fc:	59 29       	or	r21, r9
    26fe:	6a 29       	or	r22, r10
    2700:	7b 29       	or	r23, r11
    2702:	47 a7       	std	Z+47, r20	; 0x2f
    2704:	50 ab       	std	Z+48, r21	; 0x30
    2706:	61 ab       	std	Z+49, r22	; 0x31
    2708:	72 ab       	std	Z+50, r23	; 0x32
    270a:	2e c0       	rjmp	.+92     	; 0x2768 <xTaskGenericNotify+0xea>
    270c:	66 0f       	add	r22, r22
    270e:	77 1f       	adc	r23, r23
    2710:	66 0f       	add	r22, r22
    2712:	77 1f       	adc	r23, r23
    2714:	fd 01       	movw	r30, r26
    2716:	e6 0f       	add	r30, r22
    2718:	f7 1f       	adc	r31, r23
    271a:	47 a5       	ldd	r20, Z+47	; 0x2f
    271c:	50 a9       	ldd	r21, Z+48	; 0x30
    271e:	61 a9       	ldd	r22, Z+49	; 0x31
    2720:	72 a9       	ldd	r23, Z+50	; 0x32
    2722:	4f 5f       	subi	r20, 0xFF	; 255
    2724:	5f 4f       	sbci	r21, 0xFF	; 255
    2726:	6f 4f       	sbci	r22, 0xFF	; 255
    2728:	7f 4f       	sbci	r23, 0xFF	; 255
    272a:	47 a7       	std	Z+47, r20	; 0x2f
    272c:	50 ab       	std	Z+48, r21	; 0x30
    272e:	61 ab       	std	Z+49, r22	; 0x31
    2730:	72 ab       	std	Z+50, r23	; 0x32
    2732:	1a c0       	rjmp	.+52     	; 0x2768 <xTaskGenericNotify+0xea>
    2734:	66 0f       	add	r22, r22
    2736:	77 1f       	adc	r23, r23
    2738:	66 0f       	add	r22, r22
    273a:	77 1f       	adc	r23, r23
    273c:	fd 01       	movw	r30, r26
    273e:	e6 0f       	add	r30, r22
    2740:	f7 1f       	adc	r31, r23
    2742:	27 a7       	std	Z+47, r18	; 0x2f
    2744:	30 ab       	std	Z+48, r19	; 0x30
    2746:	41 ab       	std	Z+49, r20	; 0x31
    2748:	52 ab       	std	Z+50, r21	; 0x32
    274a:	0e c0       	rjmp	.+28     	; 0x2768 <xTaskGenericNotify+0xea>
    274c:	82 30       	cpi	r24, 0x02	; 2
    274e:	09 f4       	brne	.+2      	; 0x2752 <xTaskGenericNotify+0xd4>
    2750:	79 c0       	rjmp	.+242    	; 0x2844 <xTaskGenericNotify+0x1c6>
    2752:	66 0f       	add	r22, r22
    2754:	77 1f       	adc	r23, r23
    2756:	66 0f       	add	r22, r22
    2758:	77 1f       	adc	r23, r23
    275a:	fd 01       	movw	r30, r26
    275c:	e6 0f       	add	r30, r22
    275e:	f7 1f       	adc	r31, r23
    2760:	27 a7       	std	Z+47, r18	; 0x2f
    2762:	30 ab       	std	Z+48, r19	; 0x30
    2764:	41 ab       	std	Z+49, r20	; 0x31
    2766:	52 ab       	std	Z+50, r21	; 0x32
    2768:	81 30       	cpi	r24, 0x01	; 1
    276a:	09 f0       	breq	.+2      	; 0x276e <xTaskGenericNotify+0xf0>
    276c:	6d c0       	rjmp	.+218    	; 0x2848 <xTaskGenericNotify+0x1ca>
    276e:	1c 96       	adiw	r26, 0x0c	; 12
    2770:	ed 91       	ld	r30, X+
    2772:	fc 91       	ld	r31, X
    2774:	1d 97       	sbiw	r26, 0x0d	; 13
    2776:	16 96       	adiw	r26, 0x06	; 6
    2778:	cd 91       	ld	r28, X+
    277a:	dc 91       	ld	r29, X
    277c:	17 97       	sbiw	r26, 0x07	; 7
    277e:	18 96       	adiw	r26, 0x08	; 8
    2780:	8d 91       	ld	r24, X+
    2782:	9c 91       	ld	r25, X
    2784:	19 97       	sbiw	r26, 0x09	; 9
    2786:	9f 83       	std	Y+7, r25	; 0x07
    2788:	8e 83       	std	Y+6, r24	; 0x06
    278a:	18 96       	adiw	r26, 0x08	; 8
    278c:	cd 91       	ld	r28, X+
    278e:	dc 91       	ld	r29, X
    2790:	19 97       	sbiw	r26, 0x09	; 9
    2792:	16 96       	adiw	r26, 0x06	; 6
    2794:	8d 91       	ld	r24, X+
    2796:	9c 91       	ld	r25, X
    2798:	17 97       	sbiw	r26, 0x07	; 7
    279a:	9d 83       	std	Y+5, r25	; 0x05
    279c:	8c 83       	std	Y+4, r24	; 0x04
    279e:	9d 01       	movw	r18, r26
    27a0:	2e 5f       	subi	r18, 0xFE	; 254
    27a2:	3f 4f       	sbci	r19, 0xFF	; 255
    27a4:	81 81       	ldd	r24, Z+1	; 0x01
    27a6:	92 81       	ldd	r25, Z+2	; 0x02
    27a8:	82 17       	cp	r24, r18
    27aa:	93 07       	cpc	r25, r19
    27ac:	31 f4       	brne	.+12     	; 0x27ba <xTaskGenericNotify+0x13c>
    27ae:	18 96       	adiw	r26, 0x08	; 8
    27b0:	8d 91       	ld	r24, X+
    27b2:	9c 91       	ld	r25, X
    27b4:	19 97       	sbiw	r26, 0x09	; 9
    27b6:	92 83       	std	Z+2, r25	; 0x02
    27b8:	81 83       	std	Z+1, r24	; 0x01
    27ba:	1d 96       	adiw	r26, 0x0d	; 13
    27bc:	1c 92       	st	X, r1
    27be:	1e 92       	st	-X, r1
    27c0:	1c 97       	sbiw	r26, 0x0c	; 12
    27c2:	80 81       	ld	r24, Z
    27c4:	81 50       	subi	r24, 0x01	; 1
    27c6:	80 83       	st	Z, r24
    27c8:	5a 96       	adiw	r26, 0x1a	; 26
    27ca:	ec 91       	ld	r30, X
    27cc:	5a 97       	sbiw	r26, 0x1a	; 26
    27ce:	80 91 e3 14 	lds	r24, 0x14E3	; 0x8014e3 <uxTopReadyPriority>
    27d2:	8e 17       	cp	r24, r30
    27d4:	10 f4       	brcc	.+4      	; 0x27da <xTaskGenericNotify+0x15c>
    27d6:	e0 93 e3 14 	sts	0x14E3, r30	; 0x8014e3 <uxTopReadyPriority>
    27da:	8b e0       	ldi	r24, 0x0B	; 11
    27dc:	8e 9f       	mul	r24, r30
    27de:	f0 01       	movw	r30, r0
    27e0:	11 24       	eor	r1, r1
    27e2:	eb 5d       	subi	r30, 0xDB	; 219
    27e4:	fa 4e       	sbci	r31, 0xEA	; 234
    27e6:	01 80       	ldd	r0, Z+1	; 0x01
    27e8:	f2 81       	ldd	r31, Z+2	; 0x02
    27ea:	e0 2d       	mov	r30, r0
    27ec:	17 96       	adiw	r26, 0x07	; 7
    27ee:	fc 93       	st	X, r31
    27f0:	ee 93       	st	-X, r30
    27f2:	16 97       	sbiw	r26, 0x06	; 6
    27f4:	46 81       	ldd	r20, Z+6	; 0x06
    27f6:	57 81       	ldd	r21, Z+7	; 0x07
    27f8:	19 96       	adiw	r26, 0x09	; 9
    27fa:	5c 93       	st	X, r21
    27fc:	4e 93       	st	-X, r20
    27fe:	18 97       	sbiw	r26, 0x08	; 8
    2800:	c6 81       	ldd	r28, Z+6	; 0x06
    2802:	d7 81       	ldd	r29, Z+7	; 0x07
    2804:	3d 83       	std	Y+5, r19	; 0x05
    2806:	2c 83       	std	Y+4, r18	; 0x04
    2808:	37 83       	std	Z+7, r19	; 0x07
    280a:	26 83       	std	Z+6, r18	; 0x06
    280c:	5a 96       	adiw	r26, 0x1a	; 26
    280e:	ec 91       	ld	r30, X
    2810:	5a 97       	sbiw	r26, 0x1a	; 26
    2812:	8e 9f       	mul	r24, r30
    2814:	f0 01       	movw	r30, r0
    2816:	11 24       	eor	r1, r1
    2818:	eb 5d       	subi	r30, 0xDB	; 219
    281a:	fa 4e       	sbci	r31, 0xEA	; 234
    281c:	1d 96       	adiw	r26, 0x0d	; 13
    281e:	fc 93       	st	X, r31
    2820:	ee 93       	st	-X, r30
    2822:	1c 97       	sbiw	r26, 0x0c	; 12
    2824:	80 81       	ld	r24, Z
    2826:	8f 5f       	subi	r24, 0xFF	; 255
    2828:	80 83       	st	Z, r24
    282a:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    282e:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    2832:	5a 96       	adiw	r26, 0x1a	; 26
    2834:	9c 91       	ld	r25, X
    2836:	82 8d       	ldd	r24, Z+26	; 0x1a
    2838:	89 17       	cp	r24, r25
    283a:	40 f4       	brcc	.+16     	; 0x284c <xTaskGenericNotify+0x1ce>
    283c:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    2840:	81 e0       	ldi	r24, 0x01	; 1
    2842:	05 c0       	rjmp	.+10     	; 0x284e <xTaskGenericNotify+0x1d0>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	03 c0       	rjmp	.+6      	; 0x284e <xTaskGenericNotify+0x1d0>
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	01 c0       	rjmp	.+2      	; 0x284e <xTaskGenericNotify+0x1d0>
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	0f 90       	pop	r0
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	df 91       	pop	r29
    2854:	cf 91       	pop	r28
    2856:	0f 91       	pop	r16
    2858:	ff 90       	pop	r15
    285a:	ef 90       	pop	r14
    285c:	bf 90       	pop	r11
    285e:	af 90       	pop	r10
    2860:	9f 90       	pop	r9
    2862:	8f 90       	pop	r8
    2864:	08 95       	ret

00002866 <xTaskGenericNotifyFromISR>:
    2866:	8f 92       	push	r8
    2868:	9f 92       	push	r9
    286a:	af 92       	push	r10
    286c:	bf 92       	push	r11
    286e:	cf 92       	push	r12
    2870:	df 92       	push	r13
    2872:	ef 92       	push	r14
    2874:	ff 92       	push	r15
    2876:	0f 93       	push	r16
    2878:	cf 93       	push	r28
    287a:	df 93       	push	r29
    287c:	dc 01       	movw	r26, r24
    287e:	e1 14       	cp	r14, r1
    2880:	f1 04       	cpc	r15, r1
    2882:	79 f0       	breq	.+30     	; 0x28a2 <xTaskGenericNotifyFromISR+0x3c>
    2884:	fc 01       	movw	r30, r24
    2886:	84 e0       	ldi	r24, 0x04	; 4
    2888:	68 9f       	mul	r22, r24
    288a:	e0 0d       	add	r30, r0
    288c:	f1 1d       	adc	r31, r1
    288e:	11 24       	eor	r1, r1
    2890:	87 a4       	ldd	r8, Z+47	; 0x2f
    2892:	90 a8       	ldd	r9, Z+48	; 0x30
    2894:	a1 a8       	ldd	r10, Z+49	; 0x31
    2896:	b2 a8       	ldd	r11, Z+50	; 0x32
    2898:	f7 01       	movw	r30, r14
    289a:	80 82       	st	Z, r8
    289c:	91 82       	std	Z+1, r9	; 0x01
    289e:	a2 82       	std	Z+2, r10	; 0x02
    28a0:	b3 82       	std	Z+3, r11	; 0x03
    28a2:	70 e0       	ldi	r23, 0x00	; 0
    28a4:	fd 01       	movw	r30, r26
    28a6:	e6 0f       	add	r30, r22
    28a8:	f7 1f       	adc	r31, r23
    28aa:	83 a9       	ldd	r24, Z+51	; 0x33
    28ac:	92 e0       	ldi	r25, 0x02	; 2
    28ae:	93 ab       	std	Z+51, r25	; 0x33
    28b0:	02 30       	cpi	r16, 0x02	; 2
    28b2:	f9 f0       	breq	.+62     	; 0x28f2 <xTaskGenericNotifyFromISR+0x8c>
    28b4:	18 f4       	brcc	.+6      	; 0x28bc <xTaskGenericNotifyFromISR+0x56>
    28b6:	01 30       	cpi	r16, 0x01	; 1
    28b8:	31 f0       	breq	.+12     	; 0x28c6 <xTaskGenericNotifyFromISR+0x60>
    28ba:	49 c0       	rjmp	.+146    	; 0x294e <xTaskGenericNotifyFromISR+0xe8>
    28bc:	03 30       	cpi	r16, 0x03	; 3
    28be:	69 f1       	breq	.+90     	; 0x291a <xTaskGenericNotifyFromISR+0xb4>
    28c0:	04 30       	cpi	r16, 0x04	; 4
    28c2:	b9 f1       	breq	.+110    	; 0x2932 <xTaskGenericNotifyFromISR+0xcc>
    28c4:	44 c0       	rjmp	.+136    	; 0x294e <xTaskGenericNotifyFromISR+0xe8>
    28c6:	66 0f       	add	r22, r22
    28c8:	77 1f       	adc	r23, r23
    28ca:	66 0f       	add	r22, r22
    28cc:	77 1f       	adc	r23, r23
    28ce:	fd 01       	movw	r30, r26
    28d0:	e6 0f       	add	r30, r22
    28d2:	f7 1f       	adc	r31, r23
    28d4:	87 a4       	ldd	r8, Z+47	; 0x2f
    28d6:	90 a8       	ldd	r9, Z+48	; 0x30
    28d8:	a1 a8       	ldd	r10, Z+49	; 0x31
    28da:	b2 a8       	ldd	r11, Z+50	; 0x32
    28dc:	ba 01       	movw	r22, r20
    28de:	a9 01       	movw	r20, r18
    28e0:	48 29       	or	r20, r8
    28e2:	59 29       	or	r21, r9
    28e4:	6a 29       	or	r22, r10
    28e6:	7b 29       	or	r23, r11
    28e8:	47 a7       	std	Z+47, r20	; 0x2f
    28ea:	50 ab       	std	Z+48, r21	; 0x30
    28ec:	61 ab       	std	Z+49, r22	; 0x31
    28ee:	72 ab       	std	Z+50, r23	; 0x32
    28f0:	2e c0       	rjmp	.+92     	; 0x294e <xTaskGenericNotifyFromISR+0xe8>
    28f2:	66 0f       	add	r22, r22
    28f4:	77 1f       	adc	r23, r23
    28f6:	66 0f       	add	r22, r22
    28f8:	77 1f       	adc	r23, r23
    28fa:	fd 01       	movw	r30, r26
    28fc:	e6 0f       	add	r30, r22
    28fe:	f7 1f       	adc	r31, r23
    2900:	47 a5       	ldd	r20, Z+47	; 0x2f
    2902:	50 a9       	ldd	r21, Z+48	; 0x30
    2904:	61 a9       	ldd	r22, Z+49	; 0x31
    2906:	72 a9       	ldd	r23, Z+50	; 0x32
    2908:	4f 5f       	subi	r20, 0xFF	; 255
    290a:	5f 4f       	sbci	r21, 0xFF	; 255
    290c:	6f 4f       	sbci	r22, 0xFF	; 255
    290e:	7f 4f       	sbci	r23, 0xFF	; 255
    2910:	47 a7       	std	Z+47, r20	; 0x2f
    2912:	50 ab       	std	Z+48, r21	; 0x30
    2914:	61 ab       	std	Z+49, r22	; 0x31
    2916:	72 ab       	std	Z+50, r23	; 0x32
    2918:	1a c0       	rjmp	.+52     	; 0x294e <xTaskGenericNotifyFromISR+0xe8>
    291a:	66 0f       	add	r22, r22
    291c:	77 1f       	adc	r23, r23
    291e:	66 0f       	add	r22, r22
    2920:	77 1f       	adc	r23, r23
    2922:	fd 01       	movw	r30, r26
    2924:	e6 0f       	add	r30, r22
    2926:	f7 1f       	adc	r31, r23
    2928:	27 a7       	std	Z+47, r18	; 0x2f
    292a:	30 ab       	std	Z+48, r19	; 0x30
    292c:	41 ab       	std	Z+49, r20	; 0x31
    292e:	52 ab       	std	Z+50, r21	; 0x32
    2930:	0e c0       	rjmp	.+28     	; 0x294e <xTaskGenericNotifyFromISR+0xe8>
    2932:	82 30       	cpi	r24, 0x02	; 2
    2934:	09 f4       	brne	.+2      	; 0x2938 <xTaskGenericNotifyFromISR+0xd2>
    2936:	a4 c0       	rjmp	.+328    	; 0x2a80 <xTaskGenericNotifyFromISR+0x21a>
    2938:	66 0f       	add	r22, r22
    293a:	77 1f       	adc	r23, r23
    293c:	66 0f       	add	r22, r22
    293e:	77 1f       	adc	r23, r23
    2940:	fd 01       	movw	r30, r26
    2942:	e6 0f       	add	r30, r22
    2944:	f7 1f       	adc	r31, r23
    2946:	27 a7       	std	Z+47, r18	; 0x2f
    2948:	30 ab       	std	Z+48, r19	; 0x30
    294a:	41 ab       	std	Z+49, r20	; 0x31
    294c:	52 ab       	std	Z+50, r21	; 0x32
    294e:	81 30       	cpi	r24, 0x01	; 1
    2950:	09 f0       	breq	.+2      	; 0x2954 <xTaskGenericNotifyFromISR+0xee>
    2952:	98 c0       	rjmp	.+304    	; 0x2a84 <xTaskGenericNotifyFromISR+0x21e>
    2954:	80 91 d4 14 	lds	r24, 0x14D4	; 0x8014d4 <uxSchedulerSuspended>
    2958:	81 11       	cpse	r24, r1
    295a:	5f c0       	rjmp	.+190    	; 0x2a1a <xTaskGenericNotifyFromISR+0x1b4>
    295c:	1c 96       	adiw	r26, 0x0c	; 12
    295e:	ed 91       	ld	r30, X+
    2960:	fc 91       	ld	r31, X
    2962:	1d 97       	sbiw	r26, 0x0d	; 13
    2964:	16 96       	adiw	r26, 0x06	; 6
    2966:	cd 91       	ld	r28, X+
    2968:	dc 91       	ld	r29, X
    296a:	17 97       	sbiw	r26, 0x07	; 7
    296c:	18 96       	adiw	r26, 0x08	; 8
    296e:	8d 91       	ld	r24, X+
    2970:	9c 91       	ld	r25, X
    2972:	19 97       	sbiw	r26, 0x09	; 9
    2974:	9f 83       	std	Y+7, r25	; 0x07
    2976:	8e 83       	std	Y+6, r24	; 0x06
    2978:	18 96       	adiw	r26, 0x08	; 8
    297a:	cd 91       	ld	r28, X+
    297c:	dc 91       	ld	r29, X
    297e:	19 97       	sbiw	r26, 0x09	; 9
    2980:	16 96       	adiw	r26, 0x06	; 6
    2982:	8d 91       	ld	r24, X+
    2984:	9c 91       	ld	r25, X
    2986:	17 97       	sbiw	r26, 0x07	; 7
    2988:	9d 83       	std	Y+5, r25	; 0x05
    298a:	8c 83       	std	Y+4, r24	; 0x04
    298c:	9d 01       	movw	r18, r26
    298e:	2e 5f       	subi	r18, 0xFE	; 254
    2990:	3f 4f       	sbci	r19, 0xFF	; 255
    2992:	81 81       	ldd	r24, Z+1	; 0x01
    2994:	92 81       	ldd	r25, Z+2	; 0x02
    2996:	82 17       	cp	r24, r18
    2998:	93 07       	cpc	r25, r19
    299a:	31 f4       	brne	.+12     	; 0x29a8 <xTaskGenericNotifyFromISR+0x142>
    299c:	18 96       	adiw	r26, 0x08	; 8
    299e:	8d 91       	ld	r24, X+
    29a0:	9c 91       	ld	r25, X
    29a2:	19 97       	sbiw	r26, 0x09	; 9
    29a4:	92 83       	std	Z+2, r25	; 0x02
    29a6:	81 83       	std	Z+1, r24	; 0x01
    29a8:	1d 96       	adiw	r26, 0x0d	; 13
    29aa:	1c 92       	st	X, r1
    29ac:	1e 92       	st	-X, r1
    29ae:	1c 97       	sbiw	r26, 0x0c	; 12
    29b0:	80 81       	ld	r24, Z
    29b2:	81 50       	subi	r24, 0x01	; 1
    29b4:	80 83       	st	Z, r24
    29b6:	5a 96       	adiw	r26, 0x1a	; 26
    29b8:	ec 91       	ld	r30, X
    29ba:	5a 97       	sbiw	r26, 0x1a	; 26
    29bc:	80 91 e3 14 	lds	r24, 0x14E3	; 0x8014e3 <uxTopReadyPriority>
    29c0:	8e 17       	cp	r24, r30
    29c2:	10 f4       	brcc	.+4      	; 0x29c8 <xTaskGenericNotifyFromISR+0x162>
    29c4:	e0 93 e3 14 	sts	0x14E3, r30	; 0x8014e3 <uxTopReadyPriority>
    29c8:	8b e0       	ldi	r24, 0x0B	; 11
    29ca:	8e 9f       	mul	r24, r30
    29cc:	f0 01       	movw	r30, r0
    29ce:	11 24       	eor	r1, r1
    29d0:	eb 5d       	subi	r30, 0xDB	; 219
    29d2:	fa 4e       	sbci	r31, 0xEA	; 234
    29d4:	01 80       	ldd	r0, Z+1	; 0x01
    29d6:	f2 81       	ldd	r31, Z+2	; 0x02
    29d8:	e0 2d       	mov	r30, r0
    29da:	17 96       	adiw	r26, 0x07	; 7
    29dc:	fc 93       	st	X, r31
    29de:	ee 93       	st	-X, r30
    29e0:	16 97       	sbiw	r26, 0x06	; 6
    29e2:	46 81       	ldd	r20, Z+6	; 0x06
    29e4:	57 81       	ldd	r21, Z+7	; 0x07
    29e6:	19 96       	adiw	r26, 0x09	; 9
    29e8:	5c 93       	st	X, r21
    29ea:	4e 93       	st	-X, r20
    29ec:	18 97       	sbiw	r26, 0x08	; 8
    29ee:	c6 81       	ldd	r28, Z+6	; 0x06
    29f0:	d7 81       	ldd	r29, Z+7	; 0x07
    29f2:	3d 83       	std	Y+5, r19	; 0x05
    29f4:	2c 83       	std	Y+4, r18	; 0x04
    29f6:	37 83       	std	Z+7, r19	; 0x07
    29f8:	26 83       	std	Z+6, r18	; 0x06
    29fa:	5a 96       	adiw	r26, 0x1a	; 26
    29fc:	ec 91       	ld	r30, X
    29fe:	5a 97       	sbiw	r26, 0x1a	; 26
    2a00:	8e 9f       	mul	r24, r30
    2a02:	f0 01       	movw	r30, r0
    2a04:	11 24       	eor	r1, r1
    2a06:	eb 5d       	subi	r30, 0xDB	; 219
    2a08:	fa 4e       	sbci	r31, 0xEA	; 234
    2a0a:	1d 96       	adiw	r26, 0x0d	; 13
    2a0c:	fc 93       	st	X, r31
    2a0e:	ee 93       	st	-X, r30
    2a10:	1c 97       	sbiw	r26, 0x0c	; 12
    2a12:	80 81       	ld	r24, Z
    2a14:	8f 5f       	subi	r24, 0xFF	; 255
    2a16:	80 83       	st	Z, r24
    2a18:	20 c0       	rjmp	.+64     	; 0x2a5a <xTaskGenericNotifyFromISR+0x1f4>
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	55 e1       	ldi	r21, 0x15	; 21
    2a1e:	fa 01       	movw	r30, r20
    2a20:	c1 81       	ldd	r28, Z+1	; 0x01
    2a22:	d2 81       	ldd	r29, Z+2	; 0x02
    2a24:	53 96       	adiw	r26, 0x13	; 19
    2a26:	dc 93       	st	X, r29
    2a28:	ce 93       	st	-X, r28
    2a2a:	52 97       	sbiw	r26, 0x12	; 18
    2a2c:	8e 81       	ldd	r24, Y+6	; 0x06
    2a2e:	9f 81       	ldd	r25, Y+7	; 0x07
    2a30:	55 96       	adiw	r26, 0x15	; 21
    2a32:	9c 93       	st	X, r25
    2a34:	8e 93       	st	-X, r24
    2a36:	54 97       	sbiw	r26, 0x14	; 20
    2a38:	2e 81       	ldd	r18, Y+6	; 0x06
    2a3a:	3f 81       	ldd	r19, Y+7	; 0x07
    2a3c:	cd 01       	movw	r24, r26
    2a3e:	0e 96       	adiw	r24, 0x0e	; 14
    2a40:	f9 01       	movw	r30, r18
    2a42:	95 83       	std	Z+5, r25	; 0x05
    2a44:	84 83       	std	Z+4, r24	; 0x04
    2a46:	9f 83       	std	Y+7, r25	; 0x07
    2a48:	8e 83       	std	Y+6, r24	; 0x06
    2a4a:	59 96       	adiw	r26, 0x19	; 25
    2a4c:	5c 93       	st	X, r21
    2a4e:	4e 93       	st	-X, r20
    2a50:	58 97       	sbiw	r26, 0x18	; 24
    2a52:	fa 01       	movw	r30, r20
    2a54:	80 81       	ld	r24, Z
    2a56:	8f 5f       	subi	r24, 0xFF	; 255
    2a58:	80 83       	st	Z, r24
    2a5a:	e0 91 93 15 	lds	r30, 0x1593	; 0x801593 <pxCurrentTCB>
    2a5e:	f0 91 94 15 	lds	r31, 0x1594	; 0x801594 <pxCurrentTCB+0x1>
    2a62:	5a 96       	adiw	r26, 0x1a	; 26
    2a64:	9c 91       	ld	r25, X
    2a66:	82 8d       	ldd	r24, Z+26	; 0x1a
    2a68:	89 17       	cp	r24, r25
    2a6a:	70 f4       	brcc	.+28     	; 0x2a88 <xTaskGenericNotifyFromISR+0x222>
    2a6c:	c1 14       	cp	r12, r1
    2a6e:	d1 04       	cpc	r13, r1
    2a70:	19 f0       	breq	.+6      	; 0x2a78 <xTaskGenericNotifyFromISR+0x212>
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	f6 01       	movw	r30, r12
    2a76:	80 83       	st	Z, r24
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	80 93 dd 14 	sts	0x14DD, r24	; 0x8014dd <xYieldPending>
    2a7e:	05 c0       	rjmp	.+10     	; 0x2a8a <xTaskGenericNotifyFromISR+0x224>
    2a80:	80 e0       	ldi	r24, 0x00	; 0
    2a82:	03 c0       	rjmp	.+6      	; 0x2a8a <xTaskGenericNotifyFromISR+0x224>
    2a84:	81 e0       	ldi	r24, 0x01	; 1
    2a86:	01 c0       	rjmp	.+2      	; 0x2a8a <xTaskGenericNotifyFromISR+0x224>
    2a88:	81 e0       	ldi	r24, 0x01	; 1
    2a8a:	df 91       	pop	r29
    2a8c:	cf 91       	pop	r28
    2a8e:	0f 91       	pop	r16
    2a90:	ff 90       	pop	r15
    2a92:	ef 90       	pop	r14
    2a94:	df 90       	pop	r13
    2a96:	cf 90       	pop	r12
    2a98:	bf 90       	pop	r11
    2a9a:	af 90       	pop	r10
    2a9c:	9f 90       	pop	r9
    2a9e:	8f 90       	pop	r8
    2aa0:	08 95       	ret

00002aa2 <xTaskGenericNotifyStateClear>:

        configASSERT( uxIndexToClear < configTASK_NOTIFICATION_ARRAY_ENTRIES );

        /* If null is passed in here then it is the calling task that is having
         * its notification state cleared. */
        pxTCB = prvGetTCBFromHandle( xTask );
    2aa2:	00 97       	sbiw	r24, 0x00	; 0
    2aa4:	21 f4       	brne	.+8      	; 0x2aae <xTaskGenericNotifyStateClear+0xc>
    2aa6:	80 91 93 15 	lds	r24, 0x1593	; 0x801593 <pxCurrentTCB>
    2aaa:	90 91 94 15 	lds	r25, 0x1594	; 0x801594 <pxCurrentTCB+0x1>

        taskENTER_CRITICAL();
    2aae:	0f b6       	in	r0, 0x3f	; 63
    2ab0:	f8 94       	cli
    2ab2:	0f 92       	push	r0
        {
            if( pxTCB->ucNotifyState[ uxIndexToClear ] == taskNOTIFICATION_RECEIVED )
    2ab4:	70 e0       	ldi	r23, 0x00	; 0
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	e6 0f       	add	r30, r22
    2aba:	f7 1f       	adc	r31, r23
    2abc:	23 a9       	ldd	r18, Z+51	; 0x33
    2abe:	22 30       	cpi	r18, 0x02	; 2
    2ac0:	31 f4       	brne	.+12     	; 0x2ace <xTaskGenericNotifyStateClear+0x2c>
            {
                pxTCB->ucNotifyState[ uxIndexToClear ] = taskNOT_WAITING_NOTIFICATION;
    2ac2:	fc 01       	movw	r30, r24
    2ac4:	e6 0f       	add	r30, r22
    2ac6:	f7 1f       	adc	r31, r23
    2ac8:	13 aa       	std	Z+51, r1	; 0x33
                xReturn = pdPASS;
    2aca:	81 e0       	ldi	r24, 0x01	; 1
    2acc:	01 c0       	rjmp	.+2      	; 0x2ad0 <xTaskGenericNotifyStateClear+0x2e>
            }
            else
            {
                xReturn = pdFAIL;
    2ace:	80 e0       	ldi	r24, 0x00	; 0
            }
        }
        taskEXIT_CRITICAL();
    2ad0:	0f 90       	pop	r0
    2ad2:	0f be       	out	0x3f, r0	; 63

        return xReturn;
    }
    2ad4:	08 95       	ret

00002ad6 <prvInsertTimerInActiveList>:
    2ad6:	cf 92       	push	r12
    2ad8:	df 92       	push	r13
    2ada:	ef 92       	push	r14
    2adc:	ff 92       	push	r15
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	fc 01       	movw	r30, r24
    2ae4:	42 83       	std	Z+2, r20	; 0x02
    2ae6:	53 83       	std	Z+3, r21	; 0x03
    2ae8:	64 83       	std	Z+4, r22	; 0x04
    2aea:	75 83       	std	Z+5, r23	; 0x05
    2aec:	93 87       	std	Z+11, r25	; 0x0b
    2aee:	82 87       	std	Z+10, r24	; 0x0a
    2af0:	04 17       	cp	r16, r20
    2af2:	15 07       	cpc	r17, r21
    2af4:	26 07       	cpc	r18, r22
    2af6:	37 07       	cpc	r19, r23
    2af8:	c0 f0       	brcs	.+48     	; 0x2b2a <prvInsertTimerInActiveList+0x54>
    2afa:	0c 19       	sub	r16, r12
    2afc:	1d 09       	sbc	r17, r13
    2afe:	2e 09       	sbc	r18, r14
    2b00:	3f 09       	sbc	r19, r15
    2b02:	86 85       	ldd	r24, Z+14	; 0x0e
    2b04:	97 85       	ldd	r25, Z+15	; 0x0f
    2b06:	a0 89       	ldd	r26, Z+16	; 0x10
    2b08:	b1 89       	ldd	r27, Z+17	; 0x11
    2b0a:	08 17       	cp	r16, r24
    2b0c:	19 07       	cpc	r17, r25
    2b0e:	2a 07       	cpc	r18, r26
    2b10:	3b 07       	cpc	r19, r27
    2b12:	00 f5       	brcc	.+64     	; 0x2b54 <prvInsertTimerInActiveList+0x7e>
    2b14:	bf 01       	movw	r22, r30
    2b16:	6e 5f       	subi	r22, 0xFE	; 254
    2b18:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1a:	80 91 9d 15 	lds	r24, 0x159D	; 0x80159d <pxOverflowTimerList>
    2b1e:	90 91 9e 15 	lds	r25, 0x159E	; 0x80159e <pxOverflowTimerList+0x1>
    2b22:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    2b26:	80 e0       	ldi	r24, 0x00	; 0
    2b28:	18 c0       	rjmp	.+48     	; 0x2b5a <prvInsertTimerInActiveList+0x84>
    2b2a:	0c 15       	cp	r16, r12
    2b2c:	1d 05       	cpc	r17, r13
    2b2e:	2e 05       	cpc	r18, r14
    2b30:	3f 05       	cpc	r19, r15
    2b32:	28 f4       	brcc	.+10     	; 0x2b3e <prvInsertTimerInActiveList+0x68>
    2b34:	4c 15       	cp	r20, r12
    2b36:	5d 05       	cpc	r21, r13
    2b38:	6e 05       	cpc	r22, r14
    2b3a:	7f 05       	cpc	r23, r15
    2b3c:	68 f4       	brcc	.+26     	; 0x2b58 <prvInsertTimerInActiveList+0x82>
    2b3e:	bf 01       	movw	r22, r30
    2b40:	6e 5f       	subi	r22, 0xFE	; 254
    2b42:	7f 4f       	sbci	r23, 0xFF	; 255
    2b44:	80 91 9f 15 	lds	r24, 0x159F	; 0x80159f <pxCurrentTimerList>
    2b48:	90 91 a0 15 	lds	r25, 0x15A0	; 0x8015a0 <pxCurrentTimerList+0x1>
    2b4c:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    2b50:	80 e0       	ldi	r24, 0x00	; 0
    2b52:	03 c0       	rjmp	.+6      	; 0x2b5a <prvInsertTimerInActiveList+0x84>
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	01 c0       	rjmp	.+2      	; 0x2b5a <prvInsertTimerInActiveList+0x84>
    2b58:	81 e0       	ldi	r24, 0x01	; 1
    2b5a:	1f 91       	pop	r17
    2b5c:	0f 91       	pop	r16
    2b5e:	ff 90       	pop	r15
    2b60:	ef 90       	pop	r14
    2b62:	df 90       	pop	r13
    2b64:	cf 90       	pop	r12
    2b66:	08 95       	ret

00002b68 <prvCheckForValidListAndQueue>:
    2b68:	0f b6       	in	r0, 0x3f	; 63
    2b6a:	f8 94       	cli
    2b6c:	0f 92       	push	r0
    2b6e:	80 91 9b 15 	lds	r24, 0x159B	; 0x80159b <xTimerQueue>
    2b72:	90 91 9c 15 	lds	r25, 0x159C	; 0x80159c <xTimerQueue+0x1>
    2b76:	89 2b       	or	r24, r25
    2b78:	e9 f4       	brne	.+58     	; 0x2bb4 <prvCheckForValidListAndQueue+0x4c>
    2b7a:	8c ea       	ldi	r24, 0xAC	; 172
    2b7c:	95 e1       	ldi	r25, 0x15	; 21
    2b7e:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    2b82:	81 ea       	ldi	r24, 0xA1	; 161
    2b84:	95 e1       	ldi	r25, 0x15	; 21
    2b86:	0e 94 b9 03 	call	0x772	; 0x772 <vListInitialise>
    2b8a:	8c ea       	ldi	r24, 0xAC	; 172
    2b8c:	95 e1       	ldi	r25, 0x15	; 21
    2b8e:	90 93 a0 15 	sts	0x15A0, r25	; 0x8015a0 <pxCurrentTimerList+0x1>
    2b92:	80 93 9f 15 	sts	0x159F, r24	; 0x80159f <pxCurrentTimerList>
    2b96:	81 ea       	ldi	r24, 0xA1	; 161
    2b98:	95 e1       	ldi	r25, 0x15	; 21
    2b9a:	90 93 9e 15 	sts	0x159E, r25	; 0x80159e <pxOverflowTimerList+0x1>
    2b9e:	80 93 9d 15 	sts	0x159D, r24	; 0x80159d <pxOverflowTimerList>
    2ba2:	40 e0       	ldi	r20, 0x00	; 0
    2ba4:	67 e0       	ldi	r22, 0x07	; 7
    2ba6:	8a e0       	ldi	r24, 0x0A	; 10
    2ba8:	0e 94 61 06 	call	0xcc2	; 0xcc2 <xQueueGenericCreate>
    2bac:	90 93 9c 15 	sts	0x159C, r25	; 0x80159c <xTimerQueue+0x1>
    2bb0:	80 93 9b 15 	sts	0x159B, r24	; 0x80159b <xTimerQueue>
    2bb4:	0f 90       	pop	r0
    2bb6:	0f be       	out	0x3f, r0	; 63
    2bb8:	08 95       	ret

00002bba <xTimerCreateTimerTask>:
    2bba:	ef 92       	push	r14
    2bbc:	ff 92       	push	r15
    2bbe:	0f 93       	push	r16
    2bc0:	d3 df       	rcall	.-90     	; 0x2b68 <prvCheckForValidListAndQueue>
    2bc2:	80 91 9b 15 	lds	r24, 0x159B	; 0x80159b <xTimerQueue>
    2bc6:	90 91 9c 15 	lds	r25, 0x159C	; 0x80159c <xTimerQueue+0x1>
    2bca:	89 2b       	or	r24, r25
    2bcc:	91 f0       	breq	.+36     	; 0x2bf2 <xTimerCreateTimerTask+0x38>
    2bce:	0f 2e       	mov	r0, r31
    2bd0:	f9 e9       	ldi	r31, 0x99	; 153
    2bd2:	ef 2e       	mov	r14, r31
    2bd4:	f5 e1       	ldi	r31, 0x15	; 21
    2bd6:	ff 2e       	mov	r15, r31
    2bd8:	f0 2d       	mov	r31, r0
    2bda:	03 e0       	ldi	r16, 0x03	; 3
    2bdc:	20 e0       	ldi	r18, 0x00	; 0
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	40 ec       	ldi	r20, 0xC0	; 192
    2be2:	50 e0       	ldi	r21, 0x00	; 0
    2be4:	64 e7       	ldi	r22, 0x74	; 116
    2be6:	72 e0       	ldi	r23, 0x02	; 2
    2be8:	83 e0       	ldi	r24, 0x03	; 3
    2bea:	91 e0       	ldi	r25, 0x01	; 1
    2bec:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskCreate>
    2bf0:	01 c0       	rjmp	.+2      	; 0x2bf4 <xTimerCreateTimerTask+0x3a>
    2bf2:	80 e0       	ldi	r24, 0x00	; 0
    2bf4:	0f 91       	pop	r16
    2bf6:	ff 90       	pop	r15
    2bf8:	ef 90       	pop	r14
    2bfa:	08 95       	ret

00002bfc <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
    2bfc:	8f 92       	push	r8
    2bfe:	9f 92       	push	r9
    2c00:	af 92       	push	r10
    2c02:	bf 92       	push	r11
    2c04:	cf 92       	push	r12
    2c06:	df 92       	push	r13
    2c08:	ef 92       	push	r14
    2c0a:	ff 92       	push	r15
    2c0c:	0f 93       	push	r16
    2c0e:	1f 93       	push	r17
    2c10:	cf 93       	push	r28
    2c12:	df 93       	push	r29
    2c14:	cd b7       	in	r28, 0x3d	; 61
    2c16:	de b7       	in	r29, 0x3e	; 62
    2c18:	27 97       	sbiw	r28, 0x07	; 7
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61

        configASSERT( xTimer );

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
    2c24:	e0 91 9b 15 	lds	r30, 0x159B	; 0x80159b <xTimerQueue>
    2c28:	f0 91 9c 15 	lds	r31, 0x159C	; 0x80159c <xTimerQueue+0x1>
    2c2c:	30 97       	sbiw	r30, 0x00	; 0
    2c2e:	81 f1       	breq	.+96     	; 0x2c90 <xTimerGenericCommand+0x94>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
    2c30:	69 83       	std	Y+1, r22	; 0x01
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
    2c32:	2a 83       	std	Y+2, r18	; 0x02
    2c34:	3b 83       	std	Y+3, r19	; 0x03
    2c36:	4c 83       	std	Y+4, r20	; 0x04
    2c38:	5d 83       	std	Y+5, r21	; 0x05
            xMessage.u.xTimerParameters.pxTimer = xTimer;
    2c3a:	9f 83       	std	Y+7, r25	; 0x07
    2c3c:	8e 83       	std	Y+6, r24	; 0x06

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
    2c3e:	66 30       	cpi	r22, 0x06	; 6
    2c40:	f4 f4       	brge	.+60     	; 0x2c7e <xTimerGenericCommand+0x82>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
    2c42:	0d dc       	rcall	.-2022   	; 0x245e <xTaskGetSchedulerState>
    2c44:	82 30       	cpi	r24, 0x02	; 2
    2c46:	69 f4       	brne	.+26     	; 0x2c62 <xTimerGenericCommand+0x66>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
    2c48:	00 e0       	ldi	r16, 0x00	; 0
    2c4a:	a7 01       	movw	r20, r14
    2c4c:	96 01       	movw	r18, r12
    2c4e:	be 01       	movw	r22, r28
    2c50:	6f 5f       	subi	r22, 0xFF	; 255
    2c52:	7f 4f       	sbci	r23, 0xFF	; 255
    2c54:	80 91 9b 15 	lds	r24, 0x159B	; 0x80159b <xTimerQueue>
    2c58:	90 91 9c 15 	lds	r25, 0x159C	; 0x80159c <xTimerQueue+0x1>
    2c5c:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    2c60:	18 c0       	rjmp	.+48     	; 0x2c92 <xTimerGenericCommand+0x96>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
    2c62:	00 e0       	ldi	r16, 0x00	; 0
    2c64:	20 e0       	ldi	r18, 0x00	; 0
    2c66:	30 e0       	ldi	r19, 0x00	; 0
    2c68:	a9 01       	movw	r20, r18
    2c6a:	be 01       	movw	r22, r28
    2c6c:	6f 5f       	subi	r22, 0xFF	; 255
    2c6e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c70:	80 91 9b 15 	lds	r24, 0x159B	; 0x80159b <xTimerQueue>
    2c74:	90 91 9c 15 	lds	r25, 0x159C	; 0x80159c <xTimerQueue+0x1>
    2c78:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
    2c7c:	0a c0       	rjmp	.+20     	; 0x2c92 <xTimerGenericCommand+0x96>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
    2c7e:	20 e0       	ldi	r18, 0x00	; 0
    2c80:	a8 01       	movw	r20, r16
    2c82:	be 01       	movw	r22, r28
    2c84:	6f 5f       	subi	r22, 0xFF	; 255
    2c86:	7f 4f       	sbci	r23, 0xFF	; 255
    2c88:	cf 01       	movw	r24, r30
    2c8a:	0e 94 3d 07 	call	0xe7a	; 0xe7a <xQueueGenericSendFromISR>
    2c8e:	01 c0       	rjmp	.+2      	; 0x2c92 <xTimerGenericCommand+0x96>
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
        BaseType_t xReturn = pdFAIL;
    2c90:	80 e0       	ldi	r24, 0x00	; 0
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
    }
    2c92:	27 96       	adiw	r28, 0x07	; 7
    2c94:	0f b6       	in	r0, 0x3f	; 63
    2c96:	f8 94       	cli
    2c98:	de bf       	out	0x3e, r29	; 62
    2c9a:	0f be       	out	0x3f, r0	; 63
    2c9c:	cd bf       	out	0x3d, r28	; 61
    2c9e:	df 91       	pop	r29
    2ca0:	cf 91       	pop	r28
    2ca2:	1f 91       	pop	r17
    2ca4:	0f 91       	pop	r16
    2ca6:	ff 90       	pop	r15
    2ca8:	ef 90       	pop	r14
    2caa:	df 90       	pop	r13
    2cac:	cf 90       	pop	r12
    2cae:	bf 90       	pop	r11
    2cb0:	af 90       	pop	r10
    2cb2:	9f 90       	pop	r9
    2cb4:	8f 90       	pop	r8
    2cb6:	08 95       	ret

00002cb8 <prvSampleTimeNow>:
        return xNextExpireTime;
    }
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
    2cb8:	2f 92       	push	r2
    2cba:	3f 92       	push	r3
    2cbc:	4f 92       	push	r4
    2cbe:	5f 92       	push	r5
    2cc0:	6f 92       	push	r6
    2cc2:	7f 92       	push	r7
    2cc4:	8f 92       	push	r8
    2cc6:	9f 92       	push	r9
    2cc8:	af 92       	push	r10
    2cca:	bf 92       	push	r11
    2ccc:	cf 92       	push	r12
    2cce:	df 92       	push	r13
    2cd0:	ef 92       	push	r14
    2cd2:	ff 92       	push	r15
    2cd4:	0f 93       	push	r16
    2cd6:	1f 93       	push	r17
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	1c 01       	movw	r2, r24
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
    2cde:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <xTaskGetTickCount>
    2ce2:	2b 01       	movw	r4, r22
    2ce4:	3c 01       	movw	r6, r24

        if( xTimeNow < xLastTime )
    2ce6:	80 91 95 15 	lds	r24, 0x1595	; 0x801595 <xLastTime.2436>
    2cea:	90 91 96 15 	lds	r25, 0x1596	; 0x801596 <xLastTime.2436+0x1>
    2cee:	a0 91 97 15 	lds	r26, 0x1597	; 0x801597 <xLastTime.2436+0x2>
    2cf2:	b0 91 98 15 	lds	r27, 0x1598	; 0x801598 <xLastTime.2436+0x3>
    2cf6:	48 16       	cp	r4, r24
    2cf8:	59 06       	cpc	r5, r25
    2cfa:	6a 06       	cpc	r6, r26
    2cfc:	7b 06       	cpc	r7, r27
    2cfe:	08 f0       	brcs	.+2      	; 0x2d02 <prvSampleTimeNow+0x4a>
    2d00:	53 c0       	rjmp	.+166    	; 0x2da8 <prvSampleTimeNow+0xf0>
    2d02:	3b c0       	rjmp	.+118    	; 0x2d7a <prvSampleTimeNow+0xc2>
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
    2d04:	07 80       	ldd	r0, Z+7	; 0x07
    2d06:	f0 85       	ldd	r31, Z+8	; 0x08
    2d08:	e0 2d       	mov	r30, r0
    2d0a:	80 80       	ld	r8, Z
    2d0c:	91 80       	ldd	r9, Z+1	; 0x01
    2d0e:	a2 80       	ldd	r10, Z+2	; 0x02
    2d10:	b3 80       	ldd	r11, Z+3	; 0x03

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
    2d12:	c0 85       	ldd	r28, Z+8	; 0x08
    2d14:	d1 85       	ldd	r29, Z+9	; 0x09
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
    2d16:	8e 01       	movw	r16, r28
    2d18:	0e 5f       	subi	r16, 0xFE	; 254
    2d1a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d1c:	c8 01       	movw	r24, r16
    2d1e:	0e 94 0b 04 	call	0x816	; 0x816 <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
    2d22:	ec 89       	ldd	r30, Y+20	; 0x14
    2d24:	fd 89       	ldd	r31, Y+21	; 0x15
    2d26:	ce 01       	movw	r24, r28
    2d28:	19 95       	eicall

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
    2d2a:	8e 89       	ldd	r24, Y+22	; 0x16
    2d2c:	82 ff       	sbrs	r24, 2
    2d2e:	25 c0       	rjmp	.+74     	; 0x2d7a <prvSampleTimeNow+0xc2>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
    2d30:	8e 85       	ldd	r24, Y+14	; 0x0e
    2d32:	9f 85       	ldd	r25, Y+15	; 0x0f
    2d34:	a8 89       	ldd	r26, Y+16	; 0x10
    2d36:	b9 89       	ldd	r27, Y+17	; 0x11
    2d38:	88 0d       	add	r24, r8
    2d3a:	99 1d       	adc	r25, r9
    2d3c:	aa 1d       	adc	r26, r10
    2d3e:	bb 1d       	adc	r27, r11

                if( xReloadTime > xNextExpireTime )
    2d40:	88 16       	cp	r8, r24
    2d42:	99 06       	cpc	r9, r25
    2d44:	aa 06       	cpc	r10, r26
    2d46:	bb 06       	cpc	r11, r27
    2d48:	70 f4       	brcc	.+28     	; 0x2d66 <prvSampleTimeNow+0xae>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
    2d4a:	8a 83       	std	Y+2, r24	; 0x02
    2d4c:	9b 83       	std	Y+3, r25	; 0x03
    2d4e:	ac 83       	std	Y+4, r26	; 0x04
    2d50:	bd 83       	std	Y+5, r27	; 0x05
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
    2d52:	db 87       	std	Y+11, r29	; 0x0b
    2d54:	ca 87       	std	Y+10, r28	; 0x0a
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
    2d56:	b8 01       	movw	r22, r16
    2d58:	80 91 9f 15 	lds	r24, 0x159F	; 0x80159f <pxCurrentTimerList>
    2d5c:	90 91 a0 15 	lds	r25, 0x15A0	; 0x8015a0 <pxCurrentTimerList+0x1>
    2d60:	0e 94 ce 03 	call	0x79c	; 0x79c <vListInsert>
    2d64:	0a c0       	rjmp	.+20     	; 0x2d7a <prvSampleTimeNow+0xc2>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
    2d66:	c1 2c       	mov	r12, r1
    2d68:	d1 2c       	mov	r13, r1
    2d6a:	76 01       	movw	r14, r12
    2d6c:	00 e0       	ldi	r16, 0x00	; 0
    2d6e:	10 e0       	ldi	r17, 0x00	; 0
    2d70:	a5 01       	movw	r20, r10
    2d72:	94 01       	movw	r18, r8
    2d74:	60 e0       	ldi	r22, 0x00	; 0
    2d76:	ce 01       	movw	r24, r28
    2d78:	41 df       	rcall	.-382    	; 0x2bfc <xTimerGenericCommand>

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
    2d7a:	e0 91 9f 15 	lds	r30, 0x159F	; 0x80159f <pxCurrentTimerList>
    2d7e:	f0 91 a0 15 	lds	r31, 0x15A0	; 0x8015a0 <pxCurrentTimerList+0x1>
    2d82:	80 81       	ld	r24, Z
    2d84:	81 11       	cpse	r24, r1
    2d86:	be cf       	rjmp	.-132    	; 0x2d04 <prvSampleTimeNow+0x4c>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
        pxCurrentTimerList = pxOverflowTimerList;
    2d88:	80 91 9d 15 	lds	r24, 0x159D	; 0x80159d <pxOverflowTimerList>
    2d8c:	90 91 9e 15 	lds	r25, 0x159E	; 0x80159e <pxOverflowTimerList+0x1>
    2d90:	90 93 a0 15 	sts	0x15A0, r25	; 0x8015a0 <pxCurrentTimerList+0x1>
    2d94:	80 93 9f 15 	sts	0x159F, r24	; 0x80159f <pxCurrentTimerList>
        pxOverflowTimerList = pxTemp;
    2d98:	f0 93 9e 15 	sts	0x159E, r31	; 0x80159e <pxOverflowTimerList+0x1>
    2d9c:	e0 93 9d 15 	sts	0x159D, r30	; 0x80159d <pxOverflowTimerList>
        xTimeNow = xTaskGetTickCount();

        if( xTimeNow < xLastTime )
        {
            prvSwitchTimerLists();
            *pxTimerListsWereSwitched = pdTRUE;
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	f1 01       	movw	r30, r2
    2da4:	80 83       	st	Z, r24
    2da6:	02 c0       	rjmp	.+4      	; 0x2dac <prvSampleTimeNow+0xf4>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
    2da8:	f1 01       	movw	r30, r2
    2daa:	10 82       	st	Z, r1
        }

        xLastTime = xTimeNow;
    2dac:	40 92 95 15 	sts	0x1595, r4	; 0x801595 <xLastTime.2436>
    2db0:	50 92 96 15 	sts	0x1596, r5	; 0x801596 <xLastTime.2436+0x1>
    2db4:	60 92 97 15 	sts	0x1597, r6	; 0x801597 <xLastTime.2436+0x2>
    2db8:	70 92 98 15 	sts	0x1598, r7	; 0x801598 <xLastTime.2436+0x3>

        return xTimeNow;
    }
    2dbc:	c3 01       	movw	r24, r6
    2dbe:	b2 01       	movw	r22, r4
    2dc0:	df 91       	pop	r29
    2dc2:	cf 91       	pop	r28
    2dc4:	1f 91       	pop	r17
    2dc6:	0f 91       	pop	r16
    2dc8:	ff 90       	pop	r15
    2dca:	ef 90       	pop	r14
    2dcc:	df 90       	pop	r13
    2dce:	cf 90       	pop	r12
    2dd0:	bf 90       	pop	r11
    2dd2:	af 90       	pop	r10
    2dd4:	9f 90       	pop	r9
    2dd6:	8f 90       	pop	r8
    2dd8:	7f 90       	pop	r7
    2dda:	6f 90       	pop	r6
    2ddc:	5f 90       	pop	r5
    2dde:	4f 90       	pop	r4
    2de0:	3f 90       	pop	r3
    2de2:	2f 90       	pop	r2
    2de4:	08 95       	ret

00002de6 <vApplicationIdleHook>:
 *
 */
void vApplicationIdleHook( void ) __attribute__((weak));

void vApplicationIdleHook( void )
{
    2de6:	08 95       	ret

00002de8 <prvSetMainLedOn>:
 * Private function to enable board led to use it in application hooks
 */
void prvSetMainLedOn( void ) 
{
#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__) // Arduino Mega with 2560
    DDRB  |= _BV(DDB7);
    2de8:	27 9a       	sbi	0x04, 7	; 4
    PORTB |= _BV(PORTB7);       // Main (red PB7) LED on. Main LED on.
    2dea:	2f 9a       	sbi	0x05, 7	; 5
    2dec:	08 95       	ret

00002dee <prvBlinkMainLed>:
 */
void prvBlinkMainLed( void ) 
{

#if defined(__AVR_ATmega640__) || defined(__AVR_ATmega1280__) || defined(__AVR_ATmega1281__) || defined(__AVR_ATmega2560__) || defined(__AVR_ATmega2561__)  // Mega with 2560
        PINB  |= _BV(PINB7);       // Main (red PB7) LED toggle.
    2dee:	1f 9a       	sbi	0x03, 7	; 3
    2df0:	08 95       	ret

00002df2 <vApplicationMallocFailedHook>:
\*---------------------------------------------------------------------------*/
void vApplicationMallocFailedHook( void ) __attribute__((weak));

void vApplicationMallocFailedHook( void )
{
    prvSetMainLedOn(); // Main LED on.
    2df2:	fa df       	rcall	.-12     	; 0x2de8 <prvSetMainLedOn>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2df4:	2f ef       	ldi	r18, 0xFF	; 255
    2df6:	80 e7       	ldi	r24, 0x70	; 112
    2df8:	92 e0       	ldi	r25, 0x02	; 2
    2dfa:	21 50       	subi	r18, 0x01	; 1
    2dfc:	80 40       	sbci	r24, 0x00	; 0
    2dfe:	90 40       	sbci	r25, 0x00	; 0
    2e00:	e1 f7       	brne	.-8      	; 0x2dfa <vApplicationMallocFailedHook+0x8>
    2e02:	00 c0       	rjmp	.+0      	; 0x2e04 <vApplicationMallocFailedHook+0x12>
    
    for(;;)
    {
        _delay_ms(50);
        prvBlinkMainLed(); // Main LED fast blink.
    2e04:	00 00       	nop
    2e06:	f3 df       	rcall	.-26     	; 0x2dee <prvBlinkMainLed>
    2e08:	f5 cf       	rjmp	.-22     	; 0x2df4 <vApplicationMallocFailedHook+0x2>

00002e0a <vApplicationStackOverflowHook>:

void vApplicationStackOverflowHook( TaskHandle_t xTask __attribute__((unused)),
                                    char * pcTaskName __attribute__((unused)) )
{

    prvSetMainLedOn(); // Main LED on.
    2e0a:	ee df       	rcall	.-36     	; 0x2de8 <prvSetMainLedOn>
    2e0c:	2f ef       	ldi	r18, 0xFF	; 255
    2e0e:	87 ea       	ldi	r24, 0xA7	; 167
    2e10:	91 e6       	ldi	r25, 0x61	; 97
    2e12:	21 50       	subi	r18, 0x01	; 1
    2e14:	80 40       	sbci	r24, 0x00	; 0
    2e16:	90 40       	sbci	r25, 0x00	; 0
    2e18:	e1 f7       	brne	.-8      	; 0x2e12 <vApplicationStackOverflowHook+0x8>
    2e1a:	00 c0       	rjmp	.+0      	; 0x2e1c <vApplicationStackOverflowHook+0x12>

    for(;;)
    {
        _delay_ms(2000);
        prvBlinkMainLed();  // Main LED slow blink.
    2e1c:	00 00       	nop
    2e1e:	e7 df       	rcall	.-50     	; 0x2dee <prvBlinkMainLed>
    2e20:	f5 cf       	rjmp	.-22     	; 0x2e0c <vApplicationStackOverflowHook+0x2>

00002e22 <sendData>:
		NULL);
}

/*-----------------------------------------------------------*/
void sendData(void *pvParameters)
{
    2e22:	cf 93       	push	r28
    2e24:	df 93       	push	r29
    2e26:	cd b7       	in	r28, 0x3d	; 61
    2e28:	de b7       	in	r29, 0x3e	; 62
    2e2a:	a6 97       	sbiw	r28, 0x26	; 38
    2e2c:	0f b6       	in	r0, 0x3f	; 63
    2e2e:	f8 94       	cli
    2e30:	de bf       	out	0x3e, r29	; 62
    2e32:	0f be       	out	0x3f, r0	; 63
    2e34:	cd bf       	out	0x3d, r28	; 61
	TickType_t xLastWakeTime;
	const TickType_t xFrequency = 300000 / portTICK_PERIOD_MS;

	xLastWakeTime = xTaskGetTickCount();
    2e36:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <xTaskGetTickCount>
    2e3a:	69 83       	std	Y+1, r22	; 0x01
    2e3c:	7a 83       	std	Y+2, r23	; 0x02
    2e3e:	8b 83       	std	Y+3, r24	; 0x03
    2e40:	9c 83       	std	Y+4, r25	; 0x04
		

		puts("Uploading values");
		lora_driver_payload_t uplink_payload;
		// Setting up amount of data points
		uplink_payload.len = 3;	   // Length of the actual payload
    2e42:	03 e0       	ldi	r16, 0x03	; 3
		uplink_payload.portNo = 1; // The LoRaWANport no to sent the message to
    2e44:	11 e0       	ldi	r17, 0x01	; 1

	xLastWakeTime = xTaskGetTickCount();

	for (;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    2e46:	4e e3       	ldi	r20, 0x3E	; 62
    2e48:	59 e4       	ldi	r21, 0x49	; 73
    2e4a:	60 e0       	ldi	r22, 0x00	; 0
    2e4c:	70 e0       	ldi	r23, 0x00	; 0
    2e4e:	ce 01       	movw	r24, r28
    2e50:	01 96       	adiw	r24, 0x01	; 1
    2e52:	7f d8       	rcall	.-3842   	; 0x1f52 <xTaskDelayUntil>
		
		float data[3] = {0,0,0};
    2e54:	1b 8e       	std	Y+27, r1	; 0x1b
    2e56:	1c 8e       	std	Y+28, r1	; 0x1c
    2e58:	1d 8e       	std	Y+29, r1	; 0x1d
    2e5a:	1e 8e       	std	Y+30, r1	; 0x1e
    2e5c:	1f 8e       	std	Y+31, r1	; 0x1f
    2e5e:	18 a2       	std	Y+32, r1	; 0x20
    2e60:	19 a2       	std	Y+33, r1	; 0x21
    2e62:	1a a2       	std	Y+34, r1	; 0x22
    2e64:	1b a2       	std	Y+35, r1	; 0x23
    2e66:	1c a2       	std	Y+36, r1	; 0x24
    2e68:	1d a2       	std	Y+37, r1	; 0x25
    2e6a:	1e a2       	std	Y+38, r1	; 0x26

		sensor_getSensorData(data);
    2e6c:	ce 01       	movw	r24, r28
    2e6e:	4b 96       	adiw	r24, 0x1b	; 27
    2e70:	77 d0       	rcall	.+238    	; 0x2f60 <sensor_getSensorData>
		

		puts("Uploading values");
    2e72:	8c e7       	ldi	r24, 0x7C	; 124
    2e74:	92 e0       	ldi	r25, 0x02	; 2
    2e76:	0e 94 ff 29 	call	0x53fe	; 0x53fe <puts>
		lora_driver_payload_t uplink_payload;
		// Setting up amount of data points
		uplink_payload.len = 3;	   // Length of the actual payload
    2e7a:	0e 83       	std	Y+6, r16	; 0x06
		uplink_payload.portNo = 1; // The LoRaWANport no to sent the message to
    2e7c:	1d 83       	std	Y+5, r17	; 0x05

		uplink_payload.bytes[0] = data[0];
    2e7e:	6b 8d       	ldd	r22, Y+27	; 0x1b
    2e80:	7c 8d       	ldd	r23, Y+28	; 0x1c
    2e82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2e84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2e86:	f4 d1       	rcall	.+1000   	; 0x3270 <__fixunssfsi>
    2e88:	6f 83       	std	Y+7, r22	; 0x07
		uplink_payload.bytes[1] = data[1];
    2e8a:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2e8c:	78 a1       	ldd	r23, Y+32	; 0x20
    2e8e:	89 a1       	ldd	r24, Y+33	; 0x21
    2e90:	9a a1       	ldd	r25, Y+34	; 0x22
    2e92:	ee d1       	rcall	.+988    	; 0x3270 <__fixunssfsi>
    2e94:	68 87       	std	Y+8, r22	; 0x08
		uplink_payload.bytes[2] = data[2];
    2e96:	6b a1       	ldd	r22, Y+35	; 0x23
    2e98:	7c a1       	ldd	r23, Y+36	; 0x24
    2e9a:	8d a1       	ldd	r24, Y+37	; 0x25
    2e9c:	9e a1       	ldd	r25, Y+38	; 0x26
    2e9e:	e8 d1       	rcall	.+976    	; 0x3270 <__fixunssfsi>
    2ea0:	69 87       	std	Y+9, r22	; 0x09

		lora_driver_sendUploadMessage(false, &uplink_payload);
    2ea2:	be 01       	movw	r22, r28
    2ea4:	6b 5f       	subi	r22, 0xFB	; 251
    2ea6:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea8:	80 e0       	ldi	r24, 0x00	; 0
    2eaa:	0d d5       	rcall	.+2586   	; 0x38c6 <lora_driver_sendUploadMessage>
    2eac:	cc cf       	rjmp	.-104    	; 0x2e46 <sendData+0x24>

00002eae <create_tasks_and_semaphores>:
float humidity = 0.0;
float temperature = 0.0;

/*-----------------------------------------------------------*/
void create_tasks_and_semaphores(void)
{
    2eae:	ef 92       	push	r14
    2eb0:	ff 92       	push	r15
    2eb2:	0f 93       	push	r16
	// Semaphores are useful to stop a Task proceeding, where it should be paused to wait,
	// because it is sharing a resource, such as the Serial port.
	// Semaphores should only be used whilst the scheduler is running, but we can set it up here.
	if (xTestSemaphore == NULL) // Check to confirm that the Semaphore has not already been created.
    2eb4:	80 91 fc 16 	lds	r24, 0x16FC	; 0x8016fc <xTestSemaphore>
    2eb8:	90 91 fd 16 	lds	r25, 0x16FD	; 0x8016fd <xTestSemaphore+0x1>
    2ebc:	89 2b       	or	r24, r25
    2ebe:	89 f4       	brne	.+34     	; 0x2ee2 <create_tasks_and_semaphores+0x34>
	{
		xTestSemaphore = xSemaphoreCreateMutex(); // Create a mutex semaphore.
    2ec0:	81 e0       	ldi	r24, 0x01	; 1
    2ec2:	0e 94 22 07 	call	0xe44	; 0xe44 <xQueueCreateMutex>
    2ec6:	90 93 fd 16 	sts	0x16FD, r25	; 0x8016fd <xTestSemaphore+0x1>
    2eca:	80 93 fc 16 	sts	0x16FC, r24	; 0x8016fc <xTestSemaphore>
		if ((xTestSemaphore) != NULL)
    2ece:	00 97       	sbiw	r24, 0x00	; 0
    2ed0:	41 f0       	breq	.+16     	; 0x2ee2 <create_tasks_and_semaphores+0x34>
		{
			xSemaphoreGive((xTestSemaphore)); // Make the mutex available for use, by initially "Giving" the Semaphore.
    2ed2:	00 e0       	ldi	r16, 0x00	; 0
    2ed4:	20 e0       	ldi	r18, 0x00	; 0
    2ed6:	30 e0       	ldi	r19, 0x00	; 0
    2ed8:	a9 01       	movw	r20, r18
    2eda:	60 e0       	ldi	r22, 0x00	; 0
    2edc:	70 e0       	ldi	r23, 0x00	; 0
    2ede:	0e 94 82 06 	call	0xd04	; 0xd04 <xQueueGenericSend>
		}
	}

	xTaskCreate(
    2ee2:	e1 2c       	mov	r14, r1
    2ee4:	f1 2c       	mov	r15, r1
    2ee6:	03 e0       	ldi	r16, 0x03	; 3
    2ee8:	20 e0       	ldi	r18, 0x00	; 0
    2eea:	30 e0       	ldi	r19, 0x00	; 0
    2eec:	40 ec       	ldi	r20, 0xC0	; 192
    2eee:	50 e0       	ldi	r21, 0x00	; 0
    2ef0:	6d e8       	ldi	r22, 0x8D	; 141
    2ef2:	72 e0       	ldi	r23, 0x02	; 2
    2ef4:	81 e1       	ldi	r24, 0x11	; 17
    2ef6:	97 e1       	ldi	r25, 0x17	; 23
    2ef8:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskCreate>
		"sendData",
		configMINIMAL_STACK_SIZE,
		NULL,
		3,
		NULL);
}
    2efc:	0f 91       	pop	r16
    2efe:	ff 90       	pop	r15
    2f00:	ef 90       	pop	r14
    2f02:	08 95       	ret

00002f04 <initialiseDrivers>:

void initialiseDrivers()
{

	// HIH8120 initialization
	if (HIH8120_OK == hih8120_initialise())
    2f04:	74 d2       	rcall	.+1256   	; 0x33ee <hih8120_initialise>
		// Driver initialised OK
		// Always check what hih8120_initialise() returns
	}

	// // MH-Z19 initialization (default USART port is USART3)
	mh_z19_initialise(ser_USART3);
    2f06:	83 e0       	ldi	r24, 0x03	; 3
    2f08:	a7 c7       	rjmp	.+3918   	; 0x3e58 <mh_z19_initialise>
    2f0a:	08 95       	ret

00002f0c <initialiseSystem>:
/*-----------------------------------------------------------*/

void initialiseSystem()
{
	// Set output ports for leds used in the example
	DDRA |= _BV(DDA0) | _BV(DDA7);
    2f0c:	81 b1       	in	r24, 0x01	; 1
    2f0e:	81 68       	ori	r24, 0x81	; 129
    2f10:	81 b9       	out	0x01, r24	; 1

	// initialise trace driver
	trace_init();
    2f12:	0e 94 69 02 	call	0x4d2	; 0x4d2 <trace_init>

	// Make it possible to use stdio on COM port 0 (USB) on Arduino board - Setting 57600,8,N,1
	stdio_initialise(ser_USART0);
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	0e 94 48 23 	call	0x4690	; 0x4690 <stdio_initialise>
	// Let's create some tasks

	// initialiseDrivers - handles driver initailazation for modules HIH8120, MH-Z19
	initialiseDrivers();
    2f1c:	f3 df       	rcall	.-26     	; 0x2f04 <initialiseDrivers>

	create_tasks_and_semaphores();
    2f1e:	c7 df       	rcall	.-114    	; 0x2eae <create_tasks_and_semaphores>
    2f20:	85 e0       	ldi	r24, 0x05	; 5

	// vvvvvvvvvvvvvvvvv BELOW IS LoRaWAN initialisation vvvvvvvvvvvvvvvvvvvvvvvvvvvvvv
	// Status Leds driver
	status_leds_initialise(5); // Priority 5 for internal task
    2f22:	0e 94 4f 24 	call	0x489e	; 0x489e <status_leds_initialise>
    2f26:	60 e0       	ldi	r22, 0x00	; 0
	// Initialise the LoRaWAN driver without down-link buffer
	lora_driver_initialise(1, NULL);
    2f28:	70 e0       	ldi	r23, 0x00	; 0
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	ee d3       	rcall	.+2012   	; 0x370a <lora_driver_initialise>
	// Create LoRaWAN task and start it up with priority 3
	lora_handler_initialise(3);
    2f2e:	83 e0       	ldi	r24, 0x03	; 3
    2f30:	8b c1       	rjmp	.+790    	; 0x3248 <lora_handler_initialise>
    2f32:	08 95       	ret

00002f34 <main>:
    2f34:	eb df       	rcall	.-42     	; 0x2f0c <initialiseSystem>

/*-----------------------------------------------------------*/
int main(void)
{
	initialiseSystem(); // Must be done as the very first thing!!
	printf("Program started!!\n");
    2f36:	86 e9       	ldi	r24, 0x96	; 150
    2f38:	92 e0       	ldi	r25, 0x02	; 2
    2f3a:	0e 94 ff 29 	call	0x53fe	; 0x53fe <puts>
	vTaskStartScheduler(); // Initialise and run the freeRTOS scheduler. Execution should never return from here.
    2f3e:	0e 94 47 0d 	call	0x1a8e	; 0x1a8e <vTaskStartScheduler>
    2f42:	ff cf       	rjmp	.-2      	; 0x2f42 <main+0xe>

00002f44 <sensor_wakeUp>:

#include "SensorReading.h"


float sensor_wakeUp() {
    hih8120_driverReturnCode_t wake_rc = hih8120_wakeup();
    2f44:	6f d2       	rcall	.+1246   	; 0x3424 <hih8120_wakeup>

    printf("HIH8120 Wake up status: %c\n", wake_rc);
    2f46:	1f 92       	push	r1
    2f48:	8f 93       	push	r24
    2f4a:	88 ea       	ldi	r24, 0xA8	; 168
    2f4c:	92 e0       	ldi	r25, 0x02	; 2
    2f4e:	9f 93       	push	r25
    2f50:	8f 93       	push	r24
    2f52:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
}
    2f56:	0f 90       	pop	r0
    2f58:	0f 90       	pop	r0
    2f5a:	0f 90       	pop	r0
    2f5c:	0f 90       	pop	r0
    2f5e:	08 95       	ret

00002f60 <sensor_getSensorData>:

void *sensor_getSensorData(float *dataCollection) {
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	1f 92       	push	r1
    2f6a:	1f 92       	push	r1
    2f6c:	cd b7       	in	r28, 0x3d	; 61
    2f6e:	de b7       	in	r29, 0x3e	; 62
    2f70:	8c 01       	movw	r16, r24

    sensor_wakeUp();
    2f72:	e8 df       	rcall	.-48     	; 0x2f44 <sensor_wakeUp>
    2f74:	2f ef       	ldi	r18, 0xFF	; 255
    2f76:	8d ee       	ldi	r24, 0xED	; 237
    2f78:	92 e0       	ldi	r25, 0x02	; 2
    2f7a:	21 50       	subi	r18, 0x01	; 1
    2f7c:	80 40       	sbci	r24, 0x00	; 0
    2f7e:	90 40       	sbci	r25, 0x00	; 0
    2f80:	e1 f7       	brne	.-8      	; 0x2f7a <sensor_getSensorData+0x1a>
    2f82:	00 c0       	rjmp	.+0      	; 0x2f84 <sensor_getSensorData+0x24>

    _delay_ms(60);

    hih8120_driverReturnCode_t measure_rc = hih8120_measure();
    2f84:	00 00       	nop
    2f86:	63 d2       	rcall	.+1222   	; 0x344e <hih8120_measure>

    printf("HIH8120 Measure status: %c\n", measure_rc);
    2f88:	1f 92       	push	r1
    2f8a:	8f 93       	push	r24
    2f8c:	84 ec       	ldi	r24, 0xC4	; 196
    2f8e:	92 e0       	ldi	r25, 0x02	; 2
    2f90:	9f 93       	push	r25
    2f92:	8f 93       	push	r24
    2f94:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>

    while (hih8120_isReady())
    2f98:	0f 90       	pop	r0
    2f9a:	0f 90       	pop	r0
    2f9c:	0f 90       	pop	r0
    2f9e:	0f 90       	pop	r0
    2fa0:	09 c0       	rjmp	.+18     	; 0x2fb4 <sensor_getSensorData+0x54>
    2fa2:	ef ef       	ldi	r30, 0xFF	; 255
    2fa4:	fd ee       	ldi	r31, 0xED	; 237
    2fa6:	22 e0       	ldi	r18, 0x02	; 2
    2fa8:	e1 50       	subi	r30, 0x01	; 1
    2faa:	f0 40       	sbci	r31, 0x00	; 0
    2fac:	20 40       	sbci	r18, 0x00	; 0
    2fae:	e1 f7       	brne	.-8      	; 0x2fa8 <sensor_getSensorData+0x48>
    2fb0:	00 c0       	rjmp	.+0      	; 0x2fb2 <sensor_getSensorData+0x52>
    2fb2:	00 00       	nop
    2fb4:	34 d2       	rcall	.+1128   	; 0x341e <hih8120_isReady>
    2fb6:	81 11       	cpse	r24, r1
    {
        _delay_ms(60);
    }
    

	dataCollection[0] = hih8120_getHumidity();
    2fb8:	f4 cf       	rjmp	.-24     	; 0x2fa2 <sensor_getSensorData+0x42>
    2fba:	5a d2       	rcall	.+1204   	; 0x3470 <hih8120_getHumidity>
    2fbc:	f8 01       	movw	r30, r16
    2fbe:	60 83       	st	Z, r22
    2fc0:	71 83       	std	Z+1, r23	; 0x01
    2fc2:	82 83       	std	Z+2, r24	; 0x02
	dataCollection[1] = hih8120_getTemperature();
    2fc4:	93 83       	std	Z+3, r25	; 0x03
    2fc6:	68 d2       	rcall	.+1232   	; 0x3498 <hih8120_getTemperature>
    2fc8:	f8 01       	movw	r30, r16
    2fca:	64 83       	std	Z+4, r22	; 0x04
    2fcc:	75 83       	std	Z+5, r23	; 0x05
    2fce:	86 83       	std	Z+6, r24	; 0x06

    uint16_t ppm;
    mh_z19_returnCode_t co2_rc = mh_z19_takeMeassuring();
    2fd0:	97 83       	std	Z+7, r25	; 0x07
    2fd2:	67 d7       	rcall	.+3790   	; 0x3ea2 <mh_z19_takeMeassuring>
    printf("MH_Z19 Measure status: %c", co2_rc);
    2fd4:	1f 92       	push	r1
    2fd6:	8f 93       	push	r24
    2fd8:	80 ee       	ldi	r24, 0xE0	; 224
    2fda:	92 e0       	ldi	r25, 0x02	; 2
    2fdc:	9f 93       	push	r25
    2fde:	8f 93       	push	r24
    2fe0:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
    
    mh_z19_getCo2Ppm(&ppm);
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	01 96       	adiw	r24, 0x01	; 1

    dataCollection[2] = (float)ppm;
    2fe8:	8b d7       	rcall	.+3862   	; 0x3f00 <mh_z19_getCo2Ppm>
    2fea:	69 81       	ldd	r22, Y+1	; 0x01
    2fec:	7a 81       	ldd	r23, Y+2	; 0x02
    2fee:	80 e0       	ldi	r24, 0x00	; 0
    2ff0:	90 e0       	ldi	r25, 0x00	; 0
    2ff2:	6a d1       	rcall	.+724    	; 0x32c8 <__floatunsisf>
    2ff4:	f8 01       	movw	r30, r16
    2ff6:	60 87       	std	Z+8, r22	; 0x08
    2ff8:	71 87       	std	Z+9, r23	; 0x09
    2ffa:	82 87       	std	Z+10, r24	; 0x0a
    2ffc:	93 87       	std	Z+11, r25	; 0x0b
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	0f 90       	pop	r0
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	df 91       	pop	r29
    300c:	cf 91       	pop	r28
    300e:	1f 91       	pop	r17
    3010:	0f 91       	pop	r16
    3012:	08 95       	ret

00003014 <lora_handler_task>:
	}
}

/*-----------------------------------------------------------*/
void lora_handler_task( void *pvParameters )
{
    3014:	cf 93       	push	r28
    3016:	df 93       	push	r29
    3018:	cd b7       	in	r28, 0x3d	; 61
    301a:	de b7       	in	r29, 0x3e	; 62
    301c:	68 97       	sbiw	r28, 0x18	; 24
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
	// Hardware reset of LoRaWAN transceiver
	lora_driver_resetRn2483(1);
    3028:	81 e0       	ldi	r24, 0x01	; 1
    302a:	af d3       	rcall	.+1886   	; 0x378a <lora_driver_resetRn2483>
	vTaskDelay(2);
    302c:	62 e0       	ldi	r22, 0x02	; 2
    302e:	70 e0       	ldi	r23, 0x00	; 0
    3030:	80 e0       	ldi	r24, 0x00	; 0
    3032:	90 e0       	ldi	r25, 0x00	; 0
    3034:	0e 94 13 10 	call	0x2026	; 0x2026 <vTaskDelay>
	lora_driver_resetRn2483(0);
    3038:	80 e0       	ldi	r24, 0x00	; 0
    303a:	a7 d3       	rcall	.+1870   	; 0x378a <lora_driver_resetRn2483>
	// Give it a chance to wakeup
	vTaskDelay(150);
    303c:	66 e9       	ldi	r22, 0x96	; 150
    303e:	70 e0       	ldi	r23, 0x00	; 0
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	0e 94 13 10 	call	0x2026	; 0x2026 <vTaskDelay>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!
    3048:	59 d3       	rcall	.+1714   	; 0x36fc <lora_driver_flushBuffers>

static void _lora_setup(void)
{
	char _out_buf[20];
	lora_driver_returnCode_t rc;
	status_leds_slowBlink(led_ST2); // OPTIONAL: Led the green led blink slowly while we are setting up LoRa
    304a:	81 e0       	ldi	r24, 0x01	; 1

	// Factory reset the transceiver
	printf("FactoryReset >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_rn2483FactoryReset()));
    304c:	0e 94 9d 24 	call	0x493a	; 0x493a <status_leds_slowBlink>
    3050:	aa d3       	rcall	.+1876   	; 0x37a6 <lora_driver_rn2483FactoryReset>
    3052:	26 d6       	rcall	.+3148   	; 0x3ca0 <lora_driver_mapReturnCodeToText>
    3054:	9f 93       	push	r25
    3056:	8f 93       	push	r24
    3058:	8a ef       	ldi	r24, 0xFA	; 250
    305a:	92 e0       	ldi	r25, 0x02	; 2
    305c:	9f 93       	push	r25
    305e:	8f 93       	push	r24
	
	// Configure to EU868 LoRaWAN standards
	printf("Configure to EU868 >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_configureToEu868()));
    3060:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
    3064:	1e d5       	rcall	.+2620   	; 0x3aa2 <lora_driver_configureToEu868>
    3066:	1c d6       	rcall	.+3128   	; 0x3ca0 <lora_driver_mapReturnCodeToText>
    3068:	9f 93       	push	r25
    306a:	8f 93       	push	r24
    306c:	8d e0       	ldi	r24, 0x0D	; 13
    306e:	93 e0       	ldi	r25, 0x03	; 3
    3070:	9f 93       	push	r25
    3072:	8f 93       	push	r24

	// Get the transceivers HW EUI
	rc = lora_driver_getRn2483Hweui(_out_buf);
    3074:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
    3078:	8e 01       	movw	r16, r28
    307a:	0b 5f       	subi	r16, 0xFB	; 251
    307c:	1f 4f       	sbci	r17, 0xFF	; 255
    307e:	c8 01       	movw	r24, r16
	printf("Get HWEUI >%s<: %s\n",lora_driver_mapReturnCodeToText(rc), _out_buf);
    3080:	a4 d3       	rcall	.+1864   	; 0x37ca <lora_driver_getRn2483Hweui>
    3082:	0e d6       	rcall	.+3100   	; 0x3ca0 <lora_driver_mapReturnCodeToText>
    3084:	1f 93       	push	r17
    3086:	0f 93       	push	r16
    3088:	9f 93       	push	r25
    308a:	8f 93       	push	r24
    308c:	86 e2       	ldi	r24, 0x26	; 38
    308e:	93 e0       	ldi	r25, 0x03	; 3
    3090:	9f 93       	push	r25
    3092:	8f 93       	push	r24

	// Set the HWEUI as DevEUI in the LoRaWAN software stack in the transceiver
	printf("Set DevEUI: %s >%s<\n", _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setDeviceIdentifier(_out_buf)));
    3094:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
    3098:	c8 01       	movw	r24, r16
    309a:	b3 d3       	rcall	.+1894   	; 0x3802 <lora_driver_setDeviceIdentifier>
    309c:	01 d6       	rcall	.+3074   	; 0x3ca0 <lora_driver_mapReturnCodeToText>
    309e:	9f 93       	push	r25
    30a0:	8f 93       	push	r24
    30a2:	1f 93       	push	r17
    30a4:	0f 93       	push	r16
    30a6:	8a e3       	ldi	r24, 0x3A	; 58
    30a8:	93 e0       	ldi	r25, 0x03	; 3
    30aa:	9f 93       	push	r25
    30ac:	8f 93       	push	r24

	// Set Over The Air Activation parameters to be ready to join the LoRaWAN
	printf("Set OTAA Identity appEUI:%s appKEY:%s devEUI:%s >%s<\n", LORA_appEUI, LORA_appKEY, _out_buf, lora_driver_mapReturnCodeToText(lora_driver_setOtaaIdentity(LORA_appEUI,LORA_appKEY,_out_buf)));
    30ae:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
    30b2:	a8 01       	movw	r20, r16
    30b4:	6f e4       	ldi	r22, 0x4F	; 79
    30b6:	73 e0       	ldi	r23, 0x03	; 3
    30b8:	80 e7       	ldi	r24, 0x70	; 112
    30ba:	93 e0       	ldi	r25, 0x03	; 3
    30bc:	d0 d5       	rcall	.+2976   	; 0x3c5e <lora_driver_setOtaaIdentity>
    30be:	f0 d5       	rcall	.+3040   	; 0x3ca0 <lora_driver_mapReturnCodeToText>
    30c0:	9f 93       	push	r25
    30c2:	8f 93       	push	r24
    30c4:	1f 93       	push	r17
    30c6:	0f 93       	push	r16
    30c8:	8f e4       	ldi	r24, 0x4F	; 79
    30ca:	93 e0       	ldi	r25, 0x03	; 3
    30cc:	9f 93       	push	r25
    30ce:	8f 93       	push	r24
    30d0:	80 e7       	ldi	r24, 0x70	; 112
    30d2:	93 e0       	ldi	r25, 0x03	; 3
    30d4:	9f 93       	push	r25
    30d6:	8f 93       	push	r24
    30d8:	81 e8       	ldi	r24, 0x81	; 129
    30da:	93 e0       	ldi	r25, 0x03	; 3
    30dc:	9f 93       	push	r25
    30de:	8f 93       	push	r24

	// Save all the MAC settings in the transceiver
	printf("Save mac >%s<\n",lora_driver_mapReturnCodeToText(lora_driver_saveMac()));
    30e0:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
    30e4:	c1 d3       	rcall	.+1922   	; 0x3868 <lora_driver_saveMac>
    30e6:	dc d5       	rcall	.+3000   	; 0x3ca0 <lora_driver_mapReturnCodeToText>
    30e8:	9f 93       	push	r25
    30ea:	8f 93       	push	r24
    30ec:	87 eb       	ldi	r24, 0xB7	; 183
    30ee:	93 e0       	ldi	r25, 0x03	; 3
    30f0:	9f 93       	push	r25
    30f2:	8f 93       	push	r24

	// Enable Adaptive Data Rate
	printf("Set Adaptive Data Rate: ON >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_setAdaptiveDataRate(LORA_ON)));
    30f4:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	81 e0       	ldi	r24, 0x01	; 1
    3104:	ab d4       	rcall	.+2390   	; 0x3a5c <lora_driver_setAdaptiveDataRate>
    3106:	cc d5       	rcall	.+2968   	; 0x3ca0 <lora_driver_mapReturnCodeToText>
    3108:	9f 93       	push	r25
    310a:	8f 93       	push	r24
    310c:	86 ec       	ldi	r24, 0xC6	; 198
    310e:	93 e0       	ldi	r25, 0x03	; 3
    3110:	9f 93       	push	r25
    3112:	8f 93       	push	r24

	// Set receiver window1 delay to 500 ms - this is needed if down-link messages will be used
	printf("Set Receiver Delay: %d ms >%s<\n", 500, lora_driver_mapReturnCodeToText(lora_driver_setReceiveDelay(500)));
    3114:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
    3118:	84 ef       	ldi	r24, 0xF4	; 244
    311a:	91 e0       	ldi	r25, 0x01	; 1
    311c:	aa d4       	rcall	.+2388   	; 0x3a72 <lora_driver_setReceiveDelay>
    311e:	c0 d5       	rcall	.+2944   	; 0x3ca0 <lora_driver_mapReturnCodeToText>
    3120:	9f 93       	push	r25
    3122:	8f 93       	push	r24
    3124:	81 e0       	ldi	r24, 0x01	; 1
    3126:	8f 93       	push	r24
    3128:	84 ef       	ldi	r24, 0xF4	; 244
    312a:	8f 93       	push	r24
    312c:	87 ee       	ldi	r24, 0xE7	; 231
    312e:	93 e0       	ldi	r25, 0x03	; 3
    3130:	9f 93       	push	r25
    3132:	8f 93       	push	r24
    3134:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3142:	0a e0       	ldi	r16, 0x0A	; 10
    3144:	10 e0       	ldi	r17, 0x00	; 0
    3146:	0f 2e       	mov	r0, r31
    3148:	f7 e0       	ldi	r31, 0x07	; 7
    314a:	ef 2e       	mov	r14, r31
    314c:	f4 e0       	ldi	r31, 0x04	; 4

	// Join the LoRaWAN
	uint8_t maxJoinTriesLeft = 10;
	
	do {
		rc = lora_driver_join(LORA_OTAA);
    314e:	ff 2e       	mov	r15, r31
    3150:	f0 2d       	mov	r31, r0
    3152:	80 e0       	ldi	r24, 0x00	; 0
    3154:	8f d3       	rcall	.+1822   	; 0x3874 <lora_driver_join>
		printf("Join Network TriesLeft:%d >%s<\n", maxJoinTriesLeft, lora_driver_mapReturnCodeToText(rc));
    3156:	d8 2e       	mov	r13, r24
    3158:	a3 d5       	rcall	.+2886   	; 0x3ca0 <lora_driver_mapReturnCodeToText>
    315a:	9f 93       	push	r25
    315c:	8f 93       	push	r24
    315e:	1f 93       	push	r17
    3160:	0f 93       	push	r16
    3162:	ff 92       	push	r15
    3164:	ef 92       	push	r14
    3166:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>

		if ( rc != LORA_ACCEPTED)
    316a:	0f 90       	pop	r0
    316c:	0f 90       	pop	r0
    316e:	0f 90       	pop	r0
    3170:	0f 90       	pop	r0
    3172:	0f 90       	pop	r0
    3174:	0f 90       	pop	r0
    3176:	f8 e0       	ldi	r31, 0x08	; 8
    3178:	df 16       	cp	r13, r31
    317a:	c1 f1       	breq	.+112    	; 0x31ec <lora_handler_task+0x1d8>
		{
			// Make the red led pulse to tell something went wrong
			status_leds_longPuls(led_ST1); // OPTIONAL
    317c:	80 e0       	ldi	r24, 0x00	; 0
    317e:	0e 94 01 25 	call	0x4a02	; 0x4a02 <status_leds_longPuls>
			// Wait 5 sec and lets try again
			vTaskDelay(pdMS_TO_TICKS(5000UL));
    3182:	66 e3       	ldi	r22, 0x36	; 54
    3184:	71 e0       	ldi	r23, 0x01	; 1
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	0e 94 13 10 	call	0x2026	; 0x2026 <vTaskDelay>
    318e:	01 50       	subi	r16, 0x01	; 1
    3190:	11 09       	sbc	r17, r1
		}
		else
		{
			break;
		}
	} while (--maxJoinTriesLeft);
    3192:	f9 f6       	brne	.-66     	; 0x3152 <lora_handler_task+0x13e>
    3194:	24 c0       	rjmp	.+72     	; 0x31de <lora_handler_task+0x1ca>
		status_leds_fastBlink(led_ST1); // OPTIONAL

		// Lets stay here
		while (1)
		{
			taskYIELD();
    3196:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
	
	for(;;)
	{
		xTaskDelayUntil( &xLastWakeTime, xFrequency );
    319a:	fd cf       	rjmp	.-6      	; 0x3196 <lora_handler_task+0x182>
    319c:	48 ea       	ldi	r20, 0xA8	; 168
    319e:	58 e4       	ldi	r21, 0x48	; 72
    31a0:	60 e0       	ldi	r22, 0x00	; 0
    31a2:	70 e0       	ldi	r23, 0x00	; 0
    31a4:	ce 01       	movw	r24, r28
    31a6:	01 96       	adiw	r24, 0x01	; 1
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    31a8:	0e 94 a9 0f 	call	0x1f52	; 0x1f52 <xTaskDelayUntil>
		_uplink_payload.bytes[1] = hum & 0xFF;
    31ac:	f8 01       	movw	r30, r16
		_uplink_payload.bytes[2] = temp >> 8;
    31ae:	82 82       	std	Z+2, r8	; 0x02
		_uplink_payload.bytes[3] = temp & 0xFF;
    31b0:	93 82       	std	Z+3, r9	; 0x03
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    31b2:	a4 82       	std	Z+4, r10	; 0x04
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    31b4:	b5 82       	std	Z+5, r11	; 0x05

		status_leds_shortPuls(led_ST4);  // OPTIONAL
    31b6:	c6 82       	std	Z+6, r12	; 0x06
    31b8:	d7 82       	std	Z+7, r13	; 0x07
    31ba:	83 e0       	ldi	r24, 0x03	; 3
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    31bc:	0e 94 13 25 	call	0x4a26	; 0x4a26 <status_leds_shortPuls>
    31c0:	b8 01       	movw	r22, r16
    31c2:	80 e0       	ldi	r24, 0x00	; 0
    31c4:	80 d3       	rcall	.+1792   	; 0x38c6 <lora_driver_sendUploadMessage>
    31c6:	6c d5       	rcall	.+2776   	; 0x3ca0 <lora_driver_mapReturnCodeToText>
    31c8:	9f 93       	push	r25
    31ca:	8f 93       	push	r24
    31cc:	ff 92       	push	r15
    31ce:	ef 92       	push	r14
    31d0:	0e 94 ec 29 	call	0x53d8	; 0x53d8 <printf>
    31d4:	0f 90       	pop	r0
    31d6:	0f 90       	pop	r0
    31d8:	0f 90       	pop	r0
    31da:	0f 90       	pop	r0
    31dc:	df cf       	rjmp	.-66     	; 0x319c <lora_handler_task+0x188>
	}
	else
	{
		// Something went wrong
		// Turn off the green led
		status_leds_ledOff(led_ST2); // OPTIONAL
    31de:	81 e0       	ldi	r24, 0x01	; 1
    31e0:	0e 94 f2 24 	call	0x49e4	; 0x49e4 <status_leds_ledOff>
		// Make the red led blink fast to tell something went wrong
		status_leds_fastBlink(led_ST1); // OPTIONAL
    31e4:	80 e0       	ldi	r24, 0x00	; 0
    31e6:	0e 94 c0 24 	call	0x4980	; 0x4980 <status_leds_fastBlink>
    31ea:	d5 cf       	rjmp	.-86     	; 0x3196 <lora_handler_task+0x182>

	if (rc == LORA_ACCEPTED)
	{
		// Connected to LoRaWAN :-)
		// Make the green led steady
		status_leds_ledOn(led_ST2); // OPTIONAL
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	0e 94 e3 24 	call	0x49c6	; 0x49c6 <status_leds_ledOn>

	lora_driver_flushBuffers(); // get rid of first version string from module after reset!

	_lora_setup();

	_uplink_payload.len = 6;
    31f2:	e7 eb       	ldi	r30, 0xB7	; 183
    31f4:	f5 e1       	ldi	r31, 0x15	; 21
    31f6:	86 e0       	ldi	r24, 0x06	; 6
    31f8:	81 83       	std	Z+1, r24	; 0x01
	_uplink_payload.portNo = 2;
    31fa:	82 e0       	ldi	r24, 0x02	; 2
    31fc:	80 83       	st	Z, r24

	TickType_t xLastWakeTime;
	const TickType_t xFrequency = pdMS_TO_TICKS(300000UL); // Upload message every 5 minutes (300000 ms)
	xLastWakeTime = xTaskGetTickCount();
    31fe:	0e 94 85 0d 	call	0x1b0a	; 0x1b0a <xTaskGetTickCount>
    3202:	69 83       	std	Y+1, r22	; 0x01
    3204:	7a 83       	std	Y+2, r23	; 0x02
    3206:	8b 83       	std	Y+3, r24	; 0x03
    3208:	9c 83       	std	Y+4, r25	; 0x04
		// Some dummy payload
		uint16_t hum = 12345; // Dummy humidity
		int16_t temp = 675; // Dummy temp
		uint16_t co2_ppm = 1050; // Dummy CO2

		_uplink_payload.bytes[0] = hum >> 8;
    320a:	07 eb       	ldi	r16, 0xB7	; 183
    320c:	15 e1       	ldi	r17, 0x15	; 21
    320e:	0f 2e       	mov	r0, r31
    3210:	f0 e3       	ldi	r31, 0x30	; 48
    3212:	8f 2e       	mov	r8, r31
    3214:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[1] = hum & 0xFF;
    3216:	0f 2e       	mov	r0, r31
    3218:	f9 e3       	ldi	r31, 0x39	; 57
    321a:	9f 2e       	mov	r9, r31
    321c:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[2] = temp >> 8;
    321e:	68 94       	set
    3220:	aa 24       	eor	r10, r10
    3222:	a1 f8       	bld	r10, 1
		_uplink_payload.bytes[3] = temp & 0xFF;
    3224:	0f 2e       	mov	r0, r31
    3226:	f3 ea       	ldi	r31, 0xA3	; 163
    3228:	bf 2e       	mov	r11, r31
    322a:	f0 2d       	mov	r31, r0
		_uplink_payload.bytes[4] = co2_ppm >> 8;
    322c:	68 94       	set
    322e:	cc 24       	eor	r12, r12
    3230:	c2 f8       	bld	r12, 2
		_uplink_payload.bytes[5] = co2_ppm & 0xFF;
    3232:	0f 2e       	mov	r0, r31
    3234:	fa e1       	ldi	r31, 0x1A	; 26
    3236:	df 2e       	mov	r13, r31
    3238:	f0 2d       	mov	r31, r0

		status_leds_shortPuls(led_ST4);  // OPTIONAL
		printf("Upload Message >%s<\n", lora_driver_mapReturnCodeToText(lora_driver_sendUploadMessage(false, &_uplink_payload)));
    323a:	0f 2e       	mov	r0, r31
    323c:	f7 e2       	ldi	r31, 0x27	; 39
    323e:	ef 2e       	mov	r14, r31
    3240:	f4 e0       	ldi	r31, 0x04	; 4
    3242:	ff 2e       	mov	r15, r31
    3244:	f0 2d       	mov	r31, r0
    3246:	aa cf       	rjmp	.-172    	; 0x319c <lora_handler_task+0x188>

00003248 <lora_handler_initialise>:
void lora_handler_task( void *pvParameters );

static lora_driver_payload_t _uplink_payload;

void lora_handler_initialise(UBaseType_t lora_handler_task_priority)
{
    3248:	ef 92       	push	r14
    324a:	ff 92       	push	r15
    324c:	0f 93       	push	r16
	xTaskCreate(
    324e:	e1 2c       	mov	r14, r1
    3250:	f1 2c       	mov	r15, r1
    3252:	08 2f       	mov	r16, r24
    3254:	20 e0       	ldi	r18, 0x00	; 0
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	48 e8       	ldi	r20, 0x88	; 136
    325a:	51 e0       	ldi	r21, 0x01	; 1
    325c:	6c e3       	ldi	r22, 0x3C	; 60
    325e:	74 e0       	ldi	r23, 0x04	; 4
    3260:	8a e0       	ldi	r24, 0x0A	; 10
    3262:	98 e1       	ldi	r25, 0x18	; 24
    3264:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskCreate>
	,  "LRHand"  // A name just for humans
	,  configMINIMAL_STACK_SIZE+200  // This stack size can be checked & adjusted by reading the Stack Highwater
	,  NULL
	,  lora_handler_task_priority  // Priority, with 3 (configMAX_PRIORITIES - 1) being the highest, and 0 being the lowest.
	,  NULL );
}
    3268:	0f 91       	pop	r16
    326a:	ff 90       	pop	r15
    326c:	ef 90       	pop	r14
    326e:	08 95       	ret

00003270 <__fixunssfsi>:
    3270:	70 d0       	rcall	.+224    	; 0x3352 <__fp_splitA>
    3272:	88 f0       	brcs	.+34     	; 0x3296 <__fixunssfsi+0x26>
    3274:	9f 57       	subi	r25, 0x7F	; 127
    3276:	90 f0       	brcs	.+36     	; 0x329c <__fixunssfsi+0x2c>
    3278:	b9 2f       	mov	r27, r25
    327a:	99 27       	eor	r25, r25
    327c:	b7 51       	subi	r27, 0x17	; 23
    327e:	a0 f0       	brcs	.+40     	; 0x32a8 <__fixunssfsi+0x38>
    3280:	d1 f0       	breq	.+52     	; 0x32b6 <__fixunssfsi+0x46>
    3282:	66 0f       	add	r22, r22
    3284:	77 1f       	adc	r23, r23
    3286:	88 1f       	adc	r24, r24
    3288:	99 1f       	adc	r25, r25
    328a:	1a f0       	brmi	.+6      	; 0x3292 <__fixunssfsi+0x22>
    328c:	ba 95       	dec	r27
    328e:	c9 f7       	brne	.-14     	; 0x3282 <__fixunssfsi+0x12>
    3290:	12 c0       	rjmp	.+36     	; 0x32b6 <__fixunssfsi+0x46>
    3292:	b1 30       	cpi	r27, 0x01	; 1
    3294:	81 f0       	breq	.+32     	; 0x32b6 <__fixunssfsi+0x46>
    3296:	77 d0       	rcall	.+238    	; 0x3386 <__fp_zero>
    3298:	b1 e0       	ldi	r27, 0x01	; 1
    329a:	08 95       	ret
    329c:	74 c0       	rjmp	.+232    	; 0x3386 <__fp_zero>
    329e:	67 2f       	mov	r22, r23
    32a0:	78 2f       	mov	r23, r24
    32a2:	88 27       	eor	r24, r24
    32a4:	b8 5f       	subi	r27, 0xF8	; 248
    32a6:	39 f0       	breq	.+14     	; 0x32b6 <__fixunssfsi+0x46>
    32a8:	b9 3f       	cpi	r27, 0xF9	; 249
    32aa:	cc f3       	brlt	.-14     	; 0x329e <__fixunssfsi+0x2e>
    32ac:	86 95       	lsr	r24
    32ae:	77 95       	ror	r23
    32b0:	67 95       	ror	r22
    32b2:	b3 95       	inc	r27
    32b4:	d9 f7       	brne	.-10     	; 0x32ac <__fixunssfsi+0x3c>
    32b6:	3e f4       	brtc	.+14     	; 0x32c6 <__fixunssfsi+0x56>
    32b8:	90 95       	com	r25
    32ba:	80 95       	com	r24
    32bc:	70 95       	com	r23
    32be:	61 95       	neg	r22
    32c0:	7f 4f       	sbci	r23, 0xFF	; 255
    32c2:	8f 4f       	sbci	r24, 0xFF	; 255
    32c4:	9f 4f       	sbci	r25, 0xFF	; 255
    32c6:	08 95       	ret

000032c8 <__floatunsisf>:
    32c8:	e8 94       	clt
    32ca:	09 c0       	rjmp	.+18     	; 0x32de <__floatsisf+0x12>

000032cc <__floatsisf>:
    32cc:	97 fb       	bst	r25, 7
    32ce:	3e f4       	brtc	.+14     	; 0x32de <__floatsisf+0x12>
    32d0:	90 95       	com	r25
    32d2:	80 95       	com	r24
    32d4:	70 95       	com	r23
    32d6:	61 95       	neg	r22
    32d8:	7f 4f       	sbci	r23, 0xFF	; 255
    32da:	8f 4f       	sbci	r24, 0xFF	; 255
    32dc:	9f 4f       	sbci	r25, 0xFF	; 255
    32de:	99 23       	and	r25, r25
    32e0:	a9 f0       	breq	.+42     	; 0x330c <__floatsisf+0x40>
    32e2:	f9 2f       	mov	r31, r25
    32e4:	96 e9       	ldi	r25, 0x96	; 150
    32e6:	bb 27       	eor	r27, r27
    32e8:	93 95       	inc	r25
    32ea:	f6 95       	lsr	r31
    32ec:	87 95       	ror	r24
    32ee:	77 95       	ror	r23
    32f0:	67 95       	ror	r22
    32f2:	b7 95       	ror	r27
    32f4:	f1 11       	cpse	r31, r1
    32f6:	f8 cf       	rjmp	.-16     	; 0x32e8 <__floatsisf+0x1c>
    32f8:	fa f4       	brpl	.+62     	; 0x3338 <__floatsisf+0x6c>
    32fa:	bb 0f       	add	r27, r27
    32fc:	11 f4       	brne	.+4      	; 0x3302 <__floatsisf+0x36>
    32fe:	60 ff       	sbrs	r22, 0
    3300:	1b c0       	rjmp	.+54     	; 0x3338 <__floatsisf+0x6c>
    3302:	6f 5f       	subi	r22, 0xFF	; 255
    3304:	7f 4f       	sbci	r23, 0xFF	; 255
    3306:	8f 4f       	sbci	r24, 0xFF	; 255
    3308:	9f 4f       	sbci	r25, 0xFF	; 255
    330a:	16 c0       	rjmp	.+44     	; 0x3338 <__floatsisf+0x6c>
    330c:	88 23       	and	r24, r24
    330e:	11 f0       	breq	.+4      	; 0x3314 <__floatsisf+0x48>
    3310:	96 e9       	ldi	r25, 0x96	; 150
    3312:	11 c0       	rjmp	.+34     	; 0x3336 <__floatsisf+0x6a>
    3314:	77 23       	and	r23, r23
    3316:	21 f0       	breq	.+8      	; 0x3320 <__floatsisf+0x54>
    3318:	9e e8       	ldi	r25, 0x8E	; 142
    331a:	87 2f       	mov	r24, r23
    331c:	76 2f       	mov	r23, r22
    331e:	05 c0       	rjmp	.+10     	; 0x332a <__floatsisf+0x5e>
    3320:	66 23       	and	r22, r22
    3322:	71 f0       	breq	.+28     	; 0x3340 <__floatsisf+0x74>
    3324:	96 e8       	ldi	r25, 0x86	; 134
    3326:	86 2f       	mov	r24, r22
    3328:	70 e0       	ldi	r23, 0x00	; 0
    332a:	60 e0       	ldi	r22, 0x00	; 0
    332c:	2a f0       	brmi	.+10     	; 0x3338 <__floatsisf+0x6c>
    332e:	9a 95       	dec	r25
    3330:	66 0f       	add	r22, r22
    3332:	77 1f       	adc	r23, r23
    3334:	88 1f       	adc	r24, r24
    3336:	da f7       	brpl	.-10     	; 0x332e <__floatsisf+0x62>
    3338:	88 0f       	add	r24, r24
    333a:	96 95       	lsr	r25
    333c:	87 95       	ror	r24
    333e:	97 f9       	bld	r25, 7
    3340:	08 95       	ret

00003342 <__fp_split3>:
    3342:	57 fd       	sbrc	r21, 7
    3344:	90 58       	subi	r25, 0x80	; 128
    3346:	44 0f       	add	r20, r20
    3348:	55 1f       	adc	r21, r21
    334a:	59 f0       	breq	.+22     	; 0x3362 <__fp_splitA+0x10>
    334c:	5f 3f       	cpi	r21, 0xFF	; 255
    334e:	71 f0       	breq	.+28     	; 0x336c <__fp_splitA+0x1a>
    3350:	47 95       	ror	r20

00003352 <__fp_splitA>:
    3352:	88 0f       	add	r24, r24
    3354:	97 fb       	bst	r25, 7
    3356:	99 1f       	adc	r25, r25
    3358:	61 f0       	breq	.+24     	; 0x3372 <__fp_splitA+0x20>
    335a:	9f 3f       	cpi	r25, 0xFF	; 255
    335c:	79 f0       	breq	.+30     	; 0x337c <__fp_splitA+0x2a>
    335e:	87 95       	ror	r24
    3360:	08 95       	ret
    3362:	12 16       	cp	r1, r18
    3364:	13 06       	cpc	r1, r19
    3366:	14 06       	cpc	r1, r20
    3368:	55 1f       	adc	r21, r21
    336a:	f2 cf       	rjmp	.-28     	; 0x3350 <__fp_split3+0xe>
    336c:	46 95       	lsr	r20
    336e:	f1 df       	rcall	.-30     	; 0x3352 <__fp_splitA>
    3370:	08 c0       	rjmp	.+16     	; 0x3382 <__fp_splitA+0x30>
    3372:	16 16       	cp	r1, r22
    3374:	17 06       	cpc	r1, r23
    3376:	18 06       	cpc	r1, r24
    3378:	99 1f       	adc	r25, r25
    337a:	f1 cf       	rjmp	.-30     	; 0x335e <__fp_splitA+0xc>
    337c:	86 95       	lsr	r24
    337e:	71 05       	cpc	r23, r1
    3380:	61 05       	cpc	r22, r1
    3382:	08 94       	sec
    3384:	08 95       	ret

00003386 <__fp_zero>:
    3386:	e8 94       	clt

00003388 <__fp_szero>:
    3388:	bb 27       	eor	r27, r27
    338a:	66 27       	eor	r22, r22
    338c:	77 27       	eor	r23, r23
    338e:	cb 01       	movw	r24, r22
    3390:	97 f9       	bld	r25, 7
    3392:	08 95       	ret

00003394 <_hihTwiCallback>:
    3394:	65 30       	cpi	r22, 0x05	; 5
    3396:	f1 f4       	brne	.+60     	; 0x33d4 <_hihTwiCallback+0x40>
    3398:	fa 01       	movw	r30, r20
    339a:	80 81       	ld	r24, Z
    339c:	8f 73       	andi	r24, 0x3F	; 63
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	98 2f       	mov	r25, r24
    33a2:	88 27       	eor	r24, r24
    33a4:	21 81       	ldd	r18, Z+1	; 0x01
    33a6:	82 2b       	or	r24, r18
    33a8:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    33ac:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    33b0:	82 81       	ldd	r24, Z+2	; 0x02
    33b2:	f0 e4       	ldi	r31, 0x40	; 64
    33b4:	8f 9f       	mul	r24, r31
    33b6:	c0 01       	movw	r24, r0
    33b8:	11 24       	eor	r1, r1
    33ba:	fa 01       	movw	r30, r20
    33bc:	23 81       	ldd	r18, Z+3	; 0x03
    33be:	26 95       	lsr	r18
    33c0:	26 95       	lsr	r18
    33c2:	82 2b       	or	r24, r18
    33c4:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    33c8:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    33cc:	81 e0       	ldi	r24, 0x01	; 1
    33ce:	80 93 cd 15 	sts	0x15CD, r24	; 0x8015cd <_measuringIsReady>
    33d2:	08 95       	ret
    33d4:	64 30       	cpi	r22, 0x04	; 4
    33d6:	51 f0       	breq	.+20     	; 0x33ec <_hihTwiCallback+0x58>
    33d8:	80 e0       	ldi	r24, 0x00	; 0
    33da:	90 e4       	ldi	r25, 0x40	; 64
    33dc:	90 93 08 02 	sts	0x0208, r25	; 0x800208 <_temp+0x1>
    33e0:	80 93 07 02 	sts	0x0207, r24	; 0x800207 <_temp>
    33e4:	90 93 0a 02 	sts	0x020A, r25	; 0x80020a <_hum+0x1>
    33e8:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <_hum>
    33ec:	08 95       	ret

000033ee <hih8120_initialise>:
    33ee:	0f 93       	push	r16
    33f0:	1f 93       	push	r17
    33f2:	0a ec       	ldi	r16, 0xCA	; 202
    33f4:	19 e1       	ldi	r17, 0x19	; 25
    33f6:	20 e0       	ldi	r18, 0x00	; 0
    33f8:	34 e2       	ldi	r19, 0x24	; 36
    33fa:	44 ef       	ldi	r20, 0xF4	; 244
    33fc:	50 e0       	ldi	r21, 0x00	; 0
    33fe:	60 e0       	ldi	r22, 0x00	; 0
    3400:	87 e2       	ldi	r24, 0x27	; 39
    3402:	0e 94 35 25 	call	0x4a6a	; 0x4a6a <twiCreate>
    3406:	90 93 cf 15 	sts	0x15CF, r25	; 0x8015cf <_hih8120Handler+0x1>
    340a:	80 93 ce 15 	sts	0x15CE, r24	; 0x8015ce <_hih8120Handler>
    340e:	21 e0       	ldi	r18, 0x01	; 1
    3410:	89 2b       	or	r24, r25
    3412:	09 f0       	breq	.+2      	; 0x3416 <hih8120_initialise+0x28>
    3414:	20 e0       	ldi	r18, 0x00	; 0
    3416:	82 2f       	mov	r24, r18
    3418:	1f 91       	pop	r17
    341a:	0f 91       	pop	r16
    341c:	08 95       	ret

0000341e <hih8120_isReady>:
    341e:	80 91 cd 15 	lds	r24, 0x15CD	; 0x8015cd <_measuringIsReady>
    3422:	08 95       	ret

00003424 <hih8120_wakeup>:
    3424:	80 91 ce 15 	lds	r24, 0x15CE	; 0x8015ce <_hih8120Handler>
    3428:	90 91 cf 15 	lds	r25, 0x15CF	; 0x8015cf <_hih8120Handler+0x1>
    342c:	00 97       	sbiw	r24, 0x00	; 0
    342e:	59 f0       	breq	.+22     	; 0x3446 <hih8120_wakeup+0x22>
    3430:	40 e0       	ldi	r20, 0x00	; 0
    3432:	60 e0       	ldi	r22, 0x00	; 0
    3434:	70 e0       	ldi	r23, 0x00	; 0
    3436:	0e 94 86 25 	call	0x4b0c	; 0x4b0c <twiTransmit>
    343a:	84 30       	cpi	r24, 0x04	; 4
    343c:	31 f4       	brne	.+12     	; 0x344a <hih8120_wakeup+0x26>
    343e:	10 92 cd 15 	sts	0x15CD, r1	; 0x8015cd <_measuringIsReady>
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	08 95       	ret
    3446:	82 e0       	ldi	r24, 0x02	; 2
    3448:	08 95       	ret
    344a:	83 e0       	ldi	r24, 0x03	; 3
    344c:	08 95       	ret

0000344e <hih8120_measure>:
    344e:	80 91 ce 15 	lds	r24, 0x15CE	; 0x8015ce <_hih8120Handler>
    3452:	90 91 cf 15 	lds	r25, 0x15CF	; 0x8015cf <_hih8120Handler+0x1>
    3456:	00 97       	sbiw	r24, 0x00	; 0
    3458:	39 f0       	breq	.+14     	; 0x3468 <hih8120_measure+0x1a>
    345a:	64 e0       	ldi	r22, 0x04	; 4
    345c:	0e 94 d2 25 	call	0x4ba4	; 0x4ba4 <twiReceive>
    3460:	85 30       	cpi	r24, 0x05	; 5
    3462:	21 f0       	breq	.+8      	; 0x346c <hih8120_measure+0x1e>
    3464:	83 e0       	ldi	r24, 0x03	; 3
    3466:	08 95       	ret
    3468:	82 e0       	ldi	r24, 0x02	; 2
    346a:	08 95       	ret
    346c:	80 e0       	ldi	r24, 0x00	; 0
    346e:	08 95       	ret

00003470 <hih8120_getHumidity>:
    3470:	60 91 09 02 	lds	r22, 0x0209	; 0x800209 <_hum>
    3474:	70 91 0a 02 	lds	r23, 0x020A	; 0x80020a <_hum+0x1>
    3478:	80 e0       	ldi	r24, 0x00	; 0
    347a:	90 e0       	ldi	r25, 0x00	; 0
    347c:	25 df       	rcall	.-438    	; 0x32c8 <__floatunsisf>
    347e:	20 e0       	ldi	r18, 0x00	; 0
    3480:	30 e0       	ldi	r19, 0x00	; 0
    3482:	48 ec       	ldi	r20, 0xC8	; 200
    3484:	52 e4       	ldi	r21, 0x42	; 66
    3486:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <__mulsf3>
    348a:	20 e0       	ldi	r18, 0x00	; 0
    348c:	38 ef       	ldi	r19, 0xF8	; 248
    348e:	4f e7       	ldi	r20, 0x7F	; 127
    3490:	56 e4       	ldi	r21, 0x46	; 70
    3492:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <__divsf3>
    3496:	08 95       	ret

00003498 <hih8120_getTemperature>:
    3498:	60 91 07 02 	lds	r22, 0x0207	; 0x800207 <_temp>
    349c:	70 91 08 02 	lds	r23, 0x0208	; 0x800208 <_temp+0x1>
    34a0:	80 e0       	ldi	r24, 0x00	; 0
    34a2:	90 e0       	ldi	r25, 0x00	; 0
    34a4:	11 df       	rcall	.-478    	; 0x32c8 <__floatunsisf>
    34a6:	20 e0       	ldi	r18, 0x00	; 0
    34a8:	30 e0       	ldi	r19, 0x00	; 0
    34aa:	45 e2       	ldi	r20, 0x25	; 37
    34ac:	53 e4       	ldi	r21, 0x43	; 67
    34ae:	0e 94 d8 27 	call	0x4fb0	; 0x4fb0 <__mulsf3>
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	38 ef       	ldi	r19, 0xF8	; 248
    34b6:	4f e7       	ldi	r20, 0x7F	; 127
    34b8:	56 e4       	ldi	r21, 0x46	; 70
    34ba:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <__divsf3>
    34be:	20 e0       	ldi	r18, 0x00	; 0
    34c0:	30 e0       	ldi	r19, 0x00	; 0
    34c2:	40 e2       	ldi	r20, 0x20	; 32
    34c4:	52 e4       	ldi	r21, 0x42	; 66
    34c6:	0c 94 de 26 	jmp	0x4dbc	; 0x4dbc <__subsf3>
    34ca:	08 95       	ret

000034cc <_serialCallBack>:
    34cc:	0f 93       	push	r16
    34ce:	1f 93       	push	r17
    34d0:	cf 93       	push	r28
    34d2:	df 93       	push	r29
    34d4:	1f 92       	push	r1
    34d6:	1f 92       	push	r1
    34d8:	cd b7       	in	r28, 0x3d	; 61
    34da:	de b7       	in	r29, 0x3e	; 62
    34dc:	8c 01       	movw	r16, r24
    34de:	19 82       	std	Y+1, r1	; 0x01
    34e0:	2d c0       	rjmp	.+90     	; 0x353c <_serialCallBack+0x70>
    34e2:	e0 91 07 16 	lds	r30, 0x1607	; 0x801607 <rec_buf_inp.2878>
    34e6:	ec 32       	cpi	r30, 0x2C	; 44
    34e8:	50 f4       	brcc	.+20     	; 0x34fe <_serialCallBack+0x32>
    34ea:	81 e0       	ldi	r24, 0x01	; 1
    34ec:	8e 0f       	add	r24, r30
    34ee:	80 93 07 16 	sts	0x1607, r24	; 0x801607 <rec_buf_inp.2878>
    34f2:	f0 e0       	ldi	r31, 0x00	; 0
    34f4:	e7 5c       	subi	r30, 0xC7	; 199
    34f6:	f9 4e       	sbci	r31, 0xE9	; 233
    34f8:	8a 81       	ldd	r24, Y+2	; 0x02
    34fa:	80 83       	st	Z, r24
    34fc:	02 c0       	rjmp	.+4      	; 0x3502 <_serialCallBack+0x36>
    34fe:	10 92 07 16 	sts	0x1607, r1	; 0x801607 <rec_buf_inp.2878>
    3502:	8a 81       	ldd	r24, Y+2	; 0x02
    3504:	8a 30       	cpi	r24, 0x0A	; 10
    3506:	d1 f4       	brne	.+52     	; 0x353c <_serialCallBack+0x70>
    3508:	40 91 07 16 	lds	r20, 0x1607	; 0x801607 <rec_buf_inp.2878>
    350c:	50 e0       	ldi	r21, 0x00	; 0
    350e:	fa 01       	movw	r30, r20
    3510:	e9 5c       	subi	r30, 0xC9	; 201
    3512:	f9 4e       	sbci	r31, 0xE9	; 233
    3514:	10 82       	st	Z, r1
    3516:	41 50       	subi	r20, 0x01	; 1
    3518:	51 09       	sbc	r21, r1
    351a:	9e 01       	movw	r18, r28
    351c:	2f 5f       	subi	r18, 0xFF	; 255
    351e:	3f 4f       	sbci	r19, 0xFF	; 255
    3520:	69 e3       	ldi	r22, 0x39	; 57
    3522:	76 e1       	ldi	r23, 0x16	; 22
    3524:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <_serialReplyBufferHandle>
    3528:	90 91 0b 16 	lds	r25, 0x160B	; 0x80160b <_serialReplyBufferHandle+0x1>
    352c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <xStreamBufferSendFromISR>
    3530:	89 81       	ldd	r24, Y+1	; 0x01
    3532:	81 11       	cpse	r24, r1
    3534:	0e 94 85 04 	call	0x90a	; 0x90a <vPortYield>
    3538:	10 92 07 16 	sts	0x1607, r1	; 0x801607 <rec_buf_inp.2878>
    353c:	be 01       	movw	r22, r28
    353e:	6e 5f       	subi	r22, 0xFE	; 254
    3540:	7f 4f       	sbci	r23, 0xFF	; 255
    3542:	c8 01       	movw	r24, r16
    3544:	0f d6       	rcall	.+3102   	; 0x4164 <serial_getByte>
    3546:	88 23       	and	r24, r24
    3548:	61 f2       	breq	.-104    	; 0x34e2 <_serialCallBack+0x16>
    354a:	0f 90       	pop	r0
    354c:	0f 90       	pop	r0
    354e:	df 91       	pop	r29
    3550:	cf 91       	pop	r28
    3552:	1f 91       	pop	r17
    3554:	0f 91       	pop	r16
    3556:	08 95       	ret

00003558 <_uploadMessage>:
    3558:	0f 93       	push	r16
    355a:	1f 93       	push	r17
    355c:	cf 93       	push	r28
    355e:	df 93       	push	r29
    3560:	8c 01       	movw	r16, r24
    3562:	eb 01       	movw	r28, r22
    3564:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <_serialReplyBufferHandle>
    3568:	90 91 0b 16 	lds	r25, 0x160B	; 0x80160b <_serialReplyBufferHandle+0x1>
    356c:	0e 94 4c 09 	call	0x1298	; 0x1298 <xStreamBufferReset>
    3570:	b8 01       	movw	r22, r16
    3572:	80 ed       	ldi	r24, 0xD0	; 208
    3574:	95 e1       	ldi	r25, 0x15	; 21
    3576:	0e 94 cd 29 	call	0x539a	; 0x539a <strcpy>
    357a:	20 97       	sbiw	r28, 0x00	; 0
    357c:	79 f0       	breq	.+30     	; 0x359c <_uploadMessage+0x44>
    357e:	e0 ed       	ldi	r30, 0xD0	; 208
    3580:	f5 e1       	ldi	r31, 0x15	; 21
    3582:	01 90       	ld	r0, Z+
    3584:	00 20       	and	r0, r0
    3586:	e9 f7       	brne	.-6      	; 0x3582 <_uploadMessage+0x2a>
    3588:	31 97       	sbiw	r30, 0x01	; 1
    358a:	80 e2       	ldi	r24, 0x20	; 32
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	91 83       	std	Z+1, r25	; 0x01
    3590:	80 83       	st	Z, r24
    3592:	be 01       	movw	r22, r28
    3594:	80 ed       	ldi	r24, 0xD0	; 208
    3596:	95 e1       	ldi	r25, 0x15	; 21
    3598:	0e 94 c2 29 	call	0x5384	; 0x5384 <strcat>
    359c:	e0 ed       	ldi	r30, 0xD0	; 208
    359e:	f5 e1       	ldi	r31, 0x15	; 21
    35a0:	df 01       	movw	r26, r30
    35a2:	0d 90       	ld	r0, X+
    35a4:	00 20       	and	r0, r0
    35a6:	e9 f7       	brne	.-6      	; 0x35a2 <_uploadMessage+0x4a>
    35a8:	11 97       	sbiw	r26, 0x01	; 1
    35aa:	8d e0       	ldi	r24, 0x0D	; 13
    35ac:	9a e0       	ldi	r25, 0x0A	; 10
    35ae:	11 96       	adiw	r26, 0x01	; 1
    35b0:	9c 93       	st	X, r25
    35b2:	8e 93       	st	-X, r24
    35b4:	12 96       	adiw	r26, 0x02	; 2
    35b6:	1c 92       	st	X, r1
    35b8:	01 90       	ld	r0, Z+
    35ba:	00 20       	and	r0, r0
    35bc:	e9 f7       	brne	.-6      	; 0x35b8 <_uploadMessage+0x60>
    35be:	31 97       	sbiw	r30, 0x01	; 1
    35c0:	e0 5d       	subi	r30, 0xD0	; 208
    35c2:	f5 41       	sbci	r31, 0x15	; 21
    35c4:	ae 2f       	mov	r26, r30
    35c6:	80 ed       	ldi	r24, 0xD0	; 208
    35c8:	95 e1       	ldi	r25, 0x15	; 21
    35ca:	ac 01       	movw	r20, r24
    35cc:	6a 2f       	mov	r22, r26
    35ce:	80 91 0c 16 	lds	r24, 0x160C	; 0x80160c <_rn2483_serial>
    35d2:	90 91 0d 16 	lds	r25, 0x160D	; 0x80160d <_rn2483_serial+0x1>
    35d6:	71 d5       	rcall	.+2786   	; 0x40ba <serial_sendBytes>
    35d8:	81 11       	cpse	r24, r1
    35da:	11 c0       	rjmp	.+34     	; 0x35fe <_uploadMessage+0xa6>
    35dc:	08 e2       	ldi	r16, 0x28	; 40
    35de:	15 e0       	ldi	r17, 0x05	; 5
    35e0:	20 e0       	ldi	r18, 0x00	; 0
    35e2:	30 e0       	ldi	r19, 0x00	; 0
    35e4:	4d e2       	ldi	r20, 0x2D	; 45
    35e6:	50 e0       	ldi	r21, 0x00	; 0
    35e8:	63 e9       	ldi	r22, 0x93	; 147
    35ea:	76 e1       	ldi	r23, 0x16	; 22
    35ec:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <_serialReplyBufferHandle>
    35f0:	90 91 0b 16 	lds	r25, 0x160B	; 0x80160b <_serialReplyBufferHandle+0x1>
    35f4:	0e 94 9b 0a 	call	0x1536	; 0x1536 <xStreamBufferReceive>
    35f8:	83 e9       	ldi	r24, 0x93	; 147
    35fa:	96 e1       	ldi	r25, 0x16	; 22
    35fc:	02 c0       	rjmp	.+4      	; 0x3602 <_uploadMessage+0xaa>
    35fe:	80 e0       	ldi	r24, 0x00	; 0
    3600:	90 e0       	ldi	r25, 0x00	; 0
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	1f 91       	pop	r17
    3608:	0f 91       	pop	r16
    360a:	08 95       	ret

0000360c <_reply2ReturnCode>:
    360c:	2f 92       	push	r2
    360e:	3f 92       	push	r3
    3610:	4f 92       	push	r4
    3612:	5f 92       	push	r5
    3614:	6f 92       	push	r6
    3616:	7f 92       	push	r7
    3618:	8f 92       	push	r8
    361a:	9f 92       	push	r9
    361c:	af 92       	push	r10
    361e:	bf 92       	push	r11
    3620:	cf 92       	push	r12
    3622:	df 92       	push	r13
    3624:	ef 92       	push	r14
    3626:	ff 92       	push	r15
    3628:	0f 93       	push	r16
    362a:	1f 93       	push	r17
    362c:	cf 93       	push	r28
    362e:	df 93       	push	r29
    3630:	5c 01       	movw	r10, r24
    3632:	fc 01       	movw	r30, r24
    3634:	01 90       	ld	r0, Z+
    3636:	00 20       	and	r0, r0
    3638:	e9 f7       	brne	.-6      	; 0x3634 <_reply2ReturnCode+0x28>
    363a:	31 97       	sbiw	r30, 0x01	; 1
    363c:	6f 01       	movw	r12, r30
    363e:	c8 1a       	sub	r12, r24
    3640:	d9 0a       	sbc	r13, r25
    3642:	5c 2c       	mov	r5, r12
    3644:	0f 2e       	mov	r0, r31
    3646:	fc ed       	ldi	r31, 0xDC	; 220
    3648:	8f 2e       	mov	r8, r31
    364a:	f6 e0       	ldi	r31, 0x06	; 6
    364c:	9f 2e       	mov	r9, r31
    364e:	f0 2d       	mov	r31, r0
    3650:	e1 2c       	mov	r14, r1
    3652:	f1 2c       	mov	r15, r1
    3654:	4c 2c       	mov	r4, r12
    3656:	37 01       	movw	r6, r14
    3658:	f4 01       	movw	r30, r8
    365a:	01 81       	ldd	r16, Z+1	; 0x01
    365c:	12 81       	ldd	r17, Z+2	; 0x02
    365e:	e8 01       	movw	r28, r16
    3660:	09 90       	ld	r0, Y+
    3662:	00 20       	and	r0, r0
    3664:	e9 f7       	brne	.-6      	; 0x3660 <_reply2ReturnCode+0x54>
    3666:	21 97       	sbiw	r28, 0x01	; 1
    3668:	c0 1b       	sub	r28, r16
    366a:	d1 0b       	sbc	r29, r17
    366c:	3c 2e       	mov	r3, r28
    366e:	f9 e0       	ldi	r31, 0x09	; 9
    3670:	cf 16       	cp	r12, r31
    3672:	d1 04       	cpc	r13, r1
    3674:	58 f0       	brcs	.+22     	; 0x368c <_reply2ReturnCode+0x80>
    3676:	f4 01       	movw	r30, r8
    3678:	20 80       	ld	r2, Z
    367a:	fe e0       	ldi	r31, 0x0E	; 14
    367c:	2f 12       	cpse	r2, r31
    367e:	06 c0       	rjmp	.+12     	; 0x368c <_reply2ReturnCode+0x80>
    3680:	b8 01       	movw	r22, r16
    3682:	c5 01       	movw	r24, r10
    3684:	0e 94 9d 29 	call	0x533a	; 0x533a <strcasestr>
    3688:	89 2b       	or	r24, r25
    368a:	09 f5       	brne	.+66     	; 0x36ce <_reply2ReturnCode+0xc2>
    368c:	44 2d       	mov	r20, r4
    368e:	35 14       	cp	r3, r5
    3690:	08 f4       	brcc	.+2      	; 0x3694 <_reply2ReturnCode+0x88>
    3692:	4c 2f       	mov	r20, r28
    3694:	50 e0       	ldi	r21, 0x00	; 0
    3696:	b8 01       	movw	r22, r16
    3698:	c5 01       	movw	r24, r10
    369a:	0e 94 d4 29 	call	0x53a8	; 0x53a8 <strncasecmp>
    369e:	89 2b       	or	r24, r25
    36a0:	49 f4       	brne	.+18     	; 0x36b4 <_reply2ReturnCode+0xa8>
    36a2:	f3 01       	movw	r30, r6
    36a4:	ee 0f       	add	r30, r30
    36a6:	ff 1f       	adc	r31, r31
    36a8:	e6 0d       	add	r30, r6
    36aa:	f7 1d       	adc	r31, r7
    36ac:	e4 52       	subi	r30, 0x24	; 36
    36ae:	f9 4f       	sbci	r31, 0xF9	; 249
    36b0:	20 80       	ld	r2, Z
    36b2:	0d c0       	rjmp	.+26     	; 0x36ce <_reply2ReturnCode+0xc2>
    36b4:	8f ef       	ldi	r24, 0xFF	; 255
    36b6:	e8 1a       	sub	r14, r24
    36b8:	f8 0a       	sbc	r15, r24
    36ba:	e3 e0       	ldi	r30, 0x03	; 3
    36bc:	8e 0e       	add	r8, r30
    36be:	91 1c       	adc	r9, r1
    36c0:	f1 e1       	ldi	r31, 0x11	; 17
    36c2:	ef 16       	cp	r14, r31
    36c4:	f1 04       	cpc	r15, r1
    36c6:	39 f6       	brne	.-114    	; 0x3656 <_reply2ReturnCode+0x4a>
    36c8:	68 94       	set
    36ca:	22 24       	eor	r2, r2
    36cc:	24 f8       	bld	r2, 4
    36ce:	82 2d       	mov	r24, r2
    36d0:	df 91       	pop	r29
    36d2:	cf 91       	pop	r28
    36d4:	1f 91       	pop	r17
    36d6:	0f 91       	pop	r16
    36d8:	ff 90       	pop	r15
    36da:	ef 90       	pop	r14
    36dc:	df 90       	pop	r13
    36de:	cf 90       	pop	r12
    36e0:	bf 90       	pop	r11
    36e2:	af 90       	pop	r10
    36e4:	9f 90       	pop	r9
    36e6:	8f 90       	pop	r8
    36e8:	7f 90       	pop	r7
    36ea:	6f 90       	pop	r6
    36ec:	5f 90       	pop	r5
    36ee:	4f 90       	pop	r4
    36f0:	3f 90       	pop	r3
    36f2:	2f 90       	pop	r2
    36f4:	08 95       	ret

000036f6 <_uploadMessageRc>:
    36f6:	30 df       	rcall	.-416    	; 0x3558 <_uploadMessage>
    36f8:	89 cf       	rjmp	.-238    	; 0x360c <_reply2ReturnCode>
    36fa:	08 95       	ret

000036fc <lora_driver_flushBuffers>:
    36fc:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <_serialReplyBufferHandle>
    3700:	90 91 0b 16 	lds	r25, 0x160B	; 0x80160b <_serialReplyBufferHandle+0x1>
    3704:	0c 94 4c 09 	jmp	0x1298	; 0x1298 <xStreamBufferReset>
    3708:	08 95       	ret

0000370a <lora_driver_initialise>:
    370a:	8f 92       	push	r8
    370c:	9f 92       	push	r9
    370e:	af 92       	push	r10
    3710:	cf 92       	push	r12
    3712:	ef 92       	push	r14
    3714:	0f 93       	push	r16
    3716:	1f 93       	push	r17
    3718:	cf 93       	push	r28
    371a:	c8 2f       	mov	r28, r24
    371c:	8b 01       	movw	r16, r22
    371e:	41 e0       	ldi	r20, 0x01	; 1
    3720:	60 e0       	ldi	r22, 0x00	; 0
    3722:	70 e0       	ldi	r23, 0x00	; 0
    3724:	88 ec       	ldi	r24, 0xC8	; 200
    3726:	90 e0       	ldi	r25, 0x00	; 0
    3728:	0e 94 17 09 	call	0x122e	; 0x122e <xStreamBufferGenericCreate>
    372c:	90 93 0b 16 	sts	0x160B, r25	; 0x80160b <_serialReplyBufferHandle+0x1>
    3730:	80 93 0a 16 	sts	0x160A, r24	; 0x80160a <_serialReplyBufferHandle>
    3734:	10 93 09 16 	sts	0x1609, r17	; 0x801609 <_downlinkMessageBuffer+0x1>
    3738:	00 93 08 16 	sts	0x1608, r16	; 0x801608 <_downlinkMessageBuffer>
    373c:	0f 2e       	mov	r0, r31
    373e:	f6 e6       	ldi	r31, 0x66	; 102
    3740:	8f 2e       	mov	r8, r31
    3742:	fa e1       	ldi	r31, 0x1A	; 26
    3744:	9f 2e       	mov	r9, r31
    3746:	f0 2d       	mov	r31, r0
    3748:	68 94       	set
    374a:	aa 24       	eor	r10, r10
    374c:	a6 f8       	bld	r10, 6
    374e:	68 94       	set
    3750:	cc 24       	eor	r12, r12
    3752:	c6 f8       	bld	r12, 6
    3754:	e1 2c       	mov	r14, r1
    3756:	00 e0       	ldi	r16, 0x00	; 0
    3758:	23 e0       	ldi	r18, 0x03	; 3
    375a:	40 e0       	ldi	r20, 0x00	; 0
    375c:	51 ee       	ldi	r21, 0xE1	; 225
    375e:	60 e0       	ldi	r22, 0x00	; 0
    3760:	70 e0       	ldi	r23, 0x00	; 0
    3762:	8c 2f       	mov	r24, r28
    3764:	de d3       	rcall	.+1980   	; 0x3f22 <serial_create>
    3766:	90 93 0d 16 	sts	0x160D, r25	; 0x80160d <_rn2483_serial+0x1>
    376a:	80 93 0c 16 	sts	0x160C, r24	; 0x80160c <_rn2483_serial>
    376e:	e7 e0       	ldi	r30, 0x07	; 7
    3770:	f1 e0       	ldi	r31, 0x01	; 1
    3772:	80 81       	ld	r24, Z
    3774:	80 61       	ori	r24, 0x10	; 16
    3776:	80 83       	st	Z, r24
    3778:	cf 91       	pop	r28
    377a:	1f 91       	pop	r17
    377c:	0f 91       	pop	r16
    377e:	ef 90       	pop	r14
    3780:	cf 90       	pop	r12
    3782:	af 90       	pop	r10
    3784:	9f 90       	pop	r9
    3786:	8f 90       	pop	r8
    3788:	08 95       	ret

0000378a <lora_driver_resetRn2483>:
    378a:	88 23       	and	r24, r24
    378c:	31 f0       	breq	.+12     	; 0x379a <lora_driver_resetRn2483+0x10>
    378e:	e8 e0       	ldi	r30, 0x08	; 8
    3790:	f1 e0       	ldi	r31, 0x01	; 1
    3792:	80 81       	ld	r24, Z
    3794:	8f 7e       	andi	r24, 0xEF	; 239
    3796:	80 83       	st	Z, r24
    3798:	08 95       	ret
    379a:	e8 e0       	ldi	r30, 0x08	; 8
    379c:	f1 e0       	ldi	r31, 0x01	; 1
    379e:	80 81       	ld	r24, Z
    37a0:	80 61       	ori	r24, 0x10	; 16
    37a2:	80 83       	st	Z, r24
    37a4:	08 95       	ret

000037a6 <lora_driver_rn2483FactoryReset>:
    37a6:	60 e0       	ldi	r22, 0x00	; 0
    37a8:	70 e0       	ldi	r23, 0x00	; 0
    37aa:	82 e6       	ldi	r24, 0x62	; 98
    37ac:	94 e0       	ldi	r25, 0x04	; 4
    37ae:	d4 de       	rcall	.-600    	; 0x3558 <_uploadMessage>
    37b0:	e3 e9       	ldi	r30, 0x93	; 147
    37b2:	f6 e1       	ldi	r31, 0x16	; 22
    37b4:	01 90       	ld	r0, Z+
    37b6:	00 20       	and	r0, r0
    37b8:	e9 f7       	brne	.-6      	; 0x37b4 <lora_driver_rn2483FactoryReset+0xe>
    37ba:	31 97       	sbiw	r30, 0x01	; 1
    37bc:	e3 59       	subi	r30, 0x93	; 147
    37be:	f6 41       	sbci	r31, 0x16	; 22
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	75 97       	sbiw	r30, 0x15	; 21
    37c4:	08 f0       	brcs	.+2      	; 0x37c8 <lora_driver_rn2483FactoryReset+0x22>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	08 95       	ret

000037ca <lora_driver_getRn2483Hweui>:
    37ca:	cf 93       	push	r28
    37cc:	df 93       	push	r29
    37ce:	ec 01       	movw	r28, r24
    37d0:	60 e0       	ldi	r22, 0x00	; 0
    37d2:	70 e0       	ldi	r23, 0x00	; 0
    37d4:	83 e7       	ldi	r24, 0x73	; 115
    37d6:	94 e0       	ldi	r25, 0x04	; 4
    37d8:	bf de       	rcall	.-642    	; 0x3558 <_uploadMessage>
    37da:	e3 e9       	ldi	r30, 0x93	; 147
    37dc:	f6 e1       	ldi	r31, 0x16	; 22
    37de:	01 90       	ld	r0, Z+
    37e0:	00 20       	and	r0, r0
    37e2:	e9 f7       	brne	.-6      	; 0x37de <lora_driver_getRn2483Hweui+0x14>
    37e4:	e4 5a       	subi	r30, 0xA4	; 164
    37e6:	f6 41       	sbci	r31, 0x16	; 22
    37e8:	39 f4       	brne	.+14     	; 0x37f8 <lora_driver_getRn2483Hweui+0x2e>
    37ea:	63 e9       	ldi	r22, 0x93	; 147
    37ec:	76 e1       	ldi	r23, 0x16	; 22
    37ee:	ce 01       	movw	r24, r28
    37f0:	0e 94 cd 29 	call	0x539a	; 0x539a <strcpy>
    37f4:	80 e0       	ldi	r24, 0x00	; 0
    37f6:	02 c0       	rjmp	.+4      	; 0x37fc <lora_driver_getRn2483Hweui+0x32>
    37f8:	18 82       	st	Y, r1
    37fa:	81 e0       	ldi	r24, 0x01	; 1
    37fc:	df 91       	pop	r29
    37fe:	cf 91       	pop	r28
    3800:	08 95       	ret

00003802 <lora_driver_setDeviceIdentifier>:
    3802:	fc 01       	movw	r30, r24
    3804:	01 90       	ld	r0, Z+
    3806:	00 20       	and	r0, r0
    3808:	e9 f7       	brne	.-6      	; 0x3804 <lora_driver_setDeviceIdentifier+0x2>
    380a:	9f 01       	movw	r18, r30
    380c:	21 51       	subi	r18, 0x11	; 17
    380e:	31 09       	sbc	r19, r1
    3810:	28 17       	cp	r18, r24
    3812:	39 07       	cpc	r19, r25
    3814:	29 f4       	brne	.+10     	; 0x3820 <lora_driver_setDeviceIdentifier+0x1e>
    3816:	bc 01       	movw	r22, r24
    3818:	81 ea       	ldi	r24, 0xA1	; 161
    381a:	94 e0       	ldi	r25, 0x04	; 4
    381c:	6c cf       	rjmp	.-296    	; 0x36f6 <_uploadMessageRc>
    381e:	08 95       	ret
    3820:	89 e0       	ldi	r24, 0x09	; 9
    3822:	08 95       	ret

00003824 <lora_driver_setApplicationIdentifier>:
    3824:	fc 01       	movw	r30, r24
    3826:	01 90       	ld	r0, Z+
    3828:	00 20       	and	r0, r0
    382a:	e9 f7       	brne	.-6      	; 0x3826 <lora_driver_setApplicationIdentifier+0x2>
    382c:	9f 01       	movw	r18, r30
    382e:	21 51       	subi	r18, 0x11	; 17
    3830:	31 09       	sbc	r19, r1
    3832:	28 17       	cp	r18, r24
    3834:	39 07       	cpc	r19, r25
    3836:	29 f4       	brne	.+10     	; 0x3842 <lora_driver_setApplicationIdentifier+0x1e>
    3838:	bc 01       	movw	r22, r24
    383a:	80 eb       	ldi	r24, 0xB0	; 176
    383c:	94 e0       	ldi	r25, 0x04	; 4
    383e:	5b cf       	rjmp	.-330    	; 0x36f6 <_uploadMessageRc>
    3840:	08 95       	ret
    3842:	89 e0       	ldi	r24, 0x09	; 9
    3844:	08 95       	ret

00003846 <lora_driver_setApplicationKey>:
    3846:	fc 01       	movw	r30, r24
    3848:	01 90       	ld	r0, Z+
    384a:	00 20       	and	r0, r0
    384c:	e9 f7       	brne	.-6      	; 0x3848 <lora_driver_setApplicationKey+0x2>
    384e:	9f 01       	movw	r18, r30
    3850:	21 52       	subi	r18, 0x21	; 33
    3852:	31 09       	sbc	r19, r1
    3854:	28 17       	cp	r18, r24
    3856:	39 07       	cpc	r19, r25
    3858:	29 f4       	brne	.+10     	; 0x3864 <lora_driver_setApplicationKey+0x1e>
    385a:	bc 01       	movw	r22, r24
    385c:	8f eb       	ldi	r24, 0xBF	; 191
    385e:	94 e0       	ldi	r25, 0x04	; 4
    3860:	4a cf       	rjmp	.-364    	; 0x36f6 <_uploadMessageRc>
    3862:	08 95       	ret
    3864:	89 e0       	ldi	r24, 0x09	; 9
    3866:	08 95       	ret

00003868 <lora_driver_saveMac>:
    3868:	60 e0       	ldi	r22, 0x00	; 0
    386a:	70 e0       	ldi	r23, 0x00	; 0
    386c:	8e ef       	ldi	r24, 0xFE	; 254
    386e:	94 e0       	ldi	r25, 0x04	; 4
    3870:	42 cf       	rjmp	.-380    	; 0x36f6 <_uploadMessageRc>
    3872:	08 95       	ret

00003874 <lora_driver_join>:
    3874:	0f 93       	push	r16
    3876:	1f 93       	push	r17
    3878:	e8 2f       	mov	r30, r24
    387a:	f0 e0       	ldi	r31, 0x00	; 0
    387c:	ee 0f       	add	r30, r30
    387e:	ff 1f       	adc	r31, r31
    3880:	e8 52       	subi	r30, 0x28	; 40
    3882:	f9 4f       	sbci	r31, 0xF9	; 249
    3884:	60 81       	ld	r22, Z
    3886:	71 81       	ldd	r23, Z+1	; 0x01
    3888:	87 e0       	ldi	r24, 0x07	; 7
    388a:	95 e0       	ldi	r25, 0x05	; 5
    388c:	34 df       	rcall	.-408    	; 0x36f6 <_uploadMessageRc>
    388e:	81 11       	cpse	r24, r1
    3890:	14 c0       	rjmp	.+40     	; 0x38ba <lora_driver_join+0x46>
    3892:	08 e2       	ldi	r16, 0x28	; 40
    3894:	15 e0       	ldi	r17, 0x05	; 5
    3896:	20 e0       	ldi	r18, 0x00	; 0
    3898:	30 e0       	ldi	r19, 0x00	; 0
    389a:	4d e2       	ldi	r20, 0x2D	; 45
    389c:	50 e0       	ldi	r21, 0x00	; 0
    389e:	63 e9       	ldi	r22, 0x93	; 147
    38a0:	76 e1       	ldi	r23, 0x16	; 22
    38a2:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <_serialReplyBufferHandle>
    38a6:	90 91 0b 16 	lds	r25, 0x160B	; 0x80160b <_serialReplyBufferHandle+0x1>
    38aa:	0e 94 9b 0a 	call	0x1536	; 0x1536 <xStreamBufferReceive>
    38ae:	88 23       	and	r24, r24
    38b0:	21 f0       	breq	.+8      	; 0x38ba <lora_driver_join+0x46>
    38b2:	83 e9       	ldi	r24, 0x93	; 147
    38b4:	96 e1       	ldi	r25, 0x16	; 22
    38b6:	aa de       	rcall	.-684    	; 0x360c <_reply2ReturnCode>
    38b8:	03 c0       	rjmp	.+6      	; 0x38c0 <lora_driver_join+0x4c>
    38ba:	83 e9       	ldi	r24, 0x93	; 147
    38bc:	96 e1       	ldi	r25, 0x16	; 22
    38be:	a6 de       	rcall	.-692    	; 0x360c <_reply2ReturnCode>
    38c0:	1f 91       	pop	r17
    38c2:	0f 91       	pop	r16
    38c4:	08 95       	ret

000038c6 <lora_driver_sendUploadMessage>:
    38c6:	0f 93       	push	r16
    38c8:	1f 93       	push	r17
    38ca:	cf 93       	push	r28
    38cc:	df 93       	push	r29
    38ce:	1f 92       	push	r1
    38d0:	cd b7       	in	r28, 0x3d	; 61
    38d2:	de b7       	in	r29, 0x3e	; 62
    38d4:	db 01       	movw	r26, r22
    38d6:	11 96       	adiw	r26, 0x01	; 1
    38d8:	9c 91       	ld	r25, X
    38da:	11 97       	sbiw	r26, 0x01	; 1
    38dc:	95 31       	cpi	r25, 0x15	; 21
    38de:	08 f0       	brcs	.+2      	; 0x38e2 <lora_driver_sendUploadMessage+0x1c>
    38e0:	b4 c0       	rjmp	.+360    	; 0x3a4a <lora_driver_sendUploadMessage+0x184>
    38e2:	99 23       	and	r25, r25
    38e4:	81 f1       	breq	.+96     	; 0x3946 <lora_driver_sendUploadMessage+0x80>
    38e6:	60 e0       	ldi	r22, 0x00	; 0
    38e8:	70 e0       	ldi	r23, 0x00	; 0
    38ea:	27 2f       	mov	r18, r23
    38ec:	30 e0       	ldi	r19, 0x00	; 0
    38ee:	46 2f       	mov	r20, r22
    38f0:	50 e0       	ldi	r21, 0x00	; 0
    38f2:	fd 01       	movw	r30, r26
    38f4:	e4 0f       	add	r30, r20
    38f6:	f5 1f       	adc	r31, r21
    38f8:	92 81       	ldd	r25, Z+2	; 0x02
    38fa:	92 95       	swap	r25
    38fc:	9f 70       	andi	r25, 0x0F	; 15
    38fe:	9a 30       	cpi	r25, 0x0A	; 10
    3900:	10 f0       	brcs	.+4      	; 0x3906 <lora_driver_sendUploadMessage+0x40>
    3902:	99 5c       	subi	r25, 0xC9	; 201
    3904:	01 c0       	rjmp	.+2      	; 0x3908 <lora_driver_sendUploadMessage+0x42>
    3906:	90 5d       	subi	r25, 0xD0	; 208
    3908:	f9 01       	movw	r30, r18
    390a:	ec 5d       	subi	r30, 0xDC	; 220
    390c:	f9 4e       	sbci	r31, 0xE9	; 233
    390e:	90 83       	st	Z, r25
    3910:	2f 5f       	subi	r18, 0xFF	; 255
    3912:	3f 4f       	sbci	r19, 0xFF	; 255
    3914:	fd 01       	movw	r30, r26
    3916:	e4 0f       	add	r30, r20
    3918:	f5 1f       	adc	r31, r21
    391a:	92 81       	ldd	r25, Z+2	; 0x02
    391c:	9f 70       	andi	r25, 0x0F	; 15
    391e:	49 2f       	mov	r20, r25
    3920:	50 e0       	ldi	r21, 0x00	; 0
    3922:	4a 30       	cpi	r20, 0x0A	; 10
    3924:	51 05       	cpc	r21, r1
    3926:	14 f0       	brlt	.+4      	; 0x392c <lora_driver_sendUploadMessage+0x66>
    3928:	99 5c       	subi	r25, 0xC9	; 201
    392a:	01 c0       	rjmp	.+2      	; 0x392e <lora_driver_sendUploadMessage+0x68>
    392c:	90 5d       	subi	r25, 0xD0	; 208
    392e:	f9 01       	movw	r30, r18
    3930:	ec 5d       	subi	r30, 0xDC	; 220
    3932:	f9 4e       	sbci	r31, 0xE9	; 233
    3934:	90 83       	st	Z, r25
    3936:	7e 5f       	subi	r23, 0xFE	; 254
    3938:	6f 5f       	subi	r22, 0xFF	; 255
    393a:	11 96       	adiw	r26, 0x01	; 1
    393c:	9c 91       	ld	r25, X
    393e:	11 97       	sbiw	r26, 0x01	; 1
    3940:	69 17       	cp	r22, r25
    3942:	98 f2       	brcs	.-90     	; 0x38ea <lora_driver_sendUploadMessage+0x24>
    3944:	01 c0       	rjmp	.+2      	; 0x3948 <lora_driver_sendUploadMessage+0x82>
    3946:	70 e0       	ldi	r23, 0x00	; 0
    3948:	e7 2f       	mov	r30, r23
    394a:	f0 e0       	ldi	r31, 0x00	; 0
    394c:	ec 5d       	subi	r30, 0xDC	; 220
    394e:	f9 4e       	sbci	r31, 0xE9	; 233
    3950:	10 82       	st	Z, r1
    3952:	4c 91       	ld	r20, X
    3954:	81 11       	cpse	r24, r1
    3956:	03 c0       	rjmp	.+6      	; 0x395e <lora_driver_sendUploadMessage+0x98>
    3958:	80 e1       	ldi	r24, 0x10	; 16
    395a:	95 e0       	ldi	r25, 0x05	; 5
    395c:	02 c0       	rjmp	.+4      	; 0x3962 <lora_driver_sendUploadMessage+0x9c>
    395e:	82 e1       	ldi	r24, 0x12	; 18
    3960:	95 e0       	ldi	r25, 0x05	; 5
    3962:	24 e2       	ldi	r18, 0x24	; 36
    3964:	36 e1       	ldi	r19, 0x16	; 22
    3966:	3f 93       	push	r19
    3968:	2f 93       	push	r18
    396a:	1f 92       	push	r1
    396c:	4f 93       	push	r20
    396e:	9f 93       	push	r25
    3970:	8f 93       	push	r24
    3972:	86 e1       	ldi	r24, 0x16	; 22
    3974:	95 e0       	ldi	r25, 0x05	; 5
    3976:	9f 93       	push	r25
    3978:	8f 93       	push	r24
    397a:	86 e6       	ldi	r24, 0x66	; 102
    397c:	96 e1       	ldi	r25, 0x16	; 22
    397e:	9f 93       	push	r25
    3980:	8f 93       	push	r24
    3982:	0e 94 2f 2a 	call	0x545e	; 0x545e <sprintf>
    3986:	60 e0       	ldi	r22, 0x00	; 0
    3988:	70 e0       	ldi	r23, 0x00	; 0
    398a:	86 e6       	ldi	r24, 0x66	; 102
    398c:	96 e1       	ldi	r25, 0x16	; 22
    398e:	b3 de       	rcall	.-666    	; 0x36f6 <_uploadMessageRc>
    3990:	0f b6       	in	r0, 0x3f	; 63
    3992:	f8 94       	cli
    3994:	de bf       	out	0x3e, r29	; 62
    3996:	0f be       	out	0x3f, r0	; 63
    3998:	cd bf       	out	0x3d, r28	; 61
    399a:	81 11       	cpse	r24, r1
    399c:	59 c0       	rjmp	.+178    	; 0x3a50 <lora_driver_sendUploadMessage+0x18a>
    399e:	08 e2       	ldi	r16, 0x28	; 40
    39a0:	15 e0       	ldi	r17, 0x05	; 5
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	4d e2       	ldi	r20, 0x2D	; 45
    39a8:	50 e0       	ldi	r21, 0x00	; 0
    39aa:	63 e9       	ldi	r22, 0x93	; 147
    39ac:	76 e1       	ldi	r23, 0x16	; 22
    39ae:	80 91 0a 16 	lds	r24, 0x160A	; 0x80160a <_serialReplyBufferHandle>
    39b2:	90 91 0b 16 	lds	r25, 0x160B	; 0x80160b <_serialReplyBufferHandle+0x1>
    39b6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <xStreamBufferReceive>
    39ba:	88 23       	and	r24, r24
    39bc:	09 f4       	brne	.+2      	; 0x39c0 <lora_driver_sendUploadMessage+0xfa>
    39be:	47 c0       	rjmp	.+142    	; 0x3a4e <lora_driver_sendUploadMessage+0x188>
    39c0:	83 e9       	ldi	r24, 0x93	; 147
    39c2:	96 e1       	ldi	r25, 0x16	; 22
    39c4:	23 de       	rcall	.-954    	; 0x360c <_reply2ReturnCode>
    39c6:	8e 30       	cpi	r24, 0x0E	; 14
    39c8:	09 f0       	breq	.+2      	; 0x39cc <lora_driver_sendUploadMessage+0x106>
    39ca:	42 c0       	rjmp	.+132    	; 0x3a50 <lora_driver_sendUploadMessage+0x18a>
    39cc:	87 e0       	ldi	r24, 0x07	; 7
    39ce:	89 83       	std	Y+1, r24	; 0x01
    39d0:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <_downlinkMessageBuffer>
    39d4:	90 91 09 16 	lds	r25, 0x1609	; 0x801609 <_downlinkMessageBuffer+0x1>
    39d8:	89 2b       	or	r24, r25
    39da:	a9 f1       	breq	.+106    	; 0x3a46 <lora_driver_sendUploadMessage+0x180>
    39dc:	be 01       	movw	r22, r28
    39de:	6f 5f       	subi	r22, 0xFF	; 255
    39e0:	7f 4f       	sbci	r23, 0xFF	; 255
    39e2:	83 e9       	ldi	r24, 0x93	; 147
    39e4:	96 e1       	ldi	r25, 0x16	; 22
    39e6:	68 d1       	rcall	.+720    	; 0x3cb8 <decode_port_no>
    39e8:	80 93 0e 16 	sts	0x160E, r24	; 0x80160e <_downlinkPayload>
    39ec:	e9 81       	ldd	r30, Y+1	; 0x01
    39ee:	f0 e0       	ldi	r31, 0x00	; 0
    39f0:	ed 56       	subi	r30, 0x6D	; 109
    39f2:	f9 4e       	sbci	r31, 0xE9	; 233
    39f4:	df 01       	movw	r26, r30
    39f6:	0d 90       	ld	r0, X+
    39f8:	00 20       	and	r0, r0
    39fa:	e9 f7       	brne	.-6      	; 0x39f6 <lora_driver_sendUploadMessage+0x130>
    39fc:	11 97       	sbiw	r26, 0x01	; 1
    39fe:	ae 1b       	sub	r26, r30
    3a00:	bf 0b       	sbc	r27, r31
    3a02:	aa 23       	and	r26, r26
    3a04:	91 f0       	breq	.+36     	; 0x3a2a <lora_driver_sendUploadMessage+0x164>
    3a06:	bb 27       	eor	r27, r27
    3a08:	cd 01       	movw	r24, r26
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	9c 01       	movw	r18, r24
    3a0e:	12 f4       	brpl	.+4      	; 0x3a14 <lora_driver_sendUploadMessage+0x14e>
    3a10:	2f 5f       	subi	r18, 0xFF	; 255
    3a12:	3f 4f       	sbci	r19, 0xFF	; 255
    3a14:	35 95       	asr	r19
    3a16:	27 95       	ror	r18
    3a18:	20 93 0f 16 	sts	0x160F, r18	; 0x80160f <_downlinkPayload+0x1>
    3a1c:	af 01       	movw	r20, r30
    3a1e:	4f 5f       	subi	r20, 0xFF	; 255
    3a20:	5f 4f       	sbci	r21, 0xFF	; 255
    3a22:	64 e1       	ldi	r22, 0x14	; 20
    3a24:	80 e1       	ldi	r24, 0x10	; 16
    3a26:	96 e1       	ldi	r25, 0x16	; 22
    3a28:	73 d1       	rcall	.+742    	; 0x3d10 <decode_hexadecimal_string_bytes>
    3a2a:	01 e0       	ldi	r16, 0x01	; 1
    3a2c:	10 e0       	ldi	r17, 0x00	; 0
    3a2e:	20 e0       	ldi	r18, 0x00	; 0
    3a30:	30 e0       	ldi	r19, 0x00	; 0
    3a32:	46 e1       	ldi	r20, 0x16	; 22
    3a34:	50 e0       	ldi	r21, 0x00	; 0
    3a36:	6e e0       	ldi	r22, 0x0E	; 14
    3a38:	76 e1       	ldi	r23, 0x16	; 22
    3a3a:	80 91 08 16 	lds	r24, 0x1608	; 0x801608 <_downlinkMessageBuffer>
    3a3e:	90 91 09 16 	lds	r25, 0x1609	; 0x801609 <_downlinkMessageBuffer+0x1>
    3a42:	0e 94 98 09 	call	0x1330	; 0x1330 <xStreamBufferSend>
    3a46:	8e e0       	ldi	r24, 0x0E	; 14
    3a48:	03 c0       	rjmp	.+6      	; 0x3a50 <lora_driver_sendUploadMessage+0x18a>
    3a4a:	84 e1       	ldi	r24, 0x14	; 20
    3a4c:	01 c0       	rjmp	.+2      	; 0x3a50 <lora_driver_sendUploadMessage+0x18a>
    3a4e:	80 e0       	ldi	r24, 0x00	; 0
    3a50:	0f 90       	pop	r0
    3a52:	df 91       	pop	r29
    3a54:	cf 91       	pop	r28
    3a56:	1f 91       	pop	r17
    3a58:	0f 91       	pop	r16
    3a5a:	08 95       	ret

00003a5c <lora_driver_setAdaptiveDataRate>:
    3a5c:	81 30       	cpi	r24, 0x01	; 1
    3a5e:	19 f0       	breq	.+6      	; 0x3a66 <lora_driver_setAdaptiveDataRate+0xa>
    3a60:	66 e2       	ldi	r22, 0x26	; 38
    3a62:	75 e0       	ldi	r23, 0x05	; 5
    3a64:	02 c0       	rjmp	.+4      	; 0x3a6a <lora_driver_setAdaptiveDataRate+0xe>
    3a66:	6f ef       	ldi	r22, 0xFF	; 255
    3a68:	75 e0       	ldi	r23, 0x05	; 5
    3a6a:	8a e2       	ldi	r24, 0x2A	; 42
    3a6c:	95 e0       	ldi	r25, 0x05	; 5
    3a6e:	43 ce       	rjmp	.-890    	; 0x36f6 <_uploadMessageRc>
    3a70:	08 95       	ret

00003a72 <lora_driver_setReceiveDelay>:
    3a72:	9f 93       	push	r25
    3a74:	8f 93       	push	r24
    3a76:	8b e5       	ldi	r24, 0x5B	; 91
    3a78:	95 e0       	ldi	r25, 0x05	; 5
    3a7a:	9f 93       	push	r25
    3a7c:	8f 93       	push	r24
    3a7e:	86 e6       	ldi	r24, 0x66	; 102
    3a80:	96 e1       	ldi	r25, 0x16	; 22
    3a82:	9f 93       	push	r25
    3a84:	8f 93       	push	r24
    3a86:	0e 94 2f 2a 	call	0x545e	; 0x545e <sprintf>
    3a8a:	60 e0       	ldi	r22, 0x00	; 0
    3a8c:	70 e0       	ldi	r23, 0x00	; 0
    3a8e:	86 e6       	ldi	r24, 0x66	; 102
    3a90:	96 e1       	ldi	r25, 0x16	; 22
    3a92:	31 de       	rcall	.-926    	; 0x36f6 <_uploadMessageRc>
    3a94:	0f 90       	pop	r0
    3a96:	0f 90       	pop	r0
    3a98:	0f 90       	pop	r0
    3a9a:	0f 90       	pop	r0
    3a9c:	0f 90       	pop	r0
    3a9e:	0f 90       	pop	r0
    3aa0:	08 95       	ret

00003aa2 <lora_driver_configureToEu868>:
    3aa2:	2f 92       	push	r2
    3aa4:	3f 92       	push	r3
    3aa6:	4f 92       	push	r4
    3aa8:	5f 92       	push	r5
    3aaa:	6f 92       	push	r6
    3aac:	7f 92       	push	r7
    3aae:	8f 92       	push	r8
    3ab0:	9f 92       	push	r9
    3ab2:	af 92       	push	r10
    3ab4:	bf 92       	push	r11
    3ab6:	cf 92       	push	r12
    3ab8:	df 92       	push	r13
    3aba:	ef 92       	push	r14
    3abc:	ff 92       	push	r15
    3abe:	0f 93       	push	r16
    3ac0:	1f 93       	push	r17
    3ac2:	cf 93       	push	r28
    3ac4:	df 93       	push	r29
    3ac6:	cd b7       	in	r28, 0x3d	; 61
    3ac8:	de b7       	in	r29, 0x3e	; 62
    3aca:	a0 97       	sbiw	r28, 0x20	; 32
    3acc:	0f b6       	in	r0, 0x3f	; 63
    3ace:	f8 94       	cli
    3ad0:	de bf       	out	0x3e, r29	; 62
    3ad2:	0f be       	out	0x3f, r0	; 63
    3ad4:	cd bf       	out	0x3d, r28	; 61
    3ad6:	68 e8       	ldi	r22, 0x88	; 136
    3ad8:	75 e0       	ldi	r23, 0x05	; 5
    3ada:	84 e9       	ldi	r24, 0x94	; 148
    3adc:	95 e0       	ldi	r25, 0x05	; 5
    3ade:	3c dd       	rcall	.-1416   	; 0x3558 <_uploadMessage>
    3ae0:	95 dd       	rcall	.-1238   	; 0x360c <_reply2ReturnCode>
    3ae2:	81 11       	cpse	r24, r1
    3ae4:	a3 c0       	rjmp	.+326    	; 0x3c2c <lora_driver_configureToEu868+0x18a>
    3ae6:	80 e2       	ldi	r24, 0x20	; 32
    3ae8:	e2 e2       	ldi	r30, 0x22	; 34
    3aea:	f2 e0       	ldi	r31, 0x02	; 2
    3aec:	de 01       	movw	r26, r28
    3aee:	11 96       	adiw	r26, 0x01	; 1
    3af0:	01 90       	ld	r0, Z+
    3af2:	0d 92       	st	X+, r0
    3af4:	8a 95       	dec	r24
    3af6:	e1 f7       	brne	.-8      	; 0x3af0 <lora_driver_configureToEu868+0x4e>
    3af8:	9e 01       	movw	r18, r28
    3afa:	2f 5f       	subi	r18, 0xFF	; 255
    3afc:	3f 4f       	sbci	r19, 0xFF	; 255
    3afe:	69 01       	movw	r12, r18
    3b00:	e1 2c       	mov	r14, r1
    3b02:	f1 2c       	mov	r15, r1
    3b04:	0f 2e       	mov	r0, r31
    3b06:	f0 ea       	ldi	r31, 0xA0	; 160
    3b08:	af 2e       	mov	r10, r31
    3b0a:	f5 e0       	ldi	r31, 0x05	; 5
    3b0c:	bf 2e       	mov	r11, r31
    3b0e:	f0 2d       	mov	r31, r0
    3b10:	06 e6       	ldi	r16, 0x66	; 102
    3b12:	16 e1       	ldi	r17, 0x16	; 22
    3b14:	0f 2e       	mov	r0, r31
    3b16:	f9 eb       	ldi	r31, 0xB9	; 185
    3b18:	4f 2e       	mov	r4, r31
    3b1a:	f5 e0       	ldi	r31, 0x05	; 5
    3b1c:	5f 2e       	mov	r5, r31
    3b1e:	f0 2d       	mov	r31, r0
    3b20:	0f 2e       	mov	r0, r31
    3b22:	f0 ed       	ldi	r31, 0xD0	; 208
    3b24:	8f 2e       	mov	r8, r31
    3b26:	f5 e0       	ldi	r31, 0x05	; 5
    3b28:	9f 2e       	mov	r9, r31
    3b2a:	f0 2d       	mov	r31, r0
    3b2c:	0f 2e       	mov	r0, r31
    3b2e:	fa ee       	ldi	r31, 0xEA	; 234
    3b30:	6f 2e       	mov	r6, r31
    3b32:	f5 e0       	ldi	r31, 0x05	; 5
    3b34:	7f 2e       	mov	r7, r31
    3b36:	f0 2d       	mov	r31, r0
    3b38:	3e 2c       	mov	r3, r14
    3b3a:	2f 2c       	mov	r2, r15
    3b3c:	ff 92       	push	r15
    3b3e:	ef 92       	push	r14
    3b40:	bf 92       	push	r11
    3b42:	af 92       	push	r10
    3b44:	1f 93       	push	r17
    3b46:	0f 93       	push	r16
    3b48:	0e 94 2f 2a 	call	0x545e	; 0x545e <sprintf>
    3b4c:	60 e0       	ldi	r22, 0x00	; 0
    3b4e:	70 e0       	ldi	r23, 0x00	; 0
    3b50:	c8 01       	movw	r24, r16
    3b52:	02 dd       	rcall	.-1532   	; 0x3558 <_uploadMessage>
    3b54:	5b dd       	rcall	.-1354   	; 0x360c <_reply2ReturnCode>
    3b56:	0f 90       	pop	r0
    3b58:	0f 90       	pop	r0
    3b5a:	0f 90       	pop	r0
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	81 11       	cpse	r24, r1
    3b64:	63 c0       	rjmp	.+198    	; 0x3c2c <lora_driver_configureToEu868+0x18a>
    3b66:	32 e0       	ldi	r19, 0x02	; 2
    3b68:	3e 15       	cp	r19, r14
    3b6a:	e8 f4       	brcc	.+58     	; 0x3ba6 <lora_driver_configureToEu868+0x104>
    3b6c:	f6 01       	movw	r30, r12
    3b6e:	83 81       	ldd	r24, Z+3	; 0x03
    3b70:	8f 93       	push	r24
    3b72:	82 81       	ldd	r24, Z+2	; 0x02
    3b74:	8f 93       	push	r24
    3b76:	81 81       	ldd	r24, Z+1	; 0x01
    3b78:	8f 93       	push	r24
    3b7a:	80 81       	ld	r24, Z
    3b7c:	8f 93       	push	r24
    3b7e:	ff 92       	push	r15
    3b80:	ef 92       	push	r14
    3b82:	5f 92       	push	r5
    3b84:	4f 92       	push	r4
    3b86:	1f 93       	push	r17
    3b88:	0f 93       	push	r16
    3b8a:	0e 94 2f 2a 	call	0x545e	; 0x545e <sprintf>
    3b8e:	60 e0       	ldi	r22, 0x00	; 0
    3b90:	70 e0       	ldi	r23, 0x00	; 0
    3b92:	c8 01       	movw	r24, r16
    3b94:	e1 dc       	rcall	.-1598   	; 0x3558 <_uploadMessage>
    3b96:	3a dd       	rcall	.-1420   	; 0x360c <_reply2ReturnCode>
    3b98:	0f b6       	in	r0, 0x3f	; 63
    3b9a:	f8 94       	cli
    3b9c:	de bf       	out	0x3e, r29	; 62
    3b9e:	0f be       	out	0x3f, r0	; 63
    3ba0:	cd bf       	out	0x3d, r28	; 61
    3ba2:	81 11       	cpse	r24, r1
    3ba4:	43 c0       	rjmp	.+134    	; 0x3c2c <lora_driver_configureToEu868+0x18a>
    3ba6:	2f 92       	push	r2
    3ba8:	3f 92       	push	r3
    3baa:	9f 92       	push	r9
    3bac:	8f 92       	push	r8
    3bae:	1f 93       	push	r17
    3bb0:	0f 93       	push	r16
    3bb2:	0e 94 2f 2a 	call	0x545e	; 0x545e <sprintf>
    3bb6:	60 e0       	ldi	r22, 0x00	; 0
    3bb8:	70 e0       	ldi	r23, 0x00	; 0
    3bba:	c8 01       	movw	r24, r16
    3bbc:	cd dc       	rcall	.-1638   	; 0x3558 <_uploadMessage>
    3bbe:	26 dd       	rcall	.-1460   	; 0x360c <_reply2ReturnCode>
    3bc0:	0f 90       	pop	r0
    3bc2:	0f 90       	pop	r0
    3bc4:	0f 90       	pop	r0
    3bc6:	0f 90       	pop	r0
    3bc8:	0f 90       	pop	r0
    3bca:	0f 90       	pop	r0
    3bcc:	81 11       	cpse	r24, r1
    3bce:	2e c0       	rjmp	.+92     	; 0x3c2c <lora_driver_configureToEu868+0x18a>
    3bd0:	2f 92       	push	r2
    3bd2:	3f 92       	push	r3
    3bd4:	7f 92       	push	r7
    3bd6:	6f 92       	push	r6
    3bd8:	1f 93       	push	r17
    3bda:	0f 93       	push	r16
    3bdc:	0e 94 2f 2a 	call	0x545e	; 0x545e <sprintf>
    3be0:	60 e0       	ldi	r22, 0x00	; 0
    3be2:	70 e0       	ldi	r23, 0x00	; 0
    3be4:	c8 01       	movw	r24, r16
    3be6:	b8 dc       	rcall	.-1680   	; 0x3558 <_uploadMessage>
    3be8:	11 dd       	rcall	.-1502   	; 0x360c <_reply2ReturnCode>
    3bea:	0f 90       	pop	r0
    3bec:	0f 90       	pop	r0
    3bee:	0f 90       	pop	r0
    3bf0:	0f 90       	pop	r0
    3bf2:	0f 90       	pop	r0
    3bf4:	0f 90       	pop	r0
    3bf6:	81 11       	cpse	r24, r1
    3bf8:	19 c0       	rjmp	.+50     	; 0x3c2c <lora_driver_configureToEu868+0x18a>
    3bfa:	3f ef       	ldi	r19, 0xFF	; 255
    3bfc:	e3 1a       	sub	r14, r19
    3bfe:	f3 0a       	sbc	r15, r19
    3c00:	84 e0       	ldi	r24, 0x04	; 4
    3c02:	c8 0e       	add	r12, r24
    3c04:	d1 1c       	adc	r13, r1
    3c06:	98 e0       	ldi	r25, 0x08	; 8
    3c08:	e9 16       	cp	r14, r25
    3c0a:	f1 04       	cpc	r15, r1
    3c0c:	09 f0       	breq	.+2      	; 0x3c10 <lora_driver_configureToEu868+0x16e>
    3c0e:	94 cf       	rjmp	.-216    	; 0x3b38 <lora_driver_configureToEu868+0x96>
    3c10:	60 e0       	ldi	r22, 0x00	; 0
    3c12:	70 e0       	ldi	r23, 0x00	; 0
    3c14:	82 e0       	ldi	r24, 0x02	; 2
    3c16:	96 e0       	ldi	r25, 0x06	; 6
    3c18:	9f dc       	rcall	.-1730   	; 0x3558 <_uploadMessage>
    3c1a:	f8 dc       	rcall	.-1552   	; 0x360c <_reply2ReturnCode>
    3c1c:	81 11       	cpse	r24, r1
    3c1e:	06 c0       	rjmp	.+12     	; 0x3c2c <lora_driver_configureToEu868+0x18a>
    3c20:	60 e0       	ldi	r22, 0x00	; 0
    3c22:	70 e0       	ldi	r23, 0x00	; 0
    3c24:	83 e1       	ldi	r24, 0x13	; 19
    3c26:	96 e0       	ldi	r25, 0x06	; 6
    3c28:	97 dc       	rcall	.-1746   	; 0x3558 <_uploadMessage>
    3c2a:	f0 dc       	rcall	.-1568   	; 0x360c <_reply2ReturnCode>
    3c2c:	a0 96       	adiw	r28, 0x20	; 32
    3c2e:	0f b6       	in	r0, 0x3f	; 63
    3c30:	f8 94       	cli
    3c32:	de bf       	out	0x3e, r29	; 62
    3c34:	0f be       	out	0x3f, r0	; 63
    3c36:	cd bf       	out	0x3d, r28	; 61
    3c38:	df 91       	pop	r29
    3c3a:	cf 91       	pop	r28
    3c3c:	1f 91       	pop	r17
    3c3e:	0f 91       	pop	r16
    3c40:	ff 90       	pop	r15
    3c42:	ef 90       	pop	r14
    3c44:	df 90       	pop	r13
    3c46:	cf 90       	pop	r12
    3c48:	bf 90       	pop	r11
    3c4a:	af 90       	pop	r10
    3c4c:	9f 90       	pop	r9
    3c4e:	8f 90       	pop	r8
    3c50:	7f 90       	pop	r7
    3c52:	6f 90       	pop	r6
    3c54:	5f 90       	pop	r5
    3c56:	4f 90       	pop	r4
    3c58:	3f 90       	pop	r3
    3c5a:	2f 90       	pop	r2
    3c5c:	08 95       	ret

00003c5e <lora_driver_setOtaaIdentity>:
    3c5e:	ef 92       	push	r14
    3c60:	ff 92       	push	r15
    3c62:	0f 93       	push	r16
    3c64:	1f 93       	push	r17
    3c66:	cf 93       	push	r28
    3c68:	df 93       	push	r29
    3c6a:	ec 01       	movw	r28, r24
    3c6c:	8b 01       	movw	r16, r22
    3c6e:	7a 01       	movw	r14, r20
    3c70:	81 e0       	ldi	r24, 0x01	; 1
    3c72:	f4 de       	rcall	.-536    	; 0x3a5c <lora_driver_setAdaptiveDataRate>
    3c74:	81 11       	cpse	r24, r1
    3c76:	0d c0       	rjmp	.+26     	; 0x3c92 <lora_driver_setOtaaIdentity+0x34>
    3c78:	ce 01       	movw	r24, r28
    3c7a:	d4 dd       	rcall	.-1112   	; 0x3824 <lora_driver_setApplicationIdentifier>
    3c7c:	81 11       	cpse	r24, r1
    3c7e:	09 c0       	rjmp	.+18     	; 0x3c92 <lora_driver_setOtaaIdentity+0x34>
    3c80:	c8 01       	movw	r24, r16
    3c82:	e1 dd       	rcall	.-1086   	; 0x3846 <lora_driver_setApplicationKey>
    3c84:	81 11       	cpse	r24, r1
    3c86:	05 c0       	rjmp	.+10     	; 0x3c92 <lora_driver_setOtaaIdentity+0x34>
    3c88:	c7 01       	movw	r24, r14
    3c8a:	bb dd       	rcall	.-1162   	; 0x3802 <lora_driver_setDeviceIdentifier>
    3c8c:	81 11       	cpse	r24, r1
    3c8e:	01 c0       	rjmp	.+2      	; 0x3c92 <lora_driver_setOtaaIdentity+0x34>
    3c90:	eb dd       	rcall	.-1066   	; 0x3868 <lora_driver_saveMac>
    3c92:	df 91       	pop	r29
    3c94:	cf 91       	pop	r28
    3c96:	1f 91       	pop	r17
    3c98:	0f 91       	pop	r16
    3c9a:	ff 90       	pop	r15
    3c9c:	ef 90       	pop	r14
    3c9e:	08 95       	ret

00003ca0 <lora_driver_mapReturnCodeToText>:
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	fc 01       	movw	r30, r24
    3ca4:	ee 0f       	add	r30, r30
    3ca6:	ff 1f       	adc	r31, r31
    3ca8:	8e 0f       	add	r24, r30
    3caa:	9f 1f       	adc	r25, r31
    3cac:	fc 01       	movw	r30, r24
    3cae:	e4 52       	subi	r30, 0x24	; 36
    3cb0:	f9 4f       	sbci	r31, 0xF9	; 249
    3cb2:	81 81       	ldd	r24, Z+1	; 0x01
    3cb4:	92 81       	ldd	r25, Z+2	; 0x02
    3cb6:	08 95       	ret

00003cb8 <decode_port_no>:
    3cb8:	dc 01       	movw	r26, r24
    3cba:	00 97       	sbiw	r24, 0x00	; 0
    3cbc:	29 f1       	breq	.+74     	; 0x3d08 <decode_port_no+0x50>
    3cbe:	fb 01       	movw	r30, r22
    3cc0:	20 81       	ld	r18, Z
    3cc2:	fc 01       	movw	r30, r24
    3cc4:	01 90       	ld	r0, Z+
    3cc6:	00 20       	and	r0, r0
    3cc8:	e9 f7       	brne	.-6      	; 0x3cc4 <decode_port_no+0xc>
    3cca:	31 97       	sbiw	r30, 0x01	; 1
    3ccc:	e8 1b       	sub	r30, r24
    3cce:	f9 0b       	sbc	r31, r25
    3cd0:	82 2f       	mov	r24, r18
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	e8 17       	cp	r30, r24
    3cd6:	f9 07       	cpc	r31, r25
    3cd8:	c8 f0       	brcs	.+50     	; 0x3d0c <decode_port_no+0x54>
    3cda:	80 e0       	ldi	r24, 0x00	; 0
    3cdc:	08 c0       	rjmp	.+16     	; 0x3cee <decode_port_no+0x36>
    3cde:	88 0f       	add	r24, r24
    3ce0:	38 2f       	mov	r19, r24
    3ce2:	33 0f       	add	r19, r19
    3ce4:	33 0f       	add	r19, r19
    3ce6:	83 0f       	add	r24, r19
    3ce8:	80 53       	subi	r24, 0x30	; 48
    3cea:	89 0f       	add	r24, r25
    3cec:	2f 5f       	subi	r18, 0xFF	; 255
    3cee:	fd 01       	movw	r30, r26
    3cf0:	e2 0f       	add	r30, r18
    3cf2:	f1 1d       	adc	r31, r1
    3cf4:	90 81       	ld	r25, Z
    3cf6:	30 ed       	ldi	r19, 0xD0	; 208
    3cf8:	39 0f       	add	r19, r25
    3cfa:	3a 30       	cpi	r19, 0x0A	; 10
    3cfc:	10 f4       	brcc	.+4      	; 0x3d02 <decode_port_no+0x4a>
    3cfe:	91 11       	cpse	r25, r1
    3d00:	ee cf       	rjmp	.-36     	; 0x3cde <decode_port_no+0x26>
    3d02:	fb 01       	movw	r30, r22
    3d04:	20 83       	st	Z, r18
    3d06:	08 95       	ret
    3d08:	80 e0       	ldi	r24, 0x00	; 0
    3d0a:	08 95       	ret
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	08 95       	ret

00003d10 <decode_hexadecimal_string_bytes>:
    3d10:	0f 93       	push	r16
    3d12:	1f 93       	push	r17
    3d14:	cf 93       	push	r28
    3d16:	df 93       	push	r29
    3d18:	dc 01       	movw	r26, r24
    3d1a:	ea 01       	movw	r28, r20
    3d1c:	20 97       	sbiw	r28, 0x00	; 0
    3d1e:	e1 f1       	breq	.+120    	; 0x3d98 <decode_hexadecimal_string_bytes+0x88>
    3d20:	fa 01       	movw	r30, r20
    3d22:	01 90       	ld	r0, Z+
    3d24:	00 20       	and	r0, r0
    3d26:	e9 f7       	brne	.-6      	; 0x3d22 <decode_hexadecimal_string_bytes+0x12>
    3d28:	31 97       	sbiw	r30, 0x01	; 1
    3d2a:	e4 1b       	sub	r30, r20
    3d2c:	f5 0b       	sbc	r31, r21
    3d2e:	32 97       	sbiw	r30, 0x02	; 2
    3d30:	10 f5       	brcc	.+68     	; 0x3d76 <decode_hexadecimal_string_bytes+0x66>
    3d32:	32 c0       	rjmp	.+100    	; 0x3d98 <decode_hexadecimal_string_bytes+0x88>
    3d34:	8d 01       	movw	r16, r26
    3d36:	04 0f       	add	r16, r20
    3d38:	15 1f       	adc	r17, r21
    3d3a:	30 e0       	ldi	r19, 0x00	; 0
    3d3c:	ae 01       	movw	r20, r28
    3d3e:	42 0f       	add	r20, r18
    3d40:	53 1f       	adc	r21, r19
    3d42:	fa 01       	movw	r30, r20
    3d44:	90 81       	ld	r25, Z
    3d46:	91 34       	cpi	r25, 0x41	; 65
    3d48:	28 f0       	brcs	.+10     	; 0x3d54 <decode_hexadecimal_string_bytes+0x44>
    3d4a:	97 53       	subi	r25, 0x37	; 55
    3d4c:	59 2f       	mov	r21, r25
    3d4e:	52 95       	swap	r21
    3d50:	50 7f       	andi	r21, 0xF0	; 240
    3d52:	03 c0       	rjmp	.+6      	; 0x3d5a <decode_hexadecimal_string_bytes+0x4a>
    3d54:	59 2f       	mov	r21, r25
    3d56:	52 95       	swap	r21
    3d58:	50 7f       	andi	r21, 0xF0	; 240
    3d5a:	2c 0f       	add	r18, r28
    3d5c:	3d 1f       	adc	r19, r29
    3d5e:	f9 01       	movw	r30, r18
    3d60:	91 81       	ldd	r25, Z+1	; 0x01
    3d62:	91 34       	cpi	r25, 0x41	; 65
    3d64:	10 f0       	brcs	.+4      	; 0x3d6a <decode_hexadecimal_string_bytes+0x5a>
    3d66:	97 53       	subi	r25, 0x37	; 55
    3d68:	01 c0       	rjmp	.+2      	; 0x3d6c <decode_hexadecimal_string_bytes+0x5c>
    3d6a:	90 53       	subi	r25, 0x30	; 48
    3d6c:	95 0f       	add	r25, r21
    3d6e:	f8 01       	movw	r30, r16
    3d70:	90 83       	st	Z, r25
    3d72:	8f 5f       	subi	r24, 0xFF	; 255
    3d74:	01 c0       	rjmp	.+2      	; 0x3d78 <decode_hexadecimal_string_bytes+0x68>
    3d76:	80 e0       	ldi	r24, 0x00	; 0
    3d78:	28 2f       	mov	r18, r24
    3d7a:	22 0f       	add	r18, r18
    3d7c:	48 2f       	mov	r20, r24
    3d7e:	50 e0       	ldi	r21, 0x00	; 0
    3d80:	fe 01       	movw	r30, r28
    3d82:	01 90       	ld	r0, Z+
    3d84:	00 20       	and	r0, r0
    3d86:	e9 f7       	brne	.-6      	; 0x3d82 <decode_hexadecimal_string_bytes+0x72>
    3d88:	31 97       	sbiw	r30, 0x01	; 1
    3d8a:	ec 1b       	sub	r30, r28
    3d8c:	fd 0b       	sbc	r31, r29
    3d8e:	4e 17       	cp	r20, r30
    3d90:	5f 07       	cpc	r21, r31
    3d92:	10 f4       	brcc	.+4      	; 0x3d98 <decode_hexadecimal_string_bytes+0x88>
    3d94:	86 13       	cpse	r24, r22
    3d96:	ce cf       	rjmp	.-100    	; 0x3d34 <decode_hexadecimal_string_bytes+0x24>
    3d98:	df 91       	pop	r29
    3d9a:	cf 91       	pop	r28
    3d9c:	1f 91       	pop	r17
    3d9e:	0f 91       	pop	r16
    3da0:	08 95       	ret

00003da2 <_serialCallBack>:
    3da2:	80 91 c3 16 	lds	r24, 0x16C3	; 0x8016c3 <crc_sum.1945>
    3da6:	86 0f       	add	r24, r22
    3da8:	80 93 c3 16 	sts	0x16C3, r24	; 0x8016c3 <crc_sum.1945>
    3dac:	90 91 c6 16 	lds	r25, 0x16C6	; 0x8016c6 <_mh_state>
    3db0:	91 30       	cpi	r25, 0x01	; 1
    3db2:	79 f0       	breq	.+30     	; 0x3dd2 <_serialCallBack+0x30>
    3db4:	28 f0       	brcs	.+10     	; 0x3dc0 <_serialCallBack+0x1e>
    3db6:	92 30       	cpi	r25, 0x02	; 2
    3db8:	a9 f0       	breq	.+42     	; 0x3de4 <_serialCallBack+0x42>
    3dba:	93 30       	cpi	r25, 0x03	; 3
    3dbc:	19 f1       	breq	.+70     	; 0x3e04 <_serialCallBack+0x62>
    3dbe:	08 95       	ret
    3dc0:	6f 3f       	cpi	r22, 0xFF	; 255
    3dc2:	09 f0       	breq	.+2      	; 0x3dc6 <_serialCallBack+0x24>
    3dc4:	48 c0       	rjmp	.+144    	; 0x3e56 <_serialCallBack+0xb4>
    3dc6:	10 92 c3 16 	sts	0x16C3, r1	; 0x8016c3 <crc_sum.1945>
    3dca:	81 e0       	ldi	r24, 0x01	; 1
    3dcc:	80 93 c6 16 	sts	0x16C6, r24	; 0x8016c6 <_mh_state>
    3dd0:	08 95       	ret
    3dd2:	66 38       	cpi	r22, 0x86	; 134
    3dd4:	09 f0       	breq	.+2      	; 0x3dd8 <_serialCallBack+0x36>
    3dd6:	3f c0       	rjmp	.+126    	; 0x3e56 <_serialCallBack+0xb4>
    3dd8:	10 92 c2 16 	sts	0x16C2, r1	; 0x8016c2 <inDex.1943>
    3ddc:	82 e0       	ldi	r24, 0x02	; 2
    3dde:	80 93 c6 16 	sts	0x16C6, r24	; 0x8016c6 <_mh_state>
    3de2:	08 95       	ret
    3de4:	e0 91 c2 16 	lds	r30, 0x16C2	; 0x8016c2 <inDex.1943>
    3de8:	81 e0       	ldi	r24, 0x01	; 1
    3dea:	8e 0f       	add	r24, r30
    3dec:	80 93 c2 16 	sts	0x16C2, r24	; 0x8016c2 <inDex.1943>
    3df0:	f0 e0       	ldi	r31, 0x00	; 0
    3df2:	e0 54       	subi	r30, 0x40	; 64
    3df4:	f9 4e       	sbci	r31, 0xE9	; 233
    3df6:	60 83       	st	Z, r22
    3df8:	82 30       	cpi	r24, 0x02	; 2
    3dfa:	69 f5       	brne	.+90     	; 0x3e56 <_serialCallBack+0xb4>
    3dfc:	83 e0       	ldi	r24, 0x03	; 3
    3dfe:	80 93 c6 16 	sts	0x16C6, r24	; 0x8016c6 <_mh_state>
    3e02:	08 95       	ret
    3e04:	90 91 c2 16 	lds	r25, 0x16C2	; 0x8016c2 <inDex.1943>
    3e08:	21 e0       	ldi	r18, 0x01	; 1
    3e0a:	29 0f       	add	r18, r25
    3e0c:	20 93 c2 16 	sts	0x16C2, r18	; 0x8016c2 <inDex.1943>
    3e10:	96 30       	cpi	r25, 0x06	; 6
    3e12:	09 f5       	brne	.+66     	; 0x3e56 <_serialCallBack+0xb4>
    3e14:	81 11       	cpse	r24, r1
    3e16:	0e c0       	rjmp	.+28     	; 0x3e34 <_serialCallBack+0x92>
    3e18:	e0 ec       	ldi	r30, 0xC0	; 192
    3e1a:	f6 e1       	ldi	r31, 0x16	; 22
    3e1c:	80 81       	ld	r24, Z
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	98 2f       	mov	r25, r24
    3e22:	88 27       	eor	r24, r24
    3e24:	21 81       	ldd	r18, Z+1	; 0x01
    3e26:	82 0f       	add	r24, r18
    3e28:	91 1d       	adc	r25, r1
    3e2a:	90 93 c8 16 	sts	0x16C8, r25	; 0x8016c8 <_ppm+0x1>
    3e2e:	80 93 c7 16 	sts	0x16C7, r24	; 0x8016c7 <_ppm>
    3e32:	04 c0       	rjmp	.+8      	; 0x3e3c <_serialCallBack+0x9a>
    3e34:	10 92 c8 16 	sts	0x16C8, r1	; 0x8016c8 <_ppm+0x1>
    3e38:	10 92 c7 16 	sts	0x16C7, r1	; 0x8016c7 <_ppm>
    3e3c:	10 92 c6 16 	sts	0x16C6, r1	; 0x8016c6 <_mh_state>
    3e40:	e0 91 c4 16 	lds	r30, 0x16C4	; 0x8016c4 <_appCallBack>
    3e44:	f0 91 c5 16 	lds	r31, 0x16C5	; 0x8016c5 <_appCallBack+0x1>
    3e48:	30 97       	sbiw	r30, 0x00	; 0
    3e4a:	29 f0       	breq	.+10     	; 0x3e56 <_serialCallBack+0xb4>
    3e4c:	80 91 c7 16 	lds	r24, 0x16C7	; 0x8016c7 <_ppm>
    3e50:	90 91 c8 16 	lds	r25, 0x16C8	; 0x8016c8 <_ppm+0x1>
    3e54:	19 95       	eicall
    3e56:	08 95       	ret

00003e58 <mh_z19_initialise>:
    3e58:	8f 92       	push	r8
    3e5a:	9f 92       	push	r9
    3e5c:	af 92       	push	r10
    3e5e:	cf 92       	push	r12
    3e60:	ef 92       	push	r14
    3e62:	0f 93       	push	r16
    3e64:	0f 2e       	mov	r0, r31
    3e66:	f1 ed       	ldi	r31, 0xD1	; 209
    3e68:	8f 2e       	mov	r8, r31
    3e6a:	fe e1       	ldi	r31, 0x1E	; 30
    3e6c:	9f 2e       	mov	r9, r31
    3e6e:	f0 2d       	mov	r31, r0
    3e70:	68 94       	set
    3e72:	aa 24       	eor	r10, r10
    3e74:	a4 f8       	bld	r10, 4
    3e76:	68 94       	set
    3e78:	cc 24       	eor	r12, r12
    3e7a:	c4 f8       	bld	r12, 4
    3e7c:	e1 2c       	mov	r14, r1
    3e7e:	00 e0       	ldi	r16, 0x00	; 0
    3e80:	23 e0       	ldi	r18, 0x03	; 3
    3e82:	40 e8       	ldi	r20, 0x80	; 128
    3e84:	55 e2       	ldi	r21, 0x25	; 37
    3e86:	60 e0       	ldi	r22, 0x00	; 0
    3e88:	70 e0       	ldi	r23, 0x00	; 0
    3e8a:	4b d0       	rcall	.+150    	; 0x3f22 <serial_create>
    3e8c:	90 93 ca 16 	sts	0x16CA, r25	; 0x8016ca <_serial+0x1>
    3e90:	80 93 c9 16 	sts	0x16C9, r24	; 0x8016c9 <_serial>
    3e94:	0f 91       	pop	r16
    3e96:	ef 90       	pop	r14
    3e98:	cf 90       	pop	r12
    3e9a:	af 90       	pop	r10
    3e9c:	9f 90       	pop	r9
    3e9e:	8f 90       	pop	r8
    3ea0:	08 95       	ret

00003ea2 <mh_z19_takeMeassuring>:
    3ea2:	cf 93       	push	r28
    3ea4:	df 93       	push	r29
    3ea6:	cd b7       	in	r28, 0x3d	; 61
    3ea8:	de b7       	in	r29, 0x3e	; 62
    3eaa:	29 97       	sbiw	r28, 0x09	; 9
    3eac:	0f b6       	in	r0, 0x3f	; 63
    3eae:	f8 94       	cli
    3eb0:	de bf       	out	0x3e, r29	; 62
    3eb2:	0f be       	out	0x3f, r0	; 63
    3eb4:	cd bf       	out	0x3d, r28	; 61
    3eb6:	89 e0       	ldi	r24, 0x09	; 9
    3eb8:	e2 e4       	ldi	r30, 0x42	; 66
    3eba:	f2 e0       	ldi	r31, 0x02	; 2
    3ebc:	9e 01       	movw	r18, r28
    3ebe:	2f 5f       	subi	r18, 0xFF	; 255
    3ec0:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec2:	d9 01       	movw	r26, r18
    3ec4:	01 90       	ld	r0, Z+
    3ec6:	0d 92       	st	X+, r0
    3ec8:	8a 95       	dec	r24
    3eca:	e1 f7       	brne	.-8      	; 0x3ec4 <mh_z19_takeMeassuring+0x22>
    3ecc:	10 92 c8 16 	sts	0x16C8, r1	; 0x8016c8 <_ppm+0x1>
    3ed0:	10 92 c7 16 	sts	0x16C7, r1	; 0x8016c7 <_ppm>
    3ed4:	80 91 c9 16 	lds	r24, 0x16C9	; 0x8016c9 <_serial>
    3ed8:	90 91 ca 16 	lds	r25, 0x16CA	; 0x8016ca <_serial+0x1>
    3edc:	00 97       	sbiw	r24, 0x00	; 0
    3ede:	31 f0       	breq	.+12     	; 0x3eec <mh_z19_takeMeassuring+0x4a>
    3ee0:	42 2f       	mov	r20, r18
    3ee2:	53 2f       	mov	r21, r19
    3ee4:	69 e0       	ldi	r22, 0x09	; 9
    3ee6:	e9 d0       	rcall	.+466    	; 0x40ba <serial_sendBytes>
    3ee8:	80 e0       	ldi	r24, 0x00	; 0
    3eea:	01 c0       	rjmp	.+2      	; 0x3eee <mh_z19_takeMeassuring+0x4c>
    3eec:	82 e0       	ldi	r24, 0x02	; 2
    3eee:	29 96       	adiw	r28, 0x09	; 9
    3ef0:	0f b6       	in	r0, 0x3f	; 63
    3ef2:	f8 94       	cli
    3ef4:	de bf       	out	0x3e, r29	; 62
    3ef6:	0f be       	out	0x3f, r0	; 63
    3ef8:	cd bf       	out	0x3d, r28	; 61
    3efa:	df 91       	pop	r29
    3efc:	cf 91       	pop	r28
    3efe:	08 95       	ret

00003f00 <mh_z19_getCo2Ppm>:
    3f00:	20 91 c7 16 	lds	r18, 0x16C7	; 0x8016c7 <_ppm>
    3f04:	30 91 c8 16 	lds	r19, 0x16C8	; 0x8016c8 <_ppm+0x1>
    3f08:	21 15       	cp	r18, r1
    3f0a:	31 05       	cpc	r19, r1
    3f0c:	29 f4       	brne	.+10     	; 0x3f18 <mh_z19_getCo2Ppm+0x18>
    3f0e:	fc 01       	movw	r30, r24
    3f10:	11 82       	std	Z+1, r1	; 0x01
    3f12:	10 82       	st	Z, r1
    3f14:	81 e0       	ldi	r24, 0x01	; 1
    3f16:	08 95       	ret
    3f18:	fc 01       	movw	r30, r24
    3f1a:	31 83       	std	Z+1, r19	; 0x01
    3f1c:	20 83       	st	Z, r18
    3f1e:	80 e0       	ldi	r24, 0x00	; 0
    3f20:	08 95       	ret

00003f22 <serial_create>:
    3f22:	2f 92       	push	r2
    3f24:	3f 92       	push	r3
    3f26:	4f 92       	push	r4
    3f28:	5f 92       	push	r5
    3f2a:	6f 92       	push	r6
    3f2c:	7f 92       	push	r7
    3f2e:	8f 92       	push	r8
    3f30:	9f 92       	push	r9
    3f32:	af 92       	push	r10
    3f34:	cf 92       	push	r12
    3f36:	ef 92       	push	r14
    3f38:	ff 92       	push	r15
    3f3a:	0f 93       	push	r16
    3f3c:	1f 93       	push	r17
    3f3e:	cf 93       	push	r28
    3f40:	df 93       	push	r29
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	f8 2e       	mov	r15, r24
    3f48:	2a 01       	movw	r4, r20
    3f4a:	3b 01       	movw	r6, r22
    3f4c:	88 e0       	ldi	r24, 0x08	; 8
    3f4e:	90 e0       	ldi	r25, 0x00	; 0
    3f50:	0e 94 68 28 	call	0x50d0	; 0x50d0 <malloc>
    3f54:	8c 01       	movw	r16, r24
    3f56:	8f 2d       	mov	r24, r15
    3f58:	90 e0       	ldi	r25, 0x00	; 0
    3f5a:	fc 01       	movw	r30, r24
    3f5c:	ee 0f       	add	r30, r30
    3f5e:	ff 1f       	adc	r31, r31
    3f60:	e5 53       	subi	r30, 0x35	; 53
    3f62:	f9 4e       	sbci	r31, 0xE9	; 233
    3f64:	11 83       	std	Z+1, r17	; 0x01
    3f66:	00 83       	st	Z, r16
    3f68:	01 15       	cp	r16, r1
    3f6a:	11 05       	cpc	r17, r1
    3f6c:	09 f4       	brne	.+2      	; 0x3f70 <serial_create+0x4e>
    3f6e:	68 c0       	rjmp	.+208    	; 0x4040 <serial_create+0x11e>
    3f70:	88 0f       	add	r24, r24
    3f72:	99 1f       	adc	r25, r25
    3f74:	fc 01       	movw	r30, r24
    3f76:	e5 5f       	subi	r30, 0xF5	; 245
    3f78:	fd 4f       	sbci	r31, 0xFD	; 253
    3f7a:	80 81       	ld	r24, Z
    3f7c:	91 81       	ldd	r25, Z+1	; 0x01
    3f7e:	d8 01       	movw	r26, r16
    3f80:	8d 93       	st	X+, r24
    3f82:	9c 93       	st	X, r25
    3f84:	8c 2d       	mov	r24, r12
    3f86:	90 e0       	ldi	r25, 0x00	; 0
    3f88:	88 0f       	add	r24, r24
    3f8a:	99 1f       	adc	r25, r25
    3f8c:	88 0f       	add	r24, r24
    3f8e:	99 1f       	adc	r25, r25
    3f90:	0e 94 68 28 	call	0x50d0	; 0x50d0 <malloc>
    3f94:	1c 01       	movw	r2, r24
    3f96:	86 e0       	ldi	r24, 0x06	; 6
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	0e 94 68 28 	call	0x50d0	; 0x50d0 <malloc>
    3f9e:	7c 01       	movw	r14, r24
    3fa0:	4c 2d       	mov	r20, r12
    3fa2:	b1 01       	movw	r22, r2
    3fa4:	ef d6       	rcall	.+3550   	; 0x4d84 <fifo_init>
    3fa6:	f8 01       	movw	r30, r16
    3fa8:	f5 82       	std	Z+5, r15	; 0x05
    3faa:	e4 82       	std	Z+4, r14	; 0x04
    3fac:	8a 2d       	mov	r24, r10
    3fae:	90 e0       	ldi	r25, 0x00	; 0
    3fb0:	88 0f       	add	r24, r24
    3fb2:	99 1f       	adc	r25, r25
    3fb4:	88 0f       	add	r24, r24
    3fb6:	99 1f       	adc	r25, r25
    3fb8:	0e 94 68 28 	call	0x50d0	; 0x50d0 <malloc>
    3fbc:	1c 01       	movw	r2, r24
    3fbe:	86 e0       	ldi	r24, 0x06	; 6
    3fc0:	90 e0       	ldi	r25, 0x00	; 0
    3fc2:	0e 94 68 28 	call	0x50d0	; 0x50d0 <malloc>
    3fc6:	7c 01       	movw	r14, r24
    3fc8:	4a 2d       	mov	r20, r10
    3fca:	b1 01       	movw	r22, r2
    3fcc:	db d6       	rcall	.+3510   	; 0x4d84 <fifo_init>
    3fce:	d8 01       	movw	r26, r16
    3fd0:	13 96       	adiw	r26, 0x03	; 3
    3fd2:	fc 92       	st	X, r15
    3fd4:	ee 92       	st	-X, r14
    3fd6:	12 97       	sbiw	r26, 0x02	; 2
    3fd8:	17 96       	adiw	r26, 0x07	; 7
    3fda:	9c 92       	st	X, r9
    3fdc:	8e 92       	st	-X, r8
    3fde:	16 97       	sbiw	r26, 0x06	; 6
    3fe0:	ff b6       	in	r15, 0x3f	; 63
    3fe2:	f8 94       	cli
    3fe4:	ed 91       	ld	r30, X+
    3fe6:	fc 91       	ld	r31, X
    3fe8:	11 97       	sbiw	r26, 0x01	; 1
    3fea:	36 97       	sbiw	r30, 0x06	; 6
    3fec:	80 81       	ld	r24, Z
    3fee:	82 60       	ori	r24, 0x02	; 2
    3ff0:	80 83       	st	Z, r24
    3ff2:	8d 90       	ld	r8, X+
    3ff4:	9c 90       	ld	r9, X
    3ff6:	c3 01       	movw	r24, r6
    3ff8:	b2 01       	movw	r22, r4
    3ffa:	66 d9       	rcall	.-3380   	; 0x32c8 <__floatunsisf>
    3ffc:	20 e0       	ldi	r18, 0x00	; 0
    3ffe:	30 e0       	ldi	r19, 0x00	; 0
    4000:	40 e0       	ldi	r20, 0x00	; 0
    4002:	51 e4       	ldi	r21, 0x41	; 65
    4004:	d5 d7       	rcall	.+4010   	; 0x4fb0 <__mulsf3>
    4006:	9b 01       	movw	r18, r22
    4008:	ac 01       	movw	r20, r24
    400a:	60 e0       	ldi	r22, 0x00	; 0
    400c:	74 e2       	ldi	r23, 0x24	; 36
    400e:	84 e7       	ldi	r24, 0x74	; 116
    4010:	9b e4       	ldi	r25, 0x4B	; 75
    4012:	3b d7       	rcall	.+3702   	; 0x4e8a <__divsf3>
    4014:	20 e0       	ldi	r18, 0x00	; 0
    4016:	30 e0       	ldi	r19, 0x00	; 0
    4018:	40 e8       	ldi	r20, 0x80	; 128
    401a:	5f e3       	ldi	r21, 0x3F	; 63
    401c:	cf d6       	rcall	.+3486   	; 0x4dbc <__subsf3>
    401e:	28 d9       	rcall	.-3504   	; 0x3270 <__fixunssfsi>
    4020:	f4 01       	movw	r30, r8
    4022:	32 97       	sbiw	r30, 0x02	; 2
    4024:	60 83       	st	Z, r22
    4026:	d8 01       	movw	r26, r16
    4028:	ed 91       	ld	r30, X+
    402a:	fc 91       	ld	r31, X
    402c:	11 97       	sbiw	r26, 0x01	; 1
    402e:	35 97       	sbiw	r30, 0x05	; 5
    4030:	88 e9       	ldi	r24, 0x98	; 152
    4032:	80 83       	st	Z, r24
    4034:	ed 91       	ld	r30, X+
    4036:	fc 91       	ld	r31, X
    4038:	34 97       	sbiw	r30, 0x04	; 4
    403a:	86 e0       	ldi	r24, 0x06	; 6
    403c:	80 83       	st	Z, r24
    403e:	ff be       	out	0x3f, r15	; 63
    4040:	c8 01       	movw	r24, r16
    4042:	df 91       	pop	r29
    4044:	cf 91       	pop	r28
    4046:	1f 91       	pop	r17
    4048:	0f 91       	pop	r16
    404a:	ff 90       	pop	r15
    404c:	ef 90       	pop	r14
    404e:	cf 90       	pop	r12
    4050:	af 90       	pop	r10
    4052:	9f 90       	pop	r9
    4054:	8f 90       	pop	r8
    4056:	7f 90       	pop	r7
    4058:	6f 90       	pop	r6
    405a:	5f 90       	pop	r5
    405c:	4f 90       	pop	r4
    405e:	3f 90       	pop	r3
    4060:	2f 90       	pop	r2
    4062:	08 95       	ret

00004064 <serial_sendByte>:
    4064:	cf 93       	push	r28
    4066:	df 93       	push	r29
    4068:	dc 01       	movw	r26, r24
    406a:	89 2b       	or	r24, r25
    406c:	01 f1       	breq	.+64     	; 0x40ae <serial_sendByte+0x4a>
    406e:	12 96       	adiw	r26, 0x02	; 2
    4070:	ed 91       	ld	r30, X+
    4072:	fc 91       	ld	r31, X
    4074:	13 97       	sbiw	r26, 0x03	; 3
    4076:	93 81       	ldd	r25, Z+3	; 0x03
    4078:	82 81       	ldd	r24, Z+2	; 0x02
    407a:	25 81       	ldd	r18, Z+5	; 0x05
    407c:	98 1b       	sub	r25, r24
    407e:	92 23       	and	r25, r18
    4080:	84 81       	ldd	r24, Z+4	; 0x04
    4082:	98 17       	cp	r25, r24
    4084:	b1 f0       	breq	.+44     	; 0x40b2 <serial_sendByte+0x4e>
    4086:	83 81       	ldd	r24, Z+3	; 0x03
    4088:	26 95       	lsr	r18
    408a:	28 23       	and	r18, r24
    408c:	c0 81       	ld	r28, Z
    408e:	d1 81       	ldd	r29, Z+1	; 0x01
    4090:	c2 0f       	add	r28, r18
    4092:	d1 1d       	adc	r29, r1
    4094:	68 83       	st	Y, r22
    4096:	8f 5f       	subi	r24, 0xFF	; 255
    4098:	95 81       	ldd	r25, Z+5	; 0x05
    409a:	89 23       	and	r24, r25
    409c:	83 83       	std	Z+3, r24	; 0x03
    409e:	ed 91       	ld	r30, X+
    40a0:	fc 91       	ld	r31, X
    40a2:	35 97       	sbiw	r30, 0x05	; 5
    40a4:	80 81       	ld	r24, Z
    40a6:	80 62       	ori	r24, 0x20	; 32
    40a8:	80 83       	st	Z, r24
    40aa:	80 e0       	ldi	r24, 0x00	; 0
    40ac:	03 c0       	rjmp	.+6      	; 0x40b4 <serial_sendByte+0x50>
    40ae:	81 e0       	ldi	r24, 0x01	; 1
    40b0:	01 c0       	rjmp	.+2      	; 0x40b4 <serial_sendByte+0x50>
    40b2:	82 e0       	ldi	r24, 0x02	; 2
    40b4:	df 91       	pop	r29
    40b6:	cf 91       	pop	r28
    40b8:	08 95       	ret

000040ba <serial_sendBytes>:
    40ba:	ef 92       	push	r14
    40bc:	ff 92       	push	r15
    40be:	0f 93       	push	r16
    40c0:	1f 93       	push	r17
    40c2:	cf 93       	push	r28
    40c4:	df 93       	push	r29
    40c6:	7c 01       	movw	r14, r24
    40c8:	00 97       	sbiw	r24, 0x00	; 0
    40ca:	09 f4       	brne	.+2      	; 0x40ce <serial_sendBytes+0x14>
    40cc:	41 c0       	rjmp	.+130    	; 0x4150 <serial_sendBytes+0x96>
    40ce:	dc 01       	movw	r26, r24
    40d0:	12 96       	adiw	r26, 0x02	; 2
    40d2:	ed 91       	ld	r30, X+
    40d4:	fc 91       	ld	r31, X
    40d6:	13 97       	sbiw	r26, 0x03	; 3
    40d8:	93 81       	ldd	r25, Z+3	; 0x03
    40da:	82 81       	ldd	r24, Z+2	; 0x02
    40dc:	98 1b       	sub	r25, r24
    40de:	85 81       	ldd	r24, Z+5	; 0x05
    40e0:	98 23       	and	r25, r24
    40e2:	84 81       	ldd	r24, Z+4	; 0x04
    40e4:	89 1b       	sub	r24, r25
    40e6:	86 17       	cp	r24, r22
    40e8:	a8 f1       	brcs	.+106    	; 0x4154 <serial_sendBytes+0x9a>
    40ea:	66 23       	and	r22, r22
    40ec:	41 f1       	breq	.+80     	; 0x413e <serial_sendBytes+0x84>
    40ee:	84 2f       	mov	r24, r20
    40f0:	95 2f       	mov	r25, r21
    40f2:	dc 01       	movw	r26, r24
    40f4:	61 50       	subi	r22, 0x01	; 1
    40f6:	46 2f       	mov	r20, r22
    40f8:	50 e0       	ldi	r21, 0x00	; 0
    40fa:	4f 5f       	subi	r20, 0xFF	; 255
    40fc:	5f 4f       	sbci	r21, 0xFF	; 255
    40fe:	48 0f       	add	r20, r24
    4100:	59 1f       	adc	r21, r25
    4102:	e7 01       	movw	r28, r14
    4104:	ea 81       	ldd	r30, Y+2	; 0x02
    4106:	fb 81       	ldd	r31, Y+3	; 0x03
    4108:	93 81       	ldd	r25, Z+3	; 0x03
    410a:	82 81       	ldd	r24, Z+2	; 0x02
    410c:	25 81       	ldd	r18, Z+5	; 0x05
    410e:	98 1b       	sub	r25, r24
    4110:	92 23       	and	r25, r18
    4112:	84 81       	ldd	r24, Z+4	; 0x04
    4114:	98 17       	cp	r25, r24
    4116:	79 f0       	breq	.+30     	; 0x4136 <serial_sendBytes+0x7c>
    4118:	8c 91       	ld	r24, X
    411a:	93 81       	ldd	r25, Z+3	; 0x03
    411c:	26 95       	lsr	r18
    411e:	29 23       	and	r18, r25
    4120:	60 81       	ld	r22, Z
    4122:	71 81       	ldd	r23, Z+1	; 0x01
    4124:	8b 01       	movw	r16, r22
    4126:	02 0f       	add	r16, r18
    4128:	11 1d       	adc	r17, r1
    412a:	e8 01       	movw	r28, r16
    412c:	88 83       	st	Y, r24
    412e:	9f 5f       	subi	r25, 0xFF	; 255
    4130:	85 81       	ldd	r24, Z+5	; 0x05
    4132:	98 23       	and	r25, r24
    4134:	93 83       	std	Z+3, r25	; 0x03
    4136:	11 96       	adiw	r26, 0x01	; 1
    4138:	a4 17       	cp	r26, r20
    413a:	b5 07       	cpc	r27, r21
    413c:	11 f7       	brne	.-60     	; 0x4102 <serial_sendBytes+0x48>
    413e:	d7 01       	movw	r26, r14
    4140:	ed 91       	ld	r30, X+
    4142:	fc 91       	ld	r31, X
    4144:	35 97       	sbiw	r30, 0x05	; 5
    4146:	80 81       	ld	r24, Z
    4148:	80 62       	ori	r24, 0x20	; 32
    414a:	80 83       	st	Z, r24
    414c:	80 e0       	ldi	r24, 0x00	; 0
    414e:	03 c0       	rjmp	.+6      	; 0x4156 <serial_sendBytes+0x9c>
    4150:	81 e0       	ldi	r24, 0x01	; 1
    4152:	01 c0       	rjmp	.+2      	; 0x4156 <serial_sendBytes+0x9c>
    4154:	82 e0       	ldi	r24, 0x02	; 2
    4156:	df 91       	pop	r29
    4158:	cf 91       	pop	r28
    415a:	1f 91       	pop	r17
    415c:	0f 91       	pop	r16
    415e:	ff 90       	pop	r15
    4160:	ef 90       	pop	r14
    4162:	08 95       	ret

00004164 <serial_getByte>:
    4164:	00 97       	sbiw	r24, 0x00	; 0
    4166:	d1 f0       	breq	.+52     	; 0x419c <serial_getByte+0x38>
    4168:	dc 01       	movw	r26, r24
    416a:	14 96       	adiw	r26, 0x04	; 4
    416c:	ed 91       	ld	r30, X+
    416e:	fc 91       	ld	r31, X
    4170:	15 97       	sbiw	r26, 0x05	; 5
    4172:	93 81       	ldd	r25, Z+3	; 0x03
    4174:	82 81       	ldd	r24, Z+2	; 0x02
    4176:	98 17       	cp	r25, r24
    4178:	99 f0       	breq	.+38     	; 0x41a0 <serial_getByte+0x3c>
    417a:	92 81       	ldd	r25, Z+2	; 0x02
    417c:	85 81       	ldd	r24, Z+5	; 0x05
    417e:	86 95       	lsr	r24
    4180:	89 23       	and	r24, r25
    4182:	a0 81       	ld	r26, Z
    4184:	b1 81       	ldd	r27, Z+1	; 0x01
    4186:	a8 0f       	add	r26, r24
    4188:	b1 1d       	adc	r27, r1
    418a:	8c 91       	ld	r24, X
    418c:	db 01       	movw	r26, r22
    418e:	8c 93       	st	X, r24
    4190:	9f 5f       	subi	r25, 0xFF	; 255
    4192:	85 81       	ldd	r24, Z+5	; 0x05
    4194:	98 23       	and	r25, r24
    4196:	92 83       	std	Z+2, r25	; 0x02
    4198:	80 e0       	ldi	r24, 0x00	; 0
    419a:	08 95       	ret
    419c:	81 e0       	ldi	r24, 0x01	; 1
    419e:	08 95       	ret
    41a0:	83 e0       	ldi	r24, 0x03	; 3
    41a2:	08 95       	ret

000041a4 <__vector_25>:
    41a4:	1f 92       	push	r1
    41a6:	0f 92       	push	r0
    41a8:	0f b6       	in	r0, 0x3f	; 63
    41aa:	0f 92       	push	r0
    41ac:	11 24       	eor	r1, r1
    41ae:	0b b6       	in	r0, 0x3b	; 59
    41b0:	0f 92       	push	r0
    41b2:	2f 93       	push	r18
    41b4:	3f 93       	push	r19
    41b6:	4f 93       	push	r20
    41b8:	5f 93       	push	r21
    41ba:	6f 93       	push	r22
    41bc:	7f 93       	push	r23
    41be:	8f 93       	push	r24
    41c0:	9f 93       	push	r25
    41c2:	af 93       	push	r26
    41c4:	bf 93       	push	r27
    41c6:	cf 93       	push	r28
    41c8:	df 93       	push	r29
    41ca:	ef 93       	push	r30
    41cc:	ff 93       	push	r31
    41ce:	a0 91 cb 16 	lds	r26, 0x16CB	; 0x8016cb <_ser_handle>
    41d2:	b0 91 cc 16 	lds	r27, 0x16CC	; 0x8016cc <_ser_handle+0x1>
    41d6:	10 97       	sbiw	r26, 0x00	; 0
    41d8:	11 f1       	breq	.+68     	; 0x421e <__vector_25+0x7a>
    41da:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    41de:	14 96       	adiw	r26, 0x04	; 4
    41e0:	ed 91       	ld	r30, X+
    41e2:	fc 91       	ld	r31, X
    41e4:	15 97       	sbiw	r26, 0x05	; 5
    41e6:	93 81       	ldd	r25, Z+3	; 0x03
    41e8:	82 81       	ldd	r24, Z+2	; 0x02
    41ea:	25 81       	ldd	r18, Z+5	; 0x05
    41ec:	98 1b       	sub	r25, r24
    41ee:	92 23       	and	r25, r18
    41f0:	84 81       	ldd	r24, Z+4	; 0x04
    41f2:	98 17       	cp	r25, r24
    41f4:	61 f0       	breq	.+24     	; 0x420e <__vector_25+0x6a>
    41f6:	83 81       	ldd	r24, Z+3	; 0x03
    41f8:	26 95       	lsr	r18
    41fa:	28 23       	and	r18, r24
    41fc:	c0 81       	ld	r28, Z
    41fe:	d1 81       	ldd	r29, Z+1	; 0x01
    4200:	c2 0f       	add	r28, r18
    4202:	d1 1d       	adc	r29, r1
    4204:	68 83       	st	Y, r22
    4206:	8f 5f       	subi	r24, 0xFF	; 255
    4208:	95 81       	ldd	r25, Z+5	; 0x05
    420a:	89 23       	and	r24, r25
    420c:	83 83       	std	Z+3, r24	; 0x03
    420e:	16 96       	adiw	r26, 0x06	; 6
    4210:	ed 91       	ld	r30, X+
    4212:	fc 91       	ld	r31, X
    4214:	17 97       	sbiw	r26, 0x07	; 7
    4216:	30 97       	sbiw	r30, 0x00	; 0
    4218:	11 f0       	breq	.+4      	; 0x421e <__vector_25+0x7a>
    421a:	cd 01       	movw	r24, r26
    421c:	19 95       	eicall
    421e:	ff 91       	pop	r31
    4220:	ef 91       	pop	r30
    4222:	df 91       	pop	r29
    4224:	cf 91       	pop	r28
    4226:	bf 91       	pop	r27
    4228:	af 91       	pop	r26
    422a:	9f 91       	pop	r25
    422c:	8f 91       	pop	r24
    422e:	7f 91       	pop	r23
    4230:	6f 91       	pop	r22
    4232:	5f 91       	pop	r21
    4234:	4f 91       	pop	r20
    4236:	3f 91       	pop	r19
    4238:	2f 91       	pop	r18
    423a:	0f 90       	pop	r0
    423c:	0b be       	out	0x3b, r0	; 59
    423e:	0f 90       	pop	r0
    4240:	0f be       	out	0x3f, r0	; 63
    4242:	0f 90       	pop	r0
    4244:	1f 90       	pop	r1
    4246:	18 95       	reti

00004248 <__vector_26>:
    4248:	1f 92       	push	r1
    424a:	0f 92       	push	r0
    424c:	0f b6       	in	r0, 0x3f	; 63
    424e:	0f 92       	push	r0
    4250:	11 24       	eor	r1, r1
    4252:	0b b6       	in	r0, 0x3b	; 59
    4254:	0f 92       	push	r0
    4256:	2f 93       	push	r18
    4258:	8f 93       	push	r24
    425a:	9f 93       	push	r25
    425c:	af 93       	push	r26
    425e:	bf 93       	push	r27
    4260:	ef 93       	push	r30
    4262:	ff 93       	push	r31
    4264:	e0 91 cb 16 	lds	r30, 0x16CB	; 0x8016cb <_ser_handle>
    4268:	f0 91 cc 16 	lds	r31, 0x16CC	; 0x8016cc <_ser_handle+0x1>
    426c:	30 97       	sbiw	r30, 0x00	; 0
    426e:	b9 f0       	breq	.+46     	; 0x429e <__vector_26+0x56>
    4270:	02 80       	ldd	r0, Z+2	; 0x02
    4272:	f3 81       	ldd	r31, Z+3	; 0x03
    4274:	e0 2d       	mov	r30, r0
    4276:	93 81       	ldd	r25, Z+3	; 0x03
    4278:	82 81       	ldd	r24, Z+2	; 0x02
    427a:	98 17       	cp	r25, r24
    427c:	b1 f0       	breq	.+44     	; 0x42aa <__vector_26+0x62>
    427e:	92 81       	ldd	r25, Z+2	; 0x02
    4280:	85 81       	ldd	r24, Z+5	; 0x05
    4282:	28 2f       	mov	r18, r24
    4284:	26 95       	lsr	r18
    4286:	29 23       	and	r18, r25
    4288:	a0 81       	ld	r26, Z
    428a:	b1 81       	ldd	r27, Z+1	; 0x01
    428c:	a2 0f       	add	r26, r18
    428e:	b1 1d       	adc	r27, r1
    4290:	2c 91       	ld	r18, X
    4292:	9f 5f       	subi	r25, 0xFF	; 255
    4294:	89 23       	and	r24, r25
    4296:	82 83       	std	Z+2, r24	; 0x02
    4298:	20 93 c6 00 	sts	0x00C6, r18	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7000c6>
    429c:	0b c0       	rjmp	.+22     	; 0x42b4 <__vector_26+0x6c>
    429e:	e1 ec       	ldi	r30, 0xC1	; 193
    42a0:	f0 e0       	ldi	r31, 0x00	; 0
    42a2:	80 81       	ld	r24, Z
    42a4:	8f 7d       	andi	r24, 0xDF	; 223
    42a6:	80 83       	st	Z, r24
    42a8:	05 c0       	rjmp	.+10     	; 0x42b4 <__vector_26+0x6c>
    42aa:	e1 ec       	ldi	r30, 0xC1	; 193
    42ac:	f0 e0       	ldi	r31, 0x00	; 0
    42ae:	80 81       	ld	r24, Z
    42b0:	8f 7d       	andi	r24, 0xDF	; 223
    42b2:	80 83       	st	Z, r24
    42b4:	ff 91       	pop	r31
    42b6:	ef 91       	pop	r30
    42b8:	bf 91       	pop	r27
    42ba:	af 91       	pop	r26
    42bc:	9f 91       	pop	r25
    42be:	8f 91       	pop	r24
    42c0:	2f 91       	pop	r18
    42c2:	0f 90       	pop	r0
    42c4:	0b be       	out	0x3b, r0	; 59
    42c6:	0f 90       	pop	r0
    42c8:	0f be       	out	0x3f, r0	; 63
    42ca:	0f 90       	pop	r0
    42cc:	1f 90       	pop	r1
    42ce:	18 95       	reti

000042d0 <__vector_36>:
    42d0:	1f 92       	push	r1
    42d2:	0f 92       	push	r0
    42d4:	0f b6       	in	r0, 0x3f	; 63
    42d6:	0f 92       	push	r0
    42d8:	11 24       	eor	r1, r1
    42da:	0b b6       	in	r0, 0x3b	; 59
    42dc:	0f 92       	push	r0
    42de:	2f 93       	push	r18
    42e0:	3f 93       	push	r19
    42e2:	4f 93       	push	r20
    42e4:	5f 93       	push	r21
    42e6:	6f 93       	push	r22
    42e8:	7f 93       	push	r23
    42ea:	8f 93       	push	r24
    42ec:	9f 93       	push	r25
    42ee:	af 93       	push	r26
    42f0:	bf 93       	push	r27
    42f2:	cf 93       	push	r28
    42f4:	df 93       	push	r29
    42f6:	ef 93       	push	r30
    42f8:	ff 93       	push	r31
    42fa:	a0 91 cd 16 	lds	r26, 0x16CD	; 0x8016cd <_ser_handle+0x2>
    42fe:	b0 91 ce 16 	lds	r27, 0x16CE	; 0x8016ce <_ser_handle+0x3>
    4302:	10 97       	sbiw	r26, 0x00	; 0
    4304:	11 f1       	breq	.+68     	; 0x434a <__vector_36+0x7a>
    4306:	60 91 ce 00 	lds	r22, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    430a:	14 96       	adiw	r26, 0x04	; 4
    430c:	ed 91       	ld	r30, X+
    430e:	fc 91       	ld	r31, X
    4310:	15 97       	sbiw	r26, 0x05	; 5
    4312:	93 81       	ldd	r25, Z+3	; 0x03
    4314:	82 81       	ldd	r24, Z+2	; 0x02
    4316:	25 81       	ldd	r18, Z+5	; 0x05
    4318:	98 1b       	sub	r25, r24
    431a:	92 23       	and	r25, r18
    431c:	84 81       	ldd	r24, Z+4	; 0x04
    431e:	98 17       	cp	r25, r24
    4320:	61 f0       	breq	.+24     	; 0x433a <__vector_36+0x6a>
    4322:	83 81       	ldd	r24, Z+3	; 0x03
    4324:	26 95       	lsr	r18
    4326:	28 23       	and	r18, r24
    4328:	c0 81       	ld	r28, Z
    432a:	d1 81       	ldd	r29, Z+1	; 0x01
    432c:	c2 0f       	add	r28, r18
    432e:	d1 1d       	adc	r29, r1
    4330:	68 83       	st	Y, r22
    4332:	8f 5f       	subi	r24, 0xFF	; 255
    4334:	95 81       	ldd	r25, Z+5	; 0x05
    4336:	89 23       	and	r24, r25
    4338:	83 83       	std	Z+3, r24	; 0x03
    433a:	16 96       	adiw	r26, 0x06	; 6
    433c:	ed 91       	ld	r30, X+
    433e:	fc 91       	ld	r31, X
    4340:	17 97       	sbiw	r26, 0x07	; 7
    4342:	30 97       	sbiw	r30, 0x00	; 0
    4344:	11 f0       	breq	.+4      	; 0x434a <__vector_36+0x7a>
    4346:	cd 01       	movw	r24, r26
    4348:	19 95       	eicall
    434a:	ff 91       	pop	r31
    434c:	ef 91       	pop	r30
    434e:	df 91       	pop	r29
    4350:	cf 91       	pop	r28
    4352:	bf 91       	pop	r27
    4354:	af 91       	pop	r26
    4356:	9f 91       	pop	r25
    4358:	8f 91       	pop	r24
    435a:	7f 91       	pop	r23
    435c:	6f 91       	pop	r22
    435e:	5f 91       	pop	r21
    4360:	4f 91       	pop	r20
    4362:	3f 91       	pop	r19
    4364:	2f 91       	pop	r18
    4366:	0f 90       	pop	r0
    4368:	0b be       	out	0x3b, r0	; 59
    436a:	0f 90       	pop	r0
    436c:	0f be       	out	0x3f, r0	; 63
    436e:	0f 90       	pop	r0
    4370:	1f 90       	pop	r1
    4372:	18 95       	reti

00004374 <__vector_37>:
    4374:	1f 92       	push	r1
    4376:	0f 92       	push	r0
    4378:	0f b6       	in	r0, 0x3f	; 63
    437a:	0f 92       	push	r0
    437c:	11 24       	eor	r1, r1
    437e:	0b b6       	in	r0, 0x3b	; 59
    4380:	0f 92       	push	r0
    4382:	2f 93       	push	r18
    4384:	8f 93       	push	r24
    4386:	9f 93       	push	r25
    4388:	af 93       	push	r26
    438a:	bf 93       	push	r27
    438c:	ef 93       	push	r30
    438e:	ff 93       	push	r31
    4390:	e0 91 cd 16 	lds	r30, 0x16CD	; 0x8016cd <_ser_handle+0x2>
    4394:	f0 91 ce 16 	lds	r31, 0x16CE	; 0x8016ce <_ser_handle+0x3>
    4398:	30 97       	sbiw	r30, 0x00	; 0
    439a:	b9 f0       	breq	.+46     	; 0x43ca <__vector_37+0x56>
    439c:	02 80       	ldd	r0, Z+2	; 0x02
    439e:	f3 81       	ldd	r31, Z+3	; 0x03
    43a0:	e0 2d       	mov	r30, r0
    43a2:	93 81       	ldd	r25, Z+3	; 0x03
    43a4:	82 81       	ldd	r24, Z+2	; 0x02
    43a6:	98 17       	cp	r25, r24
    43a8:	b1 f0       	breq	.+44     	; 0x43d6 <__vector_37+0x62>
    43aa:	92 81       	ldd	r25, Z+2	; 0x02
    43ac:	85 81       	ldd	r24, Z+5	; 0x05
    43ae:	28 2f       	mov	r18, r24
    43b0:	26 95       	lsr	r18
    43b2:	29 23       	and	r18, r25
    43b4:	a0 81       	ld	r26, Z
    43b6:	b1 81       	ldd	r27, Z+1	; 0x01
    43b8:	a2 0f       	add	r26, r18
    43ba:	b1 1d       	adc	r27, r1
    43bc:	2c 91       	ld	r18, X
    43be:	9f 5f       	subi	r25, 0xFF	; 255
    43c0:	89 23       	and	r24, r25
    43c2:	82 83       	std	Z+2, r24	; 0x02
    43c4:	20 93 ce 00 	sts	0x00CE, r18	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7000ce>
    43c8:	0b c0       	rjmp	.+22     	; 0x43e0 <__vector_37+0x6c>
    43ca:	e9 ec       	ldi	r30, 0xC9	; 201
    43cc:	f0 e0       	ldi	r31, 0x00	; 0
    43ce:	80 81       	ld	r24, Z
    43d0:	8f 7d       	andi	r24, 0xDF	; 223
    43d2:	80 83       	st	Z, r24
    43d4:	05 c0       	rjmp	.+10     	; 0x43e0 <__vector_37+0x6c>
    43d6:	e9 ec       	ldi	r30, 0xC9	; 201
    43d8:	f0 e0       	ldi	r31, 0x00	; 0
    43da:	80 81       	ld	r24, Z
    43dc:	8f 7d       	andi	r24, 0xDF	; 223
    43de:	80 83       	st	Z, r24
    43e0:	ff 91       	pop	r31
    43e2:	ef 91       	pop	r30
    43e4:	bf 91       	pop	r27
    43e6:	af 91       	pop	r26
    43e8:	9f 91       	pop	r25
    43ea:	8f 91       	pop	r24
    43ec:	2f 91       	pop	r18
    43ee:	0f 90       	pop	r0
    43f0:	0b be       	out	0x3b, r0	; 59
    43f2:	0f 90       	pop	r0
    43f4:	0f be       	out	0x3f, r0	; 63
    43f6:	0f 90       	pop	r0
    43f8:	1f 90       	pop	r1
    43fa:	18 95       	reti

000043fc <__vector_51>:
    43fc:	1f 92       	push	r1
    43fe:	0f 92       	push	r0
    4400:	0f b6       	in	r0, 0x3f	; 63
    4402:	0f 92       	push	r0
    4404:	11 24       	eor	r1, r1
    4406:	0b b6       	in	r0, 0x3b	; 59
    4408:	0f 92       	push	r0
    440a:	2f 93       	push	r18
    440c:	3f 93       	push	r19
    440e:	4f 93       	push	r20
    4410:	5f 93       	push	r21
    4412:	6f 93       	push	r22
    4414:	7f 93       	push	r23
    4416:	8f 93       	push	r24
    4418:	9f 93       	push	r25
    441a:	af 93       	push	r26
    441c:	bf 93       	push	r27
    441e:	cf 93       	push	r28
    4420:	df 93       	push	r29
    4422:	ef 93       	push	r30
    4424:	ff 93       	push	r31
    4426:	a0 91 cf 16 	lds	r26, 0x16CF	; 0x8016cf <_ser_handle+0x4>
    442a:	b0 91 d0 16 	lds	r27, 0x16D0	; 0x8016d0 <_ser_handle+0x5>
    442e:	10 97       	sbiw	r26, 0x00	; 0
    4430:	11 f1       	breq	.+68     	; 0x4476 <__vector_51+0x7a>
    4432:	60 91 d6 00 	lds	r22, 0x00D6	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    4436:	14 96       	adiw	r26, 0x04	; 4
    4438:	ed 91       	ld	r30, X+
    443a:	fc 91       	ld	r31, X
    443c:	15 97       	sbiw	r26, 0x05	; 5
    443e:	93 81       	ldd	r25, Z+3	; 0x03
    4440:	82 81       	ldd	r24, Z+2	; 0x02
    4442:	25 81       	ldd	r18, Z+5	; 0x05
    4444:	98 1b       	sub	r25, r24
    4446:	92 23       	and	r25, r18
    4448:	84 81       	ldd	r24, Z+4	; 0x04
    444a:	98 17       	cp	r25, r24
    444c:	61 f0       	breq	.+24     	; 0x4466 <__vector_51+0x6a>
    444e:	83 81       	ldd	r24, Z+3	; 0x03
    4450:	26 95       	lsr	r18
    4452:	28 23       	and	r18, r24
    4454:	c0 81       	ld	r28, Z
    4456:	d1 81       	ldd	r29, Z+1	; 0x01
    4458:	c2 0f       	add	r28, r18
    445a:	d1 1d       	adc	r29, r1
    445c:	68 83       	st	Y, r22
    445e:	8f 5f       	subi	r24, 0xFF	; 255
    4460:	95 81       	ldd	r25, Z+5	; 0x05
    4462:	89 23       	and	r24, r25
    4464:	83 83       	std	Z+3, r24	; 0x03
    4466:	16 96       	adiw	r26, 0x06	; 6
    4468:	ed 91       	ld	r30, X+
    446a:	fc 91       	ld	r31, X
    446c:	17 97       	sbiw	r26, 0x07	; 7
    446e:	30 97       	sbiw	r30, 0x00	; 0
    4470:	11 f0       	breq	.+4      	; 0x4476 <__vector_51+0x7a>
    4472:	cd 01       	movw	r24, r26
    4474:	19 95       	eicall
    4476:	ff 91       	pop	r31
    4478:	ef 91       	pop	r30
    447a:	df 91       	pop	r29
    447c:	cf 91       	pop	r28
    447e:	bf 91       	pop	r27
    4480:	af 91       	pop	r26
    4482:	9f 91       	pop	r25
    4484:	8f 91       	pop	r24
    4486:	7f 91       	pop	r23
    4488:	6f 91       	pop	r22
    448a:	5f 91       	pop	r21
    448c:	4f 91       	pop	r20
    448e:	3f 91       	pop	r19
    4490:	2f 91       	pop	r18
    4492:	0f 90       	pop	r0
    4494:	0b be       	out	0x3b, r0	; 59
    4496:	0f 90       	pop	r0
    4498:	0f be       	out	0x3f, r0	; 63
    449a:	0f 90       	pop	r0
    449c:	1f 90       	pop	r1
    449e:	18 95       	reti

000044a0 <__vector_52>:
    44a0:	1f 92       	push	r1
    44a2:	0f 92       	push	r0
    44a4:	0f b6       	in	r0, 0x3f	; 63
    44a6:	0f 92       	push	r0
    44a8:	11 24       	eor	r1, r1
    44aa:	0b b6       	in	r0, 0x3b	; 59
    44ac:	0f 92       	push	r0
    44ae:	2f 93       	push	r18
    44b0:	8f 93       	push	r24
    44b2:	9f 93       	push	r25
    44b4:	af 93       	push	r26
    44b6:	bf 93       	push	r27
    44b8:	ef 93       	push	r30
    44ba:	ff 93       	push	r31
    44bc:	e0 91 cf 16 	lds	r30, 0x16CF	; 0x8016cf <_ser_handle+0x4>
    44c0:	f0 91 d0 16 	lds	r31, 0x16D0	; 0x8016d0 <_ser_handle+0x5>
    44c4:	30 97       	sbiw	r30, 0x00	; 0
    44c6:	b9 f0       	breq	.+46     	; 0x44f6 <__vector_52+0x56>
    44c8:	02 80       	ldd	r0, Z+2	; 0x02
    44ca:	f3 81       	ldd	r31, Z+3	; 0x03
    44cc:	e0 2d       	mov	r30, r0
    44ce:	93 81       	ldd	r25, Z+3	; 0x03
    44d0:	82 81       	ldd	r24, Z+2	; 0x02
    44d2:	98 17       	cp	r25, r24
    44d4:	b1 f0       	breq	.+44     	; 0x4502 <__vector_52+0x62>
    44d6:	92 81       	ldd	r25, Z+2	; 0x02
    44d8:	85 81       	ldd	r24, Z+5	; 0x05
    44da:	28 2f       	mov	r18, r24
    44dc:	26 95       	lsr	r18
    44de:	29 23       	and	r18, r25
    44e0:	a0 81       	ld	r26, Z
    44e2:	b1 81       	ldd	r27, Z+1	; 0x01
    44e4:	a2 0f       	add	r26, r18
    44e6:	b1 1d       	adc	r27, r1
    44e8:	2c 91       	ld	r18, X
    44ea:	9f 5f       	subi	r25, 0xFF	; 255
    44ec:	89 23       	and	r24, r25
    44ee:	82 83       	std	Z+2, r24	; 0x02
    44f0:	20 93 d6 00 	sts	0x00D6, r18	; 0x8000d6 <__TEXT_REGION_LENGTH__+0x7000d6>
    44f4:	0b c0       	rjmp	.+22     	; 0x450c <__vector_52+0x6c>
    44f6:	e1 ed       	ldi	r30, 0xD1	; 209
    44f8:	f0 e0       	ldi	r31, 0x00	; 0
    44fa:	80 81       	ld	r24, Z
    44fc:	8f 7d       	andi	r24, 0xDF	; 223
    44fe:	80 83       	st	Z, r24
    4500:	05 c0       	rjmp	.+10     	; 0x450c <__vector_52+0x6c>
    4502:	e1 ed       	ldi	r30, 0xD1	; 209
    4504:	f0 e0       	ldi	r31, 0x00	; 0
    4506:	80 81       	ld	r24, Z
    4508:	8f 7d       	andi	r24, 0xDF	; 223
    450a:	80 83       	st	Z, r24
    450c:	ff 91       	pop	r31
    450e:	ef 91       	pop	r30
    4510:	bf 91       	pop	r27
    4512:	af 91       	pop	r26
    4514:	9f 91       	pop	r25
    4516:	8f 91       	pop	r24
    4518:	2f 91       	pop	r18
    451a:	0f 90       	pop	r0
    451c:	0b be       	out	0x3b, r0	; 59
    451e:	0f 90       	pop	r0
    4520:	0f be       	out	0x3f, r0	; 63
    4522:	0f 90       	pop	r0
    4524:	1f 90       	pop	r1
    4526:	18 95       	reti

00004528 <__vector_54>:
    4528:	1f 92       	push	r1
    452a:	0f 92       	push	r0
    452c:	0f b6       	in	r0, 0x3f	; 63
    452e:	0f 92       	push	r0
    4530:	11 24       	eor	r1, r1
    4532:	0b b6       	in	r0, 0x3b	; 59
    4534:	0f 92       	push	r0
    4536:	2f 93       	push	r18
    4538:	3f 93       	push	r19
    453a:	4f 93       	push	r20
    453c:	5f 93       	push	r21
    453e:	6f 93       	push	r22
    4540:	7f 93       	push	r23
    4542:	8f 93       	push	r24
    4544:	9f 93       	push	r25
    4546:	af 93       	push	r26
    4548:	bf 93       	push	r27
    454a:	cf 93       	push	r28
    454c:	df 93       	push	r29
    454e:	ef 93       	push	r30
    4550:	ff 93       	push	r31
    4552:	a0 91 d1 16 	lds	r26, 0x16D1	; 0x8016d1 <_ser_handle+0x6>
    4556:	b0 91 d2 16 	lds	r27, 0x16D2	; 0x8016d2 <_ser_handle+0x7>
    455a:	10 97       	sbiw	r26, 0x00	; 0
    455c:	11 f1       	breq	.+68     	; 0x45a2 <__vector_54+0x7a>
    455e:	60 91 36 01 	lds	r22, 0x0136	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4562:	14 96       	adiw	r26, 0x04	; 4
    4564:	ed 91       	ld	r30, X+
    4566:	fc 91       	ld	r31, X
    4568:	15 97       	sbiw	r26, 0x05	; 5
    456a:	93 81       	ldd	r25, Z+3	; 0x03
    456c:	82 81       	ldd	r24, Z+2	; 0x02
    456e:	25 81       	ldd	r18, Z+5	; 0x05
    4570:	98 1b       	sub	r25, r24
    4572:	92 23       	and	r25, r18
    4574:	84 81       	ldd	r24, Z+4	; 0x04
    4576:	98 17       	cp	r25, r24
    4578:	61 f0       	breq	.+24     	; 0x4592 <__vector_54+0x6a>
    457a:	83 81       	ldd	r24, Z+3	; 0x03
    457c:	26 95       	lsr	r18
    457e:	28 23       	and	r18, r24
    4580:	c0 81       	ld	r28, Z
    4582:	d1 81       	ldd	r29, Z+1	; 0x01
    4584:	c2 0f       	add	r28, r18
    4586:	d1 1d       	adc	r29, r1
    4588:	68 83       	st	Y, r22
    458a:	8f 5f       	subi	r24, 0xFF	; 255
    458c:	95 81       	ldd	r25, Z+5	; 0x05
    458e:	89 23       	and	r24, r25
    4590:	83 83       	std	Z+3, r24	; 0x03
    4592:	16 96       	adiw	r26, 0x06	; 6
    4594:	ed 91       	ld	r30, X+
    4596:	fc 91       	ld	r31, X
    4598:	17 97       	sbiw	r26, 0x07	; 7
    459a:	30 97       	sbiw	r30, 0x00	; 0
    459c:	11 f0       	breq	.+4      	; 0x45a2 <__vector_54+0x7a>
    459e:	cd 01       	movw	r24, r26
    45a0:	19 95       	eicall
    45a2:	ff 91       	pop	r31
    45a4:	ef 91       	pop	r30
    45a6:	df 91       	pop	r29
    45a8:	cf 91       	pop	r28
    45aa:	bf 91       	pop	r27
    45ac:	af 91       	pop	r26
    45ae:	9f 91       	pop	r25
    45b0:	8f 91       	pop	r24
    45b2:	7f 91       	pop	r23
    45b4:	6f 91       	pop	r22
    45b6:	5f 91       	pop	r21
    45b8:	4f 91       	pop	r20
    45ba:	3f 91       	pop	r19
    45bc:	2f 91       	pop	r18
    45be:	0f 90       	pop	r0
    45c0:	0b be       	out	0x3b, r0	; 59
    45c2:	0f 90       	pop	r0
    45c4:	0f be       	out	0x3f, r0	; 63
    45c6:	0f 90       	pop	r0
    45c8:	1f 90       	pop	r1
    45ca:	18 95       	reti

000045cc <__vector_55>:
    45cc:	1f 92       	push	r1
    45ce:	0f 92       	push	r0
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	0f 92       	push	r0
    45d4:	11 24       	eor	r1, r1
    45d6:	0b b6       	in	r0, 0x3b	; 59
    45d8:	0f 92       	push	r0
    45da:	2f 93       	push	r18
    45dc:	8f 93       	push	r24
    45de:	9f 93       	push	r25
    45e0:	af 93       	push	r26
    45e2:	bf 93       	push	r27
    45e4:	ef 93       	push	r30
    45e6:	ff 93       	push	r31
    45e8:	e0 91 d1 16 	lds	r30, 0x16D1	; 0x8016d1 <_ser_handle+0x6>
    45ec:	f0 91 d2 16 	lds	r31, 0x16D2	; 0x8016d2 <_ser_handle+0x7>
    45f0:	30 97       	sbiw	r30, 0x00	; 0
    45f2:	b9 f0       	breq	.+46     	; 0x4622 <__vector_55+0x56>
    45f4:	02 80       	ldd	r0, Z+2	; 0x02
    45f6:	f3 81       	ldd	r31, Z+3	; 0x03
    45f8:	e0 2d       	mov	r30, r0
    45fa:	93 81       	ldd	r25, Z+3	; 0x03
    45fc:	82 81       	ldd	r24, Z+2	; 0x02
    45fe:	98 17       	cp	r25, r24
    4600:	b1 f0       	breq	.+44     	; 0x462e <__vector_55+0x62>
    4602:	92 81       	ldd	r25, Z+2	; 0x02
    4604:	85 81       	ldd	r24, Z+5	; 0x05
    4606:	28 2f       	mov	r18, r24
    4608:	26 95       	lsr	r18
    460a:	29 23       	and	r18, r25
    460c:	a0 81       	ld	r26, Z
    460e:	b1 81       	ldd	r27, Z+1	; 0x01
    4610:	a2 0f       	add	r26, r18
    4612:	b1 1d       	adc	r27, r1
    4614:	2c 91       	ld	r18, X
    4616:	9f 5f       	subi	r25, 0xFF	; 255
    4618:	89 23       	and	r24, r25
    461a:	82 83       	std	Z+2, r24	; 0x02
    461c:	20 93 36 01 	sts	0x0136, r18	; 0x800136 <__TEXT_REGION_LENGTH__+0x700136>
    4620:	0b c0       	rjmp	.+22     	; 0x4638 <__vector_55+0x6c>
    4622:	e1 e3       	ldi	r30, 0x31	; 49
    4624:	f1 e0       	ldi	r31, 0x01	; 1
    4626:	80 81       	ld	r24, Z
    4628:	8f 7d       	andi	r24, 0xDF	; 223
    462a:	80 83       	st	Z, r24
    462c:	05 c0       	rjmp	.+10     	; 0x4638 <__vector_55+0x6c>
    462e:	e1 e3       	ldi	r30, 0x31	; 49
    4630:	f1 e0       	ldi	r31, 0x01	; 1
    4632:	80 81       	ld	r24, Z
    4634:	8f 7d       	andi	r24, 0xDF	; 223
    4636:	80 83       	st	Z, r24
    4638:	ff 91       	pop	r31
    463a:	ef 91       	pop	r30
    463c:	bf 91       	pop	r27
    463e:	af 91       	pop	r26
    4640:	9f 91       	pop	r25
    4642:	8f 91       	pop	r24
    4644:	2f 91       	pop	r18
    4646:	0f 90       	pop	r0
    4648:	0b be       	out	0x3b, r0	; 59
    464a:	0f 90       	pop	r0
    464c:	0f be       	out	0x3f, r0	; 63
    464e:	0f 90       	pop	r0
    4650:	1f 90       	pop	r1
    4652:	18 95       	reti

00004654 <usart_getchar>:
    4654:	cf 93       	push	r28
    4656:	df 93       	push	r29
    4658:	1f 92       	push	r1
    465a:	cd b7       	in	r28, 0x3d	; 61
    465c:	de b7       	in	r29, 0x3e	; 62
    465e:	be 01       	movw	r22, r28
    4660:	6f 5f       	subi	r22, 0xFF	; 255
    4662:	7f 4f       	sbci	r23, 0xFF	; 255
    4664:	80 91 d3 16 	lds	r24, 0x16D3	; 0x8016d3 <_com_serial_instance>
    4668:	90 91 d4 16 	lds	r25, 0x16D4	; 0x8016d4 <_com_serial_instance+0x1>
    466c:	7b dd       	rcall	.-1290   	; 0x4164 <serial_getByte>
    466e:	81 11       	cpse	r24, r1
    4670:	f6 cf       	rjmp	.-20     	; 0x465e <usart_getchar+0xa>
    4672:	89 81       	ldd	r24, Y+1	; 0x01
    4674:	90 e0       	ldi	r25, 0x00	; 0
    4676:	0f 90       	pop	r0
    4678:	df 91       	pop	r29
    467a:	cf 91       	pop	r28
    467c:	08 95       	ret

0000467e <usart_putchar>:
    467e:	68 2f       	mov	r22, r24
    4680:	80 91 d3 16 	lds	r24, 0x16D3	; 0x8016d3 <_com_serial_instance>
    4684:	90 91 d4 16 	lds	r25, 0x16D4	; 0x8016d4 <_com_serial_instance+0x1>
    4688:	ed dc       	rcall	.-1574   	; 0x4064 <serial_sendByte>
    468a:	80 e0       	ldi	r24, 0x00	; 0
    468c:	90 e0       	ldi	r25, 0x00	; 0
    468e:	08 95       	ret

00004690 <stdio_initialise>:
    4690:	8f 92       	push	r8
    4692:	9f 92       	push	r9
    4694:	af 92       	push	r10
    4696:	cf 92       	push	r12
    4698:	ef 92       	push	r14
    469a:	0f 93       	push	r16
    469c:	81 2c       	mov	r8, r1
    469e:	91 2c       	mov	r9, r1
    46a0:	68 94       	set
    46a2:	aa 24       	eor	r10, r10
    46a4:	a7 f8       	bld	r10, 7
    46a6:	68 94       	set
    46a8:	cc 24       	eor	r12, r12
    46aa:	c7 f8       	bld	r12, 7
    46ac:	e1 2c       	mov	r14, r1
    46ae:	00 e0       	ldi	r16, 0x00	; 0
    46b0:	23 e0       	ldi	r18, 0x03	; 3
    46b2:	40 e0       	ldi	r20, 0x00	; 0
    46b4:	51 ee       	ldi	r21, 0xE1	; 225
    46b6:	60 e0       	ldi	r22, 0x00	; 0
    46b8:	70 e0       	ldi	r23, 0x00	; 0
    46ba:	33 dc       	rcall	.-1946   	; 0x3f22 <serial_create>
    46bc:	90 93 d4 16 	sts	0x16D4, r25	; 0x8016d4 <_com_serial_instance+0x1>
    46c0:	80 93 d3 16 	sts	0x16D3, r24	; 0x8016d3 <_com_serial_instance>
    46c4:	e2 e0       	ldi	r30, 0x02	; 2
    46c6:	f7 e1       	ldi	r31, 0x17	; 23
    46c8:	83 e1       	ldi	r24, 0x13	; 19
    46ca:	92 e0       	ldi	r25, 0x02	; 2
    46cc:	91 83       	std	Z+1, r25	; 0x01
    46ce:	80 83       	st	Z, r24
    46d0:	93 83       	std	Z+3, r25	; 0x03
    46d2:	82 83       	std	Z+2, r24	; 0x02
    46d4:	0f 91       	pop	r16
    46d6:	ef 90       	pop	r14
    46d8:	cf 90       	pop	r12
    46da:	af 90       	pop	r10
    46dc:	9f 90       	pop	r9
    46de:	8f 90       	pop	r8
    46e0:	08 95       	ret

000046e2 <_turn_off>:
    46e2:	90 e0       	ldi	r25, 0x00	; 0
    46e4:	fc 01       	movw	r30, r24
    46e6:	ee 0f       	add	r30, r30
    46e8:	ff 1f       	adc	r31, r31
    46ea:	e8 0f       	add	r30, r24
    46ec:	f9 1f       	adc	r31, r25
    46ee:	ee 0f       	add	r30, r30
    46f0:	ff 1f       	adc	r31, r31
    46f2:	eb 52       	subi	r30, 0x2B	; 43
    46f4:	f9 4e       	sbci	r31, 0xE9	; 233
    46f6:	23 81       	ldd	r18, Z+3	; 0x03
    46f8:	21 11       	cpse	r18, r1
    46fa:	1f c0       	rjmp	.+62     	; 0x473a <_turn_off+0x58>
    46fc:	9c 01       	movw	r18, r24
    46fe:	22 0f       	add	r18, r18
    4700:	33 1f       	adc	r19, r19
    4702:	f9 01       	movw	r30, r18
    4704:	e8 0f       	add	r30, r24
    4706:	f9 1f       	adc	r31, r25
    4708:	ee 0f       	add	r30, r30
    470a:	ff 1f       	adc	r31, r31
    470c:	eb 52       	subi	r30, 0x2B	; 43
    470e:	f9 4e       	sbci	r31, 0xE9	; 233
    4710:	a0 81       	ld	r26, Z
    4712:	b1 81       	ldd	r27, Z+1	; 0x01
    4714:	4c 91       	ld	r20, X
    4716:	f9 01       	movw	r30, r18
    4718:	e8 0f       	add	r30, r24
    471a:	f9 1f       	adc	r31, r25
    471c:	ee 0f       	add	r30, r30
    471e:	ff 1f       	adc	r31, r31
    4720:	eb 52       	subi	r30, 0x2B	; 43
    4722:	f9 4e       	sbci	r31, 0xE9	; 233
    4724:	81 e0       	ldi	r24, 0x01	; 1
    4726:	90 e0       	ldi	r25, 0x00	; 0
    4728:	02 80       	ldd	r0, Z+2	; 0x02
    472a:	02 c0       	rjmp	.+4      	; 0x4730 <_turn_off+0x4e>
    472c:	88 0f       	add	r24, r24
    472e:	99 1f       	adc	r25, r25
    4730:	0a 94       	dec	r0
    4732:	e2 f7       	brpl	.-8      	; 0x472c <_turn_off+0x4a>
    4734:	84 2b       	or	r24, r20
    4736:	8c 93       	st	X, r24
    4738:	08 95       	ret
    473a:	fc 01       	movw	r30, r24
    473c:	ee 0f       	add	r30, r30
    473e:	ff 1f       	adc	r31, r31
    4740:	df 01       	movw	r26, r30
    4742:	a8 0f       	add	r26, r24
    4744:	b9 1f       	adc	r27, r25
    4746:	aa 0f       	add	r26, r26
    4748:	bb 1f       	adc	r27, r27
    474a:	ab 52       	subi	r26, 0x2B	; 43
    474c:	b9 4e       	sbci	r27, 0xE9	; 233
    474e:	0d 90       	ld	r0, X+
    4750:	bc 91       	ld	r27, X
    4752:	a0 2d       	mov	r26, r0
    4754:	2c 91       	ld	r18, X
    4756:	e8 0f       	add	r30, r24
    4758:	f9 1f       	adc	r31, r25
    475a:	ee 0f       	add	r30, r30
    475c:	ff 1f       	adc	r31, r31
    475e:	eb 52       	subi	r30, 0x2B	; 43
    4760:	f9 4e       	sbci	r31, 0xE9	; 233
    4762:	81 e0       	ldi	r24, 0x01	; 1
    4764:	90 e0       	ldi	r25, 0x00	; 0
    4766:	02 80       	ldd	r0, Z+2	; 0x02
    4768:	02 c0       	rjmp	.+4      	; 0x476e <_turn_off+0x8c>
    476a:	88 0f       	add	r24, r24
    476c:	99 1f       	adc	r25, r25
    476e:	0a 94       	dec	r0
    4770:	e2 f7       	brpl	.-8      	; 0x476a <_turn_off+0x88>
    4772:	80 95       	com	r24
    4774:	82 23       	and	r24, r18
    4776:	8c 93       	st	X, r24
    4778:	08 95       	ret

0000477a <_turn_on>:
    477a:	90 e0       	ldi	r25, 0x00	; 0
    477c:	fc 01       	movw	r30, r24
    477e:	ee 0f       	add	r30, r30
    4780:	ff 1f       	adc	r31, r31
    4782:	e8 0f       	add	r30, r24
    4784:	f9 1f       	adc	r31, r25
    4786:	ee 0f       	add	r30, r30
    4788:	ff 1f       	adc	r31, r31
    478a:	eb 52       	subi	r30, 0x2B	; 43
    478c:	f9 4e       	sbci	r31, 0xE9	; 233
    478e:	23 81       	ldd	r18, Z+3	; 0x03
    4790:	21 11       	cpse	r18, r1
    4792:	20 c0       	rjmp	.+64     	; 0x47d4 <_turn_on+0x5a>
    4794:	9c 01       	movw	r18, r24
    4796:	22 0f       	add	r18, r18
    4798:	33 1f       	adc	r19, r19
    479a:	f9 01       	movw	r30, r18
    479c:	e8 0f       	add	r30, r24
    479e:	f9 1f       	adc	r31, r25
    47a0:	ee 0f       	add	r30, r30
    47a2:	ff 1f       	adc	r31, r31
    47a4:	eb 52       	subi	r30, 0x2B	; 43
    47a6:	f9 4e       	sbci	r31, 0xE9	; 233
    47a8:	a0 81       	ld	r26, Z
    47aa:	b1 81       	ldd	r27, Z+1	; 0x01
    47ac:	4c 91       	ld	r20, X
    47ae:	f9 01       	movw	r30, r18
    47b0:	e8 0f       	add	r30, r24
    47b2:	f9 1f       	adc	r31, r25
    47b4:	ee 0f       	add	r30, r30
    47b6:	ff 1f       	adc	r31, r31
    47b8:	eb 52       	subi	r30, 0x2B	; 43
    47ba:	f9 4e       	sbci	r31, 0xE9	; 233
    47bc:	81 e0       	ldi	r24, 0x01	; 1
    47be:	90 e0       	ldi	r25, 0x00	; 0
    47c0:	02 80       	ldd	r0, Z+2	; 0x02
    47c2:	02 c0       	rjmp	.+4      	; 0x47c8 <_turn_on+0x4e>
    47c4:	88 0f       	add	r24, r24
    47c6:	99 1f       	adc	r25, r25
    47c8:	0a 94       	dec	r0
    47ca:	e2 f7       	brpl	.-8      	; 0x47c4 <_turn_on+0x4a>
    47cc:	80 95       	com	r24
    47ce:	84 23       	and	r24, r20
    47d0:	8c 93       	st	X, r24
    47d2:	08 95       	ret
    47d4:	fc 01       	movw	r30, r24
    47d6:	ee 0f       	add	r30, r30
    47d8:	ff 1f       	adc	r31, r31
    47da:	df 01       	movw	r26, r30
    47dc:	a8 0f       	add	r26, r24
    47de:	b9 1f       	adc	r27, r25
    47e0:	aa 0f       	add	r26, r26
    47e2:	bb 1f       	adc	r27, r27
    47e4:	ab 52       	subi	r26, 0x2B	; 43
    47e6:	b9 4e       	sbci	r27, 0xE9	; 233
    47e8:	0d 90       	ld	r0, X+
    47ea:	bc 91       	ld	r27, X
    47ec:	a0 2d       	mov	r26, r0
    47ee:	2c 91       	ld	r18, X
    47f0:	e8 0f       	add	r30, r24
    47f2:	f9 1f       	adc	r31, r25
    47f4:	ee 0f       	add	r30, r30
    47f6:	ff 1f       	adc	r31, r31
    47f8:	eb 52       	subi	r30, 0x2B	; 43
    47fa:	f9 4e       	sbci	r31, 0xE9	; 233
    47fc:	81 e0       	ldi	r24, 0x01	; 1
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	02 80       	ldd	r0, Z+2	; 0x02
    4802:	02 c0       	rjmp	.+4      	; 0x4808 <_turn_on+0x8e>
    4804:	88 0f       	add	r24, r24
    4806:	99 1f       	adc	r25, r25
    4808:	0a 94       	dec	r0
    480a:	e2 f7       	brpl	.-8      	; 0x4804 <_turn_on+0x8a>
    480c:	82 2b       	or	r24, r18
    480e:	8c 93       	st	X, r24
    4810:	08 95       	ret

00004812 <_hal_led_task>:
    4812:	cc 24       	eor	r12, r12
    4814:	c3 94       	inc	r12
    4816:	d1 2c       	mov	r13, r1
    4818:	68 94       	set
    481a:	bb 24       	eor	r11, r11
    481c:	b2 f8       	bld	r11, 2
    481e:	c5 ed       	ldi	r28, 0xD5	; 213
    4820:	d6 e1       	ldi	r29, 0x16	; 22
    4822:	10 e0       	ldi	r17, 0x00	; 0
    4824:	8c 81       	ldd	r24, Y+4	; 0x04
    4826:	81 30       	cpi	r24, 0x01	; 1
    4828:	81 f0       	breq	.+32     	; 0x484a <_hal_led_task+0x38>
    482a:	18 f1       	brcs	.+70     	; 0x4872 <_hal_led_task+0x60>
    482c:	82 30       	cpi	r24, 0x02	; 2
    482e:	61 f5       	brne	.+88     	; 0x4888 <_hal_led_task+0x76>
    4830:	e8 81       	ld	r30, Y
    4832:	f9 81       	ldd	r31, Y+1	; 0x01
    4834:	20 81       	ld	r18, Z
    4836:	c6 01       	movw	r24, r12
    4838:	0a 80       	ldd	r0, Y+2	; 0x02
    483a:	02 c0       	rjmp	.+4      	; 0x4840 <_hal_led_task+0x2e>
    483c:	88 0f       	add	r24, r24
    483e:	99 1f       	adc	r25, r25
    4840:	0a 94       	dec	r0
    4842:	e2 f7       	brpl	.-8      	; 0x483c <_hal_led_task+0x2a>
    4844:	82 27       	eor	r24, r18
    4846:	80 83       	st	Z, r24
    4848:	1f c0       	rjmp	.+62     	; 0x4888 <_hal_led_task+0x76>
    484a:	8d 81       	ldd	r24, Y+5	; 0x05
    484c:	8f 5f       	subi	r24, 0xFF	; 255
    484e:	86 30       	cpi	r24, 0x06	; 6
    4850:	10 f4       	brcc	.+4      	; 0x4856 <_hal_led_task+0x44>
    4852:	8d 83       	std	Y+5, r24	; 0x05
    4854:	19 c0       	rjmp	.+50     	; 0x4888 <_hal_led_task+0x76>
    4856:	1d 82       	std	Y+5, r1	; 0x05
    4858:	e8 81       	ld	r30, Y
    485a:	f9 81       	ldd	r31, Y+1	; 0x01
    485c:	20 81       	ld	r18, Z
    485e:	c6 01       	movw	r24, r12
    4860:	0a 80       	ldd	r0, Y+2	; 0x02
    4862:	02 c0       	rjmp	.+4      	; 0x4868 <_hal_led_task+0x56>
    4864:	88 0f       	add	r24, r24
    4866:	99 1f       	adc	r25, r25
    4868:	0a 94       	dec	r0
    486a:	e2 f7       	brpl	.-8      	; 0x4864 <_hal_led_task+0x52>
    486c:	82 27       	eor	r24, r18
    486e:	80 83       	st	Z, r24
    4870:	0b c0       	rjmp	.+22     	; 0x4888 <_hal_led_task+0x76>
    4872:	0d 81       	ldd	r16, Y+5	; 0x05
    4874:	00 23       	and	r16, r16
    4876:	29 f0       	breq	.+10     	; 0x4882 <_hal_led_task+0x70>
    4878:	81 2f       	mov	r24, r17
    487a:	7f df       	rcall	.-258    	; 0x477a <_turn_on>
    487c:	01 50       	subi	r16, 0x01	; 1
    487e:	0d 83       	std	Y+5, r16	; 0x05
    4880:	03 c0       	rjmp	.+6      	; 0x4888 <_hal_led_task+0x76>
    4882:	bc 82       	std	Y+4, r11	; 0x04
    4884:	81 2f       	mov	r24, r17
    4886:	2d df       	rcall	.-422    	; 0x46e2 <_turn_off>
    4888:	1f 5f       	subi	r17, 0xFF	; 255
    488a:	26 96       	adiw	r28, 0x06	; 6
    488c:	14 30       	cpi	r17, 0x04	; 4
    488e:	51 f6       	brne	.-108    	; 0x4824 <_hal_led_task+0x12>
    4890:	6c e0       	ldi	r22, 0x0C	; 12
    4892:	70 e0       	ldi	r23, 0x00	; 0
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	90 e0       	ldi	r25, 0x00	; 0
    4898:	0e 94 13 10 	call	0x2026	; 0x2026 <vTaskDelay>
    489c:	c0 cf       	rjmp	.-128    	; 0x481e <_hal_led_task+0xc>

0000489e <status_leds_initialise>:
    489e:	ef 92       	push	r14
    48a0:	ff 92       	push	r15
    48a2:	0f 93       	push	r16
    48a4:	1f 93       	push	r17
    48a6:	cf 93       	push	r28
    48a8:	df 93       	push	r29
    48aa:	08 2f       	mov	r16, r24
    48ac:	80 e4       	ldi	r24, 0x40	; 64
    48ae:	87 b9       	out	0x07, r24	; 7
    48b0:	c5 ed       	ldi	r28, 0xD5	; 213
    48b2:	d6 e1       	ldi	r29, 0x16	; 22
    48b4:	0f 2e       	mov	r0, r31
    48b6:	f8 e2       	ldi	r31, 0x28	; 40
    48b8:	ef 2e       	mov	r14, r31
    48ba:	f1 2c       	mov	r15, r1
    48bc:	f0 2d       	mov	r31, r0
    48be:	f9 82       	std	Y+1, r15	; 0x01
    48c0:	e8 82       	st	Y, r14
    48c2:	86 e0       	ldi	r24, 0x06	; 6
    48c4:	8a 83       	std	Y+2, r24	; 0x02
    48c6:	1b 82       	std	Y+3, r1	; 0x03
    48c8:	14 e0       	ldi	r17, 0x04	; 4
    48ca:	1c 83       	std	Y+4, r17	; 0x04
    48cc:	80 e0       	ldi	r24, 0x00	; 0
    48ce:	09 df       	rcall	.-494    	; 0x46e2 <_turn_off>
    48d0:	80 e8       	ldi	r24, 0x80	; 128
    48d2:	87 b9       	out	0x07, r24	; 7
    48d4:	ff 82       	std	Y+7, r15	; 0x07
    48d6:	ee 82       	std	Y+6, r14	; 0x06
    48d8:	87 e0       	ldi	r24, 0x07	; 7
    48da:	88 87       	std	Y+8, r24	; 0x08
    48dc:	19 86       	std	Y+9, r1	; 0x09
    48de:	1a 87       	std	Y+10, r17	; 0x0a
    48e0:	81 e0       	ldi	r24, 0x01	; 1
    48e2:	ff de       	rcall	.-514    	; 0x46e2 <_turn_off>
    48e4:	80 e2       	ldi	r24, 0x20	; 32
    48e6:	83 bb       	out	0x13, r24	; 19
    48e8:	84 e3       	ldi	r24, 0x34	; 52
    48ea:	90 e0       	ldi	r25, 0x00	; 0
    48ec:	9d 87       	std	Y+13, r25	; 0x0d
    48ee:	8c 87       	std	Y+12, r24	; 0x0c
    48f0:	85 e0       	ldi	r24, 0x05	; 5
    48f2:	8e 87       	std	Y+14, r24	; 0x0e
    48f4:	1f 86       	std	Y+15, r1	; 0x0f
    48f6:	18 8b       	std	Y+16, r17	; 0x10
    48f8:	82 e0       	ldi	r24, 0x02	; 2
    48fa:	f3 de       	rcall	.-538    	; 0x46e2 <_turn_off>
    48fc:	80 e1       	ldi	r24, 0x10	; 16
    48fe:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x700101>
    4902:	82 e0       	ldi	r24, 0x02	; 2
    4904:	91 e0       	ldi	r25, 0x01	; 1
    4906:	9b 8b       	std	Y+19, r25	; 0x13
    4908:	8a 8b       	std	Y+18, r24	; 0x12
    490a:	1c 8b       	std	Y+20, r17	; 0x14
    490c:	1d 8a       	std	Y+21, r1	; 0x15
    490e:	1e 8b       	std	Y+22, r17	; 0x16
    4910:	83 e0       	ldi	r24, 0x03	; 3
    4912:	e7 de       	rcall	.-562    	; 0x46e2 <_turn_off>
    4914:	e1 2c       	mov	r14, r1
    4916:	f1 2c       	mov	r15, r1
    4918:	20 e0       	ldi	r18, 0x00	; 0
    491a:	30 e0       	ldi	r19, 0x00	; 0
    491c:	40 ec       	ldi	r20, 0xC0	; 192
    491e:	50 e0       	ldi	r21, 0x00	; 0
    4920:	6f e0       	ldi	r22, 0x0F	; 15
    4922:	77 e0       	ldi	r23, 0x07	; 7
    4924:	89 e0       	ldi	r24, 0x09	; 9
    4926:	94 e2       	ldi	r25, 0x24	; 36
    4928:	0e 94 0d 0c 	call	0x181a	; 0x181a <xTaskCreate>
    492c:	df 91       	pop	r29
    492e:	cf 91       	pop	r28
    4930:	1f 91       	pop	r17
    4932:	0f 91       	pop	r16
    4934:	ff 90       	pop	r15
    4936:	ef 90       	pop	r14
    4938:	08 95       	ret

0000493a <status_leds_slowBlink>:
    493a:	cf 93       	push	r28
    493c:	df 93       	push	r29
    493e:	90 e0       	ldi	r25, 0x00	; 0
    4940:	fc 01       	movw	r30, r24
    4942:	ee 0f       	add	r30, r30
    4944:	ff 1f       	adc	r31, r31
    4946:	df 01       	movw	r26, r30
    4948:	a8 0f       	add	r26, r24
    494a:	b9 1f       	adc	r27, r25
    494c:	aa 0f       	add	r26, r26
    494e:	bb 1f       	adc	r27, r27
    4950:	ab 52       	subi	r26, 0x2B	; 43
    4952:	b9 4e       	sbci	r27, 0xE9	; 233
    4954:	cd 91       	ld	r28, X+
    4956:	dc 91       	ld	r29, X
    4958:	11 97       	sbiw	r26, 0x01	; 1
    495a:	48 81       	ld	r20, Y
    495c:	21 e0       	ldi	r18, 0x01	; 1
    495e:	30 e0       	ldi	r19, 0x00	; 0
    4960:	12 96       	adiw	r26, 0x02	; 2
    4962:	0c 90       	ld	r0, X
    4964:	12 97       	sbiw	r26, 0x02	; 2
    4966:	02 c0       	rjmp	.+4      	; 0x496c <status_leds_slowBlink+0x32>
    4968:	22 0f       	add	r18, r18
    496a:	33 1f       	adc	r19, r19
    496c:	0a 94       	dec	r0
    496e:	e2 f7       	brpl	.-8      	; 0x4968 <status_leds_slowBlink+0x2e>
    4970:	24 27       	eor	r18, r20
    4972:	28 83       	st	Y, r18
    4974:	fd 01       	movw	r30, r26
    4976:	81 e0       	ldi	r24, 0x01	; 1
    4978:	84 83       	std	Z+4, r24	; 0x04
    497a:	df 91       	pop	r29
    497c:	cf 91       	pop	r28
    497e:	08 95       	ret

00004980 <status_leds_fastBlink>:
    4980:	cf 93       	push	r28
    4982:	df 93       	push	r29
    4984:	90 e0       	ldi	r25, 0x00	; 0
    4986:	fc 01       	movw	r30, r24
    4988:	ee 0f       	add	r30, r30
    498a:	ff 1f       	adc	r31, r31
    498c:	df 01       	movw	r26, r30
    498e:	a8 0f       	add	r26, r24
    4990:	b9 1f       	adc	r27, r25
    4992:	aa 0f       	add	r26, r26
    4994:	bb 1f       	adc	r27, r27
    4996:	ab 52       	subi	r26, 0x2B	; 43
    4998:	b9 4e       	sbci	r27, 0xE9	; 233
    499a:	cd 91       	ld	r28, X+
    499c:	dc 91       	ld	r29, X
    499e:	11 97       	sbiw	r26, 0x01	; 1
    49a0:	48 81       	ld	r20, Y
    49a2:	21 e0       	ldi	r18, 0x01	; 1
    49a4:	30 e0       	ldi	r19, 0x00	; 0
    49a6:	12 96       	adiw	r26, 0x02	; 2
    49a8:	0c 90       	ld	r0, X
    49aa:	12 97       	sbiw	r26, 0x02	; 2
    49ac:	02 c0       	rjmp	.+4      	; 0x49b2 <status_leds_fastBlink+0x32>
    49ae:	22 0f       	add	r18, r18
    49b0:	33 1f       	adc	r19, r19
    49b2:	0a 94       	dec	r0
    49b4:	e2 f7       	brpl	.-8      	; 0x49ae <status_leds_fastBlink+0x2e>
    49b6:	24 27       	eor	r18, r20
    49b8:	28 83       	st	Y, r18
    49ba:	fd 01       	movw	r30, r26
    49bc:	82 e0       	ldi	r24, 0x02	; 2
    49be:	84 83       	std	Z+4, r24	; 0x04
    49c0:	df 91       	pop	r29
    49c2:	cf 91       	pop	r28
    49c4:	08 95       	ret

000049c6 <status_leds_ledOn>:
    49c6:	28 2f       	mov	r18, r24
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	f9 01       	movw	r30, r18
    49cc:	ee 0f       	add	r30, r30
    49ce:	ff 1f       	adc	r31, r31
    49d0:	e2 0f       	add	r30, r18
    49d2:	f3 1f       	adc	r31, r19
    49d4:	ee 0f       	add	r30, r30
    49d6:	ff 1f       	adc	r31, r31
    49d8:	eb 52       	subi	r30, 0x2B	; 43
    49da:	f9 4e       	sbci	r31, 0xE9	; 233
    49dc:	93 e0       	ldi	r25, 0x03	; 3
    49de:	94 83       	std	Z+4, r25	; 0x04
    49e0:	cc ce       	rjmp	.-616    	; 0x477a <_turn_on>
    49e2:	08 95       	ret

000049e4 <status_leds_ledOff>:
    49e4:	28 2f       	mov	r18, r24
    49e6:	30 e0       	ldi	r19, 0x00	; 0
    49e8:	f9 01       	movw	r30, r18
    49ea:	ee 0f       	add	r30, r30
    49ec:	ff 1f       	adc	r31, r31
    49ee:	e2 0f       	add	r30, r18
    49f0:	f3 1f       	adc	r31, r19
    49f2:	ee 0f       	add	r30, r30
    49f4:	ff 1f       	adc	r31, r31
    49f6:	eb 52       	subi	r30, 0x2B	; 43
    49f8:	f9 4e       	sbci	r31, 0xE9	; 233
    49fa:	94 e0       	ldi	r25, 0x04	; 4
    49fc:	94 83       	std	Z+4, r25	; 0x04
    49fe:	71 ce       	rjmp	.-798    	; 0x46e2 <_turn_off>
    4a00:	08 95       	ret

00004a02 <status_leds_longPuls>:
    4a02:	90 e0       	ldi	r25, 0x00	; 0
    4a04:	fc 01       	movw	r30, r24
    4a06:	ee 0f       	add	r30, r30
    4a08:	ff 1f       	adc	r31, r31
    4a0a:	df 01       	movw	r26, r30
    4a0c:	a8 0f       	add	r26, r24
    4a0e:	b9 1f       	adc	r27, r25
    4a10:	aa 0f       	add	r26, r26
    4a12:	bb 1f       	adc	r27, r27
    4a14:	ab 52       	subi	r26, 0x2B	; 43
    4a16:	b9 4e       	sbci	r27, 0xE9	; 233
    4a18:	26 e0       	ldi	r18, 0x06	; 6
    4a1a:	15 96       	adiw	r26, 0x05	; 5
    4a1c:	2c 93       	st	X, r18
    4a1e:	15 97       	sbiw	r26, 0x05	; 5
    4a20:	fd 01       	movw	r30, r26
    4a22:	14 82       	std	Z+4, r1	; 0x04
    4a24:	08 95       	ret

00004a26 <status_leds_shortPuls>:
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	fc 01       	movw	r30, r24
    4a2a:	ee 0f       	add	r30, r30
    4a2c:	ff 1f       	adc	r31, r31
    4a2e:	df 01       	movw	r26, r30
    4a30:	a8 0f       	add	r26, r24
    4a32:	b9 1f       	adc	r27, r25
    4a34:	aa 0f       	add	r26, r26
    4a36:	bb 1f       	adc	r27, r27
    4a38:	ab 52       	subi	r26, 0x2B	; 43
    4a3a:	b9 4e       	sbci	r27, 0xE9	; 233
    4a3c:	15 96       	adiw	r26, 0x05	; 5
    4a3e:	1c 92       	st	X, r1
    4a40:	15 97       	sbiw	r26, 0x05	; 5
    4a42:	fd 01       	movw	r30, r26
    4a44:	14 82       	std	Z+4, r1	; 0x04
    4a46:	08 95       	ret

00004a48 <_initTwiInterface>:
    4a48:	80 91 fb 16 	lds	r24, 0x16FB	; 0x8016fb <_twiIsInitiated>
    4a4c:	81 11       	cpse	r24, r1
    4a4e:	0c c0       	rjmp	.+24     	; 0x4a68 <_initTwiInterface+0x20>
    4a50:	8c e0       	ldi	r24, 0x0C	; 12
    4a52:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4a56:	8f ef       	ldi	r24, 0xFF	; 255
    4a58:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4a5c:	84 e0       	ldi	r24, 0x04	; 4
    4a5e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4a62:	81 e0       	ldi	r24, 0x01	; 1
    4a64:	80 93 fb 16 	sts	0x16FB, r24	; 0x8016fb <_twiIsInitiated>
    4a68:	08 95       	ret

00004a6a <twiCreate>:
    4a6a:	af 92       	push	r10
    4a6c:	bf 92       	push	r11
    4a6e:	cf 92       	push	r12
    4a70:	df 92       	push	r13
    4a72:	ef 92       	push	r14
    4a74:	ff 92       	push	r15
    4a76:	0f 93       	push	r16
    4a78:	1f 93       	push	r17
    4a7a:	cf 93       	push	r28
    4a7c:	df 93       	push	r29
    4a7e:	a8 2e       	mov	r10, r24
    4a80:	b6 2e       	mov	r11, r22
    4a82:	69 01       	movw	r12, r18
    4a84:	7a 01       	movw	r14, r20
    4a86:	84 e0       	ldi	r24, 0x04	; 4
    4a88:	90 e0       	ldi	r25, 0x00	; 0
    4a8a:	22 d3       	rcall	.+1604   	; 0x50d0 <malloc>
    4a8c:	ec 01       	movw	r28, r24
    4a8e:	89 2b       	or	r24, r25
    4a90:	61 f1       	breq	.+88     	; 0x4aea <twiCreate+0x80>
    4a92:	a8 82       	st	Y, r10
    4a94:	81 e0       	ldi	r24, 0x01	; 1
    4a96:	b8 12       	cpse	r11, r24
    4a98:	12 c0       	rjmp	.+36     	; 0x4abe <twiCreate+0x54>
    4a9a:	c7 01       	movw	r24, r14
    4a9c:	b6 01       	movw	r22, r12
    4a9e:	20 ea       	ldi	r18, 0xA0	; 160
    4aa0:	36 e8       	ldi	r19, 0x86	; 134
    4aa2:	41 e0       	ldi	r20, 0x01	; 1
    4aa4:	50 e0       	ldi	r21, 0x00	; 0
    4aa6:	ea d2       	rcall	.+1492   	; 0x507c <__udivmodsi4>
    4aa8:	da 01       	movw	r26, r20
    4aaa:	c9 01       	movw	r24, r18
    4aac:	40 97       	sbiw	r24, 0x10	; 16
    4aae:	a1 09       	sbc	r26, r1
    4ab0:	b1 09       	sbc	r27, r1
    4ab2:	b6 95       	lsr	r27
    4ab4:	a7 95       	ror	r26
    4ab6:	97 95       	ror	r25
    4ab8:	87 95       	ror	r24
    4aba:	89 83       	std	Y+1, r24	; 0x01
    4abc:	11 c0       	rjmp	.+34     	; 0x4ae0 <twiCreate+0x76>
    4abe:	c7 01       	movw	r24, r14
    4ac0:	b6 01       	movw	r22, r12
    4ac2:	20 e8       	ldi	r18, 0x80	; 128
    4ac4:	3a e1       	ldi	r19, 0x1A	; 26
    4ac6:	46 e0       	ldi	r20, 0x06	; 6
    4ac8:	50 e0       	ldi	r21, 0x00	; 0
    4aca:	d8 d2       	rcall	.+1456   	; 0x507c <__udivmodsi4>
    4acc:	da 01       	movw	r26, r20
    4ace:	c9 01       	movw	r24, r18
    4ad0:	40 97       	sbiw	r24, 0x10	; 16
    4ad2:	a1 09       	sbc	r26, r1
    4ad4:	b1 09       	sbc	r27, r1
    4ad6:	b6 95       	lsr	r27
    4ad8:	a7 95       	ror	r26
    4ada:	97 95       	ror	r25
    4adc:	87 95       	ror	r24
    4ade:	89 83       	std	Y+1, r24	; 0x01
    4ae0:	1b 83       	std	Y+3, r17	; 0x03
    4ae2:	0a 83       	std	Y+2, r16	; 0x02
    4ae4:	8c 2f       	mov	r24, r28
    4ae6:	9d 2f       	mov	r25, r29
    4ae8:	02 c0       	rjmp	.+4      	; 0x4aee <twiCreate+0x84>
    4aea:	80 e0       	ldi	r24, 0x00	; 0
    4aec:	90 e0       	ldi	r25, 0x00	; 0
    4aee:	df 91       	pop	r29
    4af0:	cf 91       	pop	r28
    4af2:	1f 91       	pop	r17
    4af4:	0f 91       	pop	r16
    4af6:	ff 90       	pop	r15
    4af8:	ef 90       	pop	r14
    4afa:	df 90       	pop	r13
    4afc:	cf 90       	pop	r12
    4afe:	bf 90       	pop	r11
    4b00:	af 90       	pop	r10
    4b02:	08 95       	ret

00004b04 <twiIsBusy>:
    4b04:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4b08:	81 70       	andi	r24, 0x01	; 1
    4b0a:	08 95       	ret

00004b0c <twiTransmit>:
    4b0c:	ff 92       	push	r15
    4b0e:	0f 93       	push	r16
    4b10:	1f 93       	push	r17
    4b12:	cf 93       	push	r28
    4b14:	df 93       	push	r29
    4b16:	00 97       	sbiw	r24, 0x00	; 0
    4b18:	d1 f1       	breq	.+116    	; 0x4b8e <twiTransmit+0x82>
    4b1a:	4a 30       	cpi	r20, 0x0A	; 10
    4b1c:	d0 f5       	brcc	.+116    	; 0x4b92 <twiTransmit+0x86>
    4b1e:	f4 2e       	mov	r15, r20
    4b20:	8b 01       	movw	r16, r22
    4b22:	ec 01       	movw	r28, r24
    4b24:	ef df       	rcall	.-34     	; 0x4b04 <twiIsBusy>
    4b26:	81 11       	cpse	r24, r1
    4b28:	36 c0       	rjmp	.+108    	; 0x4b96 <twiTransmit+0x8a>
    4b2a:	80 91 ee 16 	lds	r24, 0x16EE	; 0x8016ee <_twiCurrentHandler>
    4b2e:	90 91 ef 16 	lds	r25, 0x16EF	; 0x8016ef <_twiCurrentHandler+0x1>
    4b32:	c8 17       	cp	r28, r24
    4b34:	d9 07       	cpc	r29, r25
    4b36:	41 f0       	breq	.+16     	; 0x4b48 <twiTransmit+0x3c>
    4b38:	87 df       	rcall	.-242    	; 0x4a48 <_initTwiInterface>
    4b3a:	89 81       	ldd	r24, Y+1	; 0x01
    4b3c:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4b40:	d0 93 ef 16 	sts	0x16EF, r29	; 0x8016ef <_twiCurrentHandler+0x1>
    4b44:	c0 93 ee 16 	sts	0x16EE, r28	; 0x8016ee <_twiCurrentHandler>
    4b48:	81 e0       	ldi	r24, 0x01	; 1
    4b4a:	8f 0d       	add	r24, r15
    4b4c:	80 93 f0 16 	sts	0x16F0, r24	; 0x8016f0 <_twiMessageLen>
    4b50:	88 81       	ld	r24, Y
    4b52:	88 0f       	add	r24, r24
    4b54:	80 93 f1 16 	sts	0x16F1, r24	; 0x8016f1 <_twiMessageBuffer>
    4b58:	ff 20       	and	r15, r15
    4b5a:	89 f0       	breq	.+34     	; 0x4b7e <twiTransmit+0x72>
    4b5c:	f8 01       	movw	r30, r16
    4b5e:	a2 ef       	ldi	r26, 0xF2	; 242
    4b60:	b6 e1       	ldi	r27, 0x16	; 22
    4b62:	4f ef       	ldi	r20, 0xFF	; 255
    4b64:	4f 0d       	add	r20, r15
    4b66:	64 2f       	mov	r22, r20
    4b68:	70 e0       	ldi	r23, 0x00	; 0
    4b6a:	cb 01       	movw	r24, r22
    4b6c:	01 96       	adiw	r24, 0x01	; 1
    4b6e:	b8 01       	movw	r22, r16
    4b70:	68 0f       	add	r22, r24
    4b72:	79 1f       	adc	r23, r25
    4b74:	81 91       	ld	r24, Z+
    4b76:	8d 93       	st	X+, r24
    4b78:	e6 17       	cp	r30, r22
    4b7a:	f7 07       	cpc	r31, r23
    4b7c:	d9 f7       	brne	.-10     	; 0x4b74 <twiTransmit+0x68>
    4b7e:	88 ef       	ldi	r24, 0xF8	; 248
    4b80:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4b84:	85 ea       	ldi	r24, 0xA5	; 165
    4b86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4b8a:	84 e0       	ldi	r24, 0x04	; 4
    4b8c:	05 c0       	rjmp	.+10     	; 0x4b98 <twiTransmit+0x8c>
    4b8e:	86 e0       	ldi	r24, 0x06	; 6
    4b90:	03 c0       	rjmp	.+6      	; 0x4b98 <twiTransmit+0x8c>
    4b92:	87 e0       	ldi	r24, 0x07	; 7
    4b94:	01 c0       	rjmp	.+2      	; 0x4b98 <twiTransmit+0x8c>
    4b96:	82 e0       	ldi	r24, 0x02	; 2
    4b98:	df 91       	pop	r29
    4b9a:	cf 91       	pop	r28
    4b9c:	1f 91       	pop	r17
    4b9e:	0f 91       	pop	r16
    4ba0:	ff 90       	pop	r15
    4ba2:	08 95       	ret

00004ba4 <twiReceive>:
    4ba4:	1f 93       	push	r17
    4ba6:	cf 93       	push	r28
    4ba8:	df 93       	push	r29
    4baa:	00 97       	sbiw	r24, 0x00	; 0
    4bac:	29 f1       	breq	.+74     	; 0x4bf8 <twiReceive+0x54>
    4bae:	6b 30       	cpi	r22, 0x0B	; 11
    4bb0:	28 f5       	brcc	.+74     	; 0x4bfc <twiReceive+0x58>
    4bb2:	16 2f       	mov	r17, r22
    4bb4:	ec 01       	movw	r28, r24
    4bb6:	a6 df       	rcall	.-180    	; 0x4b04 <twiIsBusy>
    4bb8:	81 11       	cpse	r24, r1
    4bba:	22 c0       	rjmp	.+68     	; 0x4c00 <twiReceive+0x5c>
    4bbc:	80 91 ee 16 	lds	r24, 0x16EE	; 0x8016ee <_twiCurrentHandler>
    4bc0:	90 91 ef 16 	lds	r25, 0x16EF	; 0x8016ef <_twiCurrentHandler+0x1>
    4bc4:	c8 17       	cp	r28, r24
    4bc6:	d9 07       	cpc	r29, r25
    4bc8:	41 f0       	breq	.+16     	; 0x4bda <twiReceive+0x36>
    4bca:	3e df       	rcall	.-388    	; 0x4a48 <_initTwiInterface>
    4bcc:	89 81       	ldd	r24, Y+1	; 0x01
    4bce:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7000b8>
    4bd2:	d0 93 ef 16 	sts	0x16EF, r29	; 0x8016ef <_twiCurrentHandler+0x1>
    4bd6:	c0 93 ee 16 	sts	0x16EE, r28	; 0x8016ee <_twiCurrentHandler>
    4bda:	10 93 f0 16 	sts	0x16F0, r17	; 0x8016f0 <_twiMessageLen>
    4bde:	88 81       	ld	r24, Y
    4be0:	88 0f       	add	r24, r24
    4be2:	81 60       	ori	r24, 0x01	; 1
    4be4:	80 93 f1 16 	sts	0x16F1, r24	; 0x8016f1 <_twiMessageBuffer>
    4be8:	88 ef       	ldi	r24, 0xF8	; 248
    4bea:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4bee:	85 ea       	ldi	r24, 0xA5	; 165
    4bf0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4bf4:	85 e0       	ldi	r24, 0x05	; 5
    4bf6:	05 c0       	rjmp	.+10     	; 0x4c02 <twiReceive+0x5e>
    4bf8:	86 e0       	ldi	r24, 0x06	; 6
    4bfa:	03 c0       	rjmp	.+6      	; 0x4c02 <twiReceive+0x5e>
    4bfc:	87 e0       	ldi	r24, 0x07	; 7
    4bfe:	01 c0       	rjmp	.+2      	; 0x4c02 <twiReceive+0x5e>
    4c00:	82 e0       	ldi	r24, 0x02	; 2
    4c02:	df 91       	pop	r29
    4c04:	cf 91       	pop	r28
    4c06:	1f 91       	pop	r17
    4c08:	08 95       	ret

00004c0a <__vector_39>:
    4c0a:	1f 92       	push	r1
    4c0c:	0f 92       	push	r0
    4c0e:	0f b6       	in	r0, 0x3f	; 63
    4c10:	0f 92       	push	r0
    4c12:	11 24       	eor	r1, r1
    4c14:	0b b6       	in	r0, 0x3b	; 59
    4c16:	0f 92       	push	r0
    4c18:	2f 93       	push	r18
    4c1a:	3f 93       	push	r19
    4c1c:	4f 93       	push	r20
    4c1e:	5f 93       	push	r21
    4c20:	6f 93       	push	r22
    4c22:	7f 93       	push	r23
    4c24:	8f 93       	push	r24
    4c26:	9f 93       	push	r25
    4c28:	af 93       	push	r26
    4c2a:	bf 93       	push	r27
    4c2c:	ef 93       	push	r30
    4c2e:	ff 93       	push	r31
    4c30:	e0 91 b9 00 	lds	r30, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4c34:	8e 2f       	mov	r24, r30
    4c36:	90 e0       	ldi	r25, 0x00	; 0
    4c38:	fc 01       	movw	r30, r24
    4c3a:	38 97       	sbiw	r30, 0x08	; 8
    4c3c:	e1 35       	cpi	r30, 0x51	; 81
    4c3e:	f1 05       	cpc	r31, r1
    4c40:	08 f0       	brcs	.+2      	; 0x4c44 <__vector_39+0x3a>
    4c42:	75 c0       	rjmp	.+234    	; 0x4d2e <__vector_39+0x124>
    4c44:	88 27       	eor	r24, r24
    4c46:	e4 58       	subi	r30, 0x84	; 132
    4c48:	ff 4f       	sbci	r31, 0xFF	; 255
    4c4a:	8f 4f       	sbci	r24, 0xFF	; 255
    4c4c:	39 c2       	rjmp	.+1138   	; 0x50c0 <__tablejump2__>
    4c4e:	10 92 ed 16 	sts	0x16ED, r1	; 0x8016ed <_index.1885>
    4c52:	e0 91 ed 16 	lds	r30, 0x16ED	; 0x8016ed <_index.1885>
    4c56:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_twiMessageLen>
    4c5a:	e8 17       	cp	r30, r24
    4c5c:	70 f4       	brcc	.+28     	; 0x4c7a <__vector_39+0x70>
    4c5e:	81 e0       	ldi	r24, 0x01	; 1
    4c60:	8e 0f       	add	r24, r30
    4c62:	80 93 ed 16 	sts	0x16ED, r24	; 0x8016ed <_index.1885>
    4c66:	f0 e0       	ldi	r31, 0x00	; 0
    4c68:	ef 50       	subi	r30, 0x0F	; 15
    4c6a:	f9 4e       	sbci	r31, 0xE9	; 233
    4c6c:	80 81       	ld	r24, Z
    4c6e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4c72:	85 e8       	ldi	r24, 0x85	; 133
    4c74:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4c78:	72 c0       	rjmp	.+228    	; 0x4d5e <__vector_39+0x154>
    4c7a:	84 e9       	ldi	r24, 0x94	; 148
    4c7c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4c80:	80 91 ee 16 	lds	r24, 0x16EE	; 0x8016ee <_twiCurrentHandler>
    4c84:	90 91 ef 16 	lds	r25, 0x16EF	; 0x8016ef <_twiCurrentHandler+0x1>
    4c88:	dc 01       	movw	r26, r24
    4c8a:	12 96       	adiw	r26, 0x02	; 2
    4c8c:	ed 91       	ld	r30, X+
    4c8e:	fc 91       	ld	r31, X
    4c90:	13 97       	sbiw	r26, 0x03	; 3
    4c92:	30 97       	sbiw	r30, 0x00	; 0
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <__vector_39+0x8e>
    4c96:	63 c0       	rjmp	.+198    	; 0x4d5e <__vector_39+0x154>
    4c98:	20 e0       	ldi	r18, 0x00	; 0
    4c9a:	40 e0       	ldi	r20, 0x00	; 0
    4c9c:	50 e0       	ldi	r21, 0x00	; 0
    4c9e:	64 e0       	ldi	r22, 0x04	; 4
    4ca0:	19 95       	eicall
    4ca2:	5d c0       	rjmp	.+186    	; 0x4d5e <__vector_39+0x154>
    4ca4:	e0 91 ed 16 	lds	r30, 0x16ED	; 0x8016ed <_index.1885>
    4ca8:	81 e0       	ldi	r24, 0x01	; 1
    4caa:	8e 0f       	add	r24, r30
    4cac:	80 93 ed 16 	sts	0x16ED, r24	; 0x8016ed <_index.1885>
    4cb0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4cb4:	f0 e0       	ldi	r31, 0x00	; 0
    4cb6:	ef 50       	subi	r30, 0x0F	; 15
    4cb8:	f9 4e       	sbci	r31, 0xE9	; 233
    4cba:	80 83       	st	Z, r24
    4cbc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4cc0:	80 34       	cpi	r24, 0x40	; 64
    4cc2:	11 f4       	brne	.+4      	; 0x4cc8 <__vector_39+0xbe>
    4cc4:	10 92 ed 16 	sts	0x16ED, r1	; 0x8016ed <_index.1885>
    4cc8:	20 91 ed 16 	lds	r18, 0x16ED	; 0x8016ed <_index.1885>
    4ccc:	30 e0       	ldi	r19, 0x00	; 0
    4cce:	80 91 f0 16 	lds	r24, 0x16F0	; 0x8016f0 <_twiMessageLen>
    4cd2:	90 e0       	ldi	r25, 0x00	; 0
    4cd4:	01 97       	sbiw	r24, 0x01	; 1
    4cd6:	28 17       	cp	r18, r24
    4cd8:	39 07       	cpc	r19, r25
    4cda:	24 f4       	brge	.+8      	; 0x4ce4 <__vector_39+0xda>
    4cdc:	85 ec       	ldi	r24, 0xC5	; 197
    4cde:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4ce2:	3d c0       	rjmp	.+122    	; 0x4d5e <__vector_39+0x154>
    4ce4:	85 e8       	ldi	r24, 0x85	; 133
    4ce6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4cea:	39 c0       	rjmp	.+114    	; 0x4d5e <__vector_39+0x154>
    4cec:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7000bb>
    4cf0:	e0 91 ed 16 	lds	r30, 0x16ED	; 0x8016ed <_index.1885>
    4cf4:	f0 e0       	ldi	r31, 0x00	; 0
    4cf6:	ef 50       	subi	r30, 0x0F	; 15
    4cf8:	f9 4e       	sbci	r31, 0xE9	; 233
    4cfa:	80 83       	st	Z, r24
    4cfc:	84 e9       	ldi	r24, 0x94	; 148
    4cfe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d02:	80 91 ee 16 	lds	r24, 0x16EE	; 0x8016ee <_twiCurrentHandler>
    4d06:	90 91 ef 16 	lds	r25, 0x16EF	; 0x8016ef <_twiCurrentHandler+0x1>
    4d0a:	dc 01       	movw	r26, r24
    4d0c:	12 96       	adiw	r26, 0x02	; 2
    4d0e:	ed 91       	ld	r30, X+
    4d10:	fc 91       	ld	r31, X
    4d12:	13 97       	sbiw	r26, 0x03	; 3
    4d14:	30 97       	sbiw	r30, 0x00	; 0
    4d16:	19 f1       	breq	.+70     	; 0x4d5e <__vector_39+0x154>
    4d18:	20 91 f0 16 	lds	r18, 0x16F0	; 0x8016f0 <_twiMessageLen>
    4d1c:	41 ef       	ldi	r20, 0xF1	; 241
    4d1e:	56 e1       	ldi	r21, 0x16	; 22
    4d20:	65 e0       	ldi	r22, 0x05	; 5
    4d22:	19 95       	eicall
    4d24:	1c c0       	rjmp	.+56     	; 0x4d5e <__vector_39+0x154>
    4d26:	85 ea       	ldi	r24, 0xA5	; 165
    4d28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d2c:	18 c0       	rjmp	.+48     	; 0x4d5e <__vector_39+0x154>
    4d2e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7000b9>
    4d32:	80 93 21 02 	sts	0x0221, r24	; 0x800221 <_twiCurrentState>
    4d36:	84 e0       	ldi	r24, 0x04	; 4
    4d38:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7000bc>
    4d3c:	80 91 ee 16 	lds	r24, 0x16EE	; 0x8016ee <_twiCurrentHandler>
    4d40:	90 91 ef 16 	lds	r25, 0x16EF	; 0x8016ef <_twiCurrentHandler+0x1>
    4d44:	dc 01       	movw	r26, r24
    4d46:	12 96       	adiw	r26, 0x02	; 2
    4d48:	ed 91       	ld	r30, X+
    4d4a:	fc 91       	ld	r31, X
    4d4c:	13 97       	sbiw	r26, 0x03	; 3
    4d4e:	30 97       	sbiw	r30, 0x00	; 0
    4d50:	31 f0       	breq	.+12     	; 0x4d5e <__vector_39+0x154>
    4d52:	20 e0       	ldi	r18, 0x00	; 0
    4d54:	40 e0       	ldi	r20, 0x00	; 0
    4d56:	50 e0       	ldi	r21, 0x00	; 0
    4d58:	60 91 21 02 	lds	r22, 0x0221	; 0x800221 <_twiCurrentState>
    4d5c:	19 95       	eicall
    4d5e:	ff 91       	pop	r31
    4d60:	ef 91       	pop	r30
    4d62:	bf 91       	pop	r27
    4d64:	af 91       	pop	r26
    4d66:	9f 91       	pop	r25
    4d68:	8f 91       	pop	r24
    4d6a:	7f 91       	pop	r23
    4d6c:	6f 91       	pop	r22
    4d6e:	5f 91       	pop	r21
    4d70:	4f 91       	pop	r20
    4d72:	3f 91       	pop	r19
    4d74:	2f 91       	pop	r18
    4d76:	0f 90       	pop	r0
    4d78:	0b be       	out	0x3b, r0	; 59
    4d7a:	0f 90       	pop	r0
    4d7c:	0f be       	out	0x3f, r0	; 63
    4d7e:	0f 90       	pop	r0
    4d80:	1f 90       	pop	r1
    4d82:	18 95       	reti

00004d84 <fifo_init>:
    4d84:	fc 01       	movw	r30, r24
    4d86:	41 11       	cpse	r20, r1
    4d88:	01 c0       	rjmp	.+2      	; 0x4d8c <fifo_init+0x8>
    4d8a:	c3 d2       	rcall	.+1414   	; 0x5312 <abort>
    4d8c:	84 2f       	mov	r24, r20
    4d8e:	90 e0       	ldi	r25, 0x00	; 0
    4d90:	9c 01       	movw	r18, r24
    4d92:	21 50       	subi	r18, 0x01	; 1
    4d94:	31 09       	sbc	r19, r1
    4d96:	82 23       	and	r24, r18
    4d98:	93 23       	and	r25, r19
    4d9a:	89 2b       	or	r24, r25
    4d9c:	09 f0       	breq	.+2      	; 0x4da0 <fifo_init+0x1c>
    4d9e:	b9 d2       	rcall	.+1394   	; 0x5312 <abort>
    4da0:	41 38       	cpi	r20, 0x81	; 129
    4da2:	08 f0       	brcs	.+2      	; 0x4da6 <fifo_init+0x22>
    4da4:	b6 d2       	rcall	.+1388   	; 0x5312 <abort>
    4da6:	12 82       	std	Z+2, r1	; 0x02
    4da8:	13 82       	std	Z+3, r1	; 0x03
    4daa:	44 83       	std	Z+4, r20	; 0x04
    4dac:	44 0f       	add	r20, r20
    4dae:	41 50       	subi	r20, 0x01	; 1
    4db0:	45 83       	std	Z+5, r20	; 0x05
    4db2:	71 83       	std	Z+1, r23	; 0x01
    4db4:	60 83       	st	Z, r22
    4db6:	80 e0       	ldi	r24, 0x00	; 0
    4db8:	90 e0       	ldi	r25, 0x00	; 0
    4dba:	08 95       	ret

00004dbc <__subsf3>:
    4dbc:	50 58       	subi	r21, 0x80	; 128

00004dbe <__addsf3>:
    4dbe:	bb 27       	eor	r27, r27
    4dc0:	aa 27       	eor	r26, r26
    4dc2:	0e d0       	rcall	.+28     	; 0x4de0 <__addsf3x>
    4dc4:	e4 c0       	rjmp	.+456    	; 0x4f8e <__fp_round>
    4dc6:	d5 d0       	rcall	.+426    	; 0x4f72 <__fp_pscA>
    4dc8:	30 f0       	brcs	.+12     	; 0x4dd6 <__addsf3+0x18>
    4dca:	da d0       	rcall	.+436    	; 0x4f80 <__fp_pscB>
    4dcc:	20 f0       	brcs	.+8      	; 0x4dd6 <__addsf3+0x18>
    4dce:	31 f4       	brne	.+12     	; 0x4ddc <__addsf3+0x1e>
    4dd0:	9f 3f       	cpi	r25, 0xFF	; 255
    4dd2:	11 f4       	brne	.+4      	; 0x4dd8 <__addsf3+0x1a>
    4dd4:	1e f4       	brtc	.+6      	; 0x4ddc <__addsf3+0x1e>
    4dd6:	ca c0       	rjmp	.+404    	; 0x4f6c <__fp_nan>
    4dd8:	0e f4       	brtc	.+2      	; 0x4ddc <__addsf3+0x1e>
    4dda:	e0 95       	com	r30
    4ddc:	e7 fb       	bst	r30, 7
    4dde:	c0 c0       	rjmp	.+384    	; 0x4f60 <__fp_inf>

00004de0 <__addsf3x>:
    4de0:	e9 2f       	mov	r30, r25
    4de2:	0e 94 a1 19 	call	0x3342	; 0x3342 <__fp_split3>
    4de6:	78 f3       	brcs	.-34     	; 0x4dc6 <__addsf3+0x8>
    4de8:	ba 17       	cp	r27, r26
    4dea:	62 07       	cpc	r22, r18
    4dec:	73 07       	cpc	r23, r19
    4dee:	84 07       	cpc	r24, r20
    4df0:	95 07       	cpc	r25, r21
    4df2:	20 f0       	brcs	.+8      	; 0x4dfc <__addsf3x+0x1c>
    4df4:	79 f4       	brne	.+30     	; 0x4e14 <__addsf3x+0x34>
    4df6:	a6 f5       	brtc	.+104    	; 0x4e60 <__addsf3x+0x80>
    4df8:	0c 94 c3 19 	jmp	0x3386	; 0x3386 <__fp_zero>
    4dfc:	0e f4       	brtc	.+2      	; 0x4e00 <__addsf3x+0x20>
    4dfe:	e0 95       	com	r30
    4e00:	0b 2e       	mov	r0, r27
    4e02:	ba 2f       	mov	r27, r26
    4e04:	a0 2d       	mov	r26, r0
    4e06:	0b 01       	movw	r0, r22
    4e08:	b9 01       	movw	r22, r18
    4e0a:	90 01       	movw	r18, r0
    4e0c:	0c 01       	movw	r0, r24
    4e0e:	ca 01       	movw	r24, r20
    4e10:	a0 01       	movw	r20, r0
    4e12:	11 24       	eor	r1, r1
    4e14:	ff 27       	eor	r31, r31
    4e16:	59 1b       	sub	r21, r25
    4e18:	99 f0       	breq	.+38     	; 0x4e40 <__addsf3x+0x60>
    4e1a:	59 3f       	cpi	r21, 0xF9	; 249
    4e1c:	50 f4       	brcc	.+20     	; 0x4e32 <__addsf3x+0x52>
    4e1e:	50 3e       	cpi	r21, 0xE0	; 224
    4e20:	68 f1       	brcs	.+90     	; 0x4e7c <__addsf3x+0x9c>
    4e22:	1a 16       	cp	r1, r26
    4e24:	f0 40       	sbci	r31, 0x00	; 0
    4e26:	a2 2f       	mov	r26, r18
    4e28:	23 2f       	mov	r18, r19
    4e2a:	34 2f       	mov	r19, r20
    4e2c:	44 27       	eor	r20, r20
    4e2e:	58 5f       	subi	r21, 0xF8	; 248
    4e30:	f3 cf       	rjmp	.-26     	; 0x4e18 <__addsf3x+0x38>
    4e32:	46 95       	lsr	r20
    4e34:	37 95       	ror	r19
    4e36:	27 95       	ror	r18
    4e38:	a7 95       	ror	r26
    4e3a:	f0 40       	sbci	r31, 0x00	; 0
    4e3c:	53 95       	inc	r21
    4e3e:	c9 f7       	brne	.-14     	; 0x4e32 <__addsf3x+0x52>
    4e40:	7e f4       	brtc	.+30     	; 0x4e60 <__addsf3x+0x80>
    4e42:	1f 16       	cp	r1, r31
    4e44:	ba 0b       	sbc	r27, r26
    4e46:	62 0b       	sbc	r22, r18
    4e48:	73 0b       	sbc	r23, r19
    4e4a:	84 0b       	sbc	r24, r20
    4e4c:	ba f0       	brmi	.+46     	; 0x4e7c <__addsf3x+0x9c>
    4e4e:	91 50       	subi	r25, 0x01	; 1
    4e50:	a1 f0       	breq	.+40     	; 0x4e7a <__addsf3x+0x9a>
    4e52:	ff 0f       	add	r31, r31
    4e54:	bb 1f       	adc	r27, r27
    4e56:	66 1f       	adc	r22, r22
    4e58:	77 1f       	adc	r23, r23
    4e5a:	88 1f       	adc	r24, r24
    4e5c:	c2 f7       	brpl	.-16     	; 0x4e4e <__addsf3x+0x6e>
    4e5e:	0e c0       	rjmp	.+28     	; 0x4e7c <__addsf3x+0x9c>
    4e60:	ba 0f       	add	r27, r26
    4e62:	62 1f       	adc	r22, r18
    4e64:	73 1f       	adc	r23, r19
    4e66:	84 1f       	adc	r24, r20
    4e68:	48 f4       	brcc	.+18     	; 0x4e7c <__addsf3x+0x9c>
    4e6a:	87 95       	ror	r24
    4e6c:	77 95       	ror	r23
    4e6e:	67 95       	ror	r22
    4e70:	b7 95       	ror	r27
    4e72:	f7 95       	ror	r31
    4e74:	9e 3f       	cpi	r25, 0xFE	; 254
    4e76:	08 f0       	brcs	.+2      	; 0x4e7a <__addsf3x+0x9a>
    4e78:	b1 cf       	rjmp	.-158    	; 0x4ddc <__addsf3+0x1e>
    4e7a:	93 95       	inc	r25
    4e7c:	88 0f       	add	r24, r24
    4e7e:	08 f0       	brcs	.+2      	; 0x4e82 <__addsf3x+0xa2>
    4e80:	99 27       	eor	r25, r25
    4e82:	ee 0f       	add	r30, r30
    4e84:	97 95       	ror	r25
    4e86:	87 95       	ror	r24
    4e88:	08 95       	ret

00004e8a <__divsf3>:
    4e8a:	0d d0       	rcall	.+26     	; 0x4ea6 <__divsf3x>
    4e8c:	80 c0       	rjmp	.+256    	; 0x4f8e <__fp_round>
    4e8e:	78 d0       	rcall	.+240    	; 0x4f80 <__fp_pscB>
    4e90:	48 f0       	brcs	.+18     	; 0x4ea4 <__divsf3+0x1a>
    4e92:	6f d0       	rcall	.+222    	; 0x4f72 <__fp_pscA>
    4e94:	38 f0       	brcs	.+14     	; 0x4ea4 <__divsf3+0x1a>
    4e96:	21 f4       	brne	.+8      	; 0x4ea0 <__divsf3+0x16>
    4e98:	5f 3f       	cpi	r21, 0xFF	; 255
    4e9a:	21 f0       	breq	.+8      	; 0x4ea4 <__divsf3+0x1a>
    4e9c:	61 c0       	rjmp	.+194    	; 0x4f60 <__fp_inf>
    4e9e:	51 11       	cpse	r21, r1
    4ea0:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_szero>
    4ea4:	63 c0       	rjmp	.+198    	; 0x4f6c <__fp_nan>

00004ea6 <__divsf3x>:
    4ea6:	0e 94 a1 19 	call	0x3342	; 0x3342 <__fp_split3>
    4eaa:	88 f3       	brcs	.-30     	; 0x4e8e <__divsf3+0x4>

00004eac <__divsf3_pse>:
    4eac:	99 23       	and	r25, r25
    4eae:	b9 f3       	breq	.-18     	; 0x4e9e <__divsf3+0x14>
    4eb0:	55 23       	and	r21, r21
    4eb2:	a1 f3       	breq	.-24     	; 0x4e9c <__divsf3+0x12>
    4eb4:	95 1b       	sub	r25, r21
    4eb6:	55 0b       	sbc	r21, r21
    4eb8:	bb 27       	eor	r27, r27
    4eba:	aa 27       	eor	r26, r26
    4ebc:	62 17       	cp	r22, r18
    4ebe:	73 07       	cpc	r23, r19
    4ec0:	84 07       	cpc	r24, r20
    4ec2:	38 f0       	brcs	.+14     	; 0x4ed2 <__divsf3_pse+0x26>
    4ec4:	9f 5f       	subi	r25, 0xFF	; 255
    4ec6:	5f 4f       	sbci	r21, 0xFF	; 255
    4ec8:	22 0f       	add	r18, r18
    4eca:	33 1f       	adc	r19, r19
    4ecc:	44 1f       	adc	r20, r20
    4ece:	aa 1f       	adc	r26, r26
    4ed0:	a9 f3       	breq	.-22     	; 0x4ebc <__divsf3_pse+0x10>
    4ed2:	34 d0       	rcall	.+104    	; 0x4f3c <__divsf3_pse+0x90>
    4ed4:	0e 2e       	mov	r0, r30
    4ed6:	3a f0       	brmi	.+14     	; 0x4ee6 <__divsf3_pse+0x3a>
    4ed8:	e0 e8       	ldi	r30, 0x80	; 128
    4eda:	31 d0       	rcall	.+98     	; 0x4f3e <__divsf3_pse+0x92>
    4edc:	91 50       	subi	r25, 0x01	; 1
    4ede:	50 40       	sbci	r21, 0x00	; 0
    4ee0:	e6 95       	lsr	r30
    4ee2:	00 1c       	adc	r0, r0
    4ee4:	ca f7       	brpl	.-14     	; 0x4ed8 <__divsf3_pse+0x2c>
    4ee6:	2a d0       	rcall	.+84     	; 0x4f3c <__divsf3_pse+0x90>
    4ee8:	fe 2f       	mov	r31, r30
    4eea:	28 d0       	rcall	.+80     	; 0x4f3c <__divsf3_pse+0x90>
    4eec:	66 0f       	add	r22, r22
    4eee:	77 1f       	adc	r23, r23
    4ef0:	88 1f       	adc	r24, r24
    4ef2:	bb 1f       	adc	r27, r27
    4ef4:	26 17       	cp	r18, r22
    4ef6:	37 07       	cpc	r19, r23
    4ef8:	48 07       	cpc	r20, r24
    4efa:	ab 07       	cpc	r26, r27
    4efc:	b0 e8       	ldi	r27, 0x80	; 128
    4efe:	09 f0       	breq	.+2      	; 0x4f02 <__divsf3_pse+0x56>
    4f00:	bb 0b       	sbc	r27, r27
    4f02:	80 2d       	mov	r24, r0
    4f04:	bf 01       	movw	r22, r30
    4f06:	ff 27       	eor	r31, r31
    4f08:	93 58       	subi	r25, 0x83	; 131
    4f0a:	5f 4f       	sbci	r21, 0xFF	; 255
    4f0c:	32 f0       	brmi	.+12     	; 0x4f1a <__divsf3_pse+0x6e>
    4f0e:	9e 3f       	cpi	r25, 0xFE	; 254
    4f10:	51 05       	cpc	r21, r1
    4f12:	70 f0       	brcs	.+28     	; 0x4f30 <__divsf3_pse+0x84>
    4f14:	25 c0       	rjmp	.+74     	; 0x4f60 <__fp_inf>
    4f16:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_szero>
    4f1a:	5f 3f       	cpi	r21, 0xFF	; 255
    4f1c:	e4 f3       	brlt	.-8      	; 0x4f16 <__divsf3_pse+0x6a>
    4f1e:	98 3e       	cpi	r25, 0xE8	; 232
    4f20:	d4 f3       	brlt	.-12     	; 0x4f16 <__divsf3_pse+0x6a>
    4f22:	86 95       	lsr	r24
    4f24:	77 95       	ror	r23
    4f26:	67 95       	ror	r22
    4f28:	b7 95       	ror	r27
    4f2a:	f7 95       	ror	r31
    4f2c:	9f 5f       	subi	r25, 0xFF	; 255
    4f2e:	c9 f7       	brne	.-14     	; 0x4f22 <__divsf3_pse+0x76>
    4f30:	88 0f       	add	r24, r24
    4f32:	91 1d       	adc	r25, r1
    4f34:	96 95       	lsr	r25
    4f36:	87 95       	ror	r24
    4f38:	97 f9       	bld	r25, 7
    4f3a:	08 95       	ret
    4f3c:	e1 e0       	ldi	r30, 0x01	; 1
    4f3e:	66 0f       	add	r22, r22
    4f40:	77 1f       	adc	r23, r23
    4f42:	88 1f       	adc	r24, r24
    4f44:	bb 1f       	adc	r27, r27
    4f46:	62 17       	cp	r22, r18
    4f48:	73 07       	cpc	r23, r19
    4f4a:	84 07       	cpc	r24, r20
    4f4c:	ba 07       	cpc	r27, r26
    4f4e:	20 f0       	brcs	.+8      	; 0x4f58 <__divsf3_pse+0xac>
    4f50:	62 1b       	sub	r22, r18
    4f52:	73 0b       	sbc	r23, r19
    4f54:	84 0b       	sbc	r24, r20
    4f56:	ba 0b       	sbc	r27, r26
    4f58:	ee 1f       	adc	r30, r30
    4f5a:	88 f7       	brcc	.-30     	; 0x4f3e <__divsf3_pse+0x92>
    4f5c:	e0 95       	com	r30
    4f5e:	08 95       	ret

00004f60 <__fp_inf>:
    4f60:	97 f9       	bld	r25, 7
    4f62:	9f 67       	ori	r25, 0x7F	; 127
    4f64:	80 e8       	ldi	r24, 0x80	; 128
    4f66:	70 e0       	ldi	r23, 0x00	; 0
    4f68:	60 e0       	ldi	r22, 0x00	; 0
    4f6a:	08 95       	ret

00004f6c <__fp_nan>:
    4f6c:	9f ef       	ldi	r25, 0xFF	; 255
    4f6e:	80 ec       	ldi	r24, 0xC0	; 192
    4f70:	08 95       	ret

00004f72 <__fp_pscA>:
    4f72:	00 24       	eor	r0, r0
    4f74:	0a 94       	dec	r0
    4f76:	16 16       	cp	r1, r22
    4f78:	17 06       	cpc	r1, r23
    4f7a:	18 06       	cpc	r1, r24
    4f7c:	09 06       	cpc	r0, r25
    4f7e:	08 95       	ret

00004f80 <__fp_pscB>:
    4f80:	00 24       	eor	r0, r0
    4f82:	0a 94       	dec	r0
    4f84:	12 16       	cp	r1, r18
    4f86:	13 06       	cpc	r1, r19
    4f88:	14 06       	cpc	r1, r20
    4f8a:	05 06       	cpc	r0, r21
    4f8c:	08 95       	ret

00004f8e <__fp_round>:
    4f8e:	09 2e       	mov	r0, r25
    4f90:	03 94       	inc	r0
    4f92:	00 0c       	add	r0, r0
    4f94:	11 f4       	brne	.+4      	; 0x4f9a <__fp_round+0xc>
    4f96:	88 23       	and	r24, r24
    4f98:	52 f0       	brmi	.+20     	; 0x4fae <__fp_round+0x20>
    4f9a:	bb 0f       	add	r27, r27
    4f9c:	40 f4       	brcc	.+16     	; 0x4fae <__fp_round+0x20>
    4f9e:	bf 2b       	or	r27, r31
    4fa0:	11 f4       	brne	.+4      	; 0x4fa6 <__fp_round+0x18>
    4fa2:	60 ff       	sbrs	r22, 0
    4fa4:	04 c0       	rjmp	.+8      	; 0x4fae <__fp_round+0x20>
    4fa6:	6f 5f       	subi	r22, 0xFF	; 255
    4fa8:	7f 4f       	sbci	r23, 0xFF	; 255
    4faa:	8f 4f       	sbci	r24, 0xFF	; 255
    4fac:	9f 4f       	sbci	r25, 0xFF	; 255
    4fae:	08 95       	ret

00004fb0 <__mulsf3>:
    4fb0:	0c d0       	rcall	.+24     	; 0x4fca <__mulsf3x>
    4fb2:	ed cf       	rjmp	.-38     	; 0x4f8e <__fp_round>
    4fb4:	de df       	rcall	.-68     	; 0x4f72 <__fp_pscA>
    4fb6:	28 f0       	brcs	.+10     	; 0x4fc2 <__mulsf3+0x12>
    4fb8:	e3 df       	rcall	.-58     	; 0x4f80 <__fp_pscB>
    4fba:	18 f0       	brcs	.+6      	; 0x4fc2 <__mulsf3+0x12>
    4fbc:	95 23       	and	r25, r21
    4fbe:	09 f0       	breq	.+2      	; 0x4fc2 <__mulsf3+0x12>
    4fc0:	cf cf       	rjmp	.-98     	; 0x4f60 <__fp_inf>
    4fc2:	d4 cf       	rjmp	.-88     	; 0x4f6c <__fp_nan>
    4fc4:	11 24       	eor	r1, r1
    4fc6:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_szero>

00004fca <__mulsf3x>:
    4fca:	0e 94 a1 19 	call	0x3342	; 0x3342 <__fp_split3>
    4fce:	90 f3       	brcs	.-28     	; 0x4fb4 <__mulsf3+0x4>

00004fd0 <__mulsf3_pse>:
    4fd0:	95 9f       	mul	r25, r21
    4fd2:	c1 f3       	breq	.-16     	; 0x4fc4 <__mulsf3+0x14>
    4fd4:	95 0f       	add	r25, r21
    4fd6:	50 e0       	ldi	r21, 0x00	; 0
    4fd8:	55 1f       	adc	r21, r21
    4fda:	62 9f       	mul	r22, r18
    4fdc:	f0 01       	movw	r30, r0
    4fde:	72 9f       	mul	r23, r18
    4fe0:	bb 27       	eor	r27, r27
    4fe2:	f0 0d       	add	r31, r0
    4fe4:	b1 1d       	adc	r27, r1
    4fe6:	63 9f       	mul	r22, r19
    4fe8:	aa 27       	eor	r26, r26
    4fea:	f0 0d       	add	r31, r0
    4fec:	b1 1d       	adc	r27, r1
    4fee:	aa 1f       	adc	r26, r26
    4ff0:	64 9f       	mul	r22, r20
    4ff2:	66 27       	eor	r22, r22
    4ff4:	b0 0d       	add	r27, r0
    4ff6:	a1 1d       	adc	r26, r1
    4ff8:	66 1f       	adc	r22, r22
    4ffa:	82 9f       	mul	r24, r18
    4ffc:	22 27       	eor	r18, r18
    4ffe:	b0 0d       	add	r27, r0
    5000:	a1 1d       	adc	r26, r1
    5002:	62 1f       	adc	r22, r18
    5004:	73 9f       	mul	r23, r19
    5006:	b0 0d       	add	r27, r0
    5008:	a1 1d       	adc	r26, r1
    500a:	62 1f       	adc	r22, r18
    500c:	83 9f       	mul	r24, r19
    500e:	a0 0d       	add	r26, r0
    5010:	61 1d       	adc	r22, r1
    5012:	22 1f       	adc	r18, r18
    5014:	74 9f       	mul	r23, r20
    5016:	33 27       	eor	r19, r19
    5018:	a0 0d       	add	r26, r0
    501a:	61 1d       	adc	r22, r1
    501c:	23 1f       	adc	r18, r19
    501e:	84 9f       	mul	r24, r20
    5020:	60 0d       	add	r22, r0
    5022:	21 1d       	adc	r18, r1
    5024:	82 2f       	mov	r24, r18
    5026:	76 2f       	mov	r23, r22
    5028:	6a 2f       	mov	r22, r26
    502a:	11 24       	eor	r1, r1
    502c:	9f 57       	subi	r25, 0x7F	; 127
    502e:	50 40       	sbci	r21, 0x00	; 0
    5030:	92 f0       	brmi	.+36     	; 0x5056 <__mulsf3_pse+0x86>
    5032:	e9 f0       	breq	.+58     	; 0x506e <__mulsf3_pse+0x9e>
    5034:	88 23       	and	r24, r24
    5036:	4a f0       	brmi	.+18     	; 0x504a <__mulsf3_pse+0x7a>
    5038:	ee 0f       	add	r30, r30
    503a:	ff 1f       	adc	r31, r31
    503c:	bb 1f       	adc	r27, r27
    503e:	66 1f       	adc	r22, r22
    5040:	77 1f       	adc	r23, r23
    5042:	88 1f       	adc	r24, r24
    5044:	91 50       	subi	r25, 0x01	; 1
    5046:	50 40       	sbci	r21, 0x00	; 0
    5048:	a9 f7       	brne	.-22     	; 0x5034 <__mulsf3_pse+0x64>
    504a:	9e 3f       	cpi	r25, 0xFE	; 254
    504c:	51 05       	cpc	r21, r1
    504e:	78 f0       	brcs	.+30     	; 0x506e <__mulsf3_pse+0x9e>
    5050:	87 cf       	rjmp	.-242    	; 0x4f60 <__fp_inf>
    5052:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__fp_szero>
    5056:	5f 3f       	cpi	r21, 0xFF	; 255
    5058:	e4 f3       	brlt	.-8      	; 0x5052 <__mulsf3_pse+0x82>
    505a:	98 3e       	cpi	r25, 0xE8	; 232
    505c:	d4 f3       	brlt	.-12     	; 0x5052 <__mulsf3_pse+0x82>
    505e:	86 95       	lsr	r24
    5060:	77 95       	ror	r23
    5062:	67 95       	ror	r22
    5064:	b7 95       	ror	r27
    5066:	f7 95       	ror	r31
    5068:	e7 95       	ror	r30
    506a:	9f 5f       	subi	r25, 0xFF	; 255
    506c:	c1 f7       	brne	.-16     	; 0x505e <__mulsf3_pse+0x8e>
    506e:	fe 2b       	or	r31, r30
    5070:	88 0f       	add	r24, r24
    5072:	91 1d       	adc	r25, r1
    5074:	96 95       	lsr	r25
    5076:	87 95       	ror	r24
    5078:	97 f9       	bld	r25, 7
    507a:	08 95       	ret

0000507c <__udivmodsi4>:
    507c:	a1 e2       	ldi	r26, 0x21	; 33
    507e:	1a 2e       	mov	r1, r26
    5080:	aa 1b       	sub	r26, r26
    5082:	bb 1b       	sub	r27, r27
    5084:	fd 01       	movw	r30, r26
    5086:	0d c0       	rjmp	.+26     	; 0x50a2 <__udivmodsi4_ep>

00005088 <__udivmodsi4_loop>:
    5088:	aa 1f       	adc	r26, r26
    508a:	bb 1f       	adc	r27, r27
    508c:	ee 1f       	adc	r30, r30
    508e:	ff 1f       	adc	r31, r31
    5090:	a2 17       	cp	r26, r18
    5092:	b3 07       	cpc	r27, r19
    5094:	e4 07       	cpc	r30, r20
    5096:	f5 07       	cpc	r31, r21
    5098:	20 f0       	brcs	.+8      	; 0x50a2 <__udivmodsi4_ep>
    509a:	a2 1b       	sub	r26, r18
    509c:	b3 0b       	sbc	r27, r19
    509e:	e4 0b       	sbc	r30, r20
    50a0:	f5 0b       	sbc	r31, r21

000050a2 <__udivmodsi4_ep>:
    50a2:	66 1f       	adc	r22, r22
    50a4:	77 1f       	adc	r23, r23
    50a6:	88 1f       	adc	r24, r24
    50a8:	99 1f       	adc	r25, r25
    50aa:	1a 94       	dec	r1
    50ac:	69 f7       	brne	.-38     	; 0x5088 <__udivmodsi4_loop>
    50ae:	60 95       	com	r22
    50b0:	70 95       	com	r23
    50b2:	80 95       	com	r24
    50b4:	90 95       	com	r25
    50b6:	9b 01       	movw	r18, r22
    50b8:	ac 01       	movw	r20, r24
    50ba:	bd 01       	movw	r22, r26
    50bc:	cf 01       	movw	r24, r30
    50be:	08 95       	ret

000050c0 <__tablejump2__>:
    50c0:	ee 0f       	add	r30, r30
    50c2:	ff 1f       	adc	r31, r31
    50c4:	88 1f       	adc	r24, r24
    50c6:	8b bf       	out	0x3b, r24	; 59
    50c8:	07 90       	elpm	r0, Z+
    50ca:	f6 91       	elpm	r31, Z
    50cc:	e0 2d       	mov	r30, r0
    50ce:	19 94       	eijmp

000050d0 <malloc>:
    50d0:	0f 93       	push	r16
    50d2:	1f 93       	push	r17
    50d4:	cf 93       	push	r28
    50d6:	df 93       	push	r29
    50d8:	82 30       	cpi	r24, 0x02	; 2
    50da:	91 05       	cpc	r25, r1
    50dc:	10 f4       	brcc	.+4      	; 0x50e2 <malloc+0x12>
    50de:	82 e0       	ldi	r24, 0x02	; 2
    50e0:	90 e0       	ldi	r25, 0x00	; 0
    50e2:	e0 91 00 17 	lds	r30, 0x1700	; 0x801700 <__flp>
    50e6:	f0 91 01 17 	lds	r31, 0x1701	; 0x801701 <__flp+0x1>
    50ea:	20 e0       	ldi	r18, 0x00	; 0
    50ec:	30 e0       	ldi	r19, 0x00	; 0
    50ee:	a0 e0       	ldi	r26, 0x00	; 0
    50f0:	b0 e0       	ldi	r27, 0x00	; 0
    50f2:	30 97       	sbiw	r30, 0x00	; 0
    50f4:	19 f1       	breq	.+70     	; 0x513c <malloc+0x6c>
    50f6:	40 81       	ld	r20, Z
    50f8:	51 81       	ldd	r21, Z+1	; 0x01
    50fa:	02 81       	ldd	r16, Z+2	; 0x02
    50fc:	13 81       	ldd	r17, Z+3	; 0x03
    50fe:	48 17       	cp	r20, r24
    5100:	59 07       	cpc	r21, r25
    5102:	c8 f0       	brcs	.+50     	; 0x5136 <malloc+0x66>
    5104:	84 17       	cp	r24, r20
    5106:	95 07       	cpc	r25, r21
    5108:	69 f4       	brne	.+26     	; 0x5124 <malloc+0x54>
    510a:	10 97       	sbiw	r26, 0x00	; 0
    510c:	31 f0       	breq	.+12     	; 0x511a <malloc+0x4a>
    510e:	12 96       	adiw	r26, 0x02	; 2
    5110:	0c 93       	st	X, r16
    5112:	12 97       	sbiw	r26, 0x02	; 2
    5114:	13 96       	adiw	r26, 0x03	; 3
    5116:	1c 93       	st	X, r17
    5118:	27 c0       	rjmp	.+78     	; 0x5168 <malloc+0x98>
    511a:	00 93 00 17 	sts	0x1700, r16	; 0x801700 <__flp>
    511e:	10 93 01 17 	sts	0x1701, r17	; 0x801701 <__flp+0x1>
    5122:	22 c0       	rjmp	.+68     	; 0x5168 <malloc+0x98>
    5124:	21 15       	cp	r18, r1
    5126:	31 05       	cpc	r19, r1
    5128:	19 f0       	breq	.+6      	; 0x5130 <malloc+0x60>
    512a:	42 17       	cp	r20, r18
    512c:	53 07       	cpc	r21, r19
    512e:	18 f4       	brcc	.+6      	; 0x5136 <malloc+0x66>
    5130:	9a 01       	movw	r18, r20
    5132:	bd 01       	movw	r22, r26
    5134:	ef 01       	movw	r28, r30
    5136:	df 01       	movw	r26, r30
    5138:	f8 01       	movw	r30, r16
    513a:	db cf       	rjmp	.-74     	; 0x50f2 <malloc+0x22>
    513c:	21 15       	cp	r18, r1
    513e:	31 05       	cpc	r19, r1
    5140:	f9 f0       	breq	.+62     	; 0x5180 <malloc+0xb0>
    5142:	28 1b       	sub	r18, r24
    5144:	39 0b       	sbc	r19, r25
    5146:	24 30       	cpi	r18, 0x04	; 4
    5148:	31 05       	cpc	r19, r1
    514a:	80 f4       	brcc	.+32     	; 0x516c <malloc+0x9c>
    514c:	8a 81       	ldd	r24, Y+2	; 0x02
    514e:	9b 81       	ldd	r25, Y+3	; 0x03
    5150:	61 15       	cp	r22, r1
    5152:	71 05       	cpc	r23, r1
    5154:	21 f0       	breq	.+8      	; 0x515e <malloc+0x8e>
    5156:	fb 01       	movw	r30, r22
    5158:	93 83       	std	Z+3, r25	; 0x03
    515a:	82 83       	std	Z+2, r24	; 0x02
    515c:	04 c0       	rjmp	.+8      	; 0x5166 <malloc+0x96>
    515e:	90 93 01 17 	sts	0x1701, r25	; 0x801701 <__flp+0x1>
    5162:	80 93 00 17 	sts	0x1700, r24	; 0x801700 <__flp>
    5166:	fe 01       	movw	r30, r28
    5168:	32 96       	adiw	r30, 0x02	; 2
    516a:	44 c0       	rjmp	.+136    	; 0x51f4 <malloc+0x124>
    516c:	fe 01       	movw	r30, r28
    516e:	e2 0f       	add	r30, r18
    5170:	f3 1f       	adc	r31, r19
    5172:	81 93       	st	Z+, r24
    5174:	91 93       	st	Z+, r25
    5176:	22 50       	subi	r18, 0x02	; 2
    5178:	31 09       	sbc	r19, r1
    517a:	39 83       	std	Y+1, r19	; 0x01
    517c:	28 83       	st	Y, r18
    517e:	3a c0       	rjmp	.+116    	; 0x51f4 <malloc+0x124>
    5180:	20 91 fe 16 	lds	r18, 0x16FE	; 0x8016fe <__brkval>
    5184:	30 91 ff 16 	lds	r19, 0x16FF	; 0x8016ff <__brkval+0x1>
    5188:	23 2b       	or	r18, r19
    518a:	41 f4       	brne	.+16     	; 0x519c <malloc+0xcc>
    518c:	20 91 02 02 	lds	r18, 0x0202	; 0x800202 <__malloc_heap_start>
    5190:	30 91 03 02 	lds	r19, 0x0203	; 0x800203 <__malloc_heap_start+0x1>
    5194:	30 93 ff 16 	sts	0x16FF, r19	; 0x8016ff <__brkval+0x1>
    5198:	20 93 fe 16 	sts	0x16FE, r18	; 0x8016fe <__brkval>
    519c:	20 91 00 02 	lds	r18, 0x0200	; 0x800200 <__data_start>
    51a0:	30 91 01 02 	lds	r19, 0x0201	; 0x800201 <__data_start+0x1>
    51a4:	21 15       	cp	r18, r1
    51a6:	31 05       	cpc	r19, r1
    51a8:	41 f4       	brne	.+16     	; 0x51ba <malloc+0xea>
    51aa:	2d b7       	in	r18, 0x3d	; 61
    51ac:	3e b7       	in	r19, 0x3e	; 62
    51ae:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <__malloc_margin>
    51b2:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <__malloc_margin+0x1>
    51b6:	24 1b       	sub	r18, r20
    51b8:	35 0b       	sbc	r19, r21
    51ba:	e0 91 fe 16 	lds	r30, 0x16FE	; 0x8016fe <__brkval>
    51be:	f0 91 ff 16 	lds	r31, 0x16FF	; 0x8016ff <__brkval+0x1>
    51c2:	e2 17       	cp	r30, r18
    51c4:	f3 07       	cpc	r31, r19
    51c6:	a0 f4       	brcc	.+40     	; 0x51f0 <malloc+0x120>
    51c8:	2e 1b       	sub	r18, r30
    51ca:	3f 0b       	sbc	r19, r31
    51cc:	28 17       	cp	r18, r24
    51ce:	39 07       	cpc	r19, r25
    51d0:	78 f0       	brcs	.+30     	; 0x51f0 <malloc+0x120>
    51d2:	ac 01       	movw	r20, r24
    51d4:	4e 5f       	subi	r20, 0xFE	; 254
    51d6:	5f 4f       	sbci	r21, 0xFF	; 255
    51d8:	24 17       	cp	r18, r20
    51da:	35 07       	cpc	r19, r21
    51dc:	48 f0       	brcs	.+18     	; 0x51f0 <malloc+0x120>
    51de:	4e 0f       	add	r20, r30
    51e0:	5f 1f       	adc	r21, r31
    51e2:	50 93 ff 16 	sts	0x16FF, r21	; 0x8016ff <__brkval+0x1>
    51e6:	40 93 fe 16 	sts	0x16FE, r20	; 0x8016fe <__brkval>
    51ea:	81 93       	st	Z+, r24
    51ec:	91 93       	st	Z+, r25
    51ee:	02 c0       	rjmp	.+4      	; 0x51f4 <malloc+0x124>
    51f0:	e0 e0       	ldi	r30, 0x00	; 0
    51f2:	f0 e0       	ldi	r31, 0x00	; 0
    51f4:	cf 01       	movw	r24, r30
    51f6:	df 91       	pop	r29
    51f8:	cf 91       	pop	r28
    51fa:	1f 91       	pop	r17
    51fc:	0f 91       	pop	r16
    51fe:	08 95       	ret

00005200 <free>:
    5200:	cf 93       	push	r28
    5202:	df 93       	push	r29
    5204:	00 97       	sbiw	r24, 0x00	; 0
    5206:	09 f4       	brne	.+2      	; 0x520a <free+0xa>
    5208:	81 c0       	rjmp	.+258    	; 0x530c <free+0x10c>
    520a:	fc 01       	movw	r30, r24
    520c:	32 97       	sbiw	r30, 0x02	; 2
    520e:	13 82       	std	Z+3, r1	; 0x03
    5210:	12 82       	std	Z+2, r1	; 0x02
    5212:	a0 91 00 17 	lds	r26, 0x1700	; 0x801700 <__flp>
    5216:	b0 91 01 17 	lds	r27, 0x1701	; 0x801701 <__flp+0x1>
    521a:	10 97       	sbiw	r26, 0x00	; 0
    521c:	81 f4       	brne	.+32     	; 0x523e <free+0x3e>
    521e:	20 81       	ld	r18, Z
    5220:	31 81       	ldd	r19, Z+1	; 0x01
    5222:	82 0f       	add	r24, r18
    5224:	93 1f       	adc	r25, r19
    5226:	20 91 fe 16 	lds	r18, 0x16FE	; 0x8016fe <__brkval>
    522a:	30 91 ff 16 	lds	r19, 0x16FF	; 0x8016ff <__brkval+0x1>
    522e:	28 17       	cp	r18, r24
    5230:	39 07       	cpc	r19, r25
    5232:	51 f5       	brne	.+84     	; 0x5288 <free+0x88>
    5234:	f0 93 ff 16 	sts	0x16FF, r31	; 0x8016ff <__brkval+0x1>
    5238:	e0 93 fe 16 	sts	0x16FE, r30	; 0x8016fe <__brkval>
    523c:	67 c0       	rjmp	.+206    	; 0x530c <free+0x10c>
    523e:	ed 01       	movw	r28, r26
    5240:	20 e0       	ldi	r18, 0x00	; 0
    5242:	30 e0       	ldi	r19, 0x00	; 0
    5244:	ce 17       	cp	r28, r30
    5246:	df 07       	cpc	r29, r31
    5248:	40 f4       	brcc	.+16     	; 0x525a <free+0x5a>
    524a:	4a 81       	ldd	r20, Y+2	; 0x02
    524c:	5b 81       	ldd	r21, Y+3	; 0x03
    524e:	9e 01       	movw	r18, r28
    5250:	41 15       	cp	r20, r1
    5252:	51 05       	cpc	r21, r1
    5254:	f1 f0       	breq	.+60     	; 0x5292 <free+0x92>
    5256:	ea 01       	movw	r28, r20
    5258:	f5 cf       	rjmp	.-22     	; 0x5244 <free+0x44>
    525a:	d3 83       	std	Z+3, r29	; 0x03
    525c:	c2 83       	std	Z+2, r28	; 0x02
    525e:	40 81       	ld	r20, Z
    5260:	51 81       	ldd	r21, Z+1	; 0x01
    5262:	84 0f       	add	r24, r20
    5264:	95 1f       	adc	r25, r21
    5266:	c8 17       	cp	r28, r24
    5268:	d9 07       	cpc	r29, r25
    526a:	59 f4       	brne	.+22     	; 0x5282 <free+0x82>
    526c:	88 81       	ld	r24, Y
    526e:	99 81       	ldd	r25, Y+1	; 0x01
    5270:	84 0f       	add	r24, r20
    5272:	95 1f       	adc	r25, r21
    5274:	02 96       	adiw	r24, 0x02	; 2
    5276:	91 83       	std	Z+1, r25	; 0x01
    5278:	80 83       	st	Z, r24
    527a:	8a 81       	ldd	r24, Y+2	; 0x02
    527c:	9b 81       	ldd	r25, Y+3	; 0x03
    527e:	93 83       	std	Z+3, r25	; 0x03
    5280:	82 83       	std	Z+2, r24	; 0x02
    5282:	21 15       	cp	r18, r1
    5284:	31 05       	cpc	r19, r1
    5286:	29 f4       	brne	.+10     	; 0x5292 <free+0x92>
    5288:	f0 93 01 17 	sts	0x1701, r31	; 0x801701 <__flp+0x1>
    528c:	e0 93 00 17 	sts	0x1700, r30	; 0x801700 <__flp>
    5290:	3d c0       	rjmp	.+122    	; 0x530c <free+0x10c>
    5292:	e9 01       	movw	r28, r18
    5294:	fb 83       	std	Y+3, r31	; 0x03
    5296:	ea 83       	std	Y+2, r30	; 0x02
    5298:	49 91       	ld	r20, Y+
    529a:	59 91       	ld	r21, Y+
    529c:	c4 0f       	add	r28, r20
    529e:	d5 1f       	adc	r29, r21
    52a0:	ec 17       	cp	r30, r28
    52a2:	fd 07       	cpc	r31, r29
    52a4:	61 f4       	brne	.+24     	; 0x52be <free+0xbe>
    52a6:	80 81       	ld	r24, Z
    52a8:	91 81       	ldd	r25, Z+1	; 0x01
    52aa:	84 0f       	add	r24, r20
    52ac:	95 1f       	adc	r25, r21
    52ae:	02 96       	adiw	r24, 0x02	; 2
    52b0:	e9 01       	movw	r28, r18
    52b2:	99 83       	std	Y+1, r25	; 0x01
    52b4:	88 83       	st	Y, r24
    52b6:	82 81       	ldd	r24, Z+2	; 0x02
    52b8:	93 81       	ldd	r25, Z+3	; 0x03
    52ba:	9b 83       	std	Y+3, r25	; 0x03
    52bc:	8a 83       	std	Y+2, r24	; 0x02
    52be:	e0 e0       	ldi	r30, 0x00	; 0
    52c0:	f0 e0       	ldi	r31, 0x00	; 0
    52c2:	12 96       	adiw	r26, 0x02	; 2
    52c4:	8d 91       	ld	r24, X+
    52c6:	9c 91       	ld	r25, X
    52c8:	13 97       	sbiw	r26, 0x03	; 3
    52ca:	00 97       	sbiw	r24, 0x00	; 0
    52cc:	19 f0       	breq	.+6      	; 0x52d4 <free+0xd4>
    52ce:	fd 01       	movw	r30, r26
    52d0:	dc 01       	movw	r26, r24
    52d2:	f7 cf       	rjmp	.-18     	; 0x52c2 <free+0xc2>
    52d4:	8d 91       	ld	r24, X+
    52d6:	9c 91       	ld	r25, X
    52d8:	11 97       	sbiw	r26, 0x01	; 1
    52da:	9d 01       	movw	r18, r26
    52dc:	2e 5f       	subi	r18, 0xFE	; 254
    52de:	3f 4f       	sbci	r19, 0xFF	; 255
    52e0:	82 0f       	add	r24, r18
    52e2:	93 1f       	adc	r25, r19
    52e4:	20 91 fe 16 	lds	r18, 0x16FE	; 0x8016fe <__brkval>
    52e8:	30 91 ff 16 	lds	r19, 0x16FF	; 0x8016ff <__brkval+0x1>
    52ec:	28 17       	cp	r18, r24
    52ee:	39 07       	cpc	r19, r25
    52f0:	69 f4       	brne	.+26     	; 0x530c <free+0x10c>
    52f2:	30 97       	sbiw	r30, 0x00	; 0
    52f4:	29 f4       	brne	.+10     	; 0x5300 <free+0x100>
    52f6:	10 92 01 17 	sts	0x1701, r1	; 0x801701 <__flp+0x1>
    52fa:	10 92 00 17 	sts	0x1700, r1	; 0x801700 <__flp>
    52fe:	02 c0       	rjmp	.+4      	; 0x5304 <free+0x104>
    5300:	13 82       	std	Z+3, r1	; 0x03
    5302:	12 82       	std	Z+2, r1	; 0x02
    5304:	b0 93 ff 16 	sts	0x16FF, r27	; 0x8016ff <__brkval+0x1>
    5308:	a0 93 fe 16 	sts	0x16FE, r26	; 0x8016fe <__brkval>
    530c:	df 91       	pop	r29
    530e:	cf 91       	pop	r28
    5310:	08 95       	ret

00005312 <abort>:
    5312:	81 e0       	ldi	r24, 0x01	; 1
    5314:	90 e0       	ldi	r25, 0x00	; 0
    5316:	f8 94       	cli
    5318:	7d c3       	rjmp	.+1786   	; 0x5a14 <_exit>

0000531a <memcpy>:
    531a:	fb 01       	movw	r30, r22
    531c:	dc 01       	movw	r26, r24
    531e:	02 c0       	rjmp	.+4      	; 0x5324 <memcpy+0xa>
    5320:	01 90       	ld	r0, Z+
    5322:	0d 92       	st	X+, r0
    5324:	41 50       	subi	r20, 0x01	; 1
    5326:	50 40       	sbci	r21, 0x00	; 0
    5328:	d8 f7       	brcc	.-10     	; 0x5320 <memcpy+0x6>
    532a:	08 95       	ret

0000532c <memset>:
    532c:	dc 01       	movw	r26, r24
    532e:	01 c0       	rjmp	.+2      	; 0x5332 <memset+0x6>
    5330:	6d 93       	st	X+, r22
    5332:	41 50       	subi	r20, 0x01	; 1
    5334:	50 40       	sbci	r21, 0x00	; 0
    5336:	e0 f7       	brcc	.-8      	; 0x5330 <memset+0x4>
    5338:	08 95       	ret

0000533a <strcasestr>:
    533a:	fb 01       	movw	r30, r22
    533c:	51 91       	ld	r21, Z+
    533e:	55 23       	and	r21, r21
    5340:	b1 f0       	breq	.+44     	; 0x536e <strcasestr+0x34>
    5342:	bf 01       	movw	r22, r30
    5344:	dc 01       	movw	r26, r24
    5346:	05 2e       	mov	r0, r21
    5348:	4d 91       	ld	r20, X+
    534a:	44 23       	and	r20, r20
    534c:	69 f0       	breq	.+26     	; 0x5368 <strcasestr+0x2e>
    534e:	10 d0       	rcall	.+32     	; 0x5370 <strcasestr+0x36>
    5350:	d9 f7       	brne	.-10     	; 0x5348 <strcasestr+0xe>
    5352:	cd 01       	movw	r24, r26
    5354:	01 90       	ld	r0, Z+
    5356:	00 20       	and	r0, r0
    5358:	49 f0       	breq	.+18     	; 0x536c <strcasestr+0x32>
    535a:	4d 91       	ld	r20, X+
    535c:	41 11       	cpse	r20, r1
    535e:	08 d0       	rcall	.+16     	; 0x5370 <strcasestr+0x36>
    5360:	c9 f3       	breq	.-14     	; 0x5354 <strcasestr+0x1a>
    5362:	fb 01       	movw	r30, r22
    5364:	41 11       	cpse	r20, r1
    5366:	ee cf       	rjmp	.-36     	; 0x5344 <strcasestr+0xa>
    5368:	81 e0       	ldi	r24, 0x01	; 1
    536a:	90 e0       	ldi	r25, 0x00	; 0
    536c:	01 97       	sbiw	r24, 0x01	; 1
    536e:	08 95       	ret
    5370:	40 25       	eor	r20, r0
    5372:	39 f0       	breq	.+14     	; 0x5382 <strcasestr+0x48>
    5374:	40 32       	cpi	r20, 0x20	; 32
    5376:	29 f4       	brne	.+10     	; 0x5382 <strcasestr+0x48>
    5378:	40 29       	or	r20, r0
    537a:	4b 57       	subi	r20, 0x7B	; 123
    537c:	46 5e       	subi	r20, 0xE6	; 230
    537e:	08 f0       	brcs	.+2      	; 0x5382 <strcasestr+0x48>
    5380:	18 94       	sez
    5382:	08 95       	ret

00005384 <strcat>:
    5384:	fb 01       	movw	r30, r22
    5386:	dc 01       	movw	r26, r24
    5388:	0d 90       	ld	r0, X+
    538a:	00 20       	and	r0, r0
    538c:	e9 f7       	brne	.-6      	; 0x5388 <strcat+0x4>
    538e:	11 97       	sbiw	r26, 0x01	; 1
    5390:	01 90       	ld	r0, Z+
    5392:	0d 92       	st	X+, r0
    5394:	00 20       	and	r0, r0
    5396:	e1 f7       	brne	.-8      	; 0x5390 <strcat+0xc>
    5398:	08 95       	ret

0000539a <strcpy>:
    539a:	fb 01       	movw	r30, r22
    539c:	dc 01       	movw	r26, r24
    539e:	01 90       	ld	r0, Z+
    53a0:	0d 92       	st	X+, r0
    53a2:	00 20       	and	r0, r0
    53a4:	e1 f7       	brne	.-8      	; 0x539e <strcpy+0x4>
    53a6:	08 95       	ret

000053a8 <strncasecmp>:
    53a8:	fb 01       	movw	r30, r22
    53aa:	dc 01       	movw	r26, r24
    53ac:	41 50       	subi	r20, 0x01	; 1
    53ae:	50 40       	sbci	r21, 0x00	; 0
    53b0:	88 f0       	brcs	.+34     	; 0x53d4 <strncasecmp+0x2c>
    53b2:	8d 91       	ld	r24, X+
    53b4:	81 34       	cpi	r24, 0x41	; 65
    53b6:	1c f0       	brlt	.+6      	; 0x53be <strncasecmp+0x16>
    53b8:	8b 35       	cpi	r24, 0x5B	; 91
    53ba:	0c f4       	brge	.+2      	; 0x53be <strncasecmp+0x16>
    53bc:	80 5e       	subi	r24, 0xE0	; 224
    53be:	61 91       	ld	r22, Z+
    53c0:	61 34       	cpi	r22, 0x41	; 65
    53c2:	1c f0       	brlt	.+6      	; 0x53ca <strncasecmp+0x22>
    53c4:	6b 35       	cpi	r22, 0x5B	; 91
    53c6:	0c f4       	brge	.+2      	; 0x53ca <strncasecmp+0x22>
    53c8:	60 5e       	subi	r22, 0xE0	; 224
    53ca:	86 1b       	sub	r24, r22
    53cc:	61 11       	cpse	r22, r1
    53ce:	71 f3       	breq	.-36     	; 0x53ac <strncasecmp+0x4>
    53d0:	99 0b       	sbc	r25, r25
    53d2:	08 95       	ret
    53d4:	88 1b       	sub	r24, r24
    53d6:	fc cf       	rjmp	.-8      	; 0x53d0 <strncasecmp+0x28>

000053d8 <printf>:
    53d8:	cf 93       	push	r28
    53da:	df 93       	push	r29
    53dc:	cd b7       	in	r28, 0x3d	; 61
    53de:	de b7       	in	r29, 0x3e	; 62
    53e0:	ae 01       	movw	r20, r28
    53e2:	4a 5f       	subi	r20, 0xFA	; 250
    53e4:	5f 4f       	sbci	r21, 0xFF	; 255
    53e6:	fa 01       	movw	r30, r20
    53e8:	61 91       	ld	r22, Z+
    53ea:	71 91       	ld	r23, Z+
    53ec:	af 01       	movw	r20, r30
    53ee:	80 91 04 17 	lds	r24, 0x1704	; 0x801704 <__iob+0x2>
    53f2:	90 91 05 17 	lds	r25, 0x1705	; 0x801705 <__iob+0x3>
    53f6:	61 d0       	rcall	.+194    	; 0x54ba <vfprintf>
    53f8:	df 91       	pop	r29
    53fa:	cf 91       	pop	r28
    53fc:	08 95       	ret

000053fe <puts>:
    53fe:	0f 93       	push	r16
    5400:	1f 93       	push	r17
    5402:	cf 93       	push	r28
    5404:	df 93       	push	r29
    5406:	e0 91 04 17 	lds	r30, 0x1704	; 0x801704 <__iob+0x2>
    540a:	f0 91 05 17 	lds	r31, 0x1705	; 0x801705 <__iob+0x3>
    540e:	23 81       	ldd	r18, Z+3	; 0x03
    5410:	21 ff       	sbrs	r18, 1
    5412:	1b c0       	rjmp	.+54     	; 0x544a <puts+0x4c>
    5414:	8c 01       	movw	r16, r24
    5416:	d0 e0       	ldi	r29, 0x00	; 0
    5418:	c0 e0       	ldi	r28, 0x00	; 0
    541a:	f8 01       	movw	r30, r16
    541c:	81 91       	ld	r24, Z+
    541e:	8f 01       	movw	r16, r30
    5420:	60 91 04 17 	lds	r22, 0x1704	; 0x801704 <__iob+0x2>
    5424:	70 91 05 17 	lds	r23, 0x1705	; 0x801705 <__iob+0x3>
    5428:	db 01       	movw	r26, r22
    542a:	18 96       	adiw	r26, 0x08	; 8
    542c:	ed 91       	ld	r30, X+
    542e:	fc 91       	ld	r31, X
    5430:	19 97       	sbiw	r26, 0x09	; 9
    5432:	88 23       	and	r24, r24
    5434:	31 f0       	breq	.+12     	; 0x5442 <puts+0x44>
    5436:	19 95       	eicall
    5438:	89 2b       	or	r24, r25
    543a:	79 f3       	breq	.-34     	; 0x541a <puts+0x1c>
    543c:	df ef       	ldi	r29, 0xFF	; 255
    543e:	cf ef       	ldi	r28, 0xFF	; 255
    5440:	ec cf       	rjmp	.-40     	; 0x541a <puts+0x1c>
    5442:	8a e0       	ldi	r24, 0x0A	; 10
    5444:	19 95       	eicall
    5446:	89 2b       	or	r24, r25
    5448:	19 f0       	breq	.+6      	; 0x5450 <puts+0x52>
    544a:	8f ef       	ldi	r24, 0xFF	; 255
    544c:	9f ef       	ldi	r25, 0xFF	; 255
    544e:	02 c0       	rjmp	.+4      	; 0x5454 <puts+0x56>
    5450:	8d 2f       	mov	r24, r29
    5452:	9c 2f       	mov	r25, r28
    5454:	df 91       	pop	r29
    5456:	cf 91       	pop	r28
    5458:	1f 91       	pop	r17
    545a:	0f 91       	pop	r16
    545c:	08 95       	ret

0000545e <sprintf>:
    545e:	0f 93       	push	r16
    5460:	1f 93       	push	r17
    5462:	cf 93       	push	r28
    5464:	df 93       	push	r29
    5466:	cd b7       	in	r28, 0x3d	; 61
    5468:	de b7       	in	r29, 0x3e	; 62
    546a:	2e 97       	sbiw	r28, 0x0e	; 14
    546c:	0f b6       	in	r0, 0x3f	; 63
    546e:	f8 94       	cli
    5470:	de bf       	out	0x3e, r29	; 62
    5472:	0f be       	out	0x3f, r0	; 63
    5474:	cd bf       	out	0x3d, r28	; 61
    5476:	0e 89       	ldd	r16, Y+22	; 0x16
    5478:	1f 89       	ldd	r17, Y+23	; 0x17
    547a:	86 e0       	ldi	r24, 0x06	; 6
    547c:	8c 83       	std	Y+4, r24	; 0x04
    547e:	1a 83       	std	Y+2, r17	; 0x02
    5480:	09 83       	std	Y+1, r16	; 0x01
    5482:	8f ef       	ldi	r24, 0xFF	; 255
    5484:	9f e7       	ldi	r25, 0x7F	; 127
    5486:	9e 83       	std	Y+6, r25	; 0x06
    5488:	8d 83       	std	Y+5, r24	; 0x05
    548a:	ae 01       	movw	r20, r28
    548c:	46 5e       	subi	r20, 0xE6	; 230
    548e:	5f 4f       	sbci	r21, 0xFF	; 255
    5490:	68 8d       	ldd	r22, Y+24	; 0x18
    5492:	79 8d       	ldd	r23, Y+25	; 0x19
    5494:	ce 01       	movw	r24, r28
    5496:	01 96       	adiw	r24, 0x01	; 1
    5498:	10 d0       	rcall	.+32     	; 0x54ba <vfprintf>
    549a:	ef 81       	ldd	r30, Y+7	; 0x07
    549c:	f8 85       	ldd	r31, Y+8	; 0x08
    549e:	e0 0f       	add	r30, r16
    54a0:	f1 1f       	adc	r31, r17
    54a2:	10 82       	st	Z, r1
    54a4:	2e 96       	adiw	r28, 0x0e	; 14
    54a6:	0f b6       	in	r0, 0x3f	; 63
    54a8:	f8 94       	cli
    54aa:	de bf       	out	0x3e, r29	; 62
    54ac:	0f be       	out	0x3f, r0	; 63
    54ae:	cd bf       	out	0x3d, r28	; 61
    54b0:	df 91       	pop	r29
    54b2:	cf 91       	pop	r28
    54b4:	1f 91       	pop	r17
    54b6:	0f 91       	pop	r16
    54b8:	08 95       	ret

000054ba <vfprintf>:
    54ba:	2f 92       	push	r2
    54bc:	3f 92       	push	r3
    54be:	4f 92       	push	r4
    54c0:	5f 92       	push	r5
    54c2:	6f 92       	push	r6
    54c4:	7f 92       	push	r7
    54c6:	8f 92       	push	r8
    54c8:	9f 92       	push	r9
    54ca:	af 92       	push	r10
    54cc:	bf 92       	push	r11
    54ce:	cf 92       	push	r12
    54d0:	df 92       	push	r13
    54d2:	ef 92       	push	r14
    54d4:	ff 92       	push	r15
    54d6:	0f 93       	push	r16
    54d8:	1f 93       	push	r17
    54da:	cf 93       	push	r28
    54dc:	df 93       	push	r29
    54de:	cd b7       	in	r28, 0x3d	; 61
    54e0:	de b7       	in	r29, 0x3e	; 62
    54e2:	2b 97       	sbiw	r28, 0x0b	; 11
    54e4:	0f b6       	in	r0, 0x3f	; 63
    54e6:	f8 94       	cli
    54e8:	de bf       	out	0x3e, r29	; 62
    54ea:	0f be       	out	0x3f, r0	; 63
    54ec:	cd bf       	out	0x3d, r28	; 61
    54ee:	6c 01       	movw	r12, r24
    54f0:	7b 01       	movw	r14, r22
    54f2:	8a 01       	movw	r16, r20
    54f4:	fc 01       	movw	r30, r24
    54f6:	17 82       	std	Z+7, r1	; 0x07
    54f8:	16 82       	std	Z+6, r1	; 0x06
    54fa:	83 81       	ldd	r24, Z+3	; 0x03
    54fc:	81 ff       	sbrs	r24, 1
    54fe:	bf c1       	rjmp	.+894    	; 0x587e <vfprintf+0x3c4>
    5500:	ce 01       	movw	r24, r28
    5502:	01 96       	adiw	r24, 0x01	; 1
    5504:	3c 01       	movw	r6, r24
    5506:	f6 01       	movw	r30, r12
    5508:	93 81       	ldd	r25, Z+3	; 0x03
    550a:	f7 01       	movw	r30, r14
    550c:	93 fd       	sbrc	r25, 3
    550e:	85 91       	lpm	r24, Z+
    5510:	93 ff       	sbrs	r25, 3
    5512:	81 91       	ld	r24, Z+
    5514:	7f 01       	movw	r14, r30
    5516:	88 23       	and	r24, r24
    5518:	09 f4       	brne	.+2      	; 0x551c <vfprintf+0x62>
    551a:	ad c1       	rjmp	.+858    	; 0x5876 <vfprintf+0x3bc>
    551c:	85 32       	cpi	r24, 0x25	; 37
    551e:	39 f4       	brne	.+14     	; 0x552e <vfprintf+0x74>
    5520:	93 fd       	sbrc	r25, 3
    5522:	85 91       	lpm	r24, Z+
    5524:	93 ff       	sbrs	r25, 3
    5526:	81 91       	ld	r24, Z+
    5528:	7f 01       	movw	r14, r30
    552a:	85 32       	cpi	r24, 0x25	; 37
    552c:	21 f4       	brne	.+8      	; 0x5536 <vfprintf+0x7c>
    552e:	b6 01       	movw	r22, r12
    5530:	90 e0       	ldi	r25, 0x00	; 0
    5532:	d6 d1       	rcall	.+940    	; 0x58e0 <fputc>
    5534:	e8 cf       	rjmp	.-48     	; 0x5506 <vfprintf+0x4c>
    5536:	91 2c       	mov	r9, r1
    5538:	21 2c       	mov	r2, r1
    553a:	31 2c       	mov	r3, r1
    553c:	ff e1       	ldi	r31, 0x1F	; 31
    553e:	f3 15       	cp	r31, r3
    5540:	d8 f0       	brcs	.+54     	; 0x5578 <vfprintf+0xbe>
    5542:	8b 32       	cpi	r24, 0x2B	; 43
    5544:	79 f0       	breq	.+30     	; 0x5564 <vfprintf+0xaa>
    5546:	38 f4       	brcc	.+14     	; 0x5556 <vfprintf+0x9c>
    5548:	80 32       	cpi	r24, 0x20	; 32
    554a:	79 f0       	breq	.+30     	; 0x556a <vfprintf+0xb0>
    554c:	83 32       	cpi	r24, 0x23	; 35
    554e:	a1 f4       	brne	.+40     	; 0x5578 <vfprintf+0xbe>
    5550:	23 2d       	mov	r18, r3
    5552:	20 61       	ori	r18, 0x10	; 16
    5554:	1d c0       	rjmp	.+58     	; 0x5590 <vfprintf+0xd6>
    5556:	8d 32       	cpi	r24, 0x2D	; 45
    5558:	61 f0       	breq	.+24     	; 0x5572 <vfprintf+0xb8>
    555a:	80 33       	cpi	r24, 0x30	; 48
    555c:	69 f4       	brne	.+26     	; 0x5578 <vfprintf+0xbe>
    555e:	23 2d       	mov	r18, r3
    5560:	21 60       	ori	r18, 0x01	; 1
    5562:	16 c0       	rjmp	.+44     	; 0x5590 <vfprintf+0xd6>
    5564:	83 2d       	mov	r24, r3
    5566:	82 60       	ori	r24, 0x02	; 2
    5568:	38 2e       	mov	r3, r24
    556a:	e3 2d       	mov	r30, r3
    556c:	e4 60       	ori	r30, 0x04	; 4
    556e:	3e 2e       	mov	r3, r30
    5570:	2a c0       	rjmp	.+84     	; 0x55c6 <vfprintf+0x10c>
    5572:	f3 2d       	mov	r31, r3
    5574:	f8 60       	ori	r31, 0x08	; 8
    5576:	1d c0       	rjmp	.+58     	; 0x55b2 <vfprintf+0xf8>
    5578:	37 fc       	sbrc	r3, 7
    557a:	2d c0       	rjmp	.+90     	; 0x55d6 <vfprintf+0x11c>
    557c:	20 ed       	ldi	r18, 0xD0	; 208
    557e:	28 0f       	add	r18, r24
    5580:	2a 30       	cpi	r18, 0x0A	; 10
    5582:	40 f0       	brcs	.+16     	; 0x5594 <vfprintf+0xda>
    5584:	8e 32       	cpi	r24, 0x2E	; 46
    5586:	b9 f4       	brne	.+46     	; 0x55b6 <vfprintf+0xfc>
    5588:	36 fc       	sbrc	r3, 6
    558a:	75 c1       	rjmp	.+746    	; 0x5876 <vfprintf+0x3bc>
    558c:	23 2d       	mov	r18, r3
    558e:	20 64       	ori	r18, 0x40	; 64
    5590:	32 2e       	mov	r3, r18
    5592:	19 c0       	rjmp	.+50     	; 0x55c6 <vfprintf+0x10c>
    5594:	36 fe       	sbrs	r3, 6
    5596:	06 c0       	rjmp	.+12     	; 0x55a4 <vfprintf+0xea>
    5598:	8a e0       	ldi	r24, 0x0A	; 10
    559a:	98 9e       	mul	r9, r24
    559c:	20 0d       	add	r18, r0
    559e:	11 24       	eor	r1, r1
    55a0:	92 2e       	mov	r9, r18
    55a2:	11 c0       	rjmp	.+34     	; 0x55c6 <vfprintf+0x10c>
    55a4:	ea e0       	ldi	r30, 0x0A	; 10
    55a6:	2e 9e       	mul	r2, r30
    55a8:	20 0d       	add	r18, r0
    55aa:	11 24       	eor	r1, r1
    55ac:	22 2e       	mov	r2, r18
    55ae:	f3 2d       	mov	r31, r3
    55b0:	f0 62       	ori	r31, 0x20	; 32
    55b2:	3f 2e       	mov	r3, r31
    55b4:	08 c0       	rjmp	.+16     	; 0x55c6 <vfprintf+0x10c>
    55b6:	8c 36       	cpi	r24, 0x6C	; 108
    55b8:	21 f4       	brne	.+8      	; 0x55c2 <vfprintf+0x108>
    55ba:	83 2d       	mov	r24, r3
    55bc:	80 68       	ori	r24, 0x80	; 128
    55be:	38 2e       	mov	r3, r24
    55c0:	02 c0       	rjmp	.+4      	; 0x55c6 <vfprintf+0x10c>
    55c2:	88 36       	cpi	r24, 0x68	; 104
    55c4:	41 f4       	brne	.+16     	; 0x55d6 <vfprintf+0x11c>
    55c6:	f7 01       	movw	r30, r14
    55c8:	93 fd       	sbrc	r25, 3
    55ca:	85 91       	lpm	r24, Z+
    55cc:	93 ff       	sbrs	r25, 3
    55ce:	81 91       	ld	r24, Z+
    55d0:	7f 01       	movw	r14, r30
    55d2:	81 11       	cpse	r24, r1
    55d4:	b3 cf       	rjmp	.-154    	; 0x553c <vfprintf+0x82>
    55d6:	98 2f       	mov	r25, r24
    55d8:	9f 7d       	andi	r25, 0xDF	; 223
    55da:	95 54       	subi	r25, 0x45	; 69
    55dc:	93 30       	cpi	r25, 0x03	; 3
    55de:	28 f4       	brcc	.+10     	; 0x55ea <vfprintf+0x130>
    55e0:	0c 5f       	subi	r16, 0xFC	; 252
    55e2:	1f 4f       	sbci	r17, 0xFF	; 255
    55e4:	9f e3       	ldi	r25, 0x3F	; 63
    55e6:	99 83       	std	Y+1, r25	; 0x01
    55e8:	0d c0       	rjmp	.+26     	; 0x5604 <vfprintf+0x14a>
    55ea:	83 36       	cpi	r24, 0x63	; 99
    55ec:	31 f0       	breq	.+12     	; 0x55fa <vfprintf+0x140>
    55ee:	83 37       	cpi	r24, 0x73	; 115
    55f0:	71 f0       	breq	.+28     	; 0x560e <vfprintf+0x154>
    55f2:	83 35       	cpi	r24, 0x53	; 83
    55f4:	09 f0       	breq	.+2      	; 0x55f8 <vfprintf+0x13e>
    55f6:	55 c0       	rjmp	.+170    	; 0x56a2 <vfprintf+0x1e8>
    55f8:	20 c0       	rjmp	.+64     	; 0x563a <vfprintf+0x180>
    55fa:	f8 01       	movw	r30, r16
    55fc:	80 81       	ld	r24, Z
    55fe:	89 83       	std	Y+1, r24	; 0x01
    5600:	0e 5f       	subi	r16, 0xFE	; 254
    5602:	1f 4f       	sbci	r17, 0xFF	; 255
    5604:	88 24       	eor	r8, r8
    5606:	83 94       	inc	r8
    5608:	91 2c       	mov	r9, r1
    560a:	53 01       	movw	r10, r6
    560c:	12 c0       	rjmp	.+36     	; 0x5632 <vfprintf+0x178>
    560e:	28 01       	movw	r4, r16
    5610:	f2 e0       	ldi	r31, 0x02	; 2
    5612:	4f 0e       	add	r4, r31
    5614:	51 1c       	adc	r5, r1
    5616:	f8 01       	movw	r30, r16
    5618:	a0 80       	ld	r10, Z
    561a:	b1 80       	ldd	r11, Z+1	; 0x01
    561c:	36 fe       	sbrs	r3, 6
    561e:	03 c0       	rjmp	.+6      	; 0x5626 <vfprintf+0x16c>
    5620:	69 2d       	mov	r22, r9
    5622:	70 e0       	ldi	r23, 0x00	; 0
    5624:	02 c0       	rjmp	.+4      	; 0x562a <vfprintf+0x170>
    5626:	6f ef       	ldi	r22, 0xFF	; 255
    5628:	7f ef       	ldi	r23, 0xFF	; 255
    562a:	c5 01       	movw	r24, r10
    562c:	4e d1       	rcall	.+668    	; 0x58ca <strnlen>
    562e:	4c 01       	movw	r8, r24
    5630:	82 01       	movw	r16, r4
    5632:	f3 2d       	mov	r31, r3
    5634:	ff 77       	andi	r31, 0x7F	; 127
    5636:	3f 2e       	mov	r3, r31
    5638:	15 c0       	rjmp	.+42     	; 0x5664 <vfprintf+0x1aa>
    563a:	28 01       	movw	r4, r16
    563c:	22 e0       	ldi	r18, 0x02	; 2
    563e:	42 0e       	add	r4, r18
    5640:	51 1c       	adc	r5, r1
    5642:	f8 01       	movw	r30, r16
    5644:	a0 80       	ld	r10, Z
    5646:	b1 80       	ldd	r11, Z+1	; 0x01
    5648:	36 fe       	sbrs	r3, 6
    564a:	03 c0       	rjmp	.+6      	; 0x5652 <vfprintf+0x198>
    564c:	69 2d       	mov	r22, r9
    564e:	70 e0       	ldi	r23, 0x00	; 0
    5650:	02 c0       	rjmp	.+4      	; 0x5656 <vfprintf+0x19c>
    5652:	6f ef       	ldi	r22, 0xFF	; 255
    5654:	7f ef       	ldi	r23, 0xFF	; 255
    5656:	c5 01       	movw	r24, r10
    5658:	2d d1       	rcall	.+602    	; 0x58b4 <strnlen_P>
    565a:	4c 01       	movw	r8, r24
    565c:	f3 2d       	mov	r31, r3
    565e:	f0 68       	ori	r31, 0x80	; 128
    5660:	3f 2e       	mov	r3, r31
    5662:	82 01       	movw	r16, r4
    5664:	33 fc       	sbrc	r3, 3
    5666:	19 c0       	rjmp	.+50     	; 0x569a <vfprintf+0x1e0>
    5668:	82 2d       	mov	r24, r2
    566a:	90 e0       	ldi	r25, 0x00	; 0
    566c:	88 16       	cp	r8, r24
    566e:	99 06       	cpc	r9, r25
    5670:	a0 f4       	brcc	.+40     	; 0x569a <vfprintf+0x1e0>
    5672:	b6 01       	movw	r22, r12
    5674:	80 e2       	ldi	r24, 0x20	; 32
    5676:	90 e0       	ldi	r25, 0x00	; 0
    5678:	33 d1       	rcall	.+614    	; 0x58e0 <fputc>
    567a:	2a 94       	dec	r2
    567c:	f5 cf       	rjmp	.-22     	; 0x5668 <vfprintf+0x1ae>
    567e:	f5 01       	movw	r30, r10
    5680:	37 fc       	sbrc	r3, 7
    5682:	85 91       	lpm	r24, Z+
    5684:	37 fe       	sbrs	r3, 7
    5686:	81 91       	ld	r24, Z+
    5688:	5f 01       	movw	r10, r30
    568a:	b6 01       	movw	r22, r12
    568c:	90 e0       	ldi	r25, 0x00	; 0
    568e:	28 d1       	rcall	.+592    	; 0x58e0 <fputc>
    5690:	21 10       	cpse	r2, r1
    5692:	2a 94       	dec	r2
    5694:	21 e0       	ldi	r18, 0x01	; 1
    5696:	82 1a       	sub	r8, r18
    5698:	91 08       	sbc	r9, r1
    569a:	81 14       	cp	r8, r1
    569c:	91 04       	cpc	r9, r1
    569e:	79 f7       	brne	.-34     	; 0x567e <vfprintf+0x1c4>
    56a0:	e1 c0       	rjmp	.+450    	; 0x5864 <vfprintf+0x3aa>
    56a2:	84 36       	cpi	r24, 0x64	; 100
    56a4:	11 f0       	breq	.+4      	; 0x56aa <vfprintf+0x1f0>
    56a6:	89 36       	cpi	r24, 0x69	; 105
    56a8:	39 f5       	brne	.+78     	; 0x56f8 <vfprintf+0x23e>
    56aa:	f8 01       	movw	r30, r16
    56ac:	37 fe       	sbrs	r3, 7
    56ae:	07 c0       	rjmp	.+14     	; 0x56be <vfprintf+0x204>
    56b0:	60 81       	ld	r22, Z
    56b2:	71 81       	ldd	r23, Z+1	; 0x01
    56b4:	82 81       	ldd	r24, Z+2	; 0x02
    56b6:	93 81       	ldd	r25, Z+3	; 0x03
    56b8:	0c 5f       	subi	r16, 0xFC	; 252
    56ba:	1f 4f       	sbci	r17, 0xFF	; 255
    56bc:	08 c0       	rjmp	.+16     	; 0x56ce <vfprintf+0x214>
    56be:	60 81       	ld	r22, Z
    56c0:	71 81       	ldd	r23, Z+1	; 0x01
    56c2:	07 2e       	mov	r0, r23
    56c4:	00 0c       	add	r0, r0
    56c6:	88 0b       	sbc	r24, r24
    56c8:	99 0b       	sbc	r25, r25
    56ca:	0e 5f       	subi	r16, 0xFE	; 254
    56cc:	1f 4f       	sbci	r17, 0xFF	; 255
    56ce:	f3 2d       	mov	r31, r3
    56d0:	ff 76       	andi	r31, 0x6F	; 111
    56d2:	3f 2e       	mov	r3, r31
    56d4:	97 ff       	sbrs	r25, 7
    56d6:	09 c0       	rjmp	.+18     	; 0x56ea <vfprintf+0x230>
    56d8:	90 95       	com	r25
    56da:	80 95       	com	r24
    56dc:	70 95       	com	r23
    56de:	61 95       	neg	r22
    56e0:	7f 4f       	sbci	r23, 0xFF	; 255
    56e2:	8f 4f       	sbci	r24, 0xFF	; 255
    56e4:	9f 4f       	sbci	r25, 0xFF	; 255
    56e6:	f0 68       	ori	r31, 0x80	; 128
    56e8:	3f 2e       	mov	r3, r31
    56ea:	2a e0       	ldi	r18, 0x0A	; 10
    56ec:	30 e0       	ldi	r19, 0x00	; 0
    56ee:	a3 01       	movw	r20, r6
    56f0:	33 d1       	rcall	.+614    	; 0x5958 <__ultoa_invert>
    56f2:	88 2e       	mov	r8, r24
    56f4:	86 18       	sub	r8, r6
    56f6:	44 c0       	rjmp	.+136    	; 0x5780 <vfprintf+0x2c6>
    56f8:	85 37       	cpi	r24, 0x75	; 117
    56fa:	31 f4       	brne	.+12     	; 0x5708 <vfprintf+0x24e>
    56fc:	23 2d       	mov	r18, r3
    56fe:	2f 7e       	andi	r18, 0xEF	; 239
    5700:	b2 2e       	mov	r11, r18
    5702:	2a e0       	ldi	r18, 0x0A	; 10
    5704:	30 e0       	ldi	r19, 0x00	; 0
    5706:	25 c0       	rjmp	.+74     	; 0x5752 <vfprintf+0x298>
    5708:	93 2d       	mov	r25, r3
    570a:	99 7f       	andi	r25, 0xF9	; 249
    570c:	b9 2e       	mov	r11, r25
    570e:	8f 36       	cpi	r24, 0x6F	; 111
    5710:	c1 f0       	breq	.+48     	; 0x5742 <vfprintf+0x288>
    5712:	18 f4       	brcc	.+6      	; 0x571a <vfprintf+0x260>
    5714:	88 35       	cpi	r24, 0x58	; 88
    5716:	79 f0       	breq	.+30     	; 0x5736 <vfprintf+0x27c>
    5718:	ae c0       	rjmp	.+348    	; 0x5876 <vfprintf+0x3bc>
    571a:	80 37       	cpi	r24, 0x70	; 112
    571c:	19 f0       	breq	.+6      	; 0x5724 <vfprintf+0x26a>
    571e:	88 37       	cpi	r24, 0x78	; 120
    5720:	21 f0       	breq	.+8      	; 0x572a <vfprintf+0x270>
    5722:	a9 c0       	rjmp	.+338    	; 0x5876 <vfprintf+0x3bc>
    5724:	e9 2f       	mov	r30, r25
    5726:	e0 61       	ori	r30, 0x10	; 16
    5728:	be 2e       	mov	r11, r30
    572a:	b4 fe       	sbrs	r11, 4
    572c:	0d c0       	rjmp	.+26     	; 0x5748 <vfprintf+0x28e>
    572e:	fb 2d       	mov	r31, r11
    5730:	f4 60       	ori	r31, 0x04	; 4
    5732:	bf 2e       	mov	r11, r31
    5734:	09 c0       	rjmp	.+18     	; 0x5748 <vfprintf+0x28e>
    5736:	34 fe       	sbrs	r3, 4
    5738:	0a c0       	rjmp	.+20     	; 0x574e <vfprintf+0x294>
    573a:	29 2f       	mov	r18, r25
    573c:	26 60       	ori	r18, 0x06	; 6
    573e:	b2 2e       	mov	r11, r18
    5740:	06 c0       	rjmp	.+12     	; 0x574e <vfprintf+0x294>
    5742:	28 e0       	ldi	r18, 0x08	; 8
    5744:	30 e0       	ldi	r19, 0x00	; 0
    5746:	05 c0       	rjmp	.+10     	; 0x5752 <vfprintf+0x298>
    5748:	20 e1       	ldi	r18, 0x10	; 16
    574a:	30 e0       	ldi	r19, 0x00	; 0
    574c:	02 c0       	rjmp	.+4      	; 0x5752 <vfprintf+0x298>
    574e:	20 e1       	ldi	r18, 0x10	; 16
    5750:	32 e0       	ldi	r19, 0x02	; 2
    5752:	f8 01       	movw	r30, r16
    5754:	b7 fe       	sbrs	r11, 7
    5756:	07 c0       	rjmp	.+14     	; 0x5766 <vfprintf+0x2ac>
    5758:	60 81       	ld	r22, Z
    575a:	71 81       	ldd	r23, Z+1	; 0x01
    575c:	82 81       	ldd	r24, Z+2	; 0x02
    575e:	93 81       	ldd	r25, Z+3	; 0x03
    5760:	0c 5f       	subi	r16, 0xFC	; 252
    5762:	1f 4f       	sbci	r17, 0xFF	; 255
    5764:	06 c0       	rjmp	.+12     	; 0x5772 <vfprintf+0x2b8>
    5766:	60 81       	ld	r22, Z
    5768:	71 81       	ldd	r23, Z+1	; 0x01
    576a:	80 e0       	ldi	r24, 0x00	; 0
    576c:	90 e0       	ldi	r25, 0x00	; 0
    576e:	0e 5f       	subi	r16, 0xFE	; 254
    5770:	1f 4f       	sbci	r17, 0xFF	; 255
    5772:	a3 01       	movw	r20, r6
    5774:	f1 d0       	rcall	.+482    	; 0x5958 <__ultoa_invert>
    5776:	88 2e       	mov	r8, r24
    5778:	86 18       	sub	r8, r6
    577a:	fb 2d       	mov	r31, r11
    577c:	ff 77       	andi	r31, 0x7F	; 127
    577e:	3f 2e       	mov	r3, r31
    5780:	36 fe       	sbrs	r3, 6
    5782:	0d c0       	rjmp	.+26     	; 0x579e <vfprintf+0x2e4>
    5784:	23 2d       	mov	r18, r3
    5786:	2e 7f       	andi	r18, 0xFE	; 254
    5788:	a2 2e       	mov	r10, r18
    578a:	89 14       	cp	r8, r9
    578c:	58 f4       	brcc	.+22     	; 0x57a4 <vfprintf+0x2ea>
    578e:	34 fe       	sbrs	r3, 4
    5790:	0b c0       	rjmp	.+22     	; 0x57a8 <vfprintf+0x2ee>
    5792:	32 fc       	sbrc	r3, 2
    5794:	09 c0       	rjmp	.+18     	; 0x57a8 <vfprintf+0x2ee>
    5796:	83 2d       	mov	r24, r3
    5798:	8e 7e       	andi	r24, 0xEE	; 238
    579a:	a8 2e       	mov	r10, r24
    579c:	05 c0       	rjmp	.+10     	; 0x57a8 <vfprintf+0x2ee>
    579e:	b8 2c       	mov	r11, r8
    57a0:	a3 2c       	mov	r10, r3
    57a2:	03 c0       	rjmp	.+6      	; 0x57aa <vfprintf+0x2f0>
    57a4:	b8 2c       	mov	r11, r8
    57a6:	01 c0       	rjmp	.+2      	; 0x57aa <vfprintf+0x2f0>
    57a8:	b9 2c       	mov	r11, r9
    57aa:	a4 fe       	sbrs	r10, 4
    57ac:	0f c0       	rjmp	.+30     	; 0x57cc <vfprintf+0x312>
    57ae:	fe 01       	movw	r30, r28
    57b0:	e8 0d       	add	r30, r8
    57b2:	f1 1d       	adc	r31, r1
    57b4:	80 81       	ld	r24, Z
    57b6:	80 33       	cpi	r24, 0x30	; 48
    57b8:	21 f4       	brne	.+8      	; 0x57c2 <vfprintf+0x308>
    57ba:	9a 2d       	mov	r25, r10
    57bc:	99 7e       	andi	r25, 0xE9	; 233
    57be:	a9 2e       	mov	r10, r25
    57c0:	09 c0       	rjmp	.+18     	; 0x57d4 <vfprintf+0x31a>
    57c2:	a2 fe       	sbrs	r10, 2
    57c4:	06 c0       	rjmp	.+12     	; 0x57d2 <vfprintf+0x318>
    57c6:	b3 94       	inc	r11
    57c8:	b3 94       	inc	r11
    57ca:	04 c0       	rjmp	.+8      	; 0x57d4 <vfprintf+0x31a>
    57cc:	8a 2d       	mov	r24, r10
    57ce:	86 78       	andi	r24, 0x86	; 134
    57d0:	09 f0       	breq	.+2      	; 0x57d4 <vfprintf+0x31a>
    57d2:	b3 94       	inc	r11
    57d4:	a3 fc       	sbrc	r10, 3
    57d6:	10 c0       	rjmp	.+32     	; 0x57f8 <vfprintf+0x33e>
    57d8:	a0 fe       	sbrs	r10, 0
    57da:	06 c0       	rjmp	.+12     	; 0x57e8 <vfprintf+0x32e>
    57dc:	b2 14       	cp	r11, r2
    57de:	80 f4       	brcc	.+32     	; 0x5800 <vfprintf+0x346>
    57e0:	28 0c       	add	r2, r8
    57e2:	92 2c       	mov	r9, r2
    57e4:	9b 18       	sub	r9, r11
    57e6:	0d c0       	rjmp	.+26     	; 0x5802 <vfprintf+0x348>
    57e8:	b2 14       	cp	r11, r2
    57ea:	58 f4       	brcc	.+22     	; 0x5802 <vfprintf+0x348>
    57ec:	b6 01       	movw	r22, r12
    57ee:	80 e2       	ldi	r24, 0x20	; 32
    57f0:	90 e0       	ldi	r25, 0x00	; 0
    57f2:	76 d0       	rcall	.+236    	; 0x58e0 <fputc>
    57f4:	b3 94       	inc	r11
    57f6:	f8 cf       	rjmp	.-16     	; 0x57e8 <vfprintf+0x32e>
    57f8:	b2 14       	cp	r11, r2
    57fa:	18 f4       	brcc	.+6      	; 0x5802 <vfprintf+0x348>
    57fc:	2b 18       	sub	r2, r11
    57fe:	02 c0       	rjmp	.+4      	; 0x5804 <vfprintf+0x34a>
    5800:	98 2c       	mov	r9, r8
    5802:	21 2c       	mov	r2, r1
    5804:	a4 fe       	sbrs	r10, 4
    5806:	0f c0       	rjmp	.+30     	; 0x5826 <vfprintf+0x36c>
    5808:	b6 01       	movw	r22, r12
    580a:	80 e3       	ldi	r24, 0x30	; 48
    580c:	90 e0       	ldi	r25, 0x00	; 0
    580e:	68 d0       	rcall	.+208    	; 0x58e0 <fputc>
    5810:	a2 fe       	sbrs	r10, 2
    5812:	16 c0       	rjmp	.+44     	; 0x5840 <vfprintf+0x386>
    5814:	a1 fc       	sbrc	r10, 1
    5816:	03 c0       	rjmp	.+6      	; 0x581e <vfprintf+0x364>
    5818:	88 e7       	ldi	r24, 0x78	; 120
    581a:	90 e0       	ldi	r25, 0x00	; 0
    581c:	02 c0       	rjmp	.+4      	; 0x5822 <vfprintf+0x368>
    581e:	88 e5       	ldi	r24, 0x58	; 88
    5820:	90 e0       	ldi	r25, 0x00	; 0
    5822:	b6 01       	movw	r22, r12
    5824:	0c c0       	rjmp	.+24     	; 0x583e <vfprintf+0x384>
    5826:	8a 2d       	mov	r24, r10
    5828:	86 78       	andi	r24, 0x86	; 134
    582a:	51 f0       	breq	.+20     	; 0x5840 <vfprintf+0x386>
    582c:	a1 fe       	sbrs	r10, 1
    582e:	02 c0       	rjmp	.+4      	; 0x5834 <vfprintf+0x37a>
    5830:	8b e2       	ldi	r24, 0x2B	; 43
    5832:	01 c0       	rjmp	.+2      	; 0x5836 <vfprintf+0x37c>
    5834:	80 e2       	ldi	r24, 0x20	; 32
    5836:	a7 fc       	sbrc	r10, 7
    5838:	8d e2       	ldi	r24, 0x2D	; 45
    583a:	b6 01       	movw	r22, r12
    583c:	90 e0       	ldi	r25, 0x00	; 0
    583e:	50 d0       	rcall	.+160    	; 0x58e0 <fputc>
    5840:	89 14       	cp	r8, r9
    5842:	30 f4       	brcc	.+12     	; 0x5850 <vfprintf+0x396>
    5844:	b6 01       	movw	r22, r12
    5846:	80 e3       	ldi	r24, 0x30	; 48
    5848:	90 e0       	ldi	r25, 0x00	; 0
    584a:	4a d0       	rcall	.+148    	; 0x58e0 <fputc>
    584c:	9a 94       	dec	r9
    584e:	f8 cf       	rjmp	.-16     	; 0x5840 <vfprintf+0x386>
    5850:	8a 94       	dec	r8
    5852:	f3 01       	movw	r30, r6
    5854:	e8 0d       	add	r30, r8
    5856:	f1 1d       	adc	r31, r1
    5858:	80 81       	ld	r24, Z
    585a:	b6 01       	movw	r22, r12
    585c:	90 e0       	ldi	r25, 0x00	; 0
    585e:	40 d0       	rcall	.+128    	; 0x58e0 <fputc>
    5860:	81 10       	cpse	r8, r1
    5862:	f6 cf       	rjmp	.-20     	; 0x5850 <vfprintf+0x396>
    5864:	22 20       	and	r2, r2
    5866:	09 f4       	brne	.+2      	; 0x586a <vfprintf+0x3b0>
    5868:	4e ce       	rjmp	.-868    	; 0x5506 <vfprintf+0x4c>
    586a:	b6 01       	movw	r22, r12
    586c:	80 e2       	ldi	r24, 0x20	; 32
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	37 d0       	rcall	.+110    	; 0x58e0 <fputc>
    5872:	2a 94       	dec	r2
    5874:	f7 cf       	rjmp	.-18     	; 0x5864 <vfprintf+0x3aa>
    5876:	f6 01       	movw	r30, r12
    5878:	86 81       	ldd	r24, Z+6	; 0x06
    587a:	97 81       	ldd	r25, Z+7	; 0x07
    587c:	02 c0       	rjmp	.+4      	; 0x5882 <vfprintf+0x3c8>
    587e:	8f ef       	ldi	r24, 0xFF	; 255
    5880:	9f ef       	ldi	r25, 0xFF	; 255
    5882:	2b 96       	adiw	r28, 0x0b	; 11
    5884:	0f b6       	in	r0, 0x3f	; 63
    5886:	f8 94       	cli
    5888:	de bf       	out	0x3e, r29	; 62
    588a:	0f be       	out	0x3f, r0	; 63
    588c:	cd bf       	out	0x3d, r28	; 61
    588e:	df 91       	pop	r29
    5890:	cf 91       	pop	r28
    5892:	1f 91       	pop	r17
    5894:	0f 91       	pop	r16
    5896:	ff 90       	pop	r15
    5898:	ef 90       	pop	r14
    589a:	df 90       	pop	r13
    589c:	cf 90       	pop	r12
    589e:	bf 90       	pop	r11
    58a0:	af 90       	pop	r10
    58a2:	9f 90       	pop	r9
    58a4:	8f 90       	pop	r8
    58a6:	7f 90       	pop	r7
    58a8:	6f 90       	pop	r6
    58aa:	5f 90       	pop	r5
    58ac:	4f 90       	pop	r4
    58ae:	3f 90       	pop	r3
    58b0:	2f 90       	pop	r2
    58b2:	08 95       	ret

000058b4 <strnlen_P>:
    58b4:	fc 01       	movw	r30, r24
    58b6:	05 90       	lpm	r0, Z+
    58b8:	61 50       	subi	r22, 0x01	; 1
    58ba:	70 40       	sbci	r23, 0x00	; 0
    58bc:	01 10       	cpse	r0, r1
    58be:	d8 f7       	brcc	.-10     	; 0x58b6 <strnlen_P+0x2>
    58c0:	80 95       	com	r24
    58c2:	90 95       	com	r25
    58c4:	8e 0f       	add	r24, r30
    58c6:	9f 1f       	adc	r25, r31
    58c8:	08 95       	ret

000058ca <strnlen>:
    58ca:	fc 01       	movw	r30, r24
    58cc:	61 50       	subi	r22, 0x01	; 1
    58ce:	70 40       	sbci	r23, 0x00	; 0
    58d0:	01 90       	ld	r0, Z+
    58d2:	01 10       	cpse	r0, r1
    58d4:	d8 f7       	brcc	.-10     	; 0x58cc <strnlen+0x2>
    58d6:	80 95       	com	r24
    58d8:	90 95       	com	r25
    58da:	8e 0f       	add	r24, r30
    58dc:	9f 1f       	adc	r25, r31
    58de:	08 95       	ret

000058e0 <fputc>:
    58e0:	0f 93       	push	r16
    58e2:	1f 93       	push	r17
    58e4:	cf 93       	push	r28
    58e6:	df 93       	push	r29
    58e8:	fb 01       	movw	r30, r22
    58ea:	23 81       	ldd	r18, Z+3	; 0x03
    58ec:	21 fd       	sbrc	r18, 1
    58ee:	03 c0       	rjmp	.+6      	; 0x58f6 <fputc+0x16>
    58f0:	8f ef       	ldi	r24, 0xFF	; 255
    58f2:	9f ef       	ldi	r25, 0xFF	; 255
    58f4:	2c c0       	rjmp	.+88     	; 0x594e <fputc+0x6e>
    58f6:	22 ff       	sbrs	r18, 2
    58f8:	16 c0       	rjmp	.+44     	; 0x5926 <fputc+0x46>
    58fa:	46 81       	ldd	r20, Z+6	; 0x06
    58fc:	57 81       	ldd	r21, Z+7	; 0x07
    58fe:	24 81       	ldd	r18, Z+4	; 0x04
    5900:	35 81       	ldd	r19, Z+5	; 0x05
    5902:	42 17       	cp	r20, r18
    5904:	53 07       	cpc	r21, r19
    5906:	44 f4       	brge	.+16     	; 0x5918 <fputc+0x38>
    5908:	a0 81       	ld	r26, Z
    590a:	b1 81       	ldd	r27, Z+1	; 0x01
    590c:	9d 01       	movw	r18, r26
    590e:	2f 5f       	subi	r18, 0xFF	; 255
    5910:	3f 4f       	sbci	r19, 0xFF	; 255
    5912:	31 83       	std	Z+1, r19	; 0x01
    5914:	20 83       	st	Z, r18
    5916:	8c 93       	st	X, r24
    5918:	26 81       	ldd	r18, Z+6	; 0x06
    591a:	37 81       	ldd	r19, Z+7	; 0x07
    591c:	2f 5f       	subi	r18, 0xFF	; 255
    591e:	3f 4f       	sbci	r19, 0xFF	; 255
    5920:	37 83       	std	Z+7, r19	; 0x07
    5922:	26 83       	std	Z+6, r18	; 0x06
    5924:	14 c0       	rjmp	.+40     	; 0x594e <fputc+0x6e>
    5926:	8b 01       	movw	r16, r22
    5928:	ec 01       	movw	r28, r24
    592a:	fb 01       	movw	r30, r22
    592c:	00 84       	ldd	r0, Z+8	; 0x08
    592e:	f1 85       	ldd	r31, Z+9	; 0x09
    5930:	e0 2d       	mov	r30, r0
    5932:	19 95       	eicall
    5934:	89 2b       	or	r24, r25
    5936:	e1 f6       	brne	.-72     	; 0x58f0 <fputc+0x10>
    5938:	d8 01       	movw	r26, r16
    593a:	16 96       	adiw	r26, 0x06	; 6
    593c:	8d 91       	ld	r24, X+
    593e:	9c 91       	ld	r25, X
    5940:	17 97       	sbiw	r26, 0x07	; 7
    5942:	01 96       	adiw	r24, 0x01	; 1
    5944:	17 96       	adiw	r26, 0x07	; 7
    5946:	9c 93       	st	X, r25
    5948:	8e 93       	st	-X, r24
    594a:	16 97       	sbiw	r26, 0x06	; 6
    594c:	ce 01       	movw	r24, r28
    594e:	df 91       	pop	r29
    5950:	cf 91       	pop	r28
    5952:	1f 91       	pop	r17
    5954:	0f 91       	pop	r16
    5956:	08 95       	ret

00005958 <__ultoa_invert>:
    5958:	fa 01       	movw	r30, r20
    595a:	aa 27       	eor	r26, r26
    595c:	28 30       	cpi	r18, 0x08	; 8
    595e:	51 f1       	breq	.+84     	; 0x59b4 <__ultoa_invert+0x5c>
    5960:	20 31       	cpi	r18, 0x10	; 16
    5962:	81 f1       	breq	.+96     	; 0x59c4 <__ultoa_invert+0x6c>
    5964:	e8 94       	clt
    5966:	6f 93       	push	r22
    5968:	6e 7f       	andi	r22, 0xFE	; 254
    596a:	6e 5f       	subi	r22, 0xFE	; 254
    596c:	7f 4f       	sbci	r23, 0xFF	; 255
    596e:	8f 4f       	sbci	r24, 0xFF	; 255
    5970:	9f 4f       	sbci	r25, 0xFF	; 255
    5972:	af 4f       	sbci	r26, 0xFF	; 255
    5974:	b1 e0       	ldi	r27, 0x01	; 1
    5976:	3e d0       	rcall	.+124    	; 0x59f4 <__ultoa_invert+0x9c>
    5978:	b4 e0       	ldi	r27, 0x04	; 4
    597a:	3c d0       	rcall	.+120    	; 0x59f4 <__ultoa_invert+0x9c>
    597c:	67 0f       	add	r22, r23
    597e:	78 1f       	adc	r23, r24
    5980:	89 1f       	adc	r24, r25
    5982:	9a 1f       	adc	r25, r26
    5984:	a1 1d       	adc	r26, r1
    5986:	68 0f       	add	r22, r24
    5988:	79 1f       	adc	r23, r25
    598a:	8a 1f       	adc	r24, r26
    598c:	91 1d       	adc	r25, r1
    598e:	a1 1d       	adc	r26, r1
    5990:	6a 0f       	add	r22, r26
    5992:	71 1d       	adc	r23, r1
    5994:	81 1d       	adc	r24, r1
    5996:	91 1d       	adc	r25, r1
    5998:	a1 1d       	adc	r26, r1
    599a:	20 d0       	rcall	.+64     	; 0x59dc <__ultoa_invert+0x84>
    599c:	09 f4       	brne	.+2      	; 0x59a0 <__ultoa_invert+0x48>
    599e:	68 94       	set
    59a0:	3f 91       	pop	r19
    59a2:	2a e0       	ldi	r18, 0x0A	; 10
    59a4:	26 9f       	mul	r18, r22
    59a6:	11 24       	eor	r1, r1
    59a8:	30 19       	sub	r19, r0
    59aa:	30 5d       	subi	r19, 0xD0	; 208
    59ac:	31 93       	st	Z+, r19
    59ae:	de f6       	brtc	.-74     	; 0x5966 <__ultoa_invert+0xe>
    59b0:	cf 01       	movw	r24, r30
    59b2:	08 95       	ret
    59b4:	46 2f       	mov	r20, r22
    59b6:	47 70       	andi	r20, 0x07	; 7
    59b8:	40 5d       	subi	r20, 0xD0	; 208
    59ba:	41 93       	st	Z+, r20
    59bc:	b3 e0       	ldi	r27, 0x03	; 3
    59be:	0f d0       	rcall	.+30     	; 0x59de <__ultoa_invert+0x86>
    59c0:	c9 f7       	brne	.-14     	; 0x59b4 <__ultoa_invert+0x5c>
    59c2:	f6 cf       	rjmp	.-20     	; 0x59b0 <__ultoa_invert+0x58>
    59c4:	46 2f       	mov	r20, r22
    59c6:	4f 70       	andi	r20, 0x0F	; 15
    59c8:	40 5d       	subi	r20, 0xD0	; 208
    59ca:	4a 33       	cpi	r20, 0x3A	; 58
    59cc:	18 f0       	brcs	.+6      	; 0x59d4 <__ultoa_invert+0x7c>
    59ce:	49 5d       	subi	r20, 0xD9	; 217
    59d0:	31 fd       	sbrc	r19, 1
    59d2:	40 52       	subi	r20, 0x20	; 32
    59d4:	41 93       	st	Z+, r20
    59d6:	02 d0       	rcall	.+4      	; 0x59dc <__ultoa_invert+0x84>
    59d8:	a9 f7       	brne	.-22     	; 0x59c4 <__ultoa_invert+0x6c>
    59da:	ea cf       	rjmp	.-44     	; 0x59b0 <__ultoa_invert+0x58>
    59dc:	b4 e0       	ldi	r27, 0x04	; 4
    59de:	a6 95       	lsr	r26
    59e0:	97 95       	ror	r25
    59e2:	87 95       	ror	r24
    59e4:	77 95       	ror	r23
    59e6:	67 95       	ror	r22
    59e8:	ba 95       	dec	r27
    59ea:	c9 f7       	brne	.-14     	; 0x59de <__ultoa_invert+0x86>
    59ec:	00 97       	sbiw	r24, 0x00	; 0
    59ee:	61 05       	cpc	r22, r1
    59f0:	71 05       	cpc	r23, r1
    59f2:	08 95       	ret
    59f4:	9b 01       	movw	r18, r22
    59f6:	ac 01       	movw	r20, r24
    59f8:	0a 2e       	mov	r0, r26
    59fa:	06 94       	lsr	r0
    59fc:	57 95       	ror	r21
    59fe:	47 95       	ror	r20
    5a00:	37 95       	ror	r19
    5a02:	27 95       	ror	r18
    5a04:	ba 95       	dec	r27
    5a06:	c9 f7       	brne	.-14     	; 0x59fa <__ultoa_invert+0xa2>
    5a08:	62 0f       	add	r22, r18
    5a0a:	73 1f       	adc	r23, r19
    5a0c:	84 1f       	adc	r24, r20
    5a0e:	95 1f       	adc	r25, r21
    5a10:	a0 1d       	adc	r26, r0
    5a12:	08 95       	ret

00005a14 <_exit>:
    5a14:	f8 94       	cli

00005a16 <__stop_program>:
    5a16:	ff cf       	rjmp	.-2      	; 0x5a16 <__stop_program>
